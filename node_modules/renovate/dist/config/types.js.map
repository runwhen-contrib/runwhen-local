{"version":3,"file":"types.js","sourceRoot":"","sources":["../../lib/config/types.ts"],"names":[],"mappings":";;;AAsNa,QAAA,yBAAyB,GAAG;IACvC,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,eAAe;CACP,CAAC;AAmGX,MAAM,uBAAuB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAU,CAAC","sourcesContent":["import type { PlatformId } from '../constants';\nimport type { LogLevelRemap } from '../logger/types';\nimport type { CustomManager } from '../modules/manager/custom/types';\nimport type { RepoSortMethod, SortMethod } from '../modules/platform/types';\nimport type { HostRule, SkipReason } from '../types';\nimport type { StageName } from '../types/skip-reason';\nimport type { GitNoVerifyOption } from '../util/git/types';\nimport type { MergeConfidence } from '../util/merge-confidence/types';\nimport type { Timestamp } from '../util/timestamp';\n\nexport type RenovateConfigStage =\n  | 'global'\n  | 'inherit'\n  | 'repository'\n  | 'package'\n  | 'branch'\n  | 'pr';\n\nexport type RepositoryCacheConfig = 'disabled' | 'enabled' | 'reset';\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type RepositoryCacheType = 'local' | string;\nexport type DryRunConfig = 'extract' | 'lookup' | 'full';\nexport type RequiredConfig = 'required' | 'optional' | 'ignored';\n\nexport interface GroupConfig extends Record<string, unknown> {\n  branchName?: string;\n  branchTopic?: string;\n}\n\nexport type RecreateWhen = 'auto' | 'never' | 'always';\nexport type PlatformCommitOptions = 'auto' | 'disabled' | 'enabled';\n// TODO: Proper typings\nexport interface RenovateSharedConfig {\n  $schema?: string;\n  addLabels?: string[];\n  autoReplaceGlobalMatch?: boolean;\n  automerge?: boolean;\n  automergeSchedule?: string[];\n  automergeStrategy?: MergeStrategy;\n  branchName?: string;\n  branchNameStrict?: boolean;\n  branchPrefix?: string;\n  branchPrefixOld?: string;\n  commitMessage?: string;\n  commitMessageAction?: string;\n  commitMessageExtra?: string;\n  commitMessageLowerCase?: 'auto' | 'never';\n  commitMessagePrefix?: string;\n  commitMessageTopic?: string;\n  confidential?: boolean;\n  changelogUrl?: string;\n  dependencyDashboardApproval?: boolean;\n  draftPR?: boolean;\n  enabled?: boolean;\n  enabledManagers?: string[];\n  extends?: string[];\n  fileMatch?: string[];\n  force?: RenovateConfig;\n  gitIgnoredAuthors?: string[];\n  group?: GroupConfig;\n  groupName?: string;\n  groupSlug?: string;\n  hashedBranchLength?: number;\n  ignoreDeps?: string[];\n  ignorePaths?: string[];\n  ignoreTests?: boolean;\n  includePaths?: string[];\n  internalChecksAsSuccess?: boolean;\n  keepUpdatedLabel?: string;\n  labels?: string[];\n  manager?: string;\n  milestone?: number;\n  npmrc?: string;\n  npmrcMerge?: boolean;\n  platformCommit?: PlatformCommitOptions;\n  postUpgradeTasks?: PostUpgradeTasks;\n  prBodyColumns?: string[];\n  prBodyDefinitions?: Record<string, string>;\n  prCreation?: 'immediate' | 'not-pending' | 'status-success' | 'approval';\n  prPriority?: number;\n  productLinks?: Record<string, string>;\n  pruneBranchAfterAutomerge?: boolean;\n  rebaseLabel?: string;\n  rebaseWhen?: string;\n  recreateClosed?: boolean;\n  recreateWhen?: RecreateWhen;\n  repository?: string;\n  repositoryCache?: RepositoryCacheConfig;\n  repositoryCacheType?: RepositoryCacheType;\n  respectLatest?: boolean;\n  schedule?: string[];\n  semanticCommitScope?: string | null;\n  semanticCommitType?: string;\n  semanticCommits?: 'auto' | 'enabled' | 'disabled';\n  stopUpdatingLabel?: string;\n  suppressNotifications?: string[];\n  timezone?: string;\n  unicodeEmoji?: boolean;\n}\n\n// Config options used only within the global worker\n// The below should contain config options where stage=global\nexport interface GlobalOnlyConfig {\n  autodiscover?: boolean;\n  autodiscoverFilter?: string[] | string;\n  autodiscoverNamespaces?: string[];\n  autodiscoverProjects?: string[];\n  autodiscoverTopics?: string[];\n  baseDir?: string;\n  cacheDir?: string;\n  containerbaseDir?: string;\n  detectHostRulesFromEnv?: boolean;\n  dockerCliOptions?: string;\n  endpoint?: string;\n  forceCli?: boolean;\n  gitNoVerify?: GitNoVerifyOption[];\n  gitPrivateKey?: string;\n  globalExtends?: string[];\n  mergeConfidenceDatasources?: string[];\n  mergeConfidenceEndpoint?: string;\n  platform?: PlatformId;\n  prCommitsPerRunLimit?: number;\n  privateKeyPath?: string;\n  privateKeyPathOld?: string;\n  redisPrefix?: string;\n  redisUrl?: string;\n  repositories?: RenovateRepository[];\n  useCloudMetadataServices?: boolean;\n  deleteConfigFile?: boolean;\n}\n\n// Config options used within the repository worker, but not user configurable\n// The below should contain config options where globalOnly=true\nexport interface RepoGlobalConfig {\n  allowedCommands?: string[];\n  allowCommandTemplating?: boolean;\n  allowCustomCrateRegistries?: boolean;\n  allowPlugins?: boolean;\n  allowScripts?: boolean;\n  allowedEnv?: string[];\n  allowedHeaders?: string[];\n  binarySource?: 'docker' | 'global' | 'install' | 'hermit';\n  cacheDir?: string;\n  cacheHardTtlMinutes?: number;\n  cacheTtlOverride?: Record<string, number>;\n  containerbaseDir?: string;\n  customEnvVariables?: Record<string, string>;\n  dockerChildPrefix?: string;\n  dockerCliOptions?: string;\n  dockerSidecarImage?: string;\n  dockerUser?: string;\n  dryRun?: DryRunConfig;\n  encryptedWarning?: string;\n  endpoint?: string;\n  executionTimeout?: number;\n  exposeAllEnv?: boolean;\n  gitTimeout?: number;\n  githubTokenWarn?: boolean;\n  includeMirrors?: boolean;\n  localDir?: string;\n  migratePresets?: Record<string, string>;\n  platform?: PlatformId;\n  presetCachePersistence?: boolean;\n  privateKey?: string;\n  privateKeyOld?: string;\n  httpCacheTtlDays?: number;\n  autodiscoverRepoSort?: RepoSortMethod;\n  autodiscoverRepoOrder?: SortMethod;\n  userAgent?: string;\n  dockerMaxPages?: number;\n  s3Endpoint?: string;\n  s3PathStyle?: boolean;\n  cachePrivatePackages?: boolean;\n}\n\nexport interface LegacyAdminConfig {\n  localDir?: string;\n\n  logContext?: string;\n\n  onboarding?: boolean;\n  onboardingBranch?: string;\n  onboardingCommitMessage?: string;\n  onboardingNoDeps?: 'auto' | 'enabled' | 'disabled';\n  onboardingRebaseCheckbox?: boolean;\n  onboardingPrTitle?: string;\n  onboardingConfig?: RenovateSharedConfig;\n  onboardingConfigFileName?: string;\n\n  requireConfig?: RequiredConfig;\n}\n\nexport type ExecutionMode = 'branch' | 'update';\n\nexport interface PostUpgradeTasks {\n  commands?: string[];\n  fileFilters?: string[];\n  executionMode: ExecutionMode;\n}\n\nexport type UpdateConfig<\n  T extends RenovateSharedConfig = RenovateSharedConfig,\n> = Partial<Record<UpdateType, T | null>>;\n\nexport type RenovateRepository =\n  | string\n  | {\n      repository: string;\n      secrets?: Record<string, string>;\n    };\n\nexport type UseBaseBranchConfigType = 'merge' | 'none';\nexport type ConstraintsFilter = 'strict' | 'none';\n\nexport const allowedStatusCheckStrings = [\n  'minimumReleaseAge',\n  'mergeConfidence',\n  'configValidation',\n  'artifactError',\n] as const;\nexport type StatusCheckKey = (typeof allowedStatusCheckStrings)[number];\ntype UserEnv = Record<string, string>;\n// TODO: Proper typings\nexport interface RenovateConfig\n  extends LegacyAdminConfig,\n    RenovateSharedConfig,\n    UpdateConfig<PackageRule>,\n    AssigneesAndReviewersConfig,\n    ConfigMigration,\n    Record<string, unknown> {\n  s3Endpoint?: string;\n  s3PathStyle?: boolean;\n  reportPath?: string;\n  reportType?: 'logging' | 'file' | 's3' | null;\n  depName?: string;\n  baseBranches?: string[];\n  commitBody?: string;\n  useBaseBranchConfig?: UseBaseBranchConfigType;\n  baseBranch?: string;\n  defaultBranch?: string;\n  branchList?: string[];\n  cloneSubmodulesFilter?: string[];\n  description?: string | string[];\n  force?: RenovateConfig;\n  errors?: ValidationMessage[];\n\n  gitAuthor?: string;\n\n  hostRules?: HostRule[];\n\n  inheritConfig?: boolean;\n  inheritConfigFileName?: string;\n  inheritConfigRepoName?: string;\n  inheritConfigStrict?: boolean;\n\n  ignorePresets?: string[];\n  forkProcessing?: 'auto' | 'enabled' | 'disabled';\n  isFork?: boolean;\n\n  fileList?: string[];\n  configWarningReuseIssue?: boolean;\n  dependencyDashboard?: boolean;\n  dependencyDashboardAutoclose?: boolean;\n  dependencyDashboardChecks?: Record<string, string>;\n  dependencyDashboardIssue?: number;\n  dependencyDashboardTitle?: string;\n  dependencyDashboardHeader?: string;\n  dependencyDashboardFooter?: string;\n  dependencyDashboardLabels?: string[];\n  dependencyDashboardOSVVulnerabilitySummary?: 'none' | 'all' | 'unresolved';\n  packageFile?: string;\n  packageRules?: PackageRule[];\n  postUpdateOptions?: string[];\n  branchConcurrentLimit?: number | null;\n  prConcurrentLimit?: number;\n  prHourlyLimit?: number;\n  forkModeDisallowMaintainerEdits?: boolean;\n\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[] | null;\n  registryAliases?: Record<string, string>;\n\n  repoIsOnboarded?: boolean;\n  repoIsActivated?: boolean;\n\n  updateInternalDeps?: boolean;\n  updateType?: UpdateType;\n\n  warnings?: ValidationMessage[];\n  vulnerabilityAlerts?: RenovateSharedConfig;\n  osvVulnerabilityAlerts?: boolean;\n  vulnerabilitySeverity?: string;\n  customManagers?: CustomManager[];\n  customDatasources?: Record<string, CustomDatasourceConfig>;\n\n  fetchChangeLogs?: FetchChangeLogsOptions;\n  secrets?: Record<string, string>;\n\n  constraints?: Record<string, string>;\n  skipInstalls?: boolean | null;\n\n  constraintsFiltering?: ConstraintsFilter;\n\n  checkedBranches?: string[];\n  customizeDashboard?: Record<string, string>;\n\n  statusCheckNames?: Record<StatusCheckKey, string | null>;\n  /**\n   * User configured environment variables that Renovate uses when executing package manager commands\n   */\n  env?: UserEnv;\n  logLevelRemap?: LogLevelRemap[];\n\n  branchTopic?: string;\n  additionalBranchPrefix?: string;\n  sharedVariableName?: string;\n}\n\nconst CustomDatasourceFormats = ['json', 'plain', 'yaml', 'html'] as const;\nexport type CustomDatasourceFormats = (typeof CustomDatasourceFormats)[number];\n\nexport interface CustomDatasourceConfig {\n  defaultRegistryUrlTemplate?: string;\n  format?: CustomDatasourceFormats;\n  transformTemplates?: string[];\n}\n\nexport interface AllConfig\n  extends RenovateConfig,\n    GlobalOnlyConfig,\n    RepoGlobalConfig {}\n\nexport interface AssigneesAndReviewersConfig {\n  assigneesFromCodeOwners?: boolean;\n  expandCodeOwnersGroups?: boolean;\n  assignees?: string[];\n  assigneesSampleSize?: number;\n  ignoreReviewers?: string[];\n  reviewersFromCodeOwners?: boolean;\n  reviewers?: string[];\n  reviewersSampleSize?: number;\n  additionalReviewers?: string[];\n  filterUnavailableUsers?: boolean;\n}\n\nexport type UpdateType =\n  | 'major'\n  | 'minor'\n  | 'patch'\n  | 'pin'\n  | 'digest'\n  | 'pinDigest'\n  | 'lockFileMaintenance'\n  | 'lockfileUpdate'\n  | 'rollback'\n  | 'bump'\n  | 'replacement';\n\nexport type FetchChangeLogsOptions = 'off' | 'branch' | 'pr';\n\nexport type MatchStringsStrategy = 'any' | 'recursive' | 'combination';\n\nexport type MergeStrategy =\n  | 'auto'\n  | 'fast-forward'\n  | 'merge-commit'\n  | 'rebase'\n  | 'squash';\n\n// TODO: Proper typings\nexport interface PackageRule\n  extends RenovateSharedConfig,\n    UpdateConfig,\n    Record<string, unknown> {\n  description?: string | string[];\n  isVulnerabilityAlert?: boolean;\n  matchBaseBranches?: string[];\n  matchCategories?: string[];\n  matchConfidence?: MergeConfidence[];\n  matchCurrentAge?: string;\n  matchCurrentValue?: string;\n  matchCurrentVersion?: string;\n  matchDatasources?: string[];\n  matchDepNames?: string[];\n  matchDepTypes?: string[];\n  matchFileNames?: string[];\n  matchManagers?: string[];\n  matchNewValue?: string;\n  matchPackageNames?: string[];\n  matchRepositories?: string[];\n  matchSourceUrls?: string[];\n  matchUpdateTypes?: UpdateType[];\n  matchJsonata?: string[];\n  registryUrls?: string[] | null;\n  vulnerabilitySeverity?: string;\n  vulnerabilityFixVersion?: string;\n}\n\nexport interface ValidationMessage {\n  topic: string;\n  message: string;\n}\n\nexport type AllowedParents =\n  | 'customDatasources'\n  | 'customManagers'\n  | 'hostRules'\n  | 'logLevelRemap'\n  | 'packageRules'\n  | 'postUpgradeTasks'\n  | 'vulnerabilityAlerts';\nexport interface RenovateOptionBase {\n  /**\n   * If true, the option can only be configured by people with access to the Renovate instance.\n   * Furthermore, the option should be documented in docs/usage/self-hosted-configuration.md.\n   */\n  globalOnly?: boolean;\n\n  inheritConfigSupport?: boolean;\n\n  allowedValues?: string[];\n\n  allowString?: boolean;\n\n  cli?: boolean;\n\n  description: string;\n\n  env?: false | string;\n\n  /**\n   * Do not validate object children\n   */\n  freeChoice?: boolean;\n\n  mergeable?: boolean;\n\n  autogenerated?: boolean;\n\n  name: string;\n\n  parents?: AllowedParents[];\n\n  stage?: RenovateConfigStage;\n\n  experimental?: boolean;\n\n  experimentalDescription?: string;\n\n  experimentalIssues?: number[];\n\n  advancedUse?: boolean;\n\n  /**\n   * This is used to add depreciation message in the docs\n   */\n  deprecationMsg?: string;\n\n  /**\n   * For internal use only: add it to any config option that supports regex or glob matching\n   */\n  patternMatch?: boolean;\n\n  /**\n   * For internal use only: add it to any config option of type integer that supports negative integers\n   */\n  allowNegative?: boolean;\n\n  /**\n   * Managers which support this option, leave undefined if all managers support it.\n   */\n  supportedManagers?: string[];\n\n  /**\n   * Platforms which support this option, leave undefined if all platforms support it.\n   */\n  supportedPlatforms?: PlatformId[];\n}\n\nexport interface RenovateArrayOption<\n  T extends string | number | Record<string, unknown> = Record<string, unknown>,\n> extends RenovateOptionBase {\n  default?: T[] | null;\n  mergeable?: boolean;\n  type: 'array';\n  subType?: 'string' | 'object' | 'number';\n}\n\nexport interface RenovateStringArrayOption extends RenovateArrayOption<string> {\n  format?: 'regex';\n  subType: 'string';\n}\n\nexport interface RenovateNumberArrayOption extends RenovateArrayOption<number> {\n  subType: 'number';\n}\n\nexport interface RenovateBooleanOption extends RenovateOptionBase {\n  default?: boolean | null;\n  type: 'boolean';\n}\n\nexport interface RenovateIntegerOption extends RenovateOptionBase {\n  default?: number | null;\n  type: 'integer';\n}\n\nexport interface RenovateStringOption extends RenovateOptionBase {\n  default?: string | null;\n  format?: 'regex';\n\n  // Not used\n  replaceLineReturns?: boolean;\n  type: 'string';\n}\n\nexport interface RenovateObjectOption extends RenovateOptionBase {\n  default?: any;\n  additionalProperties?: Record<string, unknown> | boolean;\n  mergeable?: boolean;\n  type: 'object';\n}\n\nexport type RenovateOptions =\n  | RenovateStringOption\n  | RenovateNumberArrayOption\n  | RenovateStringArrayOption\n  | RenovateIntegerOption\n  | RenovateBooleanOption\n  | RenovateArrayOption\n  | RenovateObjectOption;\n\nexport interface PackageRuleInputConfig extends Record<string, unknown> {\n  versioning?: string;\n  packageFile?: string;\n  lockFiles?: string[];\n  depType?: string;\n  depTypes?: string[];\n  depName?: string;\n  packageName?: string | null;\n  newValue?: string | null;\n  currentValue?: string | null;\n  currentVersion?: string;\n  lockedVersion?: string;\n  updateType?: UpdateType;\n  mergeConfidenceLevel?: MergeConfidence | undefined;\n  isBump?: boolean;\n  sourceUrl?: string | null;\n  categories?: string[];\n  baseBranch?: string;\n  manager?: string;\n  datasource?: string;\n  packageRules?: (PackageRule & PackageRuleInputConfig)[];\n  releaseTimestamp?: Timestamp | null;\n  repository?: string;\n  currentVersionAgeInDays?: number;\n  currentVersionTimestamp?: string;\n  enabled?: boolean;\n  skipReason?: SkipReason;\n  skipStage?: StageName;\n}\n\nexport interface ConfigMigration {\n  configMigration?: boolean;\n}\n\nexport interface MigratedConfig {\n  isMigrated: boolean;\n  migratedConfig: RenovateConfig;\n}\n\nexport interface MigratedRenovateConfig extends RenovateConfig {\n  endpoints?: HostRule[];\n  pathRules: PackageRule[];\n  packages: PackageRule[];\n\n  node?: RenovateConfig;\n  travis?: RenovateConfig;\n  gradle?: RenovateConfig;\n}\n\nexport interface ManagerConfig extends RenovateConfig {\n  manager: string;\n}\n\nexport interface ValidationResult {\n  errors: ValidationMessage[];\n  warnings: ValidationMessage[];\n}\n"]}