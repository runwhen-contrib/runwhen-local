{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../lib/config/parse.ts"],"names":[],"mappings":";;AAMA,0CAoEC;;AA1ED,4FAAmD;AACnD,0DAA0B;AAC1B,0DAA0B;AAC1B,sCAAmC;AACnC,2CAA2C;AAE3C,SAAgB,eAAe,CAC7B,QAAgB,EAChB,YAAoB;IAIpB,MAAM,QAAQ,GAAG,eAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEzC,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;QAC1B,IAAI,CAAC;YACH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,eAAK,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;QACtE,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,0BAA0B,CAAC,CAAC;YACrE,MAAM,eAAe,GAAG,gCAAgC,CAAC;YACzD,MAAM,iBAAiB,GAAG,wBAAwB,GAAG,CAAC,OAAO,CAAC,UAAU,CACtE,GAAG,EACH,GAAG,CACJ,IAAI,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,eAAe;gBACf,iBAAiB;aAClB,CAAC;QACJ,CAAC;IACH,CAAC;SAAM,CAAC;QACN,IAAI,kBAAkB,GAAG,IAAI,CAAC;QAC9B,IAAI,mBAAmB,GAAG,gCAAa,CAAC,QAAQ,CAC9C,YAAY,EACZ,kBAAkB,CACnB,CAAC;QACF,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,eAAe,GAAG,+BAA+B,CAAC;YACxD,MAAM,iBAAiB,GAAG,mBAAmB,CAAC;YAC9C,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,eAAe;gBACf,iBAAiB;aAClB,CAAC;QACJ,CAAC;QACD,kBAAkB,GAAG,KAAK,CAAC;QAC3B,mBAAmB,GAAG,gCAAa,CAAC,QAAQ,CAC1C,YAAY,EACZ,kBAAkB,CACnB,CAAC;QACF,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,eAAe,GAAG,wBAAwB,CAAC;YACjD,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAC9D,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,eAAe;gBACf,iBAAiB;aAClB,CAAC;QACJ,CAAC;QACD,IAAI,CAAC;YACH,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,IAAA,kBAAS,EAAC,YAAY,EAAE,QAAQ,CAAC;aAClD,CAAC;QACJ,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,EAAE,+BAA+B,CAAC,CAAC;YAChE,MAAM,eAAe,GAAG,+BAA+B,CAAC;YACxD,MAAM,iBAAiB,GAAG,wBAAwB,GAAG,CAAC,OAAO,CAAC,UAAU,CACtE,GAAG,EACH,GAAG,CACJ,IAAI,CAAC;YACN,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,iBAAiB,EAAE,CAAC;QAChE,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import jsonValidator from 'json-dup-key-validator';\nimport JSON5 from 'json5';\nimport upath from 'upath';\nimport { logger } from '../logger';\nimport { parseJson } from '../util/common';\n\nexport function parseFileConfig(\n  fileName: string,\n  fileContents: string,\n):\n  | { success: true; parsedContents: unknown }\n  | { success: false; validationError: string; validationMessage: string } {\n  const fileType = upath.extname(fileName);\n\n  if (fileType === '.json5') {\n    try {\n      return { success: true, parsedContents: JSON5.parse(fileContents) };\n    } catch (err) {\n      logger.debug({ fileName, fileContents }, 'Error parsing JSON5 file');\n      const validationError = 'Invalid JSON5 (parsing failed)';\n      const validationMessage = `JSON5.parse error: \\`${err.message.replaceAll(\n        '`',\n        \"'\",\n      )}\\``;\n      return {\n        success: false,\n        validationError,\n        validationMessage,\n      };\n    }\n  } else {\n    let allowDuplicateKeys = true;\n    let jsonValidationError = jsonValidator.validate(\n      fileContents,\n      allowDuplicateKeys,\n    );\n    if (jsonValidationError) {\n      const validationError = 'Invalid JSON (parsing failed)';\n      const validationMessage = jsonValidationError;\n      return {\n        success: false,\n        validationError,\n        validationMessage,\n      };\n    }\n    allowDuplicateKeys = false;\n    jsonValidationError = jsonValidator.validate(\n      fileContents,\n      allowDuplicateKeys,\n    );\n    if (jsonValidationError) {\n      const validationError = 'Duplicate keys in JSON';\n      const validationMessage = JSON.stringify(jsonValidationError);\n      return {\n        success: false,\n        validationError,\n        validationMessage,\n      };\n    }\n    try {\n      return {\n        success: true,\n        parsedContents: parseJson(fileContents, fileName),\n      };\n    } catch (err) {\n      logger.debug({ fileContents }, 'Error parsing renovate config');\n      const validationError = 'Invalid JSON (parsing failed)';\n      const validationMessage = `JSON.parse error:  \\`${err.message.replaceAll(\n        '`',\n        \"'\",\n      )}\\``;\n      return { success: false, validationError, validationMessage };\n    }\n  }\n}\n"]}