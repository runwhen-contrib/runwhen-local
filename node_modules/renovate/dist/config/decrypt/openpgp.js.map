{"version":3,"file":"openpgp.js","sourceRoot":"","sources":["../../../lib/config/decrypt/openpgp.ts"],"names":[],"mappings":";;AAMA,8CAiDC;AAvDD,iDAA2C;AAC3C,yCAAsC;AACtC,4CAAyC;AAEzC,IAAI,GAAG,GAAgD,SAAS,CAAC;AAE1D,KAAK,UAAU,iBAAiB,CACrC,UAAkB,EAClB,YAAoB;IAEpB,IAAI,YAAY,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;QAC9B,sDAAsD;QACtD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;QACtB,IAAI,CAAC;YACH,GAAG,GAAG,IAAA,oBAAO,GAAE,CAAC;QAClB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,oBAAoB,CAAC,CAAC;YAC3C,GAAG,GAAG,IAAI,CAAC;QACb,CAAC;IACH,CAAC;IAED,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;QACjB,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC;YAClC,kBAAkB;YAClB,UAAU,EAAE,UAAU,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,WAAW,CAAC,EAAE,IAAI,CAAC,EAAE,0CAA0C;SACrG,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,iCAAiC,CAAC;QACrD,MAAM,QAAQ,GAAG,6BAA6B,CAAC;QAC/C,IAAI,cAAc,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC;QACzC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAC3C,cAAc,GAAG,GAAG,UAAU,GAAG,cAAc,EAAE,CAAC;QACpD,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvC,cAAc,GAAG,GAAG,cAAc,GAAG,QAAQ,EAAE,CAAC;QAClD,CAAC;QACD,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,WAAW,CAAC;YACpC,cAAc;SACf,CAAC,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC;YACjC,OAAO;YACP,cAAc,EAAE,EAAE;SACnB,CAAC,CAAC;QACH,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,iCAAiC,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import { openpgp } from '../../expose.cjs';\nimport { logger } from '../../logger';\nimport { regEx } from '../../util/regex';\n\nlet pgp: typeof import('openpgp') | null | undefined = undefined;\n\nexport async function tryDecryptOpenPgp(\n  privateKey: string,\n  encryptedStr: string,\n): Promise<string | null> {\n  if (encryptedStr.length < 500) {\n    // optimization during transition of public key -> pgp\n    return null;\n  }\n  if (pgp === undefined) {\n    try {\n      pgp = openpgp();\n    } catch (err) {\n      logger.warn({ err }, 'Could load openpgp');\n      pgp = null;\n    }\n  }\n\n  if (pgp === null) {\n    logger.once.warn('Cannot load openpgp, skipping decryption');\n    return null;\n  }\n\n  try {\n    const pk = await pgp.readPrivateKey({\n      // prettier-ignore\n      armoredKey: privateKey.replace(regEx(/\\n[ \\t]+/g), '\\n'), // little massage to help a common problem\n    });\n    const startBlock = '-----BEGIN PGP MESSAGE-----\\n\\n';\n    const endBlock = '\\n-----END PGP MESSAGE-----';\n    let armoredMessage = encryptedStr.trim();\n    if (!armoredMessage.startsWith(startBlock)) {\n      armoredMessage = `${startBlock}${armoredMessage}`;\n    }\n    if (!armoredMessage.endsWith(endBlock)) {\n      armoredMessage = `${armoredMessage}${endBlock}`;\n    }\n    const message = await pgp.readMessage({\n      armoredMessage,\n    });\n    const { data } = await pgp.decrypt({\n      message,\n      decryptionKeys: pk,\n    });\n    logger.debug('Decrypted config using openpgp');\n    return data;\n  } catch (err) {\n    logger.debug({ err }, 'Could not decrypt using openpgp');\n    return null;\n  }\n}\n"]}