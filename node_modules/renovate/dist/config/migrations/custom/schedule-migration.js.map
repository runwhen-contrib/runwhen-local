{"version":3,"file":"schedule-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/schedule-migration.ts"],"names":[],"mappings":"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","sourcesContent":["import later from '@breejs/later';\nimport is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport { AbstractMigration } from '../base/abstract-migration';\n\nexport class ScheduleMigration extends AbstractMigration {\n  override readonly propertyName = 'schedule';\n\n  override run(value: unknown): void {\n    if (value) {\n      // massage to array first\n      let schedules: string[] = [];\n      if (is.string(value)) {\n        schedules = [value];\n      }\n      if (is.array<string>(value)) {\n        schedules = [...value];\n      }\n      // split 'and'\n      const schedulesLength = schedules.length;\n      for (let i = 0; i < schedulesLength; i += 1) {\n        if (\n          schedules[i].includes(' and ') &&\n          schedules[i].includes('before ') &&\n          schedules[i].includes('after ')\n        ) {\n          const parsedSchedule = later.parse.text(\n            // We need to massage short hours first before we can parse it\n            schedules[i].replace(regEx(/( \\d?\\d)((a|p)m)/g), '$1:00$2'), // TODO #12071\n          ).schedules[0];\n          // Only migrate if the after time is greater than before, e.g. \"after 10pm and before 5am\"\n          if (!parsedSchedule?.t_a || !parsedSchedule.t_b) {\n            continue;\n          }\n\n          if (parsedSchedule.t_a[0] > parsedSchedule.t_b[0]) {\n            const toSplit = schedules[i];\n            schedules[i] = toSplit\n              .replace(\n                regEx(\n                  /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/,\n                ), // TODO #12071\n                '$1$2 $3 $7',\n              )\n              .trim();\n            schedules.push(\n              toSplit\n                .replace(\n                  regEx(\n                    /^(.*?)(after|before) (.*?) and (after|before) (.*?)( |$)(.*)/,\n                  ), // TODO #12071\n                  '$1$4 $5 $7',\n                )\n                .trim(),\n            );\n          }\n        }\n      }\n      for (let i = 0; i < schedules.length; i += 1) {\n        if (schedules[i].includes('on the last day of the month')) {\n          schedules[i] = schedules[i].replace(\n            'on the last day of the month',\n            'on the first day of the month',\n          );\n        }\n        if (schedules[i].includes('on every weekday')) {\n          schedules[i] = schedules[i].replace(\n            'on every weekday',\n            'every weekday',\n          );\n        }\n        if (schedules[i].endsWith(' every day')) {\n          schedules[i] = schedules[i].replace(' every day', '');\n        }\n        if (\n          regEx(/every (mon|tues|wednes|thurs|fri|satur|sun)day$/).test(\n            schedules[i],\n          ) // TODO #12071\n        ) {\n          schedules[i] = schedules[i].replace(\n            regEx(/every ([a-z]*day)$/), // TODO #12071\n            'on $1',\n          );\n        }\n        if (schedules[i].endsWith('days')) {\n          schedules[i] = schedules[i].replace('days', 'day');\n        }\n      }\n      if (is.string(value) && schedules.length === 1) {\n        this.rewrite(schedules[0]);\n      } else {\n        this.rewrite(schedules);\n      }\n    }\n  }\n}\n"]}