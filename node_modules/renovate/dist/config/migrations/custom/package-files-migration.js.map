{"version":3,"file":"package-files-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/package-files-migration.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,mEAA+D;AAE/D,MAAa,qBAAsB,SAAQ,sCAAiB;IACxC,UAAU,GAAG,IAAI,CAAC;IAClB,YAAY,GAAG,cAAc,CAAC;IAEvC,GAAG,CAAC,KAAc;QACzB,MAAM,YAAY,GAAkB,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QACnE,IAAI,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,QAAQ,GAAa,EAAE,CAAC;YAC9B,KAAK,MAAM,WAAW,IAAI,KAAK,EAAE,CAAC;gBAChC,IACE,YAAE,CAAC,cAAc,CAAC,WAAW,CAAC;oBAC9B,aAAa,IAAI,WAAW;oBAC5B,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,EAClC,CAAC;oBACD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;oBACvC,WAAW,CAAC,KAAK,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;oBAC9C,OAAO,WAAW,CAAC,WAAW,CAAC;oBAE/B,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACxC,YAAY,CAAC,IAAI,CAAC;4BAChB,GAAG,WAAW;yBACf,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;qBAAM,IAAI,YAAE,CAAC,KAAK,CAAC,WAAW,EAAE,YAAE,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC5C,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,YAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;oBAClC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7B,CAAC;YACH,CAAC;YACD,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACpB,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;gBACxB,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;IACH,CAAC;CACF;AArCD,sDAqCC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule } from '../../types';\nimport { AbstractMigration } from '../base/abstract-migration';\n\nexport class PackageFilesMigration extends AbstractMigration {\n  override readonly deprecated = true;\n  override readonly propertyName = 'packageFiles';\n\n  override run(value: unknown): void {\n    const packageRules: PackageRule[] = this.get('packageRules') ?? [];\n    if (is.array(value)) {\n      const fileList: string[] = [];\n      for (const packageFile of value) {\n        if (\n          is.nonEmptyObject(packageFile) &&\n          'packageFile' in packageFile &&\n          is.string(packageFile.packageFile)\n        ) {\n          fileList.push(packageFile.packageFile);\n          packageFile.paths = [packageFile.packageFile];\n          delete packageFile.packageFile;\n\n          if (Object.keys(packageFile).length > 1) {\n            packageRules.push({\n              ...packageFile,\n            });\n          }\n        } else if (is.array(packageFile, is.string)) {\n          fileList.push(...packageFile);\n        } else if (is.string(packageFile)) {\n          fileList.push(packageFile);\n        }\n      }\n      if (fileList.length) {\n        this.setSafely('includePaths', fileList);\n      }\n      if (packageRules.length) {\n        this.setSafely('packageRules', packageRules);\n      }\n    }\n  }\n}\n"]}