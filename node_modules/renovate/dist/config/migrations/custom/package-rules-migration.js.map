{"version":3,"file":"package-rules-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/package-rules-migration.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule } from '../../types';\nimport { AbstractMigration } from '../base/abstract-migration';\n\nexport const renameMap = {\n  matchFiles: 'matchFileNames',\n  matchPaths: 'matchFileNames',\n  paths: 'matchFileNames',\n  languages: 'matchCategories',\n  matchLanguages: 'matchCategories',\n  baseBranchList: 'matchBaseBranches',\n  managers: 'matchManagers',\n  datasources: 'matchDatasources',\n  depTypeList: 'matchDepTypes',\n  packageNames: 'matchPackageNames',\n  packagePatterns: 'matchPackagePatterns',\n  sourceUrlPrefixes: 'matchSourceUrlPrefixes',\n  updateTypes: 'matchUpdateTypes',\n};\ntype RenameMapKey = keyof typeof renameMap;\n\nfunction renameKeys(packageRule: PackageRule): PackageRule {\n  const newPackageRule: PackageRule = {};\n  for (const [key, val] of Object.entries(packageRule)) {\n    newPackageRule[renameMap[key as RenameMapKey] ?? key] = val;\n  }\n  return newPackageRule;\n}\n\nfunction mergeMatchers(packageRule: PackageRule): PackageRule {\n  const newPackageRule: PackageRule = { ...packageRule };\n  for (const [key, val] of Object.entries(packageRule)) {\n    const patterns = is.string(val) ? [val] : val;\n\n    // depName\n    if (key === 'matchDepPrefixes') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchDepNames ??= [];\n        newPackageRule.matchDepNames.push(...patterns.map((v) => `${v}{/,}**`));\n      }\n      delete newPackageRule.matchDepPrefixes;\n    }\n    if (key === 'matchDepPatterns') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchDepNames ??= [];\n        newPackageRule.matchDepNames.push(...patterns.map((v) => `/${v}/`));\n      }\n      delete newPackageRule.matchDepPatterns;\n    }\n    if (key === 'excludeDepNames') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchDepNames ??= [];\n        newPackageRule.matchDepNames.push(...patterns.map((v) => `!${v}`));\n      }\n      delete newPackageRule.excludeDepNames;\n    }\n    if (key === 'excludeDepPrefixes') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchDepNames ??= [];\n        newPackageRule.matchDepNames.push(\n          ...patterns.map((v) => `!${v}{/,}**`),\n        );\n      }\n      delete newPackageRule.excludeDepPrefixes;\n    }\n    if (key === 'excludeDepPatterns') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchDepNames ??= [];\n        newPackageRule.matchDepNames.push(...patterns.map((v) => `!/${v}/`));\n      }\n      delete newPackageRule.excludeDepPatterns;\n    }\n    // packageName\n    if (key === 'matchPackagePrefixes') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchPackageNames ??= [];\n        newPackageRule.matchPackageNames.push(\n          ...patterns.map((v) => `${v}{/,}**`),\n        );\n      }\n      delete newPackageRule.matchPackagePrefixes;\n    }\n    if (key === 'matchPackagePatterns') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchPackageNames ??= [];\n        newPackageRule.matchPackageNames.push(\n          ...patterns.map((v) => {\n            if (v === '*') {\n              return '*';\n            }\n            return `/${v}/`;\n          }),\n        );\n      }\n      delete newPackageRule.matchPackagePatterns;\n    }\n    if (key === 'excludePackageNames') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchPackageNames ??= [];\n        newPackageRule.matchPackageNames.push(...patterns.map((v) => `!${v}`));\n      }\n      delete newPackageRule.excludePackageNames;\n    }\n    if (key === 'excludePackagePrefixes') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchPackageNames ??= [];\n        newPackageRule.matchPackageNames.push(\n          ...patterns.map((v) => `!${v}{/,}**`),\n        );\n      }\n      delete newPackageRule.excludePackagePrefixes;\n    }\n    if (key === 'excludePackagePatterns') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchPackageNames ??= [];\n        newPackageRule.matchPackageNames.push(\n          ...patterns.map((v) => `!/${v}/`),\n        );\n      }\n      delete newPackageRule.excludePackagePatterns;\n    }\n    // sourceUrl\n    if (key === 'matchSourceUrlPrefixes') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchSourceUrls ??= [];\n        newPackageRule.matchSourceUrls.push(\n          ...patterns.map((v) => `${v}{/,}**`),\n        );\n      }\n      delete newPackageRule.matchSourceUrlPrefixes;\n    }\n    // repository\n    if (key === 'excludeRepositories') {\n      if (is.array(patterns, is.string)) {\n        newPackageRule.matchRepositories ??= [];\n        newPackageRule.matchRepositories.push(...patterns.map((v) => `!${v}`));\n      }\n      delete newPackageRule.excludeRepositories;\n    }\n  }\n  return newPackageRule;\n}\n\nexport class PackageRulesMigration extends AbstractMigration {\n  override readonly propertyName = 'packageRules';\n\n  override run(value: unknown): void {\n    let packageRules = this.get('packageRules')!;\n    if (is.nonEmptyArray(packageRules)) {\n      packageRules = packageRules.map(renameKeys);\n      packageRules = packageRules.map(mergeMatchers);\n      this.rewrite(packageRules);\n    }\n  }\n}\n"]}