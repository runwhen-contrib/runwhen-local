{"version":3,"file":"extends-migration.js","sourceRoot":"","sources":["../../../../lib/config/migrations/custom/extends-migration.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,yCAA4C;AAC5C,iDAAsD;AACtD,mEAA+D;AAE/D,MAAa,gBAAiB,SAAQ,sCAAiB;IACnC,YAAY,GAAG,SAAS,CAAC;IAElC,GAAG;QACV,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAClC,IAAI,UAAU,GAAa,EAAE,CAAC;QAE9B,IAAI,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACrB,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC3B,CAAC;IAEO,gBAAgB,CAAC,OAAiB;QACxC,OAAO,OAAO;aACX,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC;aACjB,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;aAC7C,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC,CAAC;IAC/B,CAAC;IAEO,eAAe,CAAC,MAAc;QACpC,MAAM,cAAc,GAAG,qBAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAE1D,IAAI,uBAAc,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE,CAAC;YACzC,OAAO,uBAAc,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,cAAc,EAAE,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE,CAAC;YAC3C,OAAO,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAtCD,4CAsCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../global';\nimport { removedPresets } from '../../presets/common';\nimport { AbstractMigration } from '../base/abstract-migration';\n\nexport class ExtendsMigration extends AbstractMigration {\n  override readonly propertyName = 'extends';\n\n  override run(): void {\n    const value = this.get('extends');\n    let newPresets: string[] = [];\n\n    if (is.string(value)) {\n      newPresets = this.normalizePresets([value]);\n    }\n\n    if (Array.isArray(value)) {\n      newPresets = this.normalizePresets(value);\n    }\n\n    this.rewrite(newPresets);\n  }\n\n  private normalizePresets(presets: string[]): string[] {\n    return presets\n      .filter(is.string)\n      .map((preset) => this.normalizePreset(preset))\n      .filter(is.nonEmptyString);\n  }\n\n  private normalizePreset(preset: string): string | null {\n    const migratePresets = GlobalConfig.get('migratePresets');\n\n    if (removedPresets[preset] !== undefined) {\n      return removedPresets[preset];\n    }\n\n    if (migratePresets?.[preset] !== undefined) {\n      return migratePresets?.[preset];\n    }\n\n    return preset;\n  }\n}\n"]}