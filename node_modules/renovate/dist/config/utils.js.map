{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../lib/config/utils.ts"],"names":[],"mappings":";;AAMA,4CAkDC;;AAxDD,sCAAmC;AACnC,yCAAsC;AACtC,uDAA8E;AAC9E,2DAAqC;AAGrC,SAAgB,gBAAgB,CAG9B,MAAS,EAAE,KAAa;IACxB,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,kBAAkB,CAAC,CAAC;IACpD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,MAAe,CAAC;IACzB,CAAC;IACD,MAAM,YAAY,GAAG,IAAA,aAAK,EAAC,MAAM,CAAC,CAAC;IACnC,MAAM,WAAW,GAAG,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC;IACjC,MAAM,MAAM,GAAwB,EAAE,GAAG,YAAY,EAAE,GAAG,WAAW,EAAE,CAAC;IAExE,wDAAwD;IACxD,IAAI,MAAM,EAAE,oBAAoB,EAAE,CAAC;QACjC,MAAM,CAAC,qBAAqB,GAAG,IAAA,uCAA+B,EAC5D,MAAM,EACN,KAAK,CACN,CAAC;IACJ,CAAC;IAED,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;QAC1C,IACE,MAAM,CAAC,SAAS;YAChB,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;YACxB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EACzB,CAAC;YACD,eAAM,CAAC,KAAK,CAAC,qBAAqB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YAEjD,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;gBAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;oBACpB,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC5B,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;iBAC5B,CAAC;YACJ,CAAC;iBAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAe,CAAC,MAAM,CACnE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACpB,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,gBAAgB,CACpC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAmB,EAC3C,WAAW,CAAC,MAAM,CAAC,IAAI,CAAmB,CAC3C,CAAC;YACJ,CAAC;YACD,eAAM,CAAC,KAAK,CACV,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAC/B,iBAAiB,MAAM,CAAC,IAAI,EAAE,CAC/B,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;AACxC,CAAC","sourcesContent":["import { logger } from '../logger';\nimport { clone } from '../util/clone';\nimport { getHighestVulnerabilitySeverity } from '../util/vulnerability/utils';\nimport * as options from './options';\nimport type { RenovateConfig } from './types';\n\nexport function mergeChildConfig<\n  T extends Record<string, any>,\n  TChild extends Record<string, any> | undefined,\n>(parent: T, child: TChild): T & TChild {\n  logger.trace({ parent, child }, `mergeChildConfig`);\n  if (!child) {\n    return parent as never;\n  }\n  const parentConfig = clone(parent);\n  const childConfig = clone(child);\n  const config: Record<string, any> = { ...parentConfig, ...childConfig };\n\n  // Ensure highest severity survives parent / child merge\n  if (config?.isVulnerabilityAlert) {\n    config.vulnerabilitySeverity = getHighestVulnerabilitySeverity(\n      parent,\n      child,\n    );\n  }\n\n  for (const option of options.getOptions()) {\n    if (\n      option.mergeable &&\n      childConfig[option.name] &&\n      parentConfig[option.name]\n    ) {\n      logger.trace(`mergeable option: ${option.name}`);\n\n      if (option.name === 'constraints') {\n        config[option.name] = {\n          ...parentConfig[option.name],\n          ...childConfig[option.name],\n        };\n      } else if (option.type === 'array') {\n        config[option.name] = (parentConfig[option.name] as unknown[]).concat(\n          config[option.name],\n        );\n      } else {\n        config[option.name] = mergeChildConfig(\n          parentConfig[option.name] as RenovateConfig,\n          childConfig[option.name] as RenovateConfig,\n        );\n      }\n      logger.trace(\n        { result: config[option.name] },\n        `Merged config.${option.name}`,\n      );\n    }\n  }\n  return { ...config, ...config.force };\n}\n"]}