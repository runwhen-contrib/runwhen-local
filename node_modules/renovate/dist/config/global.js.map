{"version":3,"file":"global.js","sourceRoot":"","sources":["../../lib/config/global.ts"],"names":[],"mappings":";;;AAEA,MAAa,YAAY;IACvB,iIAAiI;IACzH,MAAM,CAAU,OAAO,GAA+B;QAC5D,iBAAiB;QACjB,YAAY;QACZ,wBAAwB;QACxB,4BAA4B;QAC5B,gBAAgB;QAChB,cAAc;QACd,cAAc;QACd,cAAc;QACd,UAAU;QACV,qBAAqB;QACrB,kBAAkB;QAClB,kBAAkB;QAClB,oBAAoB;QACpB,mBAAmB;QACnB,kBAAkB;QAClB,oBAAoB;QACpB,YAAY;QACZ,QAAQ;QACR,kBAAkB;QAClB,cAAc;QACd,kBAAkB;QAClB,iBAAiB;QACjB,UAAU;QACV,gBAAgB;QAChB,wBAAwB;QACxB,YAAY;QACZ,eAAe;QACf,YAAY;QACZ,UAAU;QACV,UAAU;QACV,kBAAkB;QAClB,sBAAsB;QACtB,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,YAAY;QACZ,aAAa;QACb,sBAAsB;KACvB,CAAC;IAEM,MAAM,CAAC,MAAM,GAAqB,EAAE,CAAC;IAU7C,MAAM,CAAC,GAAG,CACR,GAAS,EACT,YAAoC;QAEpC,OAAO,GAAG;YACR,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC;YAC5C,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,MAAyC;QAClD,YAAY,CAAC,KAAK,EAAE,CAAC;QAErB,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC7B,KAAK,MAAM,MAAM,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;YAC1C,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAU,CAAC;YACtD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,KAAK;QACV,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC;IAC3B,CAAC;;AA5EH,oCA6EC","sourcesContent":["import type { RenovateConfig, RepoGlobalConfig } from './types';\n\nexport class GlobalConfig {\n  // TODO: once global config work is complete, add a test to make sure this list includes all options with globalOnly=true (#9603)\n  private static readonly OPTIONS: (keyof RepoGlobalConfig)[] = [\n    'allowedCommands',\n    'allowedEnv',\n    'allowCommandTemplating',\n    'allowCustomCrateRegistries',\n    'allowedHeaders',\n    'allowPlugins',\n    'allowScripts',\n    'binarySource',\n    'cacheDir',\n    'cacheHardTtlMinutes',\n    'cacheTtlOverride',\n    'containerbaseDir',\n    'customEnvVariables',\n    'dockerChildPrefix',\n    'dockerCliOptions',\n    'dockerSidecarImage',\n    'dockerUser',\n    'dryRun',\n    'encryptedWarning',\n    'exposeAllEnv',\n    'executionTimeout',\n    'githubTokenWarn',\n    'localDir',\n    'migratePresets',\n    'presetCachePersistence',\n    'privateKey',\n    'privateKeyOld',\n    'gitTimeout',\n    'platform',\n    'endpoint',\n    'httpCacheTtlDays',\n    'autodiscoverRepoSort',\n    'autodiscoverRepoOrder',\n    'userAgent',\n    'dockerMaxPages',\n    's3Endpoint',\n    's3PathStyle',\n    'cachePrivatePackages',\n  ];\n\n  private static config: RepoGlobalConfig = {};\n\n  static get(): RepoGlobalConfig;\n  static get<Key extends keyof RepoGlobalConfig>(\n    key: Key,\n  ): RepoGlobalConfig[Key];\n  static get<Key extends keyof RepoGlobalConfig>(\n    key: Key,\n    defaultValue: Required<RepoGlobalConfig>[Key],\n  ): Required<RepoGlobalConfig>[Key];\n  static get<Key extends keyof RepoGlobalConfig>(\n    key?: Key,\n    defaultValue?: RepoGlobalConfig[Key],\n  ): RepoGlobalConfig | RepoGlobalConfig[Key] {\n    return key\n      ? (GlobalConfig.config[key] ?? defaultValue)\n      : GlobalConfig.config;\n  }\n\n  static set(config: RenovateConfig | RepoGlobalConfig): RenovateConfig {\n    GlobalConfig.reset();\n\n    const result = { ...config };\n    for (const option of GlobalConfig.OPTIONS) {\n      GlobalConfig.config[option] = config[option] as never;\n      delete result[option];\n    }\n\n    return result;\n  }\n\n  static reset(): void {\n    GlobalConfig.config = {};\n  }\n}\n"]}