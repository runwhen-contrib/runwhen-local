{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/gitea/index.ts"],"names":[],"mappings":";;;AAUA,sCAqBC;AAED,sDAeC;AAED,8BAOC;AAzDD,4CAAyC;AACzC,+EAA+E;AAE/E,mFAA8E;AAC9E,iDAAkD;AAElD,kCAAyE;AAE5D,QAAA,QAAQ,GAAG,oBAAoB,CAAC;AAEtC,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB,EAChB,GAAmB;IAEnB,IAAI,GAAiB,CAAC;IACtB,IAAI,CAAC;QACH,GAAG,GAAG,MAAM,IAAA,8BAAe,EAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE;YAC/C,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;YACrC,MAAM,GAAG,CAAC;QACZ,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,eAAe,QAAQ,iBAAiB,IAAI,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;IACxC,CAAC;IAED,0BAA0B;IAC1B,OAAO,IAAA,kBAAW,EAAC,IAAA,mBAAU,EAAC,GAAG,CAAC,OAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;AACzD,CAAC;AAED,SAAgB,qBAAqB,CACnC,IAAY,EACZ,UAAkB,EAClB,UAAmB,EACnB,QAAQ,GAAG,gBAAQ,EACnB,GAAY;IAEZ,OAAO,IAAA,kBAAW,EAAC;QACjB,IAAI;QACJ,UAAU;QACV,UAAU;QACV,QAAQ;QACR,GAAG;QACH,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,SAAS,CAAC,EACxB,IAAI,EACJ,UAAU,GAAG,SAAS,EACtB,UAAU,EACV,GAAG,GAAG,SAAS,GACF;IACb,OAAO,qBAAqB,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAQ,EAAE,GAAG,CAAC,CAAC;AAC5E,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { getRepoContents } from '../../../modules/platform/gitea/gitea-helper';\nimport type { RepoContents } from '../../../modules/platform/gitea/types';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { fromBase64 } from '../../../util/string';\nimport type { Preset, PresetConfig } from '../types';\nimport { PRESET_DEP_NOT_FOUND, fetchPreset, parsePreset } from '../util';\n\nexport const Endpoint = 'https://gitea.com/';\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string,\n  tag?: string | null,\n): Promise<Preset> {\n  let res: RepoContents;\n  try {\n    res = await getRepoContents(repo, fileName, tag, {\n      baseUrl: endpoint,\n    });\n  } catch (err) {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(`Preset file ${fileName} not found in ${repo}`);\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n\n  // TODO: null check #22198\n  return parsePreset(fromBase64(res.content!), fileName);\n}\n\nexport function getPresetFromEndpoint(\n  repo: string,\n  filePreset: string,\n  presetPath?: string,\n  endpoint = Endpoint,\n  tag?: string,\n): Promise<Preset | undefined> {\n  return fetchPreset({\n    repo,\n    filePreset,\n    presetPath,\n    endpoint,\n    tag,\n    fetch: fetchJSONFile,\n  });\n}\n\nexport function getPreset({\n  repo,\n  presetName = 'default',\n  presetPath,\n  tag = undefined,\n}: PresetConfig): Promise<Preset | undefined> {\n  return getPresetFromEndpoint(repo, presetName, presetPath, Endpoint, tag);\n}\n"]}