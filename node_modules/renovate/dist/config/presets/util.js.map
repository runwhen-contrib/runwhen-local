{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/config/presets/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { parseJson } from '../../util/common';\nimport { regEx } from '../../util/regex';\nimport { ensureTrailingSlash } from '../../util/url';\nimport type { FetchPresetConfig, Preset } from './types';\n\nexport const PRESET_DEP_NOT_FOUND = 'dep not found';\nexport const PRESET_INVALID = 'invalid preset';\nexport const PRESET_INVALID_JSON = 'invalid preset JSON';\nexport const PRESET_NOT_FOUND = 'preset not found';\nexport const PRESET_PROHIBITED_SUBPRESET = 'prohibited sub-preset';\nexport const PRESET_RENOVATE_CONFIG_NOT_FOUND =\n  'preset renovate-config not found';\n\nexport async function fetchPreset({\n  repo,\n  filePreset,\n  presetPath,\n  endpoint: _endpoint,\n  tag,\n  fetch,\n}: FetchPresetConfig): Promise<Preset | undefined> {\n  // TODO: fix me, can be undefiend #22198\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const endpoint = ensureTrailingSlash(_endpoint!);\n  const [fileName, presetName, subPresetName] = filePreset.split('/');\n  const pathPrefix = presetPath ? `${presetPath}/` : '';\n  const buildFilePath = (name: string): string => `${pathPrefix}${name}`;\n  let jsonContent: any;\n  if (fileName === 'default') {\n    try {\n      jsonContent = await fetch(\n        repo,\n        buildFilePath('default.json'),\n        endpoint,\n        tag,\n      );\n    } catch (err) {\n      if (err.message !== PRESET_DEP_NOT_FOUND) {\n        throw err;\n      }\n      jsonContent = await fetch(\n        repo,\n        buildFilePath('renovate.json'),\n        endpoint,\n        tag,\n      );\n      logger.warn(\n        {\n          repo,\n          filePreset,\n          presetPath,\n          endpoint,\n          tag,\n        },\n        'Fallback to renovate.json file as a preset is deprecated, please use a default.json file instead.',\n      );\n    }\n  } else {\n    jsonContent = await fetch(\n      repo,\n      buildFilePath(\n        regEx(/\\.json5?$/).test(fileName) ? fileName : `${fileName}.json`,\n      ),\n      endpoint,\n      tag,\n    );\n  }\n\n  if (!jsonContent) {\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  if (presetName) {\n    const preset = jsonContent[presetName];\n    if (!preset) {\n      throw new Error(PRESET_NOT_FOUND);\n    }\n    if (subPresetName) {\n      const subPreset = preset[subPresetName];\n      if (!subPreset) {\n        throw new Error(PRESET_NOT_FOUND);\n      }\n      return subPreset;\n    }\n    return preset;\n  }\n  return jsonContent;\n}\n\nexport function parsePreset(content: string, fileName: string): Preset {\n  try {\n    return parseJson(content, fileName) as Preset;\n  } catch {\n    throw new Error(PRESET_INVALID_JSON);\n  }\n}\n"]}