{"version":3,"file":"auto-generate-replacements.js","sourceRoot":"","sources":["../../../../lib/config/presets/internal/auto-generate-replacements.ts"],"names":[],"mappings":";;AA4CA,gCAcC;AA1DD,+CAAkD;AAmBlD,SAAS,oBAAoB,CAC3B,gBAAmC;IAEnC,MAAM,KAAK,GAAkB,EAAE,CAAC;IAChC,KAAK,MAAM,eAAe,IAAI,gBAAgB,EAAE,CAAC;QAC/C,MAAM,EACJ,mBAAmB,EACnB,gBAAgB,EAChB,YAAY,EACZ,kBAAkB,GACnB,GAAG,eAAe,CAAC;QACpB,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,CAAC,iBAAiB,EAAE,eAAe,CAAC,GAAG,WAAW,CAAC;YACzD,KAAK,CAAC,IAAI,CAAC;gBACT,mBAAmB;gBACnB,gBAAgB;gBAChB,iBAAiB;gBACjB,eAAe;gBACf,kBAAkB;aACnB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,UAAU,CACxB,OAA+B,EAC/B,GAAG,SAA2B;IAE9B,MAAM,GAAG,GAAG,IAAA,mBAAW,EAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC9C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;QACjC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,QAAQ,CAAC;QACtD,OAAO,CAAC,KAAK,CAAC,GAAG;YACf,WAAW;YACX,YAAY,EAAE,oBAAoB,CAAC,YAAY,CAAC;SACjD,CAAC;QACF,GAAG,CAAC,IAAI,CAAC,gBAAgB,KAAK,EAAE,CAAC,CAAC;IACpC,CAAC;IACD,GAAG,CAAC,IAAI,EAAE,CAAC;AACb,CAAC","sourcesContent":["import { coerceArray } from '../../../util/array';\nimport type { PackageRule } from '../../types';\nimport type { Preset } from '../types';\n\nexport type Replacement = [string[], string];\n\nexport interface ReplacementRule {\n  matchCurrentVersion?: string;\n  matchDatasources: string[];\n  replacements: Replacement[];\n  replacementVersion?: string;\n}\n\nexport interface PresetTemplate {\n  title: string;\n  description: string;\n  packageRules: ReplacementRule[];\n}\n\nfunction generatePackageRules(\n  replacementRules: ReplacementRule[],\n): PackageRule[] {\n  const rules: PackageRule[] = [];\n  for (const replacementRule of replacementRules) {\n    const {\n      matchCurrentVersion,\n      matchDatasources,\n      replacements,\n      replacementVersion,\n    } = replacementRule;\n    for (const replacement of replacements) {\n      const [matchPackageNames, replacementName] = replacement;\n      rules.push({\n        matchCurrentVersion,\n        matchDatasources,\n        matchPackageNames,\n        replacementName,\n        replacementVersion,\n      });\n    }\n  }\n  return rules;\n}\n\nexport function addPresets(\n  presets: Record<string, Preset>,\n  ...templates: PresetTemplate[]\n): void {\n  const ext = coerceArray(presets.all?.extends);\n  for (const template of templates) {\n    const { title, description, packageRules } = template;\n    presets[title] = {\n      description,\n      packageRules: generatePackageRules(packageRules),\n    };\n    ext.push(`replacements:${title}`);\n  }\n  ext.sort();\n}\n"]}