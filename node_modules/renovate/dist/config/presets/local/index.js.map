{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/local/index.ts"],"names":[],"mappings":";;AA8BA,8BAyBC;;AAtDD,yCAA4C;AAC5C,wDAAkC;AAClC,0DAAoC;AACpC,0DAAoC;AAEpC,wDAAkC;AAYlC,MAAM,SAAS,GAAG;IAChB,KAAK,EAAE,KAAK;IACZ,SAAS,EAAE,KAAK;IAChB,kBAAkB,EAAE,KAAK;IACzB,UAAU,EAAE,IAAI;IAChB,MAAM,EAAE,KAAK;IACb,KAAK;IACL,MAAM;IACN,MAAM;IACN,KAAK,EAAE,IAAI;CACkC,CAAC;AAEhD,SAAgB,SAAS,CAAC,EACxB,IAAI,EACJ,UAAU,GAAG,SAAS,EACtB,UAAU,EACV,GAAG,GACU;IACb,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC9C,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;IACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CACb,8BAA8B,QAAQ,mCAAmC,CAC1E,CAAC;IACJ,CAAC;IACD,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC9C,OAAO,QAAQ,CAAC,qBAAqB,CACnC,IAAI,EACJ,UAAU,EACV,UAAU;IACV,wBAAwB;IACxB,QAAS,EACT,GAAG,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import type { PlatformId } from '../../../constants';\nimport { GlobalConfig } from '../../global';\nimport * as gitea from '../gitea';\nimport * as github from '../github';\nimport * as gitlab from '../gitlab';\nimport type { Preset, PresetConfig } from '../types';\nimport * as local from './common';\n\ninterface Resolver {\n  getPresetFromEndpoint(\n    repo: string,\n    filePreset: string,\n    presetPath?: string,\n    endpoint?: string,\n    tag?: string,\n  ): Promise<Preset | undefined>;\n}\n\nconst resolvers = {\n  azure: local,\n  bitbucket: local,\n  'bitbucket-server': local,\n  codecommit: null,\n  gerrit: local,\n  gitea,\n  github,\n  gitlab,\n  local: null,\n} satisfies Record<PlatformId, Resolver | null>;\n\nexport function getPreset({\n  repo,\n  presetName = 'default',\n  presetPath,\n  tag,\n}: PresetConfig): Promise<Preset | undefined> {\n  const platform = GlobalConfig.get('platform');\n  if (!platform) {\n    throw new Error(`Missing platform config for local preset.`);\n  }\n  const resolver = resolvers[platform];\n  if (!resolver) {\n    throw new Error(\n      `The platform you're using (${platform}) does not support local presets.`,\n    );\n  }\n  const endpoint = GlobalConfig.get('endpoint');\n  return resolver.getPresetFromEndpoint(\n    repo,\n    presetName,\n    presetPath,\n    // TODO: fix type #22198\n    endpoint!,\n    tag,\n  );\n}\n"]}