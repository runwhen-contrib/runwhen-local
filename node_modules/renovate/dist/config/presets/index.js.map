{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/config/presets/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport {\n  CONFIG_VALIDATION,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../../util/cache/memory';\nimport * as packageCache from '../../util/cache/package';\nimport { getTtlOverride } from '../../util/cache/package/ttl';\nimport { clone } from '../../util/clone';\nimport { regEx } from '../../util/regex';\nimport * as template from '../../util/template';\nimport { GlobalConfig } from '../global';\nimport * as massage from '../massage';\nimport * as migration from '../migration';\nimport type { AllConfig, RenovateConfig } from '../types';\nimport { mergeChildConfig } from '../utils';\nimport { removedPresets } from './common';\nimport * as gitea from './gitea';\nimport * as github from './github';\nimport * as gitlab from './gitlab';\nimport * as http from './http';\nimport * as internal from './internal';\nimport * as local from './local';\nimport * as npm from './npm';\nimport { parsePreset } from './parse';\nimport type { Preset, PresetApi } from './types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_INVALID,\n  PRESET_INVALID_JSON,\n  PRESET_NOT_FOUND,\n  PRESET_PROHIBITED_SUBPRESET,\n  PRESET_RENOVATE_CONFIG_NOT_FOUND,\n} from './util';\n\nconst presetSources: Record<string, PresetApi> = {\n  github,\n  npm,\n  gitlab,\n  gitea,\n  local,\n  internal,\n  http,\n};\n\nconst presetCacheNamespace = 'preset';\n\nexport function replaceArgs(\n  obj: string,\n  argMapping: Record<string, any>,\n): string;\nexport function replaceArgs(\n  obj: string[],\n  argMapping: Record<string, any>,\n): string[];\nexport function replaceArgs(\n  obj: Record<string, any>,\n  argMapping: Record<string, any>,\n): Record<string, any>;\nexport function replaceArgs(\n  obj: Record<string, any>[],\n  argMapping: Record<string, any>,\n): Record<string, any>[];\n\n/**\n * TODO: fix me #22198\n * @param obj\n * @param argMapping\n */\nexport function replaceArgs(obj: any, argMapping: Record<string, any>): any;\nexport function replaceArgs(\n  obj: string | string[] | Record<string, any> | Record<string, any>[],\n  argMapping: Record<string, any>,\n): any {\n  if (is.string(obj)) {\n    let returnStr = obj;\n    for (const [arg, argVal] of Object.entries(argMapping)) {\n      const re = regEx(`{{${arg}}}`, 'g', false);\n      returnStr = returnStr.replace(re, argVal);\n    }\n    return returnStr;\n  }\n  if (is.array(obj)) {\n    const returnArray = [];\n    for (const item of obj) {\n      returnArray.push(replaceArgs(item, argMapping));\n    }\n    return returnArray;\n  }\n  if (is.object(obj)) {\n    const returnObj: Record<string, any> = {};\n    for (const [key, val] of Object.entries(obj)) {\n      returnObj[key] = replaceArgs(val, argMapping);\n    }\n    return returnObj;\n  }\n  return obj;\n}\n\nexport async function getPreset(\n  preset: string,\n  baseConfig?: RenovateConfig,\n): Promise<RenovateConfig> {\n  logger.trace(`getPreset(${preset})`);\n  // Check if the preset has been removed or replaced\n  const newPreset = removedPresets[preset];\n  if (newPreset) {\n    return getPreset(newPreset, baseConfig);\n  }\n  if (newPreset === null) {\n    return {};\n  }\n  const { presetSource, repo, presetPath, presetName, tag, params } =\n    parsePreset(preset);\n  const cacheKey = `preset:${preset}`;\n  const presetCachePersistence = GlobalConfig.get(\n    'presetCachePersistence',\n    false,\n  );\n\n  let presetConfig: Preset | null | undefined;\n\n  if (presetCachePersistence) {\n    presetConfig = await packageCache.get(presetCacheNamespace, cacheKey);\n  } else {\n    presetConfig = memCache.get(cacheKey);\n  }\n\n  if (is.nullOrUndefined(presetConfig)) {\n    presetConfig = await presetSources[presetSource].getPreset({\n      repo,\n      presetPath,\n      presetName,\n      tag,\n    });\n    if (presetCachePersistence) {\n      await packageCache.set(\n        presetCacheNamespace,\n        cacheKey,\n        presetConfig,\n        getTtlOverride(presetCacheNamespace) ?? 15,\n      );\n    } else {\n      memCache.set(cacheKey, presetConfig);\n    }\n  }\n  if (!presetConfig) {\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  logger.trace({ presetConfig }, `Found preset ${preset}`);\n  if (params) {\n    const argMapping: Record<string, string> = {};\n    for (const [index, value] of params.entries()) {\n      argMapping[`arg${index}`] = value;\n    }\n    presetConfig = replaceArgs(presetConfig, argMapping);\n  }\n  logger.trace({ presetConfig }, `Applied params to preset ${preset}`);\n  const presetKeys = Object.keys(presetConfig);\n  if (\n    presetKeys.length === 2 &&\n    presetKeys.includes('description') &&\n    presetKeys.includes('extends')\n  ) {\n    // preset is just a collection of other presets\n    delete presetConfig.description;\n  }\n  const packageListKeys = ['description', 'matchPackageNames'];\n  if (presetKeys.every((key) => packageListKeys.includes(key))) {\n    delete presetConfig.description;\n  }\n  const { migratedConfig } = migration.migrateConfig(presetConfig);\n  return massage.massageConfig(migratedConfig);\n}\n\nexport async function resolveConfigPresets(\n  inputConfig: AllConfig,\n  baseConfig?: RenovateConfig,\n  _ignorePresets?: string[],\n  existingPresets: string[] = [],\n): Promise<AllConfig> {\n  let ignorePresets = clone(_ignorePresets);\n  if (!ignorePresets || ignorePresets.length === 0) {\n    ignorePresets = inputConfig.ignorePresets ?? [];\n  }\n  logger.trace(\n    { config: inputConfig, existingPresets },\n    'resolveConfigPresets',\n  );\n  let config: AllConfig = {};\n  // First, merge all the preset configs from left to right\n  if (inputConfig.extends?.length) {\n    // Compile templates\n    inputConfig.extends = inputConfig.extends.map((tmpl) =>\n      template.compile(tmpl, {}),\n    );\n    for (const preset of inputConfig.extends) {\n      if (shouldResolvePreset(preset, existingPresets, ignorePresets)) {\n        logger.trace(`Resolving preset \"${preset}\"`);\n        const fetchedPreset = await fetchPreset(\n          preset,\n          baseConfig,\n          inputConfig,\n          existingPresets,\n        );\n        const presetConfig = await resolveConfigPresets(\n          fetchedPreset,\n          baseConfig ?? inputConfig,\n          ignorePresets,\n          existingPresets.concat([preset]),\n        );\n        if (inputConfig?.ignoreDeps?.length === 0) {\n          delete presetConfig.description;\n        }\n        config = mergeChildConfig(config, presetConfig);\n      }\n    }\n  }\n  logger.trace({ config }, `Post-preset resolve config`);\n  // Now assign \"regular\" config on top\n  config = mergeChildConfig(config, inputConfig);\n  delete config.extends;\n  delete config.ignorePresets;\n  logger.trace({ config }, `Post-merge resolve config`);\n  for (const [key, val] of Object.entries(config)) {\n    const ignoredKeys = ['content', 'onboardingConfig'];\n    if (is.array(val)) {\n      // Resolve nested objects inside arrays\n      config[key] = [];\n      for (const element of val) {\n        if (is.object(element)) {\n          (config[key] as RenovateConfig[]).push(\n            await resolveConfigPresets(\n              element as RenovateConfig,\n              baseConfig,\n              ignorePresets,\n              existingPresets,\n            ),\n          );\n        } else {\n          (config[key] as unknown[]).push(element);\n        }\n      }\n    } else if (is.object(val) && !ignoredKeys.includes(key)) {\n      // Resolve nested objects\n      logger.trace(`Resolving object \"${key}\"`);\n      config[key] = await resolveConfigPresets(\n        val as RenovateConfig,\n        baseConfig,\n        ignorePresets,\n        existingPresets,\n      );\n    }\n  }\n  logger.trace({ config: inputConfig }, 'Input config');\n  logger.trace({ config }, 'Resolved config');\n  return config;\n}\n\nasync function fetchPreset(\n  preset: string,\n  baseConfig: RenovateConfig | undefined,\n  inputConfig: AllConfig,\n  existingPresets: string[],\n): Promise<AllConfig> {\n  try {\n    return await getPreset(preset, baseConfig ?? inputConfig);\n  } catch (err) {\n    logger.debug({ preset, err }, 'Preset fetch error');\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    if (err.message === PLATFORM_RATE_LIMIT_EXCEEDED) {\n      throw err;\n    }\n    const error = new Error(CONFIG_VALIDATION);\n    if (err.message === PRESET_DEP_NOT_FOUND) {\n      error.validationError = `Cannot find preset's package (${preset})`;\n    } else if (err.message === PRESET_RENOVATE_CONFIG_NOT_FOUND) {\n      error.validationError = `Preset package is missing a renovate-config entry (${preset})`;\n    } else if (err.message === PRESET_NOT_FOUND) {\n      error.validationError = `Preset name not found within published preset config (${preset})`;\n    } else if (err.message === PRESET_INVALID) {\n      error.validationError = `Preset is invalid (${preset})`;\n    } else if (err.message === PRESET_PROHIBITED_SUBPRESET) {\n      error.validationError = `Sub-presets cannot be combined with a custom path (${preset})`;\n    } else if (err.message === PRESET_INVALID_JSON) {\n      error.validationError = `Preset is invalid JSON (${preset})`;\n    } else {\n      error.validationError = `Preset caused unexpected error (${preset})`;\n    }\n    if (existingPresets.length) {\n      error.validationError +=\n        '. Note: this is a *nested* preset so please contact the preset author if you are unable to fix it yourself.';\n    }\n    logger.info(\n      { validationError: error.validationError },\n      'Throwing preset error',\n    );\n    throw error;\n  }\n}\n\nfunction shouldResolvePreset(\n  preset: string,\n  existingPresets: string[],\n  ignorePresets: string[],\n): boolean {\n  if (existingPresets.includes(preset)) {\n    logger.debug(\n      `Already seen preset ${preset} in [${existingPresets.join(', ')}]`,\n    );\n    return false;\n  }\n  if (ignorePresets.includes(preset)) {\n    logger.debug(\n      `Ignoring preset ${preset} in [${existingPresets.join(', ')}]`,\n    );\n    return false;\n  }\n  return true;\n}\n"]}