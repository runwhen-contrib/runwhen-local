{"version":3,"file":"regex-glob-matchers.js","sourceRoot":"","sources":["../../../lib/config/validation-helpers/regex-glob-matchers.ts"],"names":[],"mappings":";;AAQA,sBAmCC;;AA3CD,kEAAkC;AAClC,0DAA0E;AAI1E;;GAEG;AACH,SAAgB,KAAK,CAAC,EACpB,GAAG,EAAE,QAAQ,EACb,WAAW,GACM;IACjB,MAAM,GAAG,GAAwB,EAAE,CAAC;IAEpC,IAAI,YAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QAClC,IACE,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnD,QAAQ,CAAC,MAAM,GAAG,CAAC,EACnB,CAAC;YACD,GAAG,CAAC,IAAI,CAAC;gBACP,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,GAAG,WAAW,+GAA+G;aACvI,CAAC,CAAC;QACL,CAAC;QACD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC/B,yBAAyB;YACzB,IAAI,IAAA,2BAAY,EAAC,OAAO,CAAC,EAAE,CAAC;gBAC1B,IAAI,CAAC,IAAA,gCAAiB,EAAC,OAAO,CAAC,EAAE,CAAC;oBAChC,GAAG,CAAC,IAAI,CAAC;wBACP,KAAK,EAAE,qBAAqB;wBAC5B,OAAO,EAAE,kCAAkC,OAAO,GAAG;qBACtD,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,IAAI,CAAC;YACP,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,GAAG,WAAW,sDAAsD,OAAO,QAAQ,GAAG;SAChG,CAAC,CAAC;IACL,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { getRegexPredicate, isRegexMatch } from '../../util/string-match';\nimport type { ValidationMessage } from '../types';\nimport type { CheckMatcherArgs } from './types';\n\n/**\n * Only if type condition or context condition violated then errors array will be mutated to store metadata\n */\nexport function check({\n  val: matchers,\n  currentPath,\n}: CheckMatcherArgs): ValidationMessage[] {\n  const res: ValidationMessage[] = [];\n\n  if (is.array(matchers, is.string)) {\n    if (\n      (matchers.includes('*') || matchers.includes('**')) &&\n      matchers.length > 1\n    ) {\n      res.push({\n        topic: 'Configuration Error',\n        message: `${currentPath}: Your input contains * or ** along with other patterns. Please remove them, as * or ** matches all patterns.`,\n      });\n    }\n    for (const matcher of matchers) {\n      // Validate regex pattern\n      if (isRegexMatch(matcher)) {\n        if (!getRegexPredicate(matcher)) {\n          res.push({\n            topic: 'Configuration Error',\n            message: `Failed to parse regex pattern \"${matcher}\"`,\n          });\n        }\n      }\n    }\n  } else {\n    res.push({\n      topic: 'Configuration Error',\n      message: `${currentPath}: should be an array of strings. You have included ${typeof matchers}.`,\n    });\n  }\n\n  return res;\n}\n"]}