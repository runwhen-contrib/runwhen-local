{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../lib/config/validation-helpers/utils.ts"],"names":[],"mappings":";;AAQA,sCAQC;AAED,kDASC;AAED,wCA0BC;AAOD,sCAeC;AAcD,gEA6CC;AAED,oEAmDC;;AA7LD,kEAAkC;AAClC,8DAA8B;AAC9B,yCAAsC;AAGtC,4CAAyC;AAGzC,SAAgB,aAAa,CAAC,UAA8B;IAC1D,OAAO,UAAU;QACf,CAAC,CAAC,UAAU;aACP,OAAO,CAAC,IAAA,aAAK,EAAC,eAAe,CAAC,EAAE,EAAE,CAAC;aACnC,OAAO,CAAC,IAAA,aAAK,EAAC,UAAU,CAAC,EAAE,EAAE,CAAC;aAC9B,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,EAAG;QACX,CAAC,CAAC,GAAG,CAAC;AACV,CAAC;AAED,SAAgB,mBAAmB,CACjC,GAA4B;IAE5B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QAC/C,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACtB,OAAO,GAAG,CAAC;QACb,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,cAAc,CAC5B,GAAW,EACX,GAAY,EACZ,cAAuB,EACvB,WAAoB,EACpB,MAAe;IAEf,MAAM,MAAM,GAAwB,EAAE,CAAC;IACvC,MAAM,IAAI,GAAG,GAAG,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3D,IAAI,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QACnB,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,0BAA0B,IAAI,gEAAgE;aACxG,CAAC,CAAC;QACL,CAAC;IACH,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,0BAA0B,IAAI,mCAAmC,IAAI,CAAC,SAAS,CACtF,GAAG,CACJ,KAAK,OAAO,GAAG,IAAI;SACrB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAC3B,UAAkB,EAClB,UAAmB;IAEnB,IAAI,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QACtC,IACE,UAAU,KAAK,OAAO;YACtB,UAAU,KAAK,UAAU;YACzB,UAAU,KAAK,UAAU,EACzB,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAS,QAAQ,CAAC,aAA4B,EAAE,KAAa;IAC3D,MAAM,aAAa,GAAG,GAAG,KAAK,UAAyC,CAAC;IACxE,MAAM,QAAQ,GACZ,aAAa,CAAC,UAAU,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAChE,OAAO,CAAC,CAAC,CACP,aAAa,CAAC,aAAa,CAAC;QAC5B,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CAC/C,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAC/B,CACF,CAAC;AACJ,CAAC;AAED,SAAgB,0BAA0B,CACxC,aAA4B,EAC5B,WAAmB,EACnB,MAA2B;IAE3B,IAAI,YAAE,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;QACjD,KAAK,MAAM,WAAW,IAAI,aAAa,CAAC,YAAY,EAAE,CAAC;YACrD,IAAI,CAAC;gBACH,IAAA,aAAK,EAAC,WAAW,CAAC,CAAC;YACrB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,mDAAmD,CACpD,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC;oBACV,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,sBAAsB,WAAW,OAAO,WAAW,IAAI;iBACjE,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EACL,uEAAuE;SAC1E,CAAC,CAAC;IACL,CAAC;IAED,MAAM,eAAe,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACvD,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,+BAA+B,KAAK,+CAA+C,KAAK,EAAE;aACpG,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,8EAA8E;SACxF,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAgB,4BAA4B,CAC1C,aAA4B,EAC5B,WAAmB,EACnB,MAA2B;IAE3B,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,uDAAuD;SACjE,CAAC,CAAC;IACL,CAAC;IAED,IAAI,YAAE,CAAC,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;QACjD,KAAK,MAAM,WAAW,IAAI,aAAa,CAAC,YAAY,EAAE,CAAC;YACrD,IAAI,CAAC;gBACH,IAAA,iBAAO,EAAC,WAAW,CAAC,CAAC;YACvB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,2DAA2D,CAC5D,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC;oBACV,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,6BAA6B,WAAW,OAAO,WAAW,IAAI;iBACxE,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,iEAAiE;SAC3E,CAAC,CAAC;IACL,CAAC;IAED,MAAM,eAAe,GAAG,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACvD,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,qBAAqB;gBAC5B,OAAO,EAAE,iCAAiC,KAAK,6BAA6B,KAAK,gBAAgB;aAClG,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC9C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,sFAAsF;SAChG,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport jsonata from 'jsonata';\nimport { logger } from '../../logger';\nimport type { RegexManagerTemplates } from '../../modules/manager/custom/regex/types';\nimport type { CustomManager } from '../../modules/manager/custom/types';\nimport { regEx } from '../../util/regex';\nimport type { ValidationMessage } from '../types';\n\nexport function getParentName(parentPath: string | undefined): string {\n  return parentPath\n    ? parentPath\n        .replace(regEx(/\\.?encrypted$/), '')\n        .replace(regEx(/\\[\\d+\\]$/), '')\n        .split('.')\n        .pop()!\n    : '.';\n}\n\nexport function validatePlainObject(\n  val: Record<string, unknown>,\n): true | string {\n  for (const [key, value] of Object.entries(val)) {\n    if (!is.string(value)) {\n      return key;\n    }\n  }\n  return true;\n}\n\nexport function validateNumber(\n  key: string,\n  val: unknown,\n  allowsNegative: boolean,\n  currentPath?: string,\n  subKey?: string,\n): ValidationMessage[] {\n  const errors: ValidationMessage[] = [];\n  const path = `${currentPath}${subKey ? '.' + subKey : ''}`;\n  if (is.number(val)) {\n    if (val < 0 && !allowsNegative) {\n      errors.push({\n        topic: 'Configuration Error',\n        message: `Configuration option \\`${path}\\` should be a positive integer. Found negative value instead.`,\n      });\n    }\n  } else {\n    errors.push({\n      topic: 'Configuration Error',\n      message: `Configuration option \\`${path}\\` should be an integer. Found: ${JSON.stringify(\n        val,\n      )} (${typeof val}).`,\n    });\n  }\n\n  return errors;\n}\n\n/**  An option is a false global if it has the same name as a global only option\n *   but is actually just the field of a non global option or field an children of the non global option\n *   eg. token: it's global option used as the bot's token as well and\n *   also it can be the token used for a platform inside the hostRules configuration\n */\nexport function isFalseGlobal(\n  optionName: string,\n  parentPath?: string,\n): boolean {\n  if (parentPath?.includes('hostRules')) {\n    if (\n      optionName === 'token' ||\n      optionName === 'username' ||\n      optionName === 'password'\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction hasField(customManager: CustomManager, field: string): boolean {\n  const templateField = `${field}Template` as keyof RegexManagerTemplates;\n  const fieldStr =\n    customManager.customType === 'regex' ? `(?<${field}>` : field;\n  return !!(\n    customManager[templateField] ??\n    customManager.matchStrings?.some((matchString) =>\n      matchString.includes(fieldStr),\n    )\n  );\n}\n\nexport function validateRegexManagerFields(\n  customManager: CustomManager,\n  currentPath: string,\n  errors: ValidationMessage[],\n): void {\n  if (is.nonEmptyArray(customManager.matchStrings)) {\n    for (const matchString of customManager.matchStrings) {\n      try {\n        regEx(matchString);\n      } catch (err) {\n        logger.debug(\n          { err },\n          'customManager.matchStrings regEx validation error',\n        );\n        errors.push({\n          topic: 'Configuration Error',\n          message: `Invalid regExp for ${currentPath}: \\`${matchString}\\``,\n        });\n      }\n    }\n  } else {\n    errors.push({\n      topic: 'Configuration Error',\n      message:\n        'Each Custom Manager `matchStrings` array must have at least one item.',\n    });\n  }\n\n  const mandatoryFields = ['currentValue', 'datasource'];\n  for (const field of mandatoryFields) {\n    if (!hasField(customManager, field)) {\n      errors.push({\n        topic: 'Configuration Error',\n        message: `Regex Managers must contain ${field}Template configuration or regex group named ${field}`,\n      });\n    }\n  }\n\n  const nameFields = ['depName', 'packageName'];\n  if (!nameFields.some((field) => hasField(customManager, field))) {\n    errors.push({\n      topic: 'Configuration Error',\n      message: `Regex Managers must contain depName or packageName regex groups or templates`,\n    });\n  }\n}\n\nexport function validateJSONataManagerFields(\n  customManager: CustomManager,\n  currentPath: string,\n  errors: ValidationMessage[],\n): void {\n  if (!is.nonEmptyString(customManager.fileFormat)) {\n    errors.push({\n      topic: 'Configuration Error',\n      message: 'Each JSONata manager must contain a fileFormat field.',\n    });\n  }\n\n  if (is.nonEmptyArray(customManager.matchStrings)) {\n    for (const matchString of customManager.matchStrings) {\n      try {\n        jsonata(matchString);\n      } catch (err) {\n        logger.debug(\n          { err },\n          'customManager.matchStrings JSONata query validation error',\n        );\n        errors.push({\n          topic: 'Configuration Error',\n          message: `Invalid JSONata query for ${currentPath}: \\`${matchString}\\``,\n        });\n      }\n    }\n  } else {\n    errors.push({\n      topic: 'Configuration Error',\n      message: `Each Custom Manager must contain a non-empty matchStrings array`,\n    });\n  }\n\n  const mandatoryFields = ['currentValue', 'datasource'];\n  for (const field of mandatoryFields) {\n    if (!hasField(customManager, field)) {\n      errors.push({\n        topic: 'Configuration Error',\n        message: `JSONata Managers must contain ${field}Template configuration or ${field} in the query `,\n      });\n    }\n  }\n\n  const nameFields = ['depName', 'packageName'];\n  if (!nameFields.some((field) => hasField(customManager, field))) {\n    errors.push({\n      topic: 'Configuration Error',\n      message: `JSONata Managers must contain depName or packageName in the query or their templates`,\n    });\n  }\n}\n"]}