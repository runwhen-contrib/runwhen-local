{"version":3,"file":"massage.js","sourceRoot":"","sources":["../../lib/config/massage.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { clone } from '../util/clone';\nimport { getOptions } from './options';\nimport type { PackageRule, RenovateConfig, UpdateType } from './types';\n\nconst options = getOptions();\n\nlet allowedStrings: string[];\n\n// Returns a massaged config\nexport function massageConfig(config: RenovateConfig): RenovateConfig {\n  if (!allowedStrings) {\n    allowedStrings = [];\n    options.forEach((option) => {\n      if (option.allowString) {\n        allowedStrings.push(option.name);\n      }\n    });\n  }\n  const massagedConfig = clone(config);\n  for (const [key, val] of Object.entries(config)) {\n    if (allowedStrings.includes(key) && is.string(val)) {\n      massagedConfig[key] = [val];\n    } else if (is.array(val)) {\n      massagedConfig[key] = [];\n      val.forEach((item) => {\n        if (is.object(item)) {\n          (massagedConfig[key] as RenovateConfig[]).push(\n            massageConfig(item as RenovateConfig),\n          );\n        } else {\n          (massagedConfig[key] as unknown[]).push(item);\n        }\n      });\n    } else if (is.object(val) && key !== 'encrypted') {\n      massagedConfig[key] = massageConfig(val as RenovateConfig);\n    }\n  }\n  if (is.nonEmptyArray(massagedConfig.packageRules)) {\n    let newRules: PackageRule[] = [];\n    const updateTypes: UpdateType[] = [\n      'major',\n      'minor',\n      'patch',\n      'pin',\n      'digest',\n      'rollback',\n    ];\n    for (const rule of massagedConfig.packageRules) {\n      newRules.push(rule);\n      for (const [key, val] of Object.entries(rule) as [\n        UpdateType,\n        PackageRule,\n      ][]) {\n        if (updateTypes.includes(key)) {\n          let newRule = clone(rule);\n          Object.keys(newRule).forEach((newKey) => {\n            if (!(newKey.startsWith(`match`) || newKey.startsWith('exclude'))) {\n              delete newRule[newKey];\n            }\n          });\n          newRule.matchUpdateTypes = rule.matchUpdateTypes ?? [];\n          newRule.matchUpdateTypes.push(key);\n          newRule = { ...newRule, ...val };\n          newRules.push(newRule);\n        }\n      }\n    }\n    for (const rule of newRules) {\n      updateTypes.forEach((updateType) => {\n        delete rule[updateType];\n      });\n    }\n    newRules = newRules.filter((rule) => {\n      if (\n        Object.keys(rule).every(\n          (key) => key.startsWith('match') || key.startsWith('exclude'),\n        )\n      ) {\n        // Exclude rules which contain only match or exclude options\n        return false;\n      }\n      return true;\n    });\n    massagedConfig.packageRules = newRules;\n  }\n  return massagedConfig;\n}\n"]}