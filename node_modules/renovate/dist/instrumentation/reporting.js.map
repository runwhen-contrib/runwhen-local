{"version":3,"file":"reporting.js","sourceRoot":"","sources":["../../lib/instrumentation/reporting.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PutObjectCommandInput } from '@aws-sdk/client-s3';\nimport { PutObjectCommand } from '@aws-sdk/client-s3';\nimport is from '@sindresorhus/is';\nimport type { RenovateConfig } from '../config/types';\nimport { getProblems, logger } from '../logger';\nimport type { BranchCache } from '../util/cache/repository/types';\nimport { writeSystemFile } from '../util/fs';\nimport { getS3Client, parseS3Url } from '../util/s3';\nimport type { ExtractResult } from '../workers/repository/process/extract-update';\nimport type { Report } from './types';\n\nconst report: Report = {\n  problems: [],\n  repositories: {},\n};\n\n/**\n * Reset the report\n * Should only be used for testing\n */\nexport function resetReport(): void {\n  report.problems = [];\n  report.repositories = {};\n}\n\nexport function addBranchStats(\n  config: RenovateConfig,\n  branchesInformation: Partial<BranchCache>[],\n): void {\n  if (is.nullOrUndefined(config.reportType)) {\n    return;\n  }\n\n  coerceRepo(config.repository!);\n  report.repositories[config.repository!].branches = branchesInformation;\n}\n\nexport function addExtractionStats(\n  config: RenovateConfig,\n  extractResult: ExtractResult,\n): void {\n  if (is.nullOrUndefined(config.reportType)) {\n    return;\n  }\n\n  coerceRepo(config.repository!);\n  report.repositories[config.repository!].packageFiles =\n    extractResult.packageFiles;\n}\n\nexport function addLibYears(\n  config: RenovateConfig,\n  managerLibYears: Record<string, number>,\n  totalLibYears: number,\n  totalDepsCount: number,\n  outdatedDepsCount: number,\n): void {\n  if (is.nullOrUndefined(config.reportType)) {\n    return;\n  }\n\n  coerceRepo(config.repository!);\n  report.repositories[config.repository!].libYears = {\n    managerLibYears,\n    totalLibYears,\n    totalDepsCount,\n    outdatedDepsCount,\n  };\n}\n\nexport function finalizeReport(): void {\n  const allProblems = structuredClone(getProblems());\n  for (const problem of allProblems) {\n    const repository = problem.repository;\n    delete problem.repository;\n\n    // if the problem can be connected to a repository add it their else add to the root list\n    if (repository) {\n      coerceRepo(repository);\n      report.repositories[repository].problems.push(problem);\n    } else {\n      report.problems.push(problem);\n    }\n  }\n}\n\nexport async function exportStats(config: RenovateConfig): Promise<void> {\n  try {\n    if (is.nullOrUndefined(config.reportType)) {\n      return;\n    }\n\n    if (config.reportType === 'logging') {\n      logger.info({ report }, 'Printing report');\n      return;\n    }\n\n    if (config.reportType === 'file') {\n      const path = config.reportPath!;\n      await writeSystemFile(path, JSON.stringify(report));\n      logger.debug({ path }, 'Writing report');\n      return;\n    }\n\n    if (config.reportType === 's3') {\n      const s3Url = parseS3Url(config.reportPath!);\n      if (is.nullOrUndefined(s3Url)) {\n        logger.warn(\n          { reportPath: config.reportPath },\n          'Failed to parse s3 URL',\n        );\n        return;\n      }\n\n      const s3Params: PutObjectCommandInput = {\n        Bucket: s3Url.Bucket,\n        Key: s3Url.Key,\n        Body: JSON.stringify(report),\n        ContentType: 'application/json',\n      };\n\n      const client = getS3Client(config.s3Endpoint, config.s3PathStyle);\n      const command = new PutObjectCommand(s3Params);\n      await client.send(command);\n    }\n  } catch (err) {\n    logger.warn({ err }, 'Reporting.exportStats() - failure');\n  }\n}\n\nexport function getReport(): Report {\n  return structuredClone(report);\n}\n\nfunction coerceRepo(repository: string): void {\n  if (!is.undefined(report.repositories[repository])) {\n    return;\n  }\n\n  report.repositories[repository] = {\n    problems: [],\n    branches: [],\n    packageFiles: {},\n  };\n}\n"]}