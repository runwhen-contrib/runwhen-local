{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/instrumentation/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClientRequest } from 'node:http';\nimport type {\n  Context,\n  Span,\n  SpanOptions,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport * as api from '@opentelemetry/api';\nimport { ProxyTracerProvider, SpanStatusCode } from '@opentelemetry/api';\nimport { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport type { Instrumentation } from '@opentelemetry/instrumentation';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { BunyanInstrumentation } from '@opentelemetry/instrumentation-bunyan';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport {\n  awsBeanstalkDetector,\n  awsEc2Detector,\n  awsEcsDetector,\n  awsEksDetector,\n  awsLambdaDetector,\n} from '@opentelemetry/resource-detector-aws';\nimport {\n  azureAppServiceDetector,\n  azureFunctionsDetector,\n  azureVmDetector,\n} from '@opentelemetry/resource-detector-azure';\nimport { gcpDetector } from '@opentelemetry/resource-detector-gcp';\nimport { gitHubDetector } from '@opentelemetry/resource-detector-github';\nimport {\n  detectResources,\n  envDetector,\n  resourceFromAttributes,\n} from '@opentelemetry/resources';\nimport {\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n  type SpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { pkg } from '../expose.cjs';\nimport {\n  isTraceDebuggingEnabled,\n  isTraceSendingEnabled,\n  isTracingEnabled,\n  massageThrowable,\n} from './utils';\n\nlet instrumentations: Instrumentation[] = [];\n\ninit();\n\nexport function init(): void {\n  if (!isTracingEnabled()) {\n    return;\n  }\n\n  const spanProcessors: SpanProcessor[] = [];\n  // add processors\n  if (isTraceDebuggingEnabled()) {\n    spanProcessors.push(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n  }\n\n  // OTEL specification environment variable\n  if (isTraceSendingEnabled()) {\n    const exporter = new OTLPTraceExporter();\n    spanProcessors.push(new BatchSpanProcessor(exporter));\n  }\n\n  const baseResource = resourceFromAttributes({\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#semantic-attributes-with-sdk-provided-default-value\n    [ATTR_SERVICE_NAME]: process.env.OTEL_SERVICE_NAME ?? 'renovate',\n    // https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n    // https://github.com/open-telemetry/opentelemetry-js/blob/e9d3c71918635d490b6a9ac9f8259265b38394d0/semantic-conventions/src/experimental_attributes.ts#L7688\n    ['service.namespace']:\n      process.env.OTEL_SERVICE_NAMESPACE ?? 'renovatebot.com',\n    [ATTR_SERVICE_VERSION]: process.env.OTEL_SERVICE_VERSION ?? pkg.version,\n  });\n\n  const detectedResource = detectResources({\n    detectors: [\n      awsBeanstalkDetector,\n      awsEc2Detector,\n      awsEcsDetector,\n      awsEksDetector,\n      awsLambdaDetector,\n      azureAppServiceDetector,\n      azureFunctionsDetector,\n      azureVmDetector,\n      gcpDetector,\n      gitHubDetector,\n      envDetector,\n    ],\n  });\n\n  const traceProvider = new NodeTracerProvider({\n    resource: baseResource.merge(detectedResource),\n    spanProcessors,\n  });\n\n  const contextManager = new AsyncLocalStorageContextManager();\n  traceProvider.register({\n    contextManager,\n  });\n\n  instrumentations = [\n    new HttpInstrumentation({\n      /* v8 ignore start -- not easily testable */\n      applyCustomAttributesOnSpan: (span, request, response) => {\n        // ignore 404 errors when the branch protection of Github could not be found. This is expected if no rules are configured\n        if (\n          request instanceof ClientRequest &&\n          request.host === `api.github.com` &&\n          request.path.endsWith(`/protection`) &&\n          response.statusCode === 404\n        ) {\n          span.setStatus({ code: SpanStatusCode.OK });\n        }\n      },\n      /* v8 ignore stop */\n    }),\n    new BunyanInstrumentation(),\n  ];\n  registerInstrumentations({\n    instrumentations,\n  });\n}\n\n/* v8 ignore start -- not easily testable */\n// https://github.com/open-telemetry/opentelemetry-js-api/issues/34\nexport async function shutdown(): Promise<void> {\n  const traceProvider = getTracerProvider();\n  if (traceProvider instanceof NodeTracerProvider) {\n    await traceProvider.shutdown();\n  } else if (traceProvider instanceof ProxyTracerProvider) {\n    const delegateProvider = traceProvider.getDelegate();\n    if (delegateProvider instanceof NodeTracerProvider) {\n      await delegateProvider.shutdown();\n    }\n  }\n}\n/* v8 ignore stop */\n\nexport function disableInstrumentations(): void {\n  for (const instrumentation of instrumentations) {\n    instrumentation.disable();\n  }\n}\n\nexport function getTracerProvider(): TracerProvider {\n  return api.trace.getTracerProvider();\n}\n\nfunction getTracer(): Tracer {\n  return getTracerProvider().getTracer('renovate');\n}\n\nexport function instrument<F extends () => ReturnType<F>>(\n  name: string,\n  fn: F,\n): ReturnType<F>;\nexport function instrument<F extends () => ReturnType<F>>(\n  name: string,\n  fn: F,\n  options: SpanOptions,\n): ReturnType<F>;\nexport function instrument<F extends () => ReturnType<F>>(\n  name: string,\n  fn: F,\n  options: SpanOptions = {},\n  context: Context = api.context.active(),\n): ReturnType<F> {\n  return getTracer().startActiveSpan(name, options, context, (span: Span) => {\n    try {\n      const ret = fn();\n      if (ret instanceof Promise) {\n        return ret\n          .catch((e) => {\n            span.recordException(e);\n            span.setStatus({\n              code: SpanStatusCode.ERROR,\n              message: massageThrowable(e),\n            });\n            throw e;\n          })\n          .finally(() => span.end()) as ReturnType<F>;\n      }\n      span.end();\n      return ret;\n    } catch (e) {\n      span.recordException(e);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: massageThrowable(e),\n      });\n      span.end();\n      throw e;\n    }\n  });\n}\n"]}