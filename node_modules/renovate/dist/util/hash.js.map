{"version":3,"file":"hash.js","sourceRoot":"","sources":["../../lib/util/hash.ts"],"names":[],"mappings":";;AASA,oBAOC;AAED,4BAEC;AAED,gCAOC;;AA7BD,4DAA4B;AAC5B,8CAA2C;AAQ3C,SAAgB,IAAI,CAClB,IAAqB,EACrB,YAA2B,QAAQ;IAEnC,MAAM,IAAI,GAAG,gBAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC;AAED,SAAgB,QAAQ,CAAC,KAAa;IACpC,OAAO,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,UAAU,CAC9B,WAAkC,EAClC,YAA2B,QAAQ;IAEnC,MAAM,IAAI,GAAG,gBAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC1C,MAAM,IAAA,mBAAQ,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAClC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["import crypto from 'crypto';\nimport { pipeline } from 'stream/promises';\nimport type { LiteralUnion } from 'type-fest';\n\nexport type AlgorithmName = LiteralUnion<\n  'sha1' | 'sha224' | 'sha256' | 'sha384' | 'sha512',\n  string\n>;\n\nexport function hash(\n  data: string | Buffer,\n  algorithm: AlgorithmName = 'sha512',\n): string {\n  const hash = crypto.createHash(algorithm);\n  hash.update(data);\n  return hash.digest('hex');\n}\n\nexport function toSha256(input: string): string {\n  return hash(input, 'sha256');\n}\n\nexport async function hashStream(\n  inputStream: NodeJS.ReadableStream,\n  algorithm: AlgorithmName = 'sha512',\n): Promise<string> {\n  const hash = crypto.createHash(algorithm);\n  await pipeline(inputStream, hash);\n  return hash.digest('hex');\n}\n"]}