{"version":3,"file":"minimatch.js","sourceRoot":"","sources":["../../lib/util/minimatch.ts"],"names":[],"mappings":";;AAKA,8BAmBC;AAED,0CAmBC;AA5CD,yCAAsC;AAEtC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAqB,CAAC;AAE3C,SAAgB,SAAS,CACvB,OAAe,EACf,OAA0B,EAC1B,QAAQ,GAAG,IAAI;IAEf,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;IAExE,IAAI,QAAQ,EAAE,CAAC;QACb,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,YAAY,EAAE,CAAC;YACjB,OAAO,YAAY,CAAC;QACtB,CAAC;IACH,CAAC;IAED,MAAM,QAAQ,GAAG,IAAI,qBAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACjD,IAAI,QAAQ,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3B,CAAC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAgB,eAAe,CAC7B,OAAe,EACf,OAA0B,EAC1B,QAAQ,GAAG,IAAI;IAEf,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;IAExE,IAAI,QAAQ,EAAE,CAAC;QACb,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,YAAY,EAAE,CAAC;YACjB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,MAAM,QAAQ,GAAG,IAAI,qBAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACjD,IAAI,QAAQ,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3B,CAAC;IACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAChD,CAAC","sourcesContent":["import type { MinimatchOptions } from 'minimatch';\nimport { Minimatch } from 'minimatch';\n\nconst cache = new Map<string, Minimatch>();\n\nexport function minimatch(\n  pattern: string,\n  options?: MinimatchOptions,\n  useCache = true,\n): Minimatch {\n  const key = options ? `${pattern}:${JSON.stringify(options)}` : pattern;\n\n  if (useCache) {\n    const cachedResult = cache.get(key);\n    if (cachedResult) {\n      return cachedResult;\n    }\n  }\n\n  const instance = new Minimatch(pattern, options);\n  if (useCache) {\n    cache.set(key, instance);\n  }\n  return instance;\n}\n\nexport function minimatchFilter(\n  pattern: string,\n  options?: MinimatchOptions,\n  useCache = true,\n): (fileName: string) => boolean {\n  const key = options ? `${pattern}:${JSON.stringify(options)}` : pattern;\n\n  if (useCache) {\n    const cachedResult = cache.get(key);\n    if (cachedResult) {\n      return (fileName) => cachedResult.match(fileName);\n    }\n  }\n\n  const instance = new Minimatch(pattern, options);\n  if (useCache) {\n    cache.set(key, instance);\n  }\n  return (fileName) => instance.match(fileName);\n}\n"]}