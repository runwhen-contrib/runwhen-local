{"version":3,"file":"mutex.js","sourceRoot":"","sources":["../../lib/util/mutex.ts"],"names":[],"mappings":";;AAKA,4BAQC;AAED,kCAKC;AApBD,6CAAsE;AAEtE,MAAM,iBAAiB,GAAG,SAAS,CAAC;AACpC,MAAM,OAAO,GAAmD,EAAE,CAAC;AAEnE,SAAgB,QAAQ,CACtB,GAAW,EACX,YAAoB,iBAAiB;IAErC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC1B,qEAAqE;IACrE,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,IAAA,yBAAW,EAAC,IAAI,mBAAK,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACpE,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AAED,SAAgB,WAAW,CACzB,GAAW,EACX,YAAoB,iBAAiB;IAErC,OAAO,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAC5C,CAAC","sourcesContent":["import { Mutex, type MutexInterface, withTimeout } from 'async-mutex';\n\nconst DEFAULT_NAMESPACE = 'default';\nconst mutexes: Record<string, Record<string, MutexInterface>> = {};\n\nexport function getMutex(\n  key: string,\n  namespace: string = DEFAULT_NAMESPACE,\n): MutexInterface {\n  mutexes[namespace] ??= {};\n  // create a new mutex if it doesn't exist with a timeout of 2 minutes\n  mutexes[namespace][key] ??= withTimeout(new Mutex(), 1000 * 60 * 2);\n  return mutexes[namespace][key];\n}\n\nexport function acquireLock(\n  key: string,\n  namespace: string = DEFAULT_NAMESPACE,\n): Promise<MutexInterface.Releaser> {\n  return getMutex(key, namespace).acquire();\n}\n"]}