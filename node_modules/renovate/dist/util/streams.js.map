{"version":3,"file":"streams.js","sourceRoot":"","sources":["../../lib/util/streams.ts"],"names":[],"mappings":";;AAEA,wCAWC;AAbD,6CAAuC;AAEhC,KAAK,UAAU,cAAc,CAClC,MAA6B;IAE7B,MAAM,QAAQ,GAAG,sBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,MAAM,GAAiB,EAAE,CAAC;IAChC,MAAM,CAAC,GAAG,MAAM,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACtD,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChE,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1E,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { Readable } from 'node:stream';\n\nexport async function streamToString(\n  stream: NodeJS.ReadableStream,\n): Promise<string> {\n  const readable = Readable.from(stream);\n  const chunks: Uint8Array[] = [];\n  const p = await new Promise<string>((resolve, reject) => {\n    readable.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\n    readable.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));\n    readable.on('error', (err) => reject(err));\n  });\n  return p;\n}\n"]}