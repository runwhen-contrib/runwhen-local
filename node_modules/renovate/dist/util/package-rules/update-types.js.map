{"version":3,"file":"update-types.js","sourceRoot":"","sources":["../../../lib/util/package-rules/update-types.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,kDAA0D;AAC1D,iCAAiC;AAEjC,MAAa,kBAAmB,SAAQ,cAAO;IACpC,OAAO,CACd,EAAE,UAAU,EAAE,MAAM,EAA0B,EAC9C,EAAE,gBAAgB,EAAe;QAEjC,IAAI,YAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC;QAC7B,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QACD,OAAO,IAAA,sCAAuB,EAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IAC5D,CAAC;CACF;AAjBD,gDAiBC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { anyMatchRegexOrGlobList } from '../string-match';\nimport { Matcher } from './base';\n\nexport class UpdateTypesMatcher extends Matcher {\n  override matches(\n    { updateType, isBump }: PackageRuleInputConfig,\n    { matchUpdateTypes }: PackageRule,\n  ): boolean | null {\n    if (is.undefined(matchUpdateTypes)) {\n      return null;\n    }\n    if (!updateType) {\n      return false;\n    }\n    const toMatch = [updateType];\n    if (isBump) {\n      toMatch.push('bump');\n    }\n    return anyMatchRegexOrGlobList(toMatch, matchUpdateTypes);\n  }\n}\n"]}