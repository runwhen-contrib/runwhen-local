{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/package-rules/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport slugify from 'slugify';\nimport { mergeChildConfig } from '../../config';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport type { StageName } from '../../types/skip-reason';\nimport { compile } from '../template';\nimport matchers from './matchers';\n\nasync function matchesRule(\n  inputConfig: PackageRuleInputConfig,\n  packageRule: PackageRule,\n): Promise<boolean> {\n  for (const matcher of matchers) {\n    const isMatch = await matcher.matches(inputConfig, packageRule);\n\n    // no rules are defined\n    if (is.nullOrUndefined(isMatch)) {\n      continue;\n    }\n\n    if (!is.truthy(isMatch)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function applyPackageRules<T extends PackageRuleInputConfig>(\n  inputConfig: T,\n  stageName?: StageName,\n): Promise<T> {\n  let config = { ...inputConfig };\n  const packageRules = config.packageRules ?? [];\n  logger.trace(\n    { dependency: config.depName, packageRules },\n    `Checking against ${packageRules.length} packageRules`,\n  );\n  for (const packageRule of packageRules) {\n    // This rule is considered matched if there was at least one positive match and no negative matches\n    if (await matchesRule(config, packageRule)) {\n      // Package rule config overrides any existing config\n      const toApply = removeMatchers({ ...packageRule });\n      if (config.groupSlug && packageRule.groupName && !packageRule.groupSlug) {\n        // Need to apply groupSlug otherwise the existing one will take precedence\n        toApply.groupSlug = slugify(packageRule.groupName, {\n          lower: true,\n        });\n      }\n      if (toApply.enabled === false && config.enabled !== false) {\n        config.skipReason = 'package-rules';\n        if (stageName) {\n          config.skipStage = stageName;\n        }\n      }\n      if (toApply.enabled === true && config.enabled === false) {\n        delete config.skipReason;\n        delete config.skipStage;\n      }\n      if (\n        is.string(toApply.overrideDatasource) &&\n        toApply.overrideDatasource !== config.datasource\n      ) {\n        logger.debug(\n          `Overriding datasource from ${config.datasource} to ${toApply.overrideDatasource} for ${config.depName}`,\n        );\n        config.datasource = toApply.overrideDatasource;\n      }\n      if (\n        is.string(toApply.overrideDepName) &&\n        toApply.overrideDepName !== config.depName\n      ) {\n        logger.debug(\n          `Overriding depName from ${config.depName} to ${toApply.overrideDepName}`,\n        );\n        config.depName = compile(toApply.overrideDepName, config);\n      }\n      if (\n        is.string(toApply.overridePackageName) &&\n        toApply.overridePackageName !== config.packageName\n      ) {\n        logger.debug(\n          `Overriding packageName from ${config.packageName} to ${toApply.overridePackageName} for ${config.depName}`,\n        );\n        config.packageName = compile(toApply.overridePackageName, config);\n      }\n      delete toApply.overrideDatasource;\n      delete toApply.overrideDepName;\n      delete toApply.overridePackageName;\n      config = mergeChildConfig(config, toApply);\n    }\n  }\n  return config;\n}\n\nfunction removeMatchers(\n  packageRule: PackageRule & PackageRuleInputConfig,\n): Record<string, unknown> {\n  for (const key of Object.keys(packageRule)) {\n    if (key.startsWith('match') || key.startsWith('exclude')) {\n      delete packageRule[key];\n    }\n  }\n\n  return packageRule;\n}\n"]}