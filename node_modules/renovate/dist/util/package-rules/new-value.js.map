{"version":3,"file":"new-value.js","sourceRoot":"","sources":["../../../lib/util/package-rules/new-value.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,kDAA0D;AAC1D,iCAAiC;AAEjC,MAAa,eAAgB,SAAQ,cAAO;IACjC,OAAO,CACd,EAAE,QAAQ,EAA0B,EACpC,EAAE,aAAa,EAAe;QAE9B,IAAI,YAAE,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,iBAAiB,GAAG,IAAA,sCAAuB,EAAC,aAAa,CAAC,CAAC;QAEjE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAhBD,0CAgBC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageRule, PackageRuleInputConfig } from '../../config/types';\nimport { getRegexOrGlobPredicate } from '../string-match';\nimport { Matcher } from './base';\n\nexport class NewValueMatcher extends Matcher {\n  override matches(\n    { newValue }: PackageRuleInputConfig,\n    { matchNewValue }: PackageRule,\n  ): boolean | null {\n    if (is.undefined(matchNewValue)) {\n      return null;\n    }\n    const matchNewValuePred = getRegexOrGlobPredicate(matchNewValue);\n\n    if (!newValue) {\n      return false;\n    }\n\n    return matchNewValuePred(newValue);\n  }\n}\n"]}