{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/util/github/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * REST responses\n */\nexport interface GithubRestRelease {\n  id: number;\n  tag_name: string;\n  published_at: string;\n  prerelease: boolean;\n  draft?: boolean;\n  assets: GithubRestAsset[];\n\n  html_url: string;\n  name: string;\n  body: string;\n}\n\nexport interface GithubRestAsset {\n  name: string;\n  url: string;\n  browser_download_url: string;\n  size: number;\n}\n\nexport interface GithubRestTag {\n  name: string;\n}\n\n/**\n * Release asset\n */\nexport interface GithubDigestFile {\n  assetName: string;\n  currentVersion: string;\n  currentDigest: string;\n  digestedFileName?: string;\n}\n\n/**\n * Parameters used for GraphQL queries with pagination\n */\nexport interface GithubGraphqlRepoParams {\n  owner: string;\n  name: string;\n  cursor: string | null;\n  count: number;\n}\n\n/**\n * Common shape for GraphQL responses for repository items\n */\nexport interface GithubGraphqlRepoResponse<T = unknown> {\n  repository: {\n    payload: {\n      nodes: T[];\n      pageInfo: {\n        hasNextPage: boolean;\n        endCursor: string;\n      };\n    };\n  };\n}\n\n/**\n * GraphQL shape for releases\n */\nexport interface GithubGraphqlRelease {\n  version: string;\n  releaseTimestamp: string;\n  isDraft: boolean;\n  isPrerelease: boolean;\n  url: string;\n  id: number;\n  name: string;\n  description: string;\n}\n\n/**\n * GraphQL shape for tags\n */\nexport interface GithubGraphqlTag {\n  version: string;\n  target:\n    | {\n        type: 'Commit';\n        hash: string;\n        releaseTimestamp: string;\n      }\n    | {\n        type: 'Tag';\n        target: {\n          hash: string;\n        };\n        tagger: {\n          releaseTimestamp: string;\n        };\n      };\n}\n\n/**\n * The structures being stored with long-term caching\n */\nexport interface GithubCachedItem {\n  version: string;\n  releaseTimestamp: string;\n}\n\nexport interface GithubCachedRelease extends GithubCachedItem {\n  isStable?: boolean;\n  url: string;\n  id: number;\n  name: string;\n  description: string;\n}\n\nexport interface GithubCachedTag extends GithubCachedItem {\n  hash: string;\n  releaseTimestamp: string;\n}\n\n/**\n * The common structure of datasource cache\n */\nexport interface GithubDatasourceCache<CachedItem extends GithubCachedItem> {\n  items: Record<string, CachedItem>;\n\n  /** Used for determining hard reset time */\n  createdAt: string;\n\n  /** Used for determining soft reset time */\n  updatedAt: string;\n\n  /** The most fresh `releaseTimestamp` of all items */\n  lastReleasedAt?: string;\n}\n\n/**\n * The configuration for datasource cache\n */\nexport interface CacheOptions {\n  /**\n   * How many minutes to wait until next cache update\n   */\n  updateAfterMinutes?: number;\n\n  /**\n   * If package was released recently, we assume higher\n   * probability of having one more release soon.\n   *\n   * In this case, we use `updateAfterMinutesFresh` option.\n   */\n  packageFreshDays?: number;\n\n  /**\n   * If package was released recently, we assume higher\n   * probability of having one more release soon.\n   *\n   * In this case, this option will be used\n   * instead of `updateAfterMinutes`.\n   *\n   * Fresh period is configured via `freshDays` option.\n   */\n  updateAfterMinutesFresh?: number;\n\n  /**\n   * How many days to wait until full cache reset (for single package).\n   */\n  resetAfterDays?: number;\n\n  /**\n   * Delays cache reset by some random amount of minutes,\n   * in order to stabilize load during mass cache reset.\n   */\n  resetDeltaMinutes?: number;\n\n  /**\n   * How many days ago the package should be published to be considered as stable.\n   * Since this period is expired, it won't be refreshed via soft updates anymore.\n   */\n  unstableDays?: number;\n\n  /**\n   * How many items per page to obtain per page during initial fetch (i.e. pre-fetch)\n   */\n  itemsPerPrefetchPage?: number;\n\n  /**\n   * How many pages to fetch (at most) during the initial fetch (i.e. pre-fetch)\n   */\n  maxPrefetchPages?: number;\n\n  /**\n   * How many items per page to obtain per page during the soft update\n   */\n  itemsPerUpdatePage?: number;\n\n  /**\n   * How many pages to fetch (at most) during the soft update\n   */\n  maxUpdatePages?: number;\n}\n\n/**\n * This type is used to handle the following edge-case:\n *\n *   1. Package is being released on both NPM and GitHub\n *   2. Renovate know there is new release in NPM\n *   3. Renovate didn't update it's cache for GitHub datasource\n *   4. We can't obtain release notes from GitHub because of this\n *\n * By providing this additional structure, we can soft reset cache\n * once we know it's released for NPM or any other package manager.\n */\nexport interface ChangelogRelease {\n  date: string | Date;\n  version: string;\n}\n"]}