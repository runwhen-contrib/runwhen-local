{"version":3,"file":"datasource-fetcher.js","sourceRoot":"","sources":["../../../../lib/util/github/graphql/datasource-fetcher.ts"],"names":[],"mappings":"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","sourcesContent":["import AggregateError from 'aggregate-error';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport * as memCache from '../../cache/memory';\nimport * as packageCache from '../../cache/package';\nimport type { PackageCacheNamespace } from '../../cache/package/types';\nimport type {\n  GithubGraphqlResponse,\n  GithubHttp,\n  GithubHttpOptions,\n} from '../../http/github';\nimport type { HttpResponse } from '../../http/types';\nimport { getApiBaseUrl } from '../url';\nimport { GithubGraphqlMemoryCacheStrategy } from './cache-strategies/memory-cache-strategy';\nimport { GithubGraphqlPackageCacheStrategy } from './cache-strategies/package-cache-strategy';\nimport type {\n  GithubDatasourceItem,\n  GithubGraphqlCacheStrategy,\n  GithubGraphqlDatasourceAdapter,\n  GithubGraphqlPayload,\n  GithubGraphqlRepoParams,\n  GithubGraphqlRepoResponse,\n  GithubPackageConfig,\n  RawQueryResponse,\n} from './types';\n\n/**\n * We know empirically that certain type of GraphQL errors\n * can be fixed by shrinking page size.\n *\n * @see https://github.com/renovatebot/renovate/issues/16343\n */\nfunction isUnknownGraphqlError(err: Error): boolean {\n  const { message } = err;\n  return message.startsWith('Something went wrong while executing your query.');\n}\n\nfunction canBeSolvedByShrinking(err: Error): boolean {\n  const errors: Error[] = err instanceof AggregateError ? [...err] : [err];\n  return errors.some(\n    (e) => err instanceof ExternalHostError || isUnknownGraphqlError(e),\n  );\n}\n\nexport class GithubGraphqlDatasourceFetcher<\n  GraphqlItem,\n  ResultItem extends GithubDatasourceItem,\n> {\n  static async query<T, U extends GithubDatasourceItem>(\n    config: GithubPackageConfig,\n    http: GithubHttp,\n    adapter: GithubGraphqlDatasourceAdapter<T, U>,\n  ): Promise<U[]> {\n    const instance = new GithubGraphqlDatasourceFetcher<T, U>(\n      config,\n      http,\n      adapter,\n    );\n    const items = await instance.getItems();\n    return items;\n  }\n\n  private readonly baseUrl: string;\n  private readonly repoOwner: string;\n  private readonly repoName: string;\n\n  private itemsPerQuery: 100 | 50 | 25 = 100;\n\n  private queryCount = 0;\n\n  private cursor: string | null = null;\n\n  private isPersistent: boolean | undefined;\n\n  constructor(\n    packageConfig: GithubPackageConfig,\n    private http: GithubHttp,\n    private datasourceAdapter: GithubGraphqlDatasourceAdapter<\n      GraphqlItem,\n      ResultItem\n    >,\n  ) {\n    const { packageName, registryUrl } = packageConfig;\n    [this.repoOwner, this.repoName] = packageName.split('/');\n    this.baseUrl = getApiBaseUrl(registryUrl).replace(/\\/v3\\/$/, '/'); // Replace for GHE\n  }\n\n  private getCacheNs(): PackageCacheNamespace {\n    return this.datasourceAdapter.key;\n  }\n\n  private getCacheKey(): string {\n    return [this.baseUrl, this.repoOwner, this.repoName].join(':');\n  }\n\n  private getRawQueryOptions(): GithubHttpOptions {\n    const baseUrl = this.baseUrl;\n    const repository = `${this.repoOwner}/${this.repoName}`;\n    const query = this.datasourceAdapter.query;\n    const variables: GithubGraphqlRepoParams = {\n      owner: this.repoOwner,\n      name: this.repoName,\n      count: this.itemsPerQuery,\n      cursor: this.cursor,\n    };\n\n    return {\n      baseUrl,\n      repository,\n      readOnly: true,\n      body: { query, variables },\n    };\n  }\n\n  private async doRawQuery(): Promise<\n    RawQueryResponse<GithubGraphqlPayload<GraphqlItem>>\n  > {\n    const requestOptions = this.getRawQueryOptions();\n\n    type GraphqlData = GithubGraphqlRepoResponse<GraphqlItem>;\n    type HttpBody = GithubGraphqlResponse<GraphqlData>;\n    let httpRes: HttpResponse<HttpBody>;\n    try {\n      httpRes = await this.http.postJson<HttpBody>('/graphql', requestOptions);\n    } catch (err) {\n      return [null, err];\n    }\n\n    const { body } = httpRes;\n    const { data, errors } = body;\n\n    if (errors?.length) {\n      if (errors.length === 1) {\n        const { message } = errors[0];\n        const err = new Error(message);\n        return [null, err];\n      } else {\n        const errorInstances = errors.map(({ message }) => new Error(message));\n        const err = new AggregateError(errorInstances);\n        return [null, err];\n      }\n    }\n\n    if (!data) {\n      const msg = 'GitHub GraphQL datasource: failed to obtain data';\n      const err = new Error(msg);\n      return [null, err];\n    }\n\n    if (!data.repository) {\n      const msg = 'GitHub GraphQL datasource: failed to obtain repository data';\n      const err = new Error(msg);\n      return [null, err];\n    }\n\n    if (!data.repository.payload) {\n      const msg =\n        'GitHub GraphQL datasource: failed to obtain repository payload data';\n      const err = new Error(msg);\n      return [null, err];\n    }\n\n    this.queryCount += 1;\n\n    // For values other than explicit `false`,\n    // we assume that items can not be cached.\n    this.isPersistent ??= data.repository.isRepoPrivate === false;\n\n    const res = data.repository.payload;\n    return [res, null];\n  }\n\n  private shrinkPageSize(): boolean {\n    if (this.itemsPerQuery === 100) {\n      this.itemsPerQuery = 50;\n      return true;\n    }\n\n    if (this.itemsPerQuery === 50) {\n      this.itemsPerQuery = 25;\n      return true;\n    }\n\n    return false;\n  }\n\n  private hasReachedQueryLimit(): boolean {\n    return this.queryCount >= 100;\n  }\n\n  private async doShrinkableQuery(): Promise<\n    GithubGraphqlPayload<GraphqlItem>\n  > {\n    let res: GithubGraphqlPayload<GraphqlItem> | null = null;\n    let err: Error | null = null;\n\n    while (!res) {\n      [res, err] = await this.doRawQuery();\n      if (err) {\n        if (!canBeSolvedByShrinking(err)) {\n          throw err;\n        }\n\n        const shrinkResult = this.shrinkPageSize();\n        if (!shrinkResult) {\n          throw err;\n        }\n        const { body, ...options } = this.getRawQueryOptions();\n        logger.debug(\n          { options, newSize: this.itemsPerQuery },\n          'Shrinking GitHub GraphQL page size after error',\n        );\n      }\n    }\n\n    return res;\n  }\n\n  private _cacheStrategy: GithubGraphqlCacheStrategy<ResultItem> | undefined;\n\n  private cacheStrategy(): GithubGraphqlCacheStrategy<ResultItem> {\n    if (this._cacheStrategy) {\n      return this._cacheStrategy;\n    }\n    const cacheNs = this.getCacheNs();\n    const cacheKey = this.getCacheKey();\n    const cachePrivatePackages = GlobalConfig.get(\n      'cachePrivatePackages',\n      false,\n    );\n    this._cacheStrategy =\n      cachePrivatePackages || this.isPersistent\n        ? new GithubGraphqlPackageCacheStrategy<ResultItem>(cacheNs, cacheKey)\n        : new GithubGraphqlMemoryCacheStrategy<ResultItem>(cacheNs, cacheKey);\n    return this._cacheStrategy;\n  }\n\n  /**\n   * This method is responsible for data synchronization.\n   * It also detects persistence of the package, based on the first page result.\n   */\n  private async doPaginatedFetch(): Promise<void> {\n    let hasNextPage = true;\n    let isPaginationDone = false;\n    let nextCursor: string | undefined;\n    while (hasNextPage && !isPaginationDone && !this.hasReachedQueryLimit()) {\n      const queryResult = await this.doShrinkableQuery();\n\n      const resultItems: ResultItem[] = [];\n      for (const node of queryResult.nodes) {\n        const item = this.datasourceAdapter.transform(node);\n        if (!item) {\n          logger.once.info(\n            {\n              packageName: `${this.repoOwner}/${this.repoName}`,\n              baseUrl: this.baseUrl,\n            },\n            `GitHub GraphQL datasource: skipping empty item`,\n          );\n          continue;\n        }\n        resultItems.push(item);\n      }\n\n      // It's important to call `getCacheStrategy()` after `doShrinkableQuery()`\n      // because `doShrinkableQuery()` may change `this.isCacheable`.\n      //\n      // Otherwise, cache items for public packages will never be persisted\n      // in long-term cache.\n      isPaginationDone = await this.cacheStrategy().reconcile(resultItems);\n\n      hasNextPage = !!queryResult?.pageInfo?.hasNextPage;\n      nextCursor = queryResult?.pageInfo?.endCursor;\n      if (hasNextPage && nextCursor) {\n        this.cursor = nextCursor;\n      }\n    }\n\n    if (this.isPersistent) {\n      await this.storePersistenceFlag(30);\n    }\n  }\n\n  private async doCachedQuery(): Promise<ResultItem[]> {\n    await this.loadPersistenceFlag();\n    if (!this.isPersistent) {\n      await this.doPaginatedFetch();\n    }\n\n    const res = await this.cacheStrategy().finalizeAndReturn();\n    if (res.length) {\n      return res;\n    }\n\n    delete this.isPersistent;\n    await this.doPaginatedFetch();\n    return this.cacheStrategy().finalizeAndReturn();\n  }\n\n  async loadPersistenceFlag(): Promise<void> {\n    const ns = this.getCacheNs();\n    const key = `${this.getCacheKey()}:is-persistent`;\n    this.isPersistent = await packageCache.get<true>(ns, key);\n  }\n\n  async storePersistenceFlag(minutes: number): Promise<void> {\n    const ns = this.getCacheNs();\n    const key = `${this.getCacheKey()}:is-persistent`;\n    await packageCache.set(ns, key, true, minutes);\n  }\n\n  /**\n   * This method ensures the only one query is executed\n   * to a particular package during single run.\n   */\n  private doUniqueQuery(): Promise<ResultItem[]> {\n    const cacheKey = `github-pending:${this.getCacheNs()}:${this.getCacheKey()}`;\n    const resultPromise =\n      memCache.get<Promise<ResultItem[]>>(cacheKey) ?? this.doCachedQuery();\n    memCache.set(cacheKey, resultPromise);\n    return resultPromise;\n  }\n\n  async getItems(): Promise<ResultItem[]> {\n    const res = await this.doUniqueQuery();\n    return res;\n  }\n}\n"]}