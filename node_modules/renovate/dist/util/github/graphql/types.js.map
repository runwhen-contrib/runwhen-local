{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/util/github/graphql/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { PackageCacheNamespace } from '../../cache/package/types';\nimport type { Timestamp } from '../../timestamp';\n\nexport interface GithubDatasourceItem {\n  version: string;\n  releaseTimestamp: Timestamp;\n}\n\n/**\n * Datasource-specific structure\n */\nexport interface GithubGraphqlDatasourceAdapter<\n  Input,\n  Output extends GithubDatasourceItem,\n> {\n  /**\n   * Used for creating datasource-unique cache key\n   */\n  key: PackageCacheNamespace;\n\n  /**\n   * Used to define datasource-unique GraphQL query\n   */\n  query: string;\n\n  /**\n   * Used for transforming GraphQL nodes to objects\n   * that have `version` and `releaseTimestamp` fields.\n   *\n   * @param input GraphQL node data\n   */\n  transform(input: Input): Output | null;\n}\n\nexport type RawQueryResponse<Payload> = [Payload, null] | [null, Error];\n\nexport interface GithubGraphqlPayload<T> {\n  nodes: T[];\n  pageInfo?: {\n    hasNextPage?: boolean;\n    endCursor?: string;\n  };\n}\n\nexport interface GithubGraphqlRepoResponse<T> {\n  repository: {\n    isRepoPrivate?: boolean;\n    payload: GithubGraphqlPayload<T>;\n  };\n}\n\nexport interface GithubPackageConfig {\n  /**\n   * Example: renovatebot/renovate\n   */\n  packageName: string;\n\n  /**\n   * Default: https://api.github.com\n   */\n  registryUrl?: string | undefined;\n}\n\n/**\n * Result of GraphQL response transformation for releases (via adapter)\n */\nexport interface GithubReleaseItem extends GithubDatasourceItem {\n  isStable?: boolean;\n  url: string;\n  id?: number;\n  name?: string;\n  description?: string;\n}\n\n/**\n * Result of GraphQL response transformation for tags (via tags)\n */\nexport interface GithubTagItem extends GithubDatasourceItem {\n  hash: string;\n  gitRef: string;\n}\n\n/**\n * Parameters being passed as GraphQL variables\n */\nexport interface GithubGraphqlRepoParams {\n  owner: string;\n  name: string;\n  cursor: string | null;\n  count: number;\n}\n\nexport interface GithubGraphqlCacheRecord<\n  GithubItem extends GithubDatasourceItem,\n> {\n  items: Record<string, GithubItem>;\n  createdAt: string;\n}\n\nexport interface GithubGraphqlCacheStrategy<\n  GithubItem extends GithubDatasourceItem,\n> {\n  reconcile(items: GithubItem[]): Promise<boolean>;\n  finalizeAndReturn(): Promise<GithubItem[]>;\n}\n"]}