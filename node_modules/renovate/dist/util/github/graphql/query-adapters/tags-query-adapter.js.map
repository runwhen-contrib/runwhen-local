{"version":3,"file":"tags-query-adapter.js","sourceRoot":"","sources":["../../../../../lib/util/github/graphql/query-adapters/tags-query-adapter.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,kDAA+C;AAE/C,kCAAuC;AAEvC,MAAM,GAAG,GAAG,2BAA2B,CAAC;AAExC,MAAM,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;IACnB,MAAM,EAAE,OAAC,CAAC,KAAK,CAAC;QACd,OAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;YACzB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;YACf,gBAAgB,EAAE,qBAAS;SAC5B,CAAC;QACF,OAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,KAAK,CAAC;YACtB,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;gBACf,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;aAChB,CAAC;YACF,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;gBACf,gBAAgB,EAAE,qBAAS;aAC5B,CAAC;SACH,CAAC;KACH,CAAC;CACH,CAAC,CAAC;AAGH,MAAM,KAAK,GAAG,IAAA,mBAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BvB,CAAC,CAAC;AAEN,SAAS,SAAS,CAAC,IAAsB;IACvC,MAAM,GAAG,GAAG,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7C,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IACjC,MAAM,gBAAgB,GACpB,MAAM,CAAC,IAAI,KAAK,QAAQ;QACtB,CAAC,CAAC,MAAM,CAAC,gBAAgB;QACzB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC;IACrC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC;IACvE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;AAC9D,CAAC;AAEY,QAAA,OAAO,GAGhB,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import { z } from 'zod';\nimport { Timestamp } from '../../../timestamp';\nimport type { GithubGraphqlDatasourceAdapter, GithubTagItem } from '../types';\nimport { prepareQuery } from '../util';\n\nconst key = 'github-tags-datasource-v2';\n\nconst GithubGraphqlTag = z.object({\n  version: z.string(),\n  target: z.union([\n    z.object({\n      type: z.literal('Commit'),\n      oid: z.string(),\n      releaseTimestamp: Timestamp,\n    }),\n    z.object({\n      type: z.literal('Tag'),\n      target: z.object({\n        oid: z.string(),\n      }),\n      tagger: z.object({\n        releaseTimestamp: Timestamp,\n      }),\n    }),\n  ]),\n});\nexport type GithubGraphqlTag = z.infer<typeof GithubGraphqlTag>;\n\nconst query = prepareQuery(`\n  refs(\n    first: $count\n    after: $cursor\n    orderBy: {field: TAG_COMMIT_DATE, direction: DESC}\n    refPrefix: \"refs/tags/\"\n  ) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      version: name\n      target {\n        type: __typename\n        ... on Commit {\n          oid\n          releaseTimestamp: committedDate\n        }\n        ... on Tag {\n          target {\n            ... on Commit {\n              oid\n            }\n          }\n          tagger {\n            releaseTimestamp: date\n          }\n        }\n      }\n    }\n  }`);\n\nfunction transform(item: GithubGraphqlTag): GithubTagItem | null {\n  const res = GithubGraphqlTag.safeParse(item);\n  if (!res.success) {\n    return null;\n  }\n  const { version, target } = item;\n  const releaseTimestamp =\n    target.type === 'Commit'\n      ? target.releaseTimestamp\n      : target.tagger.releaseTimestamp;\n  const hash = target.type === 'Commit' ? target.oid : target.target.oid;\n  return { version, gitRef: version, hash, releaseTimestamp };\n}\n\nexport const adapter: GithubGraphqlDatasourceAdapter<\n  GithubGraphqlTag,\n  GithubTagItem\n> = { key, query, transform };\n"]}