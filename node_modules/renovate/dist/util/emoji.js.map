{"version":3,"file":"emoji.js","sourceRoot":"","sources":["../../lib/util/emoji.ts"],"names":[],"mappings":"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","sourcesContent":["import mathiasBynensEmojiRegex from 'emoji-regex';\nimport {\n  fromCodepointToUnicode,\n  fromHexcodeToCodepoint,\n  fromUnicodeToHexcode,\n} from 'emojibase';\nimport emojibaseEmojiRegex from 'emojibase-regex/emoji.js';\nimport SHORTCODE_REGEX from 'emojibase-regex/shortcode.js';\nimport { z } from 'zod';\nimport type { RenovateConfig } from '../config/types';\nimport dataFiles from '../data-files.generated';\nimport { logger } from '../logger';\nimport { regEx } from './regex';\nimport { Result } from './result';\nimport { Json } from './schema-utils';\n\nlet unicodeEmoji = true;\n\nlet mappingsInitialized = false;\nconst shortCodesByHex = new Map<string, string>();\nconst hexCodesByShort = new Map<string, string>();\n\nconst EmojiShortcodesSchema = Json.pipe(\n  z.record(\n    z.string(),\n    z.union([z.string().transform((val) => [val]), z.array(z.string())]),\n  ),\n);\ntype EmojiShortcodeMapping = z.infer<typeof EmojiShortcodesSchema>;\n\nconst patchedEmojis: EmojiShortcodeMapping = {\n  '26A0-FE0F': ['warning'], // Colorful warning (⚠️) instead of black and white (⚠)\n};\n\nfunction initMapping(mapping: EmojiShortcodeMapping): void {\n  for (const [hex, shortcodes] of Object.entries(mapping)) {\n    const mainShortcode = `:${shortcodes[0]}:`;\n\n    shortCodesByHex.set(hex, mainShortcode);\n    shortCodesByHex.set(stripHexCode(hex), mainShortcode);\n\n    for (const shortcode of shortcodes) {\n      hexCodesByShort.set(`:${shortcode}:`, hex);\n    }\n  }\n}\n\nfunction lazyInitMappings(): void {\n  if (!mappingsInitialized) {\n    const githubShortcodes = dataFiles.get(\n      'node_modules/emojibase-data/en/shortcodes/github.json',\n    );\n\n    Result.parse(githubShortcodes, EmojiShortcodesSchema)\n      .onValue((data) => {\n        initMapping(data);\n        initMapping(patchedEmojis);\n        mappingsInitialized = true;\n      })\n      .onError(\n        /* istanbul ignore next */\n        (error) => {\n          logger.warn({ error }, 'Unable to parse emoji shortcodes');\n        },\n      );\n  }\n}\n\nexport function setEmojiConfig(config: RenovateConfig): void {\n  unicodeEmoji = !!config.unicodeEmoji;\n}\n\nconst shortCodeRegex = regEx(SHORTCODE_REGEX.source, 'g');\n\nexport function emojify(text: string): string {\n  if (!unicodeEmoji) {\n    return text;\n  }\n  lazyInitMappings();\n  return text.replace(shortCodeRegex, (shortCode) => {\n    const hexCode = hexCodesByShort.get(shortCode);\n    return hexCode\n      ? fromCodepointToUnicode(fromHexcodeToCodepoint(hexCode))\n      : shortCode;\n  });\n}\n\nconst emojiRegexSrc = [emojibaseEmojiRegex, mathiasBynensEmojiRegex()].map(\n  ({ source }) => source,\n);\nconst emojiRegex = new RegExp(`(?:${emojiRegexSrc.join('|')})`, 'g'); // TODO #12875 cannot figure it out\nconst excludedModifiers = new Set([\n  '20E3',\n  '200D',\n  'FE0E',\n  'FE0F',\n  '1F3FB',\n  '1F3FC',\n  '1F3FD',\n  '1F3FE',\n  '1F3FF',\n  '1F9B0',\n  '1F9B1',\n  '1F9B2',\n  '1F9B3',\n]);\n\nexport function stripHexCode(input: string): string {\n  return input\n    .split('-')\n    .filter((modifier) => !excludedModifiers.has(modifier))\n    .join('-');\n}\n\nexport function unemojify(text: string): string {\n  if (unicodeEmoji) {\n    return text;\n  }\n  lazyInitMappings();\n  return text.replace(emojiRegex, (emoji) => {\n    const hexCode = stripHexCode(fromUnicodeToHexcode(emoji));\n    const shortCode = shortCodesByHex.get(hexCode);\n    return shortCode ?? /* istanbul ignore next */ '�';\n  });\n}\n\nfunction stripEmoji(emoji: string): string {\n  const hexCode = stripHexCode(fromUnicodeToHexcode(emoji));\n  // `hexCode` could be empty if `emoji` is a modifier character that isn't\n  // modifying anything\n  if (hexCode) {\n    const codePoint = fromHexcodeToCodepoint(hexCode);\n    return fromCodepointToUnicode(codePoint);\n  }\n  return '';\n}\n\nexport function stripEmojis(input: string): string {\n  return input.replace(emojiRegex, stripEmoji);\n}\n"]}