{"version":3,"file":"schema-utils.js","sourceRoot":"","sources":["../../lib/util/schema-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import JSON5 from 'json5';\nimport { DateTime } from 'luxon';\nimport type { JsonArray, JsonValue } from 'type-fest';\nimport {\n  type ZodEffects,\n  type ZodString,\n  type ZodType,\n  type ZodTypeDef,\n  z,\n} from 'zod';\nimport { logger } from '../logger';\nimport type { PackageDependency } from '../modules/manager/types';\nimport { parseJsonc } from './common';\nimport { parse as parseToml } from './toml';\nimport type { YamlOptions } from './yaml';\nimport { parseSingleYaml, parseYaml } from './yaml';\n\ninterface ErrorContext<T> {\n  error: z.ZodError;\n  input: T;\n}\n\ninterface LooseOpts<T> {\n  onError?: (err: ErrorContext<T>) => void;\n}\n\n/**\n * Works like `z.array()`, but drops wrong elements instead of invalidating the whole array.\n *\n * **Important**: non-array inputs are still invalid.\n * Use `LooseArray(...).catch([])` to handle it.\n *\n * @param Elem Schema for array elements\n * @param onError Callback for errors\n * @returns Schema for array\n */\nexport function LooseArray<Schema extends z.ZodTypeAny>(\n  Elem: Schema,\n  { onError }: LooseOpts<unknown[]> = {},\n): z.ZodEffects<z.ZodArray<z.ZodAny, 'many'>, z.TypeOf<Schema>[], any[]> {\n  if (!onError) {\n    // Avoid error-related computations inside the loop\n    return z.array(z.any()).transform((input) => {\n      const output: z.infer<Schema>[] = [];\n      for (const x of input) {\n        const parsed = Elem.safeParse(x);\n        if (parsed.success) {\n          output.push(parsed.data);\n        }\n      }\n      return output;\n    });\n  }\n\n  return z.array(z.any()).transform((input) => {\n    const output: z.infer<Schema>[] = [];\n    const issues: z.ZodIssue[] = [];\n\n    for (let idx = 0; idx < input.length; idx += 1) {\n      const x = input[idx];\n      const parsed = Elem.safeParse(x);\n\n      if (parsed.success) {\n        output.push(parsed.data);\n        continue;\n      }\n\n      for (const issue of parsed.error.issues) {\n        issue.path.unshift(idx);\n        issues.push(issue);\n      }\n    }\n\n    if (issues.length) {\n      const error = new z.ZodError(issues);\n      onError({ error, input });\n    }\n\n    return output;\n  });\n}\n\ntype LooseRecordResult<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny,\n> = z.ZodEffects<\n  z.ZodRecord<z.ZodString, z.ZodAny>,\n  Record<z.TypeOf<KeySchema>, z.TypeOf<ValueSchema>>,\n  Record<z.TypeOf<KeySchema>, any>\n>;\n\ntype LooseRecordOpts<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny,\n> = LooseOpts<Record<z.TypeOf<KeySchema> | z.TypeOf<ValueSchema>, unknown>>;\n\n/**\n * Works like `z.record()`, but drops wrong elements instead of invalidating the whole record.\n *\n * **Important**: non-record inputs other are still invalid.\n * Use `LooseRecord(...).catch({})` to handle it.\n *\n * @param KeyValue Schema for record keys\n * @param ValueValue Schema for record values\n * @param onError Callback for errors\n * @returns Schema for record\n */\nexport function LooseRecord<ValueSchema extends z.ZodTypeAny>(\n  Value: ValueSchema,\n): LooseRecordResult<z.ZodString, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny,\n>(\n  Key: KeySchema,\n  Value: ValueSchema,\n): LooseRecordResult<KeySchema, ValueSchema>;\nexport function LooseRecord<ValueSchema extends z.ZodTypeAny>(\n  Value: ValueSchema,\n  { onError }: LooseRecordOpts<z.ZodString, ValueSchema>,\n): LooseRecordResult<z.ZodString, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny,\n>(\n  Key: KeySchema,\n  Value: ValueSchema,\n  { onError }: LooseRecordOpts<KeySchema, ValueSchema>,\n): LooseRecordResult<KeySchema, ValueSchema>;\nexport function LooseRecord<\n  KeySchema extends z.ZodTypeAny,\n  ValueSchema extends z.ZodTypeAny,\n>(\n  arg1: ValueSchema | KeySchema,\n  arg2?: ValueSchema | LooseOpts<Record<string, unknown>>,\n  arg3?: LooseRecordOpts<KeySchema, ValueSchema>,\n): LooseRecordResult<KeySchema, ValueSchema> {\n  let Key: z.ZodSchema = z.any();\n  let Value: ValueSchema;\n  let opts: LooseRecordOpts<KeySchema, ValueSchema> = {};\n  if (arg2 && arg3) {\n    Key = arg1 as KeySchema;\n    Value = arg2 as ValueSchema;\n    opts = arg3;\n  } else if (arg2) {\n    if (arg2 instanceof z.ZodType) {\n      Key = arg1 as KeySchema;\n      Value = arg2;\n    } else {\n      Value = arg1 as ValueSchema;\n      opts = arg2;\n    }\n  } else {\n    Value = arg1 as ValueSchema;\n  }\n\n  const { onError } = opts;\n  if (!onError) {\n    // Avoid error-related computations inside the loop\n    return z.record(z.any()).transform((input) => {\n      const output: Record<string, z.infer<ValueSchema>> = {};\n      for (const [inputKey, inputVal] of Object.entries(input)) {\n        const parsedKey = Key.safeParse(inputKey);\n        const parsedValue = Value.safeParse(inputVal);\n        if (parsedKey.success && parsedValue.success) {\n          output[parsedKey.data] = parsedValue.data;\n        }\n      }\n      return output;\n    });\n  }\n\n  return z.record(z.any()).transform((input) => {\n    const output: Record<string, z.infer<ValueSchema>> = {};\n    const issues: z.ZodIssue[] = [];\n\n    for (const [inputKey, inputVal] of Object.entries(input)) {\n      const parsedKey = Key.safeParse(inputKey);\n      if (!parsedKey.success) {\n        for (const issue of parsedKey.error.issues) {\n          issue.path.unshift(inputKey);\n          issues.push(issue);\n        }\n        continue;\n      }\n\n      const parsedValue = Value.safeParse(inputVal);\n      if (!parsedValue.success) {\n        for (const issue of parsedValue.error.issues) {\n          issue.path.unshift(inputKey);\n          issues.push(issue);\n        }\n        continue;\n      }\n\n      output[parsedKey.data] = parsedValue.data;\n      continue;\n    }\n\n    if (issues.length) {\n      const error = new z.ZodError(issues);\n      onError({ error, input });\n    }\n\n    return output;\n  });\n}\n\nexport const Json = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return JSON.parse(str);\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid JSON' });\n    return z.NEVER;\n  }\n});\ntype Json = z.infer<typeof Json>;\n\nexport const Json5 = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return JSON5.parse(str);\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid JSON5' });\n    return z.NEVER;\n  }\n});\n\nexport const Jsonc = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return parseJsonc(str);\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid JSONC' });\n    return z.NEVER;\n  }\n});\n\nexport const UtcDate = z\n  .string({ description: 'ISO 8601 string' })\n  .transform((str, ctx): DateTime => {\n    const date = DateTime.fromISO(str, { zone: 'utc' });\n    if (!date.isValid) {\n      ctx.addIssue({ code: 'custom', message: 'Invalid date' });\n      return z.NEVER;\n    }\n    return date;\n  });\n\nexport const Yaml = z.string().transform((str, ctx): JsonValue => {\n  try {\n    return parseSingleYaml(str);\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid YAML' });\n    return z.NEVER;\n  }\n});\n\nexport const MultidocYaml = z.string().transform((str, ctx): JsonArray => {\n  try {\n    return parseYaml(str) as JsonArray;\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid YAML' });\n    return z.NEVER;\n  }\n});\n\nexport function multidocYaml(\n  opts?: Omit<YamlOptions, 'customSchema'>,\n): ZodEffects<ZodString, JsonArray, string> {\n  return z.string().transform((str, ctx): JsonArray => {\n    try {\n      return parseYaml(str, opts) as JsonArray;\n    } catch {\n      ctx.addIssue({ code: 'custom', message: 'Invalid YAML' });\n      return z.NEVER;\n    }\n  });\n}\n\nexport const Toml = z.string().transform((str, ctx) => {\n  try {\n    return parseToml(str);\n  } catch {\n    ctx.addIssue({ code: 'custom', message: 'Invalid TOML' });\n    return z.NEVER;\n  }\n});\n\nexport function withDepType<\n  Output extends PackageDependency[],\n  Schema extends ZodType<Output, ZodTypeDef, unknown>,\n>(schema: Schema, depType: string, force = true): ZodEffects<Schema> {\n  return schema.transform((deps) => {\n    for (const dep of deps) {\n      if (!dep.depType || force) {\n        dep.depType = depType;\n      }\n    }\n    return deps;\n  });\n}\n\nexport function withDebugMessage<Input, Output>(\n  value: Output,\n  msg: string,\n): (ctx: { error: z.ZodError; input: Input }) => Output {\n  return ({ error: err }) => {\n    logger.debug({ err }, msg);\n    return value;\n  };\n}\n\nexport function withTraceMessage<Input, Output>(\n  value: Output,\n  msg: string,\n): (ctx: { error: z.ZodError; input: Input }) => Output {\n  return ({ error: err }) => {\n    logger.trace({ err }, msg);\n    return value;\n  };\n}\n\nfunction isCircular(value: unknown, visited = new Set<unknown>()): boolean {\n  if (value === null || typeof value !== 'object') {\n    return false;\n  }\n\n  if (visited.has(value)) {\n    return true;\n  }\n\n  const downstreamVisited = new Set(visited);\n  downstreamVisited.add(value);\n\n  if (Array.isArray(value)) {\n    for (const childValue of value) {\n      if (isCircular(childValue, downstreamVisited)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  const values = Object.values(value);\n  for (const ov of values) {\n    if (isCircular(ov, downstreamVisited)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport const NotCircular = z.unknown().superRefine((val, ctx) => {\n  if (isCircular(val)) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'values cannot be circular data structures',\n      fatal: true,\n    });\n\n    return z.NEVER;\n  }\n});\n"]}