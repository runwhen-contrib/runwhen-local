{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/decorator/index.ts"],"names":[],"mappings":";;AAoCA,4BA0BC;AA9BD;;;GAGG;AACH,SAAgB,QAAQ,CAAI,EAAc;IACxC,MAAM,MAAM,GAAiB,CAC3B,MAAM,EACN,GAAG,EACH,UAAU,GAAG;QACX,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,IAAI;QAClB,QAAQ,EAAE,IAAI;QACd,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC;KAChD,EACD,EAAE;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC;QAE7B,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE;YAC/B,KAAK,CAAU,GAAG,IAAW;gBAC3B,OAAO,EAAE,CAAC;oBACR,IAAI;oBACJ,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;oBACxC,UAAU,EAAE,KAAK,EAAE,IAAI;iBACxB,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["export type Handler<T> = (\n  parameters: DecoratorParameters<T>,\n) => Promise<unknown>;\nexport type Method<T> = (this: T, ...args: any[]) => Promise<any>;\nexport type Decorator<T> = <U extends T>(\n  target: U,\n  key: keyof U,\n  descriptor: TypedPropertyDescriptor<Method<T>>,\n) => TypedPropertyDescriptor<Method<T>>;\n\nexport interface DecoratorParameters<T, U extends any[] = any[]> {\n  /**\n   * Current call arguments.\n   */\n  args: U;\n\n  /**\n   * A callback to call the decorated method with the current arguments.\n   */\n  callback(this: void): unknown;\n\n  /**\n   * Current call context.\n   */\n  instance: T;\n\n  /**\n   * The decorated method name.\n   */\n  methodName?: string;\n}\n\n/**\n * Applies decorating function to intercept decorated method calls.\n * @param fn - The decorating function.\n */\nexport function decorate<T>(fn: Handler<T>): Decorator<T> {\n  const result: Decorator<T> = (\n    target,\n    key,\n    descriptor = {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      ...Object.getOwnPropertyDescriptor(target, key),\n    },\n  ) => {\n    const { value } = descriptor;\n\n    return Object.assign(descriptor, {\n      value(this: T, ...args: any[]) {\n        return fn({\n          args,\n          instance: this,\n          callback: () => value?.apply(this, args),\n          methodName: value?.name,\n        });\n      },\n    });\n  };\n\n  return result;\n}\n"]}