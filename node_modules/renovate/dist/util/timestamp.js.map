{"version":3,"file":"timestamp.js","sourceRoot":"","sources":["../../lib/util/timestamp.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport { z } from 'zod';\n\nexport type Timestamp = string & { __timestamp: never };\n\nconst timezoneOffset = new Date().getTimezoneOffset() * 60000;\n\nconst millenium = 946684800000; // 2000-01-01T00:00:00.000Z\nconst tomorrowOffset = 86400000; // 24 * 60 * 60 * 1000;\n\nfunction isValid(date: DateTime): boolean {\n  if (!date.isValid) {\n    return false;\n  }\n  const tomorrow = DateTime.now().toMillis() + tomorrowOffset; // 24 * 60 * 60 * 1000;\n  const ts = date.toMillis();\n  return ts > millenium && ts < tomorrow;\n}\n\nexport function asTimestamp(input: unknown): Timestamp | null {\n  if (input instanceof Date) {\n    const date = DateTime.fromJSDate(input, { zone: 'UTC' });\n    if (isValid(date)) {\n      return date.toISO() as Timestamp;\n    }\n\n    return null;\n  }\n\n  if (typeof input === 'number') {\n    const millisDate = DateTime.fromMillis(input, { zone: 'UTC' });\n    if (isValid(millisDate)) {\n      return millisDate.toISO() as Timestamp;\n    }\n\n    const secondsDate = DateTime.fromSeconds(input, { zone: 'UTC' });\n    if (isValid(secondsDate)) {\n      return secondsDate.toISO() as Timestamp;\n    }\n\n    return null;\n  }\n\n  if (typeof input === 'string') {\n    const isoDate = DateTime.fromISO(input, { zone: 'UTC' });\n    if (isValid(isoDate)) {\n      return isoDate.toISO() as Timestamp;\n    }\n\n    const httpDate = DateTime.fromHTTP(input, { zone: 'UTC' });\n    if (isValid(httpDate)) {\n      return httpDate.toISO() as Timestamp;\n    }\n\n    const sqlDate = DateTime.fromSQL(input, { zone: 'UTC' });\n    if (isValid(sqlDate)) {\n      return sqlDate.toISO() as Timestamp;\n    }\n\n    const numberLikeDate = DateTime.fromFormat(input, 'yyyyMMddHHmmss', {\n      zone: 'UTC',\n    });\n    if (isValid(numberLikeDate)) {\n      return numberLikeDate.toISO() as Timestamp;\n    }\n\n    const numberLikeOffsetDate = DateTime.fromFormat(\n      input,\n      'yyyyMMddHHmmssZZZ',\n      { zone: 'UTC' },\n    );\n    if (isValid(numberLikeOffsetDate)) {\n      return numberLikeOffsetDate.toISO() as Timestamp;\n    }\n\n    const fallbackDate = DateTime.fromMillis(\n      Date.parse(input) - timezoneOffset,\n      { zone: 'UTC' },\n    );\n    if (isValid(fallbackDate)) {\n      return fallbackDate.toISO() as Timestamp;\n    }\n\n    return null;\n  }\n\n  return null;\n}\n\nexport const Timestamp = z.unknown().transform((input, ctx) => {\n  const timestamp = asTimestamp(input);\n  if (!timestamp) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.custom,\n      message: 'Invalid timestamp',\n    });\n    return z.NEVER;\n  }\n\n  return timestamp;\n});\nexport const MaybeTimestamp = Timestamp.nullable().catch(null);\n"]}