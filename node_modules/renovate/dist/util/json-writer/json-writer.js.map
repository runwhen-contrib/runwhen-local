{"version":3,"file":"json-writer.js","sourceRoot":"","sources":["../../../lib/util/json-writer/json-writer.ts"],"names":[],"mappings":";;;AAGA,MAAa,UAAU;IACJ,eAAe,CAAkB;IAEjC,eAAe,CAAS;IAEzC,YAAY,aAAyB,EAAE;QACrC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,IAAI,OAAO,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,IAAa,EAAE,eAAe,GAAG,IAAI;QAChD,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE3D,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IAAY,WAAW;QACrB,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;CACF;AA3BD,gCA2BC","sourcesContent":["import type { CodeFormat } from './code-format';\nimport type { IndentationType } from './indentation-type';\n\nexport class JSONWriter {\n  private readonly indentationType: IndentationType;\n\n  private readonly indentationSize: number;\n\n  constructor(codeFormat: CodeFormat = {}) {\n    this.indentationSize = codeFormat.indentationSize ?? 2;\n    this.indentationType = codeFormat.indentationType ?? 'space';\n  }\n\n  public write(json: unknown, newLineAtTheEnd = true): string {\n    let content = JSON.stringify(json, null, this.indentation);\n\n    if (newLineAtTheEnd) {\n      content = content.concat('\\n');\n    }\n\n    return content;\n  }\n\n  private get indentation(): string | number {\n    if (this.indentationType === 'tab') {\n      return '\\t';\n    }\n\n    return this.indentationSize;\n  }\n}\n"]}