{"version":3,"file":"sanitize.js","sourceRoot":"","sources":["../../lib/util/sanitize.ts"],"names":[],"mappings":";;;AA2BA,4BAeC;AAID,wDAeC;AAED,sEAEC;AAED,0EAEC;;AArED,kEAAkC;AAClC,qCAAoC;AAEpC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;AACxC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;AAEzB,QAAA,cAAc,GAAG;IAC5B,eAAe;IACf,OAAO;IACP,cAAc;IACd,UAAU;IACV,OAAO;IACP,YAAY;IACZ,eAAe;IACf,eAAe;IACf,WAAW;IACX,UAAU;IACV,kBAAkB;IAClB,iBAAiB;IACjB,2BAA2B;CAC5B,CAAC;AAOF,SAAgB,QAAQ,CACtB,KAAgC;IAEhC,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,MAAM,GAAW,KAAK,CAAC;IAC3B,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzB,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC/B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;YAClD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,uBAAuB,GAAG,iBAAiB,CAAC;AAElD,SAAgB,sBAAsB,CACpC,MAA0B,EAC1B,IAAI,GAAG,MAAM;IAEb,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,OAAO;IACT,CAAC;IACD,MAAM,OAAO,GAAG,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,OAAO,CAAC,GAAG,CAAC,IAAA,iBAAQ,EAAC,MAAM,CAAC,CAAC,CAAC;IAC9B,IAAI,MAAM,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAE,CAAC;QAC/C,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;QAClE,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,IAAA,iBAAQ,EAAC,aAAa,CAAC,CAAC,CAAC;IACvC,CAAC;AACH,CAAC;AAED,SAAgB,6BAA6B;IAC3C,WAAW,CAAC,KAAK,EAAE,CAAC;AACtB,CAAC;AAED,SAAgB,+BAA+B;IAC7C,aAAa,CAAC,KAAK,EAAE,CAAC;AACxB,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { toBase64 } from './string';\n\nconst globalSecrets = new Set<string>();\nconst repoSecrets = new Set<string>();\n\nexport const redactedFields = [\n  'authorization',\n  'token',\n  'githubAppKey',\n  'npmToken',\n  'npmrc',\n  'privateKey',\n  'privateKeyOld',\n  'gitPrivateKey',\n  'forkToken',\n  'password',\n  'httpsCertificate',\n  'httpsPrivateKey',\n  'httpsCertificateAuthority',\n];\n\n// TODO: returns null or undefined only when input is null or undefined.\nexport function sanitize(input: string): string;\nexport function sanitize(\n  input: string | null | undefined,\n): string | null | undefined;\nexport function sanitize(\n  input: string | null | undefined,\n): string | null | undefined {\n  if (!input) {\n    return input;\n  }\n  let output: string = input;\n  [globalSecrets, repoSecrets].forEach((secrets) => {\n    secrets.forEach((secret) => {\n      while (output.includes(secret)) {\n        output = output.replace(secret, '**redacted**');\n      }\n    });\n  });\n  return output;\n}\n\nconst GITHUB_APP_TOKEN_PREFIX = 'x-access-token:';\n\nexport function addSecretForSanitizing(\n  secret: string | undefined,\n  type = 'repo',\n): void {\n  if (!is.nonEmptyString(secret)) {\n    return;\n  }\n  const secrets = type === 'repo' ? repoSecrets : globalSecrets;\n  secrets.add(secret);\n  secrets.add(toBase64(secret));\n  if (secret.startsWith(GITHUB_APP_TOKEN_PREFIX)) {\n    const trimmedSecret = secret.replace(GITHUB_APP_TOKEN_PREFIX, '');\n    secrets.add(trimmedSecret);\n    secrets.add(toBase64(trimmedSecret));\n  }\n}\n\nexport function clearRepoSanitizedSecretsList(): void {\n  repoSecrets.clear();\n}\n\nexport function clearGlobalSanitizedSecretsList(): void {\n  globalSecrets.clear();\n}\n"]}