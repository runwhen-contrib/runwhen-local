{"version":3,"file":"string.js","sourceRoot":"","sources":["../../lib/util/string.ts"],"names":[],"mappings":"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","sourcesContent":["// Return true if the match string is found at index in content\nexport function matchAt(\n  content: string,\n  index: number,\n  match: string,\n): boolean {\n  return content.substring(index, index + match.length) === match;\n}\n\n// Replace oldString with newString at location index of content\nexport function replaceAt(\n  content: string,\n  index: number,\n  oldString: string,\n  newString: string,\n): string {\n  return (\n    content.substring(0, index) +\n    newString +\n    content.substring(index + oldString.length)\n  );\n}\n\n/**\n * Converts from utf-8 string to base64-encoded string\n */\nexport function toBase64(input: string): string {\n  return Buffer.from(input).toString('base64');\n}\n\n/**\n * Converts from base64-encoded string to utf-8 string\n */\nexport function fromBase64(input: string): string {\n  return Buffer.from(input, 'base64').toString();\n}\n\nexport function uniqueStrings(\n  element: string,\n  index: number,\n  elements: string[],\n): boolean {\n  return elements.indexOf(element) === index;\n}\n\nexport function looseEquals(\n  a: string | null | undefined,\n  b: string | null | undefined,\n): boolean {\n  if (!(a && b)) {\n    return a === b;\n  }\n  return a.localeCompare(b, undefined, { sensitivity: 'base' }) === 0;\n}\n\nexport function titleCase(input: string): string {\n  const words = input.toLowerCase().split(' ');\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    words[i] = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n  }\n\n  return words.join(' ');\n}\n\n/**\n * Sometimes we extract small strings from a multi-megabyte files.\n * If we then save them in the in-memory cache, V8 may not free\n * the initial buffer, which can lead to memory leaks:\n *\n *   https://bugs.chromium.org/p/v8/issues/detail?id=2869\n *\n */\nexport function copystr(x: string): string {\n  const len = Buffer.byteLength(x, 'utf8');\n  const buf = Buffer.allocUnsafeSlow(len);\n  buf.write(x, 'utf8');\n  return buf.toString('utf8');\n}\n\n/**\n * Coerce a value to a string with optional default value.\n * @param val value to coerce\n * @returns the coerced value.\n */\nexport function coerceString(\n  val: string | null | undefined,\n  def?: string,\n): string {\n  return val ?? def ?? '';\n}\n\n/**\n * Remove templates from string.\n *\n * This is more performant version of this code:\n *\n * ```\n *   content\n *     .replaceAll(regEx(/{{`.+?`}}/gs), '')\n *     .replaceAll(regEx(/{{.+?}}/gs), '')\n *     .replaceAll(regEx(/{%`.+?`%}/gs), '')\n *     .replaceAll(regEx(/{%.+?%}/gs), '')\n *     .replaceAll(regEx(/{#.+?#}/gs), '')\n * ```\n */\nexport function stripTemplates(content: string): string {\n  const result: string[] = [];\n\n  const len = content.length;\n  let idx = 0;\n  let lastPos = 0; // Tracks the start index of the next chunk to push\n  while (idx < len) {\n    if (content[idx] === '{' && idx + 1 < len) {\n      let closing: string | undefined;\n      let skipLength = 0;\n\n      if (content[idx + 1] === '%') {\n        if (idx + 2 < len && content[idx + 2] === '`') {\n          // Handle `{%` ... `%}`\n          closing = '`%}';\n          skipLength = 3;\n        } else {\n          // Handle `{% ... %}`\n          closing = '%}';\n          skipLength = 2;\n        }\n      } else if (content[idx + 1] === '{') {\n        if (idx + 2 < len && content[idx + 2] === '`') {\n          // Handle `{{` ... `}}`\n          closing = '`}}';\n          skipLength = 3;\n        } else {\n          // Handle `{{ ... }}`\n          closing = '}}';\n          skipLength = 2;\n        }\n      } else if (content[idx + 1] === '#') {\n        // Handle `{# ... #}`\n        closing = '#}';\n        skipLength = 2;\n      }\n\n      if (closing) {\n        const end = content.indexOf(closing, idx + skipLength);\n        if (end !== -1) {\n          // Append the content before the pattern\n          if (idx > lastPos) {\n            result.push(content.slice(lastPos, idx));\n          }\n\n          // Move `idx` past the closing tag\n          idx = end + closing.length;\n          lastPos = idx; // Update the last position\n          continue;\n        }\n      }\n    }\n\n    idx++;\n  }\n\n  // Append any remaining content after the last pattern\n  if (lastPos < len) {\n    result.push(content.slice(lastPos));\n  }\n\n  return result.join('');\n}\n\nexport function capitalize(input: string): string {\n  return input[0].toUpperCase() + input.slice(1);\n}\n"]}