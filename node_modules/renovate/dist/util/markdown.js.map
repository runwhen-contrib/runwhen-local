{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../lib/util/markdown.ts"],"names":[],"mappings":";;AAKA,4CAoBC;AAQD,0BAUC;;AA3CD,4DAA4B;AAC5B,0EAAmC;AACnC,mCAAgC;AAEhC,qCAAqC;AACrC,SAAgB,gBAAgB,CAAC,QAAgB;IAC/C,IAAI,GAAG,GAAG,QAAQ,CAAC;IACnB,2DAA2D;IAC3D,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,aAAa,CAAC,EAAE,cAAc,CAAC,CAAC;IACxD,iFAAiF;IACjF,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;IAC3C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,CAAC;IAClD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,CAAC;IACpD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,sBAAsB,CAAC,EAAE,YAAY,CAAC,CAAC;IAC/D,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,qCAAqC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1E,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,wBAAwB,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACrE,sCAAsC;IACtC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,uBAAuB,CAAC,CAAC;IAClD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACtC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,kBAAkB,CAAC,EAAE,OAAO,CAAC,CAAC;IACtD,GAAG,GAAG,GAAG,CAAC,OAAO,CACf,IAAA,aAAK,EAAC,kCAAkC,CAAC,EACzC,qBAAqB,CACtB,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,OAAO,CAC3B,OAAe,EACf,OAAmC;IAEnC,sEAAsE;IACtE,MAAM,MAAM,GAAG,MAAM,IAAA,gBAAM,GAAE;SAC1B,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;SAClC,GAAG,CAAC,uBAAM,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,CAAC;SACjD,OAAO,CAAC,OAAO,CAAC,CAAC;IACpB,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import remark from 'remark';\nimport github from 'remark-github';\nimport { regEx } from './regex';\n\n// Generic replacements/link-breakers\nexport function sanitizeMarkdown(markdown: string): string {\n  let res = markdown;\n  // Put a zero width space after every # followed by a digit\n  res = res.replace(regEx(/(\\W)#(\\d)/gi), '$1#&#8203;$2');\n  // Put a zero width space after every @ symbol to prevent unintended hyperlinking\n  res = res.replace(regEx(/@/g), '@&#8203;');\n  res = res.replace(regEx(/(`\\[?@)&#8203;/g), '$1');\n  res = res.replace(regEx(/([a-z]@)&#8203;/gi), '$1');\n  res = res.replace(regEx(/\\/compare\\/@&#8203;/g), '/compare/@');\n  res = res.replace(regEx(/(\\(https:\\/\\/[^)]*?)\\.\\.\\.@&#8203;/g), '$1...@');\n  res = res.replace(regEx(/([\\s(])#(\\d+)([)\\s]?)/g), '$1#&#8203;$2$3');\n  // convert escaped backticks back to `\n  const backTickRe = regEx(/&#x60;([^/]*?)&#x60;/g);\n  res = res.replace(backTickRe, '`$1`');\n  res = res.replace(regEx(/`#&#8203;(\\d+)`/g), '`#$1`');\n  res = res.replace(\n    regEx(/(?<before>[^\\n]\\n)(?<title>#.*)/g),\n    '$<before>\\n$<title>',\n  );\n  return res;\n}\n\n/**\n *\n * @param content content to process\n * @param options github options\n * @returns linkified content\n */\nexport async function linkify(\n  content: string,\n  options: github.RemarkGithubOptions,\n): Promise<string> {\n  // https://github.com/syntax-tree/mdast-util-to-markdown#optionsbullet\n  const output = await remark()\n    .use({ settings: { bullet: '-' } })\n    .use(github, { mentionStrong: false, ...options })\n    .process(content);\n  return output.toString();\n}\n"]}