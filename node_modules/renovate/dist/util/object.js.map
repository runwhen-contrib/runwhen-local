{"version":3,"file":"object.js","sourceRoot":"","sources":["../../lib/util/object.ts"],"names":[],"mappings":";;AAOA,wBAKC;AAOD,oCAEC;AArBD;;;;;;GAMG;AACH,SAAgB,MAAM,CACpB,CAAI,EACJ,CAAI;IAEJ,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAI,GAAyB,EAAE,GAAO;IAChE,OAAO,GAAG,IAAI,GAAG,IAAK,EAAQ,CAAC;AACjC,CAAC","sourcesContent":["/**\n * This is a workaround helper to allow the usage of 'unknown' in\n * a type-guard function while checking that keys exist.\n *\n * @see https://github.com/microsoft/TypeScript/issues/21732\n * @see https://stackoverflow.com/a/58630274\n */\nexport function hasKey<K extends string, T>(\n  k: K,\n  o: T,\n): o is T & Record<K, unknown> {\n  return o && typeof o === 'object' && k in o;\n}\n\n/**\n * Coerce a value to a object with optional default value.\n * @param val value to coerce\n * @returns the coerced value.\n */\nexport function coerceObject<T>(val: T | null | undefined, def?: T): T {\n  return val ?? def ?? ({} as T);\n}\n"]}