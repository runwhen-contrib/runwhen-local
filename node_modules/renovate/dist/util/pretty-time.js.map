{"version":3,"file":"pretty-time.js","sourceRoot":"","sources":["../../lib/util/pretty-time.ts"],"names":[],"mappings":";;AAuBA,oBAsBC;AAID,gDAqCC;;AAtFD,kEAAkC;AAClC,iCAAiC;AACjC,oDAAoB;AACpB,sCAAmC;AACnC,mCAAgC;AAEhC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,aAAa,CAAC,CAAC;AAExC,SAAS,KAAK,CAAC,IAAY;IACzB,OAAO,IAAI;SACR,KAAK,CAAC,UAAU,CAAC;SACjB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SACpB,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACrC,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,yBAAyB,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC,OAAO,CACjB,UAAU,EACV,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,MAAM,GAAG,EAAE,OAAO,CACnB,CAAC;AACtB,CAAC;AAED,SAAgB,IAAI,CAAC,IAAY;IAC/B,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAClB,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,MAAM,MAAM,GAAG,IAAA,YAAE,EAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;gBACvB,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;gBAC5D,OAAO,IAAI,CAAC;YACd,CAAC;YACD,WAAW,IAAI,MAAM,CAAC;QACxB,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,4BAA4B,IAAI,GAAG,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,yCAAyC,CAAC,CAAC;AAEpE,SAAgB,kBAAkB,CAChC,IAAY,EACZ,KAAa;IAEb,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC;IACpD,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAC/B,MAAM,SAAS,GAAG,gBAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1D,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACvB,eAAM,CAAC,KAAK,CAAC,oDAAoD,IAAI,GAAG,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IACpC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;IAEnC,QAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,GAAG;YACN,OAAO,MAAM,GAAG,OAAO,CAAC;QAC1B,KAAK,IAAI;YACP,OAAO,MAAM,IAAI,OAAO,CAAC;QAC3B,KAAK,GAAG;YACN,OAAO,MAAM,GAAG,OAAO,CAAC;QAC1B,KAAK,IAAI;YACP,OAAO,MAAM,IAAI,OAAO,CAAC;QAC3B,yCAAyC;QACzC;YACE,OAAO,MAAM,KAAK,OAAO,CAAC;IAC9B,CAAC;AACH,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport ms from 'ms';\nimport { logger } from '../logger';\nimport { regEx } from './regex';\n\nconst splitRegex = regEx(/(.*?[a-z]+)/);\n\nfunction split(time: string): string[] {\n  return time\n    .split(splitRegex)\n    .map((x) => x.trim())\n    .filter(is.nonEmptyString);\n}\n\nfunction applyCustomFormat(spec: string): ms.StringValue {\n  const monthRegex = regEx(/^(\\d+)\\s*(?:months?|M)$/);\n  return spec.replace(\n    monthRegex,\n    (_, months) => `${months * 30} days`,\n  ) as ms.StringValue;\n}\n\nexport function toMs(time: string): number | null {\n  try {\n    const specs = split(time).map(applyCustomFormat);\n    if (!specs.length) {\n      logger.debug({ time }, `Invalid time specifier: '${time}'`);\n      return null;\n    }\n\n    let totalMillis = 0;\n    for (const spec of specs) {\n      const millis = ms(spec);\n      if (!is.number(millis)) {\n        logger.debug({ time }, `Invalid time specifier: '${spec}'`);\n        return null;\n      }\n      totalMillis += millis;\n    }\n    return totalMillis;\n  } catch (err) {\n    logger.debug({ time, err }, `Invalid time specifier: '${time}'`);\n    return null;\n  }\n}\n\nconst rangeRegex = regEx(/^(?<operator>(>=|<=|<|>))\\s*(?<age>.*)$/);\n\nexport function satisfiesDateRange(\n  date: string,\n  range: string,\n): boolean | null {\n  const grps = range.trim().match(rangeRegex)?.groups;\n  if (!grps) {\n    return null;\n  }\n\n  const { operator, age } = grps;\n  const luxonDate = DateTime.fromISO(date, { zone: 'utc' });\n  if (!luxonDate.isValid) {\n    logger.trace(`Invalid date when computing satisfiesDateRange: '${date}'`);\n    return null;\n  }\n\n  const dateMs = luxonDate.toMillis();\n  const ageMs = toMs(age);\n  if (!is.number(ageMs)) {\n    return null;\n  }\n\n  const rangeMs = Date.now() - ageMs;\n\n  switch (operator) {\n    case '>':\n      return dateMs < rangeMs;\n    case '>=':\n      return dateMs <= rangeMs;\n    case '<':\n      return dateMs > rangeMs;\n    case '<=':\n      return dateMs >= rangeMs;\n    // istanbul ignore next: can never happen\n    default:\n      return dateMs === rangeMs;\n  }\n}\n"]}