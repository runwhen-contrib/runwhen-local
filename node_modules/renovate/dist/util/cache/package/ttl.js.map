{"version":3,"file":"ttl.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/ttl.ts"],"names":[],"mappings":";;AAIA,wCAQC;AAiBD,4CAaC;;AA1CD,kEAAkC;AAClC,mDAAsD;AAGtD,SAAgB,cAAc,CAC5B,SAAgC;IAEhC,MAAM,GAAG,GAAG,qBAAY,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;IAChE,IAAI,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;QACnB,OAAO,GAAG,CAAC;IACb,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAUD;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAC9B,SAAgC,EAChC,UAAkB;IAElB,MAAM,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC;IAE/D,MAAM,mBAAmB,GAAG,qBAAY,CAAC,GAAG,CAC1C,qBAAqB,EACrB,CAAC,GAAG,EAAE,GAAG,EAAE,CACZ,CAAC;IACF,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;IAErE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC;AAC5C,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../../config/global';\nimport type { PackageCacheNamespace } from './types';\n\nexport function getTtlOverride(\n  namespace: PackageCacheNamespace,\n): number | undefined {\n  const ttl = GlobalConfig.get('cacheTtlOverride', {})[namespace];\n  if (is.number(ttl)) {\n    return ttl;\n  }\n  return undefined;\n}\n\nexport interface TTLValues {\n  /** TTL for serving cached value without hitting the server */\n  softTtlMinutes: number;\n\n  /** TTL for serving stale cache when upstream responds with errors */\n  hardTtlMinutes: number;\n}\n\n/**\n * Apply user-configured overrides and return the final values for soft/hard TTL.\n *\n * @param namespace Cache namespace\n * @param ttlMinutes TTL value configured in Renovate codebase\n * @returns\n */\nexport function resolveTtlValues(\n  namespace: PackageCacheNamespace,\n  ttlMinutes: number,\n): TTLValues {\n  const softTtlMinutes = getTtlOverride(namespace) ?? ttlMinutes;\n\n  const cacheHardTtlMinutes = GlobalConfig.get(\n    'cacheHardTtlMinutes',\n    7 * 24 * 60,\n  );\n  const hardTtlMinutes = Math.max(softTtlMinutes, cacheHardTtlMinutes);\n\n  return { softTtlMinutes, hardTtlMinutes };\n}\n"]}