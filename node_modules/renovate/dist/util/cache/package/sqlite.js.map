{"version":3,"file":"sqlite.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/sqlite.ts"],"names":[],"mappings":"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","sourcesContent":["import { promisify } from 'node:util';\nimport zlib, { constants } from 'node:zlib';\nimport type { Database, Statement } from 'better-sqlite3';\nimport { exists } from 'fs-extra';\nimport * as upath from 'upath';\nimport { sqlite } from '../../../expose.cjs';\nimport { logger } from '../../../logger';\nimport { ensureDir } from '../../fs';\nimport type { PackageCacheNamespace } from './types';\n\nconst brotliCompress = promisify(zlib.brotliCompress);\nconst brotliDecompress = promisify(zlib.brotliDecompress);\n\nfunction compress(input: unknown): Promise<Buffer> {\n  const jsonStr = JSON.stringify(input);\n  return brotliCompress(jsonStr, {\n    params: {\n      [constants.BROTLI_PARAM_MODE]: constants.BROTLI_MODE_TEXT,\n      [constants.BROTLI_PARAM_QUALITY]: 3,\n    },\n  });\n}\n\nasync function decompress<T>(input: Buffer): Promise<T> {\n  const buf = await brotliDecompress(input);\n  const jsonStr = buf.toString('utf8');\n  return JSON.parse(jsonStr) as T;\n}\n\nexport class SqlitePackageCache {\n  private readonly upsertStatement: Statement<unknown[]>;\n  private readonly getStatement: Statement<unknown[]>;\n  private readonly deleteExpiredRows: Statement<unknown[]>;\n  private readonly countStatement: Statement<unknown[]>;\n\n  static async init(cacheDir: string): Promise<SqlitePackageCache> {\n    // simply let it throw if it fails, so no test coverage needed\n    const Sqlite = sqlite();\n    const sqliteDir = upath.join(cacheDir, 'renovate/renovate-cache-sqlite');\n    await ensureDir(sqliteDir);\n    const sqliteFile = upath.join(sqliteDir, 'db.sqlite');\n\n    if (await exists(sqliteFile)) {\n      logger.debug(`Using SQLite package cache: ${sqliteFile}`);\n    } else {\n      logger.debug(`Creating SQLite package cache: ${sqliteFile}`);\n    }\n\n    const client = new Sqlite(sqliteFile);\n    const res = new SqlitePackageCache(client);\n    return res;\n  }\n\n  private constructor(private client: Database) {\n    client.pragma('journal_mode = WAL');\n    client.pragma(\"encoding = 'UTF-8'\");\n\n    client\n      .prepare(\n        `\n          CREATE TABLE IF NOT EXISTS package_cache (\n            namespace TEXT NOT NULL,\n            key TEXT NOT NULL,\n            expiry INTEGER NOT NULL,\n            data BLOB NOT NULL,\n            PRIMARY KEY (namespace, key)\n          )\n        `,\n      )\n      .run();\n    client\n      .prepare('CREATE INDEX IF NOT EXISTS expiry ON package_cache (expiry)')\n      .run();\n    client\n      .prepare(\n        'CREATE INDEX IF NOT EXISTS namespace_key ON package_cache (namespace, key)',\n      )\n      .run();\n\n    this.upsertStatement = client.prepare(`\n      INSERT INTO package_cache (namespace, key, data, expiry)\n      VALUES (@namespace, @key, @data, unixepoch() + @ttlSeconds)\n      ON CONFLICT (namespace, key) DO UPDATE SET\n        data = @data,\n        expiry = unixepoch() + @ttlSeconds\n    `);\n\n    this.getStatement = client\n      .prepare(\n        `\n          SELECT data FROM package_cache\n          WHERE\n            namespace = @namespace AND key = @key AND expiry > unixepoch()\n        `,\n      )\n      .pluck(true);\n\n    this.deleteExpiredRows = client.prepare(`\n      DELETE FROM package_cache\n      WHERE expiry <= unixepoch()\n    `);\n\n    this.countStatement = client\n      .prepare('SELECT COUNT(*) FROM package_cache')\n      .pluck(true);\n  }\n\n  async set(\n    namespace: PackageCacheNamespace,\n    key: string,\n    value: unknown,\n    ttlMinutes = 5,\n  ): Promise<void> {\n    const data = await compress(value);\n    const ttlSeconds = ttlMinutes * 60;\n    this.upsertStatement.run({ namespace, key, data, ttlSeconds });\n    return Promise.resolve();\n  }\n\n  async get<T = unknown>(\n    namespace: PackageCacheNamespace,\n    key: string,\n  ): Promise<T | undefined> {\n    const data = this.getStatement.get({ namespace, key }) as\n      | Buffer\n      | undefined;\n\n    if (!data) {\n      return undefined;\n    }\n\n    return await decompress<T>(data);\n  }\n\n  private cleanupExpired(): void {\n    const start = Date.now();\n    const totalCount = this.countStatement.get() as number;\n    const { changes: deletedCount } = this.deleteExpiredRows.run();\n    const finish = Date.now();\n    const durationMs = finish - start;\n    logger.debug(\n      `SQLite package cache: deleted ${deletedCount} of ${totalCount} entries in ${durationMs}ms`,\n    );\n  }\n\n  cleanup(): Promise<void> {\n    this.cleanupExpired();\n    this.client.close();\n    return Promise.resolve();\n  }\n}\n"]}