{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/util/cache/package/index.ts"],"names":[],"mappings":";;AAWA,kBAmBC;AAED,kBAiBC;AAED,oBAwBC;AAED,0BAOC;;AAnFD,uCAAgD;AAChD,4DAAsC;AACtC,0DAAoC;AACpC,+BAAuC;AACvC,4DAAsC;AACtC,qCAA8C;AAG9C,IAAI,UAAoC,CAAC;AAElC,KAAK,UAAU,GAAG,CACvB,SAAgC,EAChC,GAAW;IAEX,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,WAAW,GAAG,IAAA,oBAAc,EAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACnD,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAClC,IAAI,CAAC,CAAC,EAAE,CAAC;QACP,CAAC,GAAG,yBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,CACjC,UAAW,CAAC,GAAG,CAAW,SAAS,EAAE,GAAG,CAAC,CAC1C,CAAC;QACF,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAEM,KAAK,UAAU,GAAG,CACvB,SAAgC,EAChC,GAAW,EACX,KAAc,EACd,OAAe;IAEf,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO;IACT,CAAC;IAED,MAAM,yBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,CACnC,UAAW,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAChD,CAAC;IAEF,MAAM,WAAW,GAAG,IAAA,oBAAc,EAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACnD,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC/B,CAAC;AAEM,KAAK,UAAU,IAAI,CAAC,MAAiB;IAC1C,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QACpB,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3D,UAAU,GAAG;YACX,GAAG,EAAE,UAAU,CAAC,GAAG;YACnB,GAAG,EAAE,UAAU,CAAC,GAAG;SACpB,CAAC;QACF,OAAO;IACT,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,CAAC;QAChD,UAAU,GAAG,MAAM,2BAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,CAAC;QAC7D,OAAO;IACT,CAAC;IAED,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QACpB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAChC,UAAU,GAAG;YACX,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,OAAO,EAAE,SAAS,CAAC,OAAO;SAC3B,CAAC;QACF,OAAO;IACT,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,OAAO,CAAC,MAAiB;IAC7C,IAAI,MAAM,EAAE,QAAQ,EAAE,CAAC;QACrB,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;IACzB,CAAC;IACD,IAAI,UAAU,EAAE,OAAO,EAAE,CAAC;QACxB,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;AACH,CAAC","sourcesContent":["import type { AllConfig } from '../../../config/types';\nimport { PackageCacheStats } from '../../stats';\nimport * as memCache from '../memory';\nimport * as fileCache from './file';\nimport { getCombinedKey } from './key';\nimport * as redisCache from './redis';\nimport { SqlitePackageCache } from './sqlite';\nimport type { PackageCache, PackageCacheNamespace } from './types';\n\nlet cacheProxy: PackageCache | undefined;\n\nexport async function get<T = any>(\n  namespace: PackageCacheNamespace,\n  key: string,\n): Promise<T | undefined> {\n  if (!cacheProxy) {\n    return undefined;\n  }\n\n  const combinedKey = getCombinedKey(namespace, key);\n  let p = memCache.get(combinedKey);\n  if (!p) {\n    p = PackageCacheStats.wrapGet(() =>\n      cacheProxy!.get<number[]>(namespace, key),\n    );\n    memCache.set(combinedKey, p);\n  }\n\n  const result = await p;\n  return result;\n}\n\nexport async function set(\n  namespace: PackageCacheNamespace,\n  key: string,\n  value: unknown,\n  minutes: number,\n): Promise<void> {\n  if (!cacheProxy) {\n    return;\n  }\n\n  await PackageCacheStats.wrapSet(() =>\n    cacheProxy!.set(namespace, key, value, minutes),\n  );\n\n  const combinedKey = getCombinedKey(namespace, key);\n  const p = Promise.resolve(value);\n  memCache.set(combinedKey, p);\n}\n\nexport async function init(config: AllConfig): Promise<void> {\n  if (config.redisUrl) {\n    await redisCache.init(config.redisUrl, config.redisPrefix);\n    cacheProxy = {\n      get: redisCache.get,\n      set: redisCache.set,\n    };\n    return;\n  }\n\n  if (process.env.RENOVATE_X_SQLITE_PACKAGE_CACHE) {\n    cacheProxy = await SqlitePackageCache.init(config.cacheDir!);\n    return;\n  }\n\n  if (config.cacheDir) {\n    fileCache.init(config.cacheDir);\n    cacheProxy = {\n      get: fileCache.get,\n      set: fileCache.set,\n      cleanup: fileCache.cleanup,\n    };\n    return;\n  }\n}\n\nexport async function cleanup(config: AllConfig): Promise<void> {\n  if (config?.redisUrl) {\n    await redisCache.end();\n  }\n  if (cacheProxy?.cleanup) {\n    await cacheProxy.cleanup();\n  }\n}\n"]}