{"version":3,"file":"local.js","sourceRoot":"","sources":["../../../../../lib/util/cache/repository/impl/local.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAC5C,oCAA8E;AAC9E,sCAAkD;AAElD,iCAAuC;AAEvC,MAAa,cAAe,SAAQ,oBAAa;IAC/C,YAAY,UAAkB,EAAE,WAAmB;QACjD,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IACjC,CAAC;IAES,KAAK,CAAC,IAAI;QAClB,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,IAAI,CAAC;YACH,kCAAkC;YAClC,IAAI,CAAC,CAAC,MAAM,IAAA,oBAAe,EAAC,aAAa,CAAC,CAAC,EAAE,CAAC;gBAC5C,OAAO,IAAI,CAAC;YACd,CAAC;YACD,OAAO,MAAM,IAAA,kBAAa,EAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC3E,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,KAAK,CAAC,IAAqB;QACzC,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,IAAA,oBAAe,EAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEO,gBAAgB;QACtB,OAAO,IAAA,8BAAqB,EAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC;CACF;AA3BD,wCA2BC","sourcesContent":["import { logger } from '../../../../logger';\nimport { cachePathExists, outputCacheFile, readCacheFile } from '../../../fs';\nimport { getLocalCacheFileName } from '../common';\nimport type { RepoCacheRecord } from '../schema';\nimport { RepoCacheBase } from './base';\n\nexport class RepoCacheLocal extends RepoCacheBase {\n  constructor(repository: string, fingerprint: string) {\n    super(repository, fingerprint);\n  }\n\n  protected async read(): Promise<string | null> {\n    const cacheFileName = this.getCacheFileName();\n    try {\n      // suppress debug logs with errors\n      if (!(await cachePathExists(cacheFileName))) {\n        return null;\n      }\n      return await readCacheFile(cacheFileName, 'utf8');\n    } catch (err) {\n      logger.debug({ err, cacheFileName }, 'Repository local cache not found');\n    }\n    return null;\n  }\n\n  protected async write(data: RepoCacheRecord): Promise<void> {\n    const cacheFileName = this.getCacheFileName();\n    await outputCacheFile(cacheFileName, JSON.stringify(data));\n  }\n\n  private getCacheFileName(): string {\n    return getLocalCacheFileName(this.platform, this.repository);\n  }\n}\n"]}