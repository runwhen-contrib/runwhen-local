{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  RepositoryCacheConfig,\n  RepositoryCacheType,\n  UpdateType,\n} from '../../../config/types';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport type { RepoInitConfig } from '../../../workers/repository/init/types';\nimport type { PrBlockedBy } from '../../../workers/types';\n\nexport interface BaseBranchCache {\n  revision?: number;\n  sha: string; // branch commit sha\n  configHash: string; // object hash of config\n  extractionFingerprints: Record<string, string | undefined>; // matching manager fingerprints\n  packageFiles: Record<string, PackageFile[]>; // extract result\n}\n\nexport interface BranchUpgradeCache {\n  currentDigest?: string;\n  currentValue?: string;\n  datasource?: string;\n  depName?: string;\n  depType?: string;\n  displayPending?: unknown;\n  fixedVersion?: string;\n  currentVersion?: string;\n  packageName?: string;\n  newDigest?: string;\n  newValue?: string;\n  newVersion?: string;\n  sourceUrl?: string;\n  packageFile?: string;\n  remediationNotPossible?: unknown;\n  updateType?: UpdateType;\n}\n\nexport interface OnboardingBranchCache {\n  defaultBranchSha: string;\n  onboardingBranchSha: string;\n  isConflicted: boolean;\n  isModified: boolean;\n  configFileName?: string;\n  configFileParsed?: string;\n}\n\nexport interface ReconfigureBranchCache {\n  reconfigureBranchSha: string;\n  isConfigValid: boolean;\n}\n\nexport interface PrCache {\n  /**\n   * Fingerprint of the PR body\n   */\n  fingerprint?: string; // Defunct\n  bodyFingerprint: string; // Actively used\n  /**\n   * last PR modified ISO timestamp\n   */\n  lastEdited: string;\n}\n\nexport interface BranchCache {\n  /**\n   * Whether this branch has automerge enabled\n   */\n  automerge?: boolean;\n  /**\n   * Name of base branch\n   */\n  baseBranch?: string;\n  /**\n   * The base branch's most recent commit SHA\n   */\n  baseBranchSha?: string | null;\n  /**\n   * Hash of the manager fingerprints and the filtered update branch config\n   */\n  branchFingerprint?: string; // Defunct\n  commitFingerprint?: string; // Actively used\n  /**\n   * Branch name\n   */\n  branchName: string;\n  /**\n   * Whether the update branch is behind base branch\n   */\n  isBehindBase?: boolean;\n  /**\n   * Whether the update branch is in conflict with base branch\n   */\n  isConflicted?: boolean;\n  /**\n   * Whether a person not listed in gitIgnoredAuthors updated the branch.\n   */\n  isModified?: boolean;\n  /**\n   *\n   */\n  pristine?: boolean;\n  /**\n   * Pr number of PR created from this branch\n   */\n  prNo: number | null;\n  /**\n   * The branch's most recent commit SHA\n   */\n  sha?: string | null;\n  /**\n   * Details on the dependency upgrades that have been applied in this branch\n   */\n  upgrades: BranchUpgradeCache[];\n  /**\n   * Object that has PR info\n   */\n  prCache?: PrCache | null;\n\n  /**\n   * Dependency dashboard information\n   */\n  prBlockedBy?: PrBlockedBy;\n  prTitle?: string;\n  result?: string;\n}\n\nexport interface RepoCacheData {\n  configFileName?: string;\n  httpCache?: Record<string, unknown>;\n  semanticCommits?: 'enabled' | 'disabled';\n  branches?: BranchCache[];\n  init?: RepoInitConfig;\n  scan?: Record<string, BaseBranchCache>;\n  lastPlatformAutomergeFailure?: string;\n  platform?: {\n    gitea?: {\n      pullRequestsCache?: unknown;\n    };\n    github?: {\n      /**\n       * To avoid circular dependency problem, we use `unknown` type here.\n       */\n      pullRequestsCache?: unknown;\n      graphqlPageCache?: unknown;\n      issuesCache?: Record<number, unknown>;\n    };\n    bitbucket?: {\n      pullRequestsCache?: unknown;\n    };\n    bitbucketServer?: {\n      pullRequestsCache?: unknown;\n    };\n  };\n  prComments?: Record<number, Record<string, string>>;\n  onboardingBranchCache?: OnboardingBranchCache;\n  reconfigureBranchCache?: ReconfigureBranchCache;\n}\n\nexport interface RepoCache {\n  load(): Promise<void>;\n  save(): Promise<void>;\n  getData(): RepoCacheData;\n  isModified(): boolean | undefined;\n}\n\nexport interface RepoCacheConfig {\n  repository?: string;\n  repositoryCache?: RepositoryCacheConfig;\n  repositoryCacheType?: RepositoryCacheType;\n  repoFingerprint: string;\n}\n"]}