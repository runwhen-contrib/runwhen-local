{"version":3,"file":"http-cache.js","sourceRoot":"","sources":["../../../../lib/util/cache/repository/http-cache.ts"],"names":[],"mappings":";;AAMA,4CA0BC;AAhCD,iCAAiC;AACjC,mDAAsD;AACtD,4CAAyC;AACzC,oDAA0D;AAG1D,SAAgB,gBAAgB,CAAC,SAAwB;IACvD,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,CAAC;IAChC,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;QAC5D,OAAO;IACT,CAAC;IAED,MAAM,OAAO,GAAG,qBAAY,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;IACzD,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC;QAClB,eAAM,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAC1E,OAAO,SAAS,CAAC,SAAS,CAAC;QAC3B,OAAO;IACT,CAAC;IAED,MAAM,GAAG,GAAG,gBAAQ,CAAC,GAAG,EAAE,CAAC;IAC3B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;QACpD,MAAM,MAAM,GAAG,wBAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YAClC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACzB,MAAM,MAAM,GAAG,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YACxE,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;gBACjB,eAAM,CAAC,KAAK,CAAC,0CAA0C,GAAG,EAAE,CAAC,CAAC;gBAC9D,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { DateTime } from 'luxon';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { HttpCacheSchema } from '../../http/cache/schema';\nimport type { RepoCacheData } from './types';\n\nexport function cleanupHttpCache(cacheData: RepoCacheData): void {\n  const { httpCache } = cacheData;\n  if (!httpCache) {\n    logger.trace('cleanupHttpCache: no http cache to clean up');\n    return;\n  }\n\n  const ttlDays = GlobalConfig.get('httpCacheTtlDays', 90);\n  if (ttlDays === 0) {\n    logger.trace('cleanupHttpCache: zero value received, removing the cache');\n    delete cacheData.httpCache;\n    return;\n  }\n\n  const now = DateTime.now();\n  for (const [url, item] of Object.entries(httpCache)) {\n    const parsed = HttpCacheSchema.safeParse(item);\n    if (parsed.success && parsed.data) {\n      const item = parsed.data;\n      const expiry = DateTime.fromISO(item.timestamp).plus({ days: ttlDays });\n      if (expiry < now) {\n        logger.debug(`http cache: removing expired cache for ${url}`);\n        delete httpCache[url];\n      }\n    }\n  }\n}\n"]}