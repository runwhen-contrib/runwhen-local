{"version":3,"file":"private-key.js","sourceRoot":"","sources":["../../../lib/util/git/private-key.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'node:os';\nimport is from '@sindresorhus/is';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { PLATFORM_GPG_FAILED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { exec } from '../exec';\nimport type { ExecResult } from '../exec/types';\nimport { newlineRegex, regEx } from '../regex';\nimport { addSecretForSanitizing } from '../sanitize';\n\ntype PrivateKeyFormat = 'gpg' | 'ssh';\n\nconst sshKeyRegex = regEx(\n  /-----BEGIN ([A-Z ]+ )?PRIVATE KEY-----.*?-----END ([A-Z]+ )?PRIVATE KEY-----/,\n  's',\n);\n\nlet gitPrivateKey: PrivateKey | undefined;\n\nabstract class PrivateKey {\n  protected readonly key: string;\n  protected keyId: string | undefined;\n  protected abstract readonly gpgFormat: string;\n\n  constructor(key: string) {\n    this.key = key;\n    addSecretForSanitizing(this.key, 'global');\n    logger.debug(\n      'gitPrivateKey: successfully set (but not yet written/configured)',\n    );\n  }\n\n  async writeKey(): Promise<void> {\n    try {\n      this.keyId ??= await this.importKey();\n      logger.debug('gitPrivateKey: imported');\n    } catch (err) {\n      logger.warn({ err }, 'gitPrivateKey: error importing');\n      throw new Error(PLATFORM_GPG_FAILED);\n    }\n  }\n\n  async configSigningKey(cwd: string): Promise<void> {\n    logger.debug('gitPrivateKey: configuring commit signing');\n    // TODO: types (#22198)\n    await exec(`git config user.signingkey ${this.keyId!}`, { cwd });\n    await exec(`git config commit.gpgsign true`, { cwd });\n    await exec(`git config gpg.format ${this.gpgFormat}`, { cwd });\n  }\n\n  protected abstract importKey(): Promise<string | undefined>;\n}\n\nclass GPGKey extends PrivateKey {\n  protected readonly gpgFormat = 'openpgp';\n\n  constructor(key: string) {\n    super(key.trim());\n  }\n\n  protected async importKey(): Promise<string | undefined> {\n    const keyFileName = upath.join(os.tmpdir() + '/git-private-gpg.key');\n    await fs.outputFile(keyFileName, this.key);\n    const { stdout, stderr } = await exec(\n      // --batch --no-tty flags allow Renovate to skip warnings about unsupported algorithms in the key\n      `gpg --batch --no-tty --import ${keyFileName}`,\n    );\n    logger.debug({ stdout, stderr }, 'Private key import result');\n    await fs.remove(keyFileName);\n    return `${stdout}${stderr}`\n      .split(newlineRegex)\n      .find((line) => line.includes('secret key imported'))\n      ?.replace('gpg: key ', '')\n      .split(':')\n      .shift();\n  }\n}\n\nclass SSHKey extends PrivateKey {\n  protected readonly gpgFormat = 'ssh';\n\n  protected async importKey(): Promise<string | undefined> {\n    const keyFileName = upath.join(os.tmpdir() + '/git-private-ssh.key');\n    if (await this.hasPassphrase(keyFileName)) {\n      throw new Error('SSH key must have an empty passhprase');\n    }\n    await fs.outputFile(keyFileName, this.key.replace(/\\n?$/, '\\n'));\n    process.on('exit', () => fs.removeSync(keyFileName));\n    await fs.chmod(keyFileName, 0o600);\n    // HACK: `git` calls `ssh-keygen -Y sign ...` internally for SSH-based\n    // commit signing. Technically, only the private key is needed for signing,\n    // but `ssh-keygen` has an implementation quirk which requires also the\n    // public key file to exist. Therefore, we derive the public key from the\n    // private key just to satisfy `ssh-keygen` until the problem has been\n    // resolved.\n    // https://github.com/renovatebot/renovate/issues/18197#issuecomment-2152333710\n    const { stdout } = await exec(`ssh-keygen -y -P \"\" -f ${keyFileName}`);\n    const pubFileName = `${keyFileName}.pub`;\n    await fs.outputFile(pubFileName, stdout);\n    process.on('exit', () => fs.removeSync(pubFileName));\n    return keyFileName;\n  }\n\n  private async hasPassphrase(keyFileName: string): Promise<boolean> {\n    try {\n      await exec(`ssh-keygen -y -P \"\" -f ${keyFileName}`);\n    } catch (err) {\n      return (err as ExecResult).stderr.includes(\n        'incorrect passphrase supplied to decrypt private key',\n      );\n    }\n    return false;\n  }\n}\n\nfunction getPrivateKeyFormat(key: string): PrivateKeyFormat {\n  return sshKeyRegex.test(key) ? 'ssh' : 'gpg';\n}\n\nfunction createPrivateKey(key: string): PrivateKey {\n  switch (getPrivateKeyFormat(key)) {\n    case 'gpg':\n      logger.debug('gitPrivateKey: GPG key detected');\n      return new GPGKey(key);\n    case 'ssh':\n      logger.debug('gitPrivateKey: SSH key detected');\n      return new SSHKey(key);\n  }\n}\n\nexport function setPrivateKey(key: string | undefined): void {\n  if (!is.nonEmptyStringAndNotWhitespace(key)) {\n    return;\n  }\n  gitPrivateKey = createPrivateKey(key);\n}\n\nexport async function writePrivateKey(): Promise<void> {\n  await gitPrivateKey?.writeKey();\n}\n\nexport async function configSigningKey(cwd: string): Promise<void> {\n  await gitPrivateKey?.configSigningKey(cwd);\n}\n"]}