{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../lib/util/git/url.ts"],"names":[],"mappings":"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","sourcesContent":["import gitUrlParse from 'git-url-parse';\nimport { logger } from '../../logger';\nimport { detectPlatform } from '../common';\nimport * as hostRules from '../host-rules';\nimport { regEx } from '../regex';\n\nexport function parseGitUrl(url: string): gitUrlParse.GitUrl {\n  return gitUrlParse(url);\n}\n\nexport function getHttpUrl(url: string, token?: string): string {\n  const parsedUrl = parseGitUrl(url);\n\n  let { protocol } = parsedUrl;\n  const origProtocol = protocol;\n\n  // Convert non-https URLs to https and strip port\n  if (!regEx(/^https?$/).test(protocol)) {\n    parsedUrl.port = '443';\n    protocol = 'https';\n  }\n\n  parsedUrl.user = '';\n  parsedUrl.token = token ?? '';\n\n  switch (detectPlatform(parsedUrl.toString(protocol))) {\n    case 'gitlab':\n      if (token) {\n        parsedUrl.token = token.includes(':')\n          ? token\n          : `gitlab-ci-token:${token}`;\n      }\n      break;\n    case 'github':\n      if (token) {\n        parsedUrl.token = token.includes(':')\n          ? token\n          : `x-access-token:${token}`;\n      }\n      break;\n    case 'bitbucket-server':\n      // SSH URLs look like ssh://git@git.my.com:7999/project/repo.git\n      // HTTPS URLs look like https://git.my.com/scm/project/repo.git\n      // git-url-parse can't detect bitbucket-server from SSH URL\n      // and thus doesn't know it should insert '/scm/'\n      if (origProtocol === 'ssh') {\n        parsedUrl.source = 'bitbucket-server';\n      }\n      break;\n  }\n\n  return new URL(parsedUrl.toString(protocol)).href;\n}\n\nexport function getRemoteUrlWithToken(url: string, hostType?: string): string {\n  let coercedUrl: string;\n\n  try {\n    coercedUrl = getHttpUrl(url);\n  } catch {\n    logger.warn({ url }, `Attempting to use non-git url for git operations`);\n\n    coercedUrl = url;\n  }\n\n  const hostRule = hostRules.find({ url: coercedUrl, hostType });\n\n  if (hostRule?.token) {\n    logger.debug(`Found hostRules token for url ${url}`);\n\n    return getHttpUrl(url, encodeURIComponent(hostRule.token));\n  }\n\n  if (hostRule?.username && hostRule?.password) {\n    logger.debug(`Found hostRules username and password for url ${url}`);\n    const encodedUsername = encodeURIComponent(hostRule.username);\n    const encodedPassword = encodeURIComponent(hostRule.password);\n\n    return getHttpUrl(url, `${encodedUsername}:${encodedPassword}`);\n  }\n\n  return url;\n}\n"]}