{"version":3,"file":"gitlab.js","sourceRoot":"","sources":["../../../lib/util/http/gitlab.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { RequestError, type RetryObject } from 'got';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { parseLinkHeader, parseUrl } from '../url';\nimport { HttpBase, type InternalJsonUnsafeOptions } from './http';\nimport type { HttpMethod, HttpOptions, HttpResponse } from './types';\n\nlet baseUrl = 'https://gitlab.com/api/v4/';\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport interface GitlabHttpOptions extends HttpOptions {\n  paginate?: boolean;\n}\n\nexport class GitlabHttp extends HttpBase<GitlabHttpOptions> {\n  protected override get baseUrl(): string | undefined {\n    return baseUrl;\n  }\n\n  constructor(type = 'gitlab', options?: GitlabHttpOptions) {\n    super(type, options);\n  }\n\n  protected override async requestJsonUnsafe<T = unknown>(\n    method: HttpMethod,\n    options: InternalJsonUnsafeOptions<GitlabHttpOptions>,\n  ): Promise<HttpResponse<T>> {\n    const resolvedUrl = this.resolveUrl(options.url, options.httpOptions);\n    const opts = {\n      ...options,\n      url: resolvedUrl,\n    };\n    opts.httpOptions ??= {};\n    opts.httpOptions.throwHttpErrors = true;\n\n    const result = await super.requestJsonUnsafe<T>(method, opts);\n    if (opts.httpOptions.paginate && is.array(result.body)) {\n      delete opts.httpOptions.cacheProvider;\n      opts.httpOptions.memCache = false;\n\n      // Check if result is paginated\n      try {\n        const linkHeader = parseLinkHeader(result.headers.link);\n        const nextUrl = linkHeader?.next?.url\n          ? parseUrl(linkHeader.next.url)\n          : null;\n        if (nextUrl) {\n          if (process.env.GITLAB_IGNORE_REPO_URL) {\n            const defaultEndpoint = new URL(baseUrl);\n            nextUrl.protocol = defaultEndpoint.protocol;\n            nextUrl.host = defaultEndpoint.host;\n          }\n\n          opts.url = nextUrl;\n\n          const nextResult = await this.requestJsonUnsafe<T>(method, opts);\n          if (is.array(nextResult.body)) {\n            result.body.push(...nextResult.body);\n          }\n        }\n      } catch (err) {\n        logger.warn({ err }, 'Pagination error');\n      }\n    }\n    return result;\n  }\n\n  protected override handleError(\n    url: string | URL,\n    _httpOptions: HttpOptions,\n    err: Error,\n  ): never {\n    if (err instanceof RequestError && err.response?.statusCode) {\n      if (err.response.statusCode === 404) {\n        logger.trace({ err }, 'GitLab 404');\n        logger.debug({ url }, 'GitLab API 404');\n        throw err;\n      }\n      logger.debug({ err }, 'Gitlab API error');\n      if (\n        err.response.statusCode === 429 ||\n        (err.response.statusCode >= 500 && err.response.statusCode < 600)\n      ) {\n        throw new ExternalHostError(err, 'gitlab');\n      }\n    }\n    const platformFailureCodes = [\n      'EAI_AGAIN',\n      'ECONNRESET',\n      'ETIMEDOUT',\n      'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\n    ];\n    // TODO: fix test, should be `RequestError`\n    if (\n      'code' in err &&\n      is.string(err.code) &&\n      platformFailureCodes.includes(err.code)\n    ) {\n      throw new ExternalHostError(err, 'gitlab');\n    }\n    if (err.name === 'ParseError') {\n      throw new ExternalHostError(err, 'gitlab');\n    }\n    throw err;\n  }\n\n  protected override calculateRetryDelay(retryObject: RetryObject): number {\n    const { error, attemptCount, retryOptions } = retryObject;\n    if (\n      attemptCount <= retryOptions.limit &&\n      error.options.method === 'POST' &&\n      error.response?.statusCode === 409 &&\n      error.response.rawBody.toString().includes('Resource lock')\n    ) {\n      const noise = Math.random() * 100;\n      return 2 ** (attemptCount - 1) * 1000 + noise;\n    }\n\n    return super.calculateRetryDelay(retryObject);\n  }\n}\n"]}