{"version":3,"file":"bitbucket-server.js","sourceRoot":"","sources":["../../../lib/util/http/bitbucket-server.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,iCAAkE;AAGlE,MAAM,SAAS,GAAG,GAAG,CAAC;AACtB,MAAM,SAAS,GAAG,GAAG,CAAC;AAEtB,IAAI,OAAe,CAAC;AACb,MAAM,UAAU,GAAG,CAAC,GAAW,EAAQ,EAAE;IAC9C,OAAO,GAAG,GAAG,CAAC;AAChB,CAAC,CAAC;AAFW,QAAA,UAAU,cAErB;AAaF,MAAa,mBAAoB,SAAQ,eAAoC;IAC3E,IAAuB,OAAO;QAC5B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,YAAY,IAAI,GAAG,kBAAkB,EAAE,OAAoC;QACzE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAEkB,KAAK,CAAC,iBAAiB,CACxC,MAAkB,EAClB,OAA8D;QAE9D,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,EAAE,GAAG,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;QAC9C,IAAI,CAAC,WAAW,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,UAAU,CAAC;QAE3D,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAC3C,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,SAAS,CAAC;YAClD,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAC1C,MAAM,EACN,IAAI,CACL,CAAC;QAEF,IAAI,QAAQ,IAAI,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACrB,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;gBACtC,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;YACpC,CAAC;YAED,MAAM,eAAe,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YAE9C,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,SAAS,CAAC;YACtD,OAAO,aAAa,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,CAAC;gBACvC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAEhE,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAC9C,MAAM,EACN,IAAI,CACL,CAAC;gBACF,eAAe,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChD,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC;YAChD,CAAC;YAED,OAAO,EAAE,GAAG,MAAM,EAAE,IAAI,EAAE,eAAoB,EAAE,CAAC;QACnD,CAAC;QAED,OAAO,MAAyB,CAAC;IACnC,CAAC;CACF;AAxDD,kDAwDC;AAED,SAAS,aAAa,CAAC,GAAY;IACjC,OAAO,YAAE,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACxD,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { HttpBase, type InternalJsonUnsafeOptions } from './http';\nimport type { HttpMethod, HttpOptions, HttpResponse } from './types';\n\nconst MAX_LIMIT = 100;\nconst MAX_PAGES = 100;\n\nlet baseUrl: string;\nexport const setBaseUrl = (url: string): void => {\n  baseUrl = url;\n};\n\nexport interface BitbucketServerHttpOptions extends HttpOptions {\n  paginate?: boolean;\n  limit?: number;\n  maxPages?: number;\n}\n\ninterface PagedResult<T = unknown> {\n  nextPageStart?: number;\n  values: T[];\n}\n\nexport class BitbucketServerHttp extends HttpBase<BitbucketServerHttpOptions> {\n  protected override get baseUrl(): string | undefined {\n    return baseUrl;\n  }\n\n  constructor(type = 'bitbucket-server', options?: BitbucketServerHttpOptions) {\n    super(type, options);\n  }\n\n  protected override async requestJsonUnsafe<T>(\n    method: HttpMethod,\n    options: InternalJsonUnsafeOptions<BitbucketServerHttpOptions>,\n  ): Promise<HttpResponse<T>> {\n    const resolvedUrl = this.resolveUrl(options.url, options.httpOptions);\n    const opts = { ...options, url: resolvedUrl };\n    opts.httpOptions ??= {};\n    opts.httpOptions.headers ??= {};\n    opts.httpOptions.headers['X-Atlassian-Token'] = 'no-check';\n\n    const paginate = opts.httpOptions.paginate;\n    if (paginate) {\n      const limit = opts.httpOptions.limit ?? MAX_LIMIT;\n      resolvedUrl.searchParams.set('limit', limit.toString());\n    }\n\n    const result = await super.requestJsonUnsafe<T | PagedResult<T>>(\n      method,\n      opts,\n    );\n\n    if (paginate && isPagedResult(result.body)) {\n      if (opts.httpOptions) {\n        delete opts.httpOptions.cacheProvider;\n        opts.httpOptions.memCache = false;\n      }\n\n      const collectedValues = [...result.body.values];\n      let nextPageStart = result.body.nextPageStart;\n\n      let maxPages = opts.httpOptions.maxPages ?? MAX_PAGES;\n      while (nextPageStart && --maxPages > 0) {\n        resolvedUrl.searchParams.set('start', nextPageStart.toString());\n\n        const nextResult = await super.requestJsonUnsafe<PagedResult<T>>(\n          method,\n          opts,\n        );\n        collectedValues.push(...nextResult.body.values);\n        nextPageStart = nextResult.body.nextPageStart;\n      }\n\n      return { ...result, body: collectedValues as T };\n    }\n\n    return result as HttpResponse<T>;\n  }\n}\n\nfunction isPagedResult(obj: unknown): obj is PagedResult {\n  return is.nonEmptyObject(obj) && is.array(obj.values);\n}\n"]}