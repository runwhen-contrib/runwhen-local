{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../lib/util/http/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { Options } from 'got';\nimport {\n  GITEA_API_USING_HOST_TYPES,\n  GITHUB_API_USING_HOST_TYPES,\n  GITLAB_API_USING_HOST_TYPES,\n} from '../../constants';\nimport type { GotOptions } from './types';\n\nexport type AuthGotOptions = Pick<\n  GotOptions,\n  | 'hostType'\n  | 'headers'\n  | 'noAuth'\n  | 'context'\n  | 'token'\n  | 'username'\n  | 'password'\n>;\n\nexport function applyAuthorization<GotOptions extends AuthGotOptions>(\n  inOptions: GotOptions,\n): GotOptions {\n  const options: GotOptions = { ...inOptions };\n\n  if (is.nonEmptyString(options.headers?.authorization) || options.noAuth) {\n    return options;\n  }\n\n  options.headers ??= {};\n  if (options.token) {\n    const authType = options.context?.authType;\n    if (authType) {\n      if (authType === 'Token-Only') {\n        options.headers.authorization = options.token;\n      } else {\n        options.headers.authorization = `${authType} ${options.token}`;\n      }\n    } else if (\n      options.hostType &&\n      GITEA_API_USING_HOST_TYPES.includes(options.hostType)\n    ) {\n      // Gitea v1.8.0 and later support `Bearer` as alternate to `token`\n      // https://github.com/go-gitea/gitea/pull/5378\n      options.headers.authorization = `Bearer ${options.token}`;\n    } else if (\n      options.hostType &&\n      GITHUB_API_USING_HOST_TYPES.includes(options.hostType)\n    ) {\n      options.headers.authorization = `token ${options.token}`;\n      if (options.token.startsWith('x-access-token:')) {\n        const appToken = options.token.replace('x-access-token:', '');\n        options.headers.authorization = `token ${appToken}`;\n        if (is.string(options.headers.accept)) {\n          options.headers.accept = options.headers.accept.replace(\n            'application/vnd.github.v3+json',\n            'application/vnd.github.machine-man-preview+json',\n          );\n        }\n      }\n    } else if (\n      options.hostType &&\n      GITLAB_API_USING_HOST_TYPES.includes(options.hostType)\n    ) {\n      // GitLab versions earlier than 12.2 only support authentication with\n      // a personal access token, which is 20 characters long.\n      if (options.token.length === 20) {\n        options.headers['Private-token'] = options.token;\n      } else {\n        options.headers.authorization = `Bearer ${options.token}`;\n      }\n    } else {\n      options.headers.authorization = `Bearer ${options.token}`;\n    }\n    delete options.token;\n  } else if (options.password !== undefined) {\n    // Otherwise got will add username and password to url and header\n    const auth = Buffer.from(\n      `${options.username ?? ''}:${options.password}`,\n    ).toString('base64');\n    options.headers.authorization = `Basic ${auth}`;\n    delete options.username;\n    delete options.password;\n  }\n  return options;\n}\n\n// isAmazon return true if request options contains Amazon related headers\nfunction isAmazon(options: Options): boolean {\n  return !!options.search?.includes('X-Amz-Algorithm');\n}\n\n// isAzureBlob return true if request options contains Azure container registry related data\nfunction isAzureBlob(options: Options): boolean {\n  return !!(\n    options.hostname?.endsWith('.blob.core.windows.net') && // lgtm [js/incomplete-url-substring-sanitization]\n    options.href?.includes('/docker/registry')\n  );\n}\n\n// removeAuthorization from the redirect options\nexport function removeAuthorization(options: Options): void {\n  if (!options.password && !options.headers?.authorization) {\n    return;\n  }\n\n  // Check if request has been redirected to Amazon or an Azure blob (ACR)\n  if (isAmazon(options) || isAzureBlob(options)) {\n    // if there is no port in the redirect URL string, then delete it from the redirect options.\n    // This can be evaluated for removal after upgrading to Got v10\n    const portInUrl = options.href?.split?.('/')?.[2]?.split(':')?.[1];\n    if (!portInUrl) {\n      delete options.port; // Redirect will instead use 80 or 443 for HTTP or HTTPS respectively\n    }\n\n    // registry is hosted on Amazon or Azure blob, redirect url includes\n    // authentication which is not required and should be removed\n    if (options?.headers?.authorization) {\n      delete options.headers.authorization;\n    }\n    delete options.username;\n    delete options.password;\n  }\n}\n"]}