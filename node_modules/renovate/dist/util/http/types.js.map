{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/util/http/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { IncomingHttpHeaders } from 'node:http';\nimport type {\n  Options,\n  OptionsOfBufferResponseBody,\n  OptionsOfJSONResponseBody,\n  OptionsOfTextResponseBody,\n  RequestError,\n} from 'got';\nimport type { ZodError } from 'zod';\nimport type { HttpCacheProvider } from './cache/types';\nimport type { EmptyResultError } from './errors';\n\nexport type GotContextOptions = {\n  authType?: string;\n} & Record<string, unknown>;\n\n// TODO: Move options to context\nexport type GotOptions = GotBufferOptions | GotTextOptions | GotJSONOptions;\nexport type GotBufferOptions = OptionsOfBufferResponseBody & GotExtraOptions;\nexport type GotTextOptions = OptionsOfTextResponseBody & GotExtraOptions;\nexport type GotJSONOptions = OptionsOfJSONResponseBody & GotExtraOptions;\n\nexport type GotStreamOptions = Options & GotExtraOptions;\n\nexport interface GotExtraOptions {\n  abortOnError?: boolean;\n  abortIgnoreStatusCodes?: number[];\n  token?: string;\n  hostType?: string;\n  enabled?: boolean;\n  memCache?: boolean;\n  noAuth?: boolean;\n  context?: GotContextOptions;\n}\n\nexport type OutgoingHttpHeaders = Record<string, string | string[] | undefined>;\n\nexport type GraphqlVariables = Record<string, unknown>;\n\nexport interface GraphqlOptions {\n  variables?: GraphqlVariables;\n  paginate?: boolean;\n  count?: number;\n  limit?: number;\n  cursor?: string | null;\n  acceptHeader?: string;\n  token?: string;\n  readOnly?: boolean;\n}\n\nexport interface HttpOptions {\n  body?: any;\n  username?: string;\n  password?: string;\n  baseUrl?: string;\n  headers?: OutgoingHttpHeaders;\n\n  /**\n   * Do not use authentication\n   */\n  noAuth?: boolean;\n\n  throwHttpErrors?: boolean;\n\n  token?: string;\n  memCache?: boolean;\n  cacheProvider?: HttpCacheProvider;\n  readOnly?: boolean;\n}\n\nexport interface HttpHeaders extends IncomingHttpHeaders {\n  link?: string | undefined;\n}\n\nexport type HttpMethod = 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n\nexport interface HttpResponse<T = string> {\n  statusCode: number;\n  body: T;\n  headers: HttpHeaders;\n  authorization?: boolean;\n}\n\nexport type Task<T> = () => Promise<T>;\nexport type GotTask<T = unknown> = Task<HttpResponse<T>>;\n\nexport interface ThrottleLimitRule {\n  matchHost: string;\n  throttleMs: number;\n}\n\nexport interface ConcurrencyLimitRule {\n  matchHost: string;\n  concurrency: number;\n}\n\nexport type SafeJsonError = RequestError | ZodError | EmptyResultError;\n"]}