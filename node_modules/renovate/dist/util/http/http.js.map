{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../lib/util/http/http.ts"],"names":[],"mappings":";;;AA4DA,kDAQC;;AApED,kEAAkC;AAClC,kEAA8B;AAI9B,6BAA8B;AAC9B,gDAAmD;AACnD,mEAA+D;AAC/D,iDAAuC;AACvC,yCAAsC;AACtC,gFAA2E;AAC3E,kEAA4C;AAC5C,kCAA+B;AAC/B,sCAAqD;AACrD,oCAAkD;AAClD,gCAA6D;AAC7D,kCAA0C;AAC1C,iCAAiE;AACjE,+BAAsC;AACtC,6CAA+D;AAE/D,mCAAmC;AACnC,+CAA6D;AAC7D,yCAAyC;AAUzC,iCAAsC;AA2BtC,SAAgB,mBAAmB,CAAC,OAAgB;IAClD,MAAM,eAAe,GAAG,gBAAG,CAAC,OAAO,CAAC;IACpC,OAAO,CAAC,OAAO,GAAG;QAChB,GAAG,OAAO,CAAC,OAAO;QAClB,YAAY,EACV,qBAAY,CAAC,GAAG,CAAC,WAAW,CAAC;YAC7B,eAAe,eAAe,4CAA4C;KAC7E,CAAC;AACJ,CAAC;AAED,MAAsB,QAAQ;IAWhB;IAPK,OAAO,CAAqB;IAE7C,IAAc,OAAO;QACnB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,YACY,QAAgB,EAC1B,UAAuB,EAAE;QADf,aAAQ,GAAR,QAAQ,CAAQ;QAG1B,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,IAAA,mBAAK,EAClB,OAAO,EACP;YACE,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,EAAE,QAAQ,EAAE;YACrB,KAAK,EAAE;gBACL,cAAc,EAAE,CAAC,WAAW,EAAE,EAAE,CAC9B,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;gBACvC,KAAK,EAAE,UAAU;gBACjB,aAAa,EAAE,CAAC,EAAE,sFAAsF;aACzG;SACF,EACD,EAAE,iBAAiB,EAAE,YAAE,CAAC,WAAW,EAAE,CACtC,CAAC;IACJ,CAAC;IAkBO,KAAK,CAAC,OAAO,CACnB,UAAwB,EACxB,WAAgC;QAEhC,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC7D,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;QAEnC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAE9C,IAAI,OAAO,GAAG,IAAA,mBAAK,EACjB;YACE,GAAG,IAAI,CAAC,OAAO;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,EACD,WAAW,EACX,EAAE,iBAAiB,EAAE,YAAE,CAAC,WAAW,EAAE,CACtC,CAAC;QAEF,eAAM,CAAC,KAAK,CAAC,iBAAiB,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;QAErE,OAAO,CAAC,KAAK,GAAG;YACd,cAAc,EAAE,CAAC,0BAAmB,CAAC;SACtC,CAAC;QAEF,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAE7B,IACE,YAAE,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC9B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EACxC,CAAC;YACD,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,MAAM,QAAQ,GAAG,IAAA,6BAAgB,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,GAAG,IAAA,0BAAa,EAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE,CAAC;YAC9B,eAAM,CAAC,KAAK,CAAC,kDAAkD,GAAG,EAAE,CAAC,CAAC;YACtE,MAAM,IAAI,KAAK,CAAC,8BAAa,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,GAAG,IAAA,yBAAkB,EAAC,OAAO,CAAC,CAAC;QACtC,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC;QAE1B,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;QAElC,MAAM,WAAW,GACf,CAAC,aAAa;YACd,OAAO,CAAC,QAAQ,KAAK,KAAK;YAC1B,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC;YACrD,CAAC,CAAC,IAAA,WAAI,EACF,OAAO,IAAI,CAAC,SAAS,CAAC;gBACpB,GAAG;gBACH,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,MAAM,EAAE,OAAO,CAAC,MAAM;aACvB,CAAC,EAAE,CACL;YACH,CAAC,CAAC,IAAI,CAAC;QAEX,MAAM,cAAc,GAAG,MAAM,aAAa,EAAE,YAAY,CAAU,GAAG,CAAC,CAAC;QACvE,IAAI,cAAc,EAAE,CAAC;YACnB,OAAO,cAAc,CAAC;QACxB,CAAC;QAED,IAAI,UAAU,GAA0C,IAAI,CAAC;QAE7D,2CAA2C;QAC3C,IAAI,WAAW,EAAE,CAAC;YAChB,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAEvC,qCAAqC;YACrC,IAAI,UAAU,IAAI,CAAC,aAAa,EAAE,CAAC;gBACjC,8BAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC;YACD,oCAAoC;QACtC,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,aAAa,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACpD,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAY,GAAG,EAAE;gBAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBACvC,OAAO,IAAA,WAAK,EAAC,GAAG,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAC1C,CAAC,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,sBAAW,EAAC,GAAG,CAAC,CAAC;YAClC,MAAM,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAEzE,MAAM,KAAK,GAAG,IAAA,gBAAQ,EAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;YAE1E,MAAM,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,QAAQ,CAAC;YACxC,UAAU,GAAG,IAAA,2BAAa,EAAC,UAAU,EAAE,GAAG,EAAE,2BAAa,EAAE,aAAa,CAAC,CAAC;YAE1E,IAAI,WAAW,EAAE,CAAC;gBAChB,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC;YAC7B,MAAM,cAAc,GAAG,CAAC,CAAC,WAAW,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC;YAC/D,MAAM,OAAO,GAAG,IAAA,mBAAY,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;YAClD,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,aAAa,CAAC;YAE1D,IAAI,aAAa,EAAE,CAAC;gBAClB,OAAO,MAAM,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC9D,CAAC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,EAAE,YAAY,EAAE,sBAAsB,EAAE,GAAG,OAAO,CAAC;YACzD,IAAI,YAAY,IAAI,CAAC,sBAAsB,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;gBACtE,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;YAED,MAAM,aAAa,GAAG,MAAM,aAAa,EAAE,YAAY,CACrD,GAAG,EACH,IAAI,CACL,CAAC;YACF,IAAI,aAAa,EAAE,CAAC;gBAClB,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,oDAAoD,GAAG,EAAE,CAC1D,CAAC;gBACF,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAES,cAAc,CAAC,IAAS,EAAE,QAA6B;QAC/D,OAAO;IACT,CAAC;IAES,WAAW,CACnB,IAAkB,EAClB,YAAyB,EACzB,GAAU;QAEV,MAAM,GAAG,CAAC;IACZ,CAAC;IAES,UAAU,CAClB,UAAwB,EACxB,OAAgC;QAEhC,IAAI,GAAG,GAAG,UAAU,CAAC;QAErB,IAAI,GAAG,YAAY,GAAG,EAAE,CAAC;YACvB,yBAAyB;YACzB,OAAO,GAAG,CAAC;QACb,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;QACjD,IAAI,OAAO,EAAE,CAAC;YACZ,GAAG,GAAG,IAAA,oBAAc,EAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,SAAS,GAAG,IAAA,cAAQ,EAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAA,eAAS,EAAC,SAAS,CAAC,EAAE,CAAC;YACxC,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,EAAE,EAC9C,iCAAiC,CAClC,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,mBAAmB,CAAC,EAAE,aAAa,EAAe;QAC1D,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,GAAG,CACD,GAAW,EACX,UAAuB,EAAE;QAEzB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,CAAC,GAAW,EAAE,UAAuB,EAAE;QACzC,yBAAyB;QACzB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YACvB,GAAG,OAAO;YACV,YAAY,EAAE,MAAM;YACpB,MAAM,EAAE,MAAM;SACf,CAAiC,CAAC;IACrC,CAAC;IAED,OAAO,CACL,GAAiB,EACjB,UAAuB,EAAE;QAEzB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,SAAS,CACP,GAAiB,EACjB,UAAuB,EAAE;QAEzB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;IACnE,CAAC;IAES,iBAAiB,CACzB,MAAkB,EAClB,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAuC;QAEzE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,WAAW,EAAE,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;QAC7D,MAAM,IAAI,GAAwB;YAChC,GAAG,WAAW;YACd,MAAM;SACP,CAAC;QACF,wCAAwC;QACxC,IAAI,CAAC,OAAO,GAAG;YACb,MAAM,EAAE,kBAAkB;YAC1B,GAAG,IAAI,CAAC,OAAO;SAChB,CAAC;QACF,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAO,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC;IACpE,CAAC;IAEO,KAAK,CAAC,WAAW,CACvB,MAAkB,EAClB,OAAoD;QAEpD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAO,MAAM,EAAE,OAAO,CAAC,CAAC;QAEhE,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,GAAG,CAAC,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,WAAW,CACjB,IAAY,EACZ,IAA0C,EAC1C,IAA+B;QAE/B,MAAM,GAAG,GAAwC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;QAE/D,IAAI,IAAI,YAAY,aAAO,EAAE,CAAC;YAC5B,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,CAAC;aAAM,IAAI,IAAI,EAAE,CAAC;YAChB,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACT,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAW,EAAE,OAAc;QACxC,MAAM,GAAG,GAAG,OAAO,IAAI,EAAE,CAAC;QAC1B,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAC7B,OAAO,EAAE;gBACP,MAAM,EAAE,YAAY;aACrB;YACD,GAAG,GAAG;SACP,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CACpB,GAAW,EACX,OAAc;QAEd,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,IAAA,sBAAe,EAAO,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7C,OAAO,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,CAAC;IAC1B,CAAC;IAWD,KAAK,CAAC,OAAO,CACX,IAAY,EACZ,IAAoB,EACpB,IAAa;QAEb,MAAM,GAAG,GAAG,IAAI,CAAC;QACjB,IAAI,MAAc,CAAC;QACnB,IAAI,WAA6B,CAAC;QAClC,IAAI,IAAI,EAAE,CAAC;YACT,MAAM,GAAG,IAAI,CAAC;YACd,WAAW,GAAG,IAAY,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAc,CAAC;QAC1B,CAAC;QAED,MAAM,IAAI,GAAwB;YAChC,GAAG,WAAW;YACd,MAAM,EAAE,KAAK;SACd,CAAC;QAEF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,IAAA,sBAAe,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,OAAO,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,CAAC;IAC1B,CAAC;IAcD,WAAW,CAIT,IAAY,EACZ,IAAmB,EACnB,IAAa;QAEb,MAAM,GAAG,GAAG,IAAI,CAAC;QACjB,IAAI,MAAc,CAAC;QACnB,IAAI,WAA6B,CAAC;QAClC,IAAI,IAAI,EAAE,CAAC;YACT,MAAM,GAAG,IAAI,CAAC;YACd,WAAW,GAAG,IAAY,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,IAAc,CAAC;QAC1B,CAAC;QAED,IAAI,GAAmD,CAAC;QACxD,IAAI,WAAW,EAAE,CAAC;YAChB,GAAG,GAAG,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;QAC5D,CAAC;aAAM,CAAC;YACN,GAAG,GAAG,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,eAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;;;;OASG;IACH,gBAAgB,CACd,GAAW,EACX,OAAkB;QAElB,OAAO,IAAI,CAAC,WAAW,CAAO,KAAK,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC,CAAC;IACtE,CAAC;IAkBD,OAAO,CACL,IAAY,EACZ,IAAwB,EACxB,IAAa;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAgB,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,WAAW,CAAgB,KAAK,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAkBD,WAAW,CACT,IAAY,EACZ,IAAwB,EACxB,IAAa;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAO,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,OAAO,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAO,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAC,eAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CACvC,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,GAAW,EAAE,WAAsB;QAC1C,OAAO,IAAI,CAAC,WAAW,CAAQ,MAAM,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;IAC/D,CAAC;IAYD,QAAQ,CACN,IAAY,EACZ,IAAwB,EACxB,IAAa;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,WAAW,CAAI,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAYD,OAAO,CACL,IAAY,EACZ,IAAwB,EACxB,IAAc;QAEd,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,WAAW,CAAI,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAYD,SAAS,CACP,IAAY,EACZ,IAAwB,EACxB,IAAa;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,WAAW,CAAI,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAYD,UAAU,CACR,IAAY,EACZ,IAAwB,EACxB,IAAa;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,WAAW,CAAI,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,GAAW,EAAE,OAAqB;QACvC,IAAI,eAAe,GAGf;YACF,GAAG,IAAI,CAAC,OAAO;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,GAAG,OAAO;YACV,MAAM,EAAE,KAAK;SACd,CAAC;QAEF,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;QAE7D,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAErC,IACE,YAAE,CAAC,SAAS,CAAC,eAAe,CAAC,QAAQ,CAAC;YACtC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,EAChD,CAAC;YACD,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC;QAClC,CAAC;QAED,MAAM,QAAQ,GAAG,IAAA,6BAAgB,EAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACxD,eAAe,GAAG,IAAA,0BAAa,EAAC,WAAW,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QACxE,IAAI,eAAe,CAAC,OAAO,KAAK,KAAK,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,8BAAa,CAAC,CAAC;QACjC,CAAC;QACD,eAAe,GAAG,IAAA,yBAAkB,EAAC,eAAe,CAAC,CAAC;QAEtD,OAAO,IAAA,YAAM,EAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IAC9C,CAAC;CACF;AAzkBD,4BAykBC","sourcesContent":["import is from '@sindresorhus/is';\nimport merge from 'deepmerge';\nimport type { Options, RetryObject } from 'got';\nimport type { Merge, SetRequired } from 'type-fest';\nimport type { infer as Infer } from 'zod';\nimport { ZodType } from 'zod';\nimport { GlobalConfig } from '../../config/global';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../cache/memory';\nimport { hash } from '../hash';\nimport { type AsyncResult, Result } from '../result';\nimport { ObsoleteCacheHitLogger } from '../stats';\nimport { isHttpUrl, parseUrl, resolveBaseUrl } from '../url';\nimport { parseSingleYaml } from '../yaml';\nimport { applyAuthorization, removeAuthorization } from './auth';\nimport { fetch, stream } from './got';\nimport { applyHostRule, findMatchingRule } from './host-rules';\n\nimport { getQueue } from './queue';\nimport { getRetryAfter, wrapWithRetry } from './retry-after';\nimport { getThrottle } from './throttle';\nimport type {\n  GotOptions,\n  GotStreamOptions,\n  GotTask,\n  HttpMethod,\n  HttpOptions,\n  HttpResponse,\n  SafeJsonError,\n} from './types';\nimport { copyResponse } from './util';\n\nexport interface InternalJsonUnsafeOptions<\n  Opts extends HttpOptions = HttpOptions,\n> {\n  url: string | URL;\n  httpOptions?: Opts;\n}\n\nexport interface InternalJsonOptions<\n  Opts extends HttpOptions,\n  ResT = unknown,\n  Schema extends ZodType<ResT> = ZodType<ResT>,\n> extends InternalJsonUnsafeOptions<Opts> {\n  schema?: Schema;\n}\n\nexport type InternalGotOptions = SetRequired<GotOptions, 'method' | 'context'>;\n\nexport interface InternalHttpOptions extends HttpOptions {\n  json?: HttpOptions['body'];\n\n  method?: HttpMethod;\n\n  parseJson?: Options['parseJson'];\n}\n\nexport function applyDefaultHeaders(options: Options): void {\n  const renovateVersion = pkg.version;\n  options.headers = {\n    ...options.headers,\n    'user-agent':\n      GlobalConfig.get('userAgent') ??\n      `RenovateBot/${renovateVersion} (https://github.com/renovatebot/renovate)`,\n  };\n}\n\nexport abstract class HttpBase<\n  JSONOpts extends HttpOptions = HttpOptions,\n  Opts extends HttpOptions = HttpOptions,\n> {\n  private readonly options: InternalGotOptions;\n\n  protected get baseUrl(): string | undefined {\n    return undefined;\n  }\n\n  constructor(\n    protected hostType: string,\n    options: HttpOptions = {},\n  ) {\n    const retryLimit = process.env.NODE_ENV === 'test' ? 0 : 2;\n    this.options = merge<InternalGotOptions>(\n      options,\n      {\n        method: 'get',\n        context: { hostType },\n        retry: {\n          calculateDelay: (retryObject) =>\n            this.calculateRetryDelay(retryObject),\n          limit: retryLimit,\n          maxRetryAfter: 0, // Don't rely on `got` retry-after handling, just let it fail and then we'll handle it\n        },\n      },\n      { isMergeableObject: is.plainObject },\n    );\n  }\n  private async request(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions,\n  ): Promise<HttpResponse<string>>;\n  private async request(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions & { responseType: 'text' },\n  ): Promise<HttpResponse<string>>;\n  private async request(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions & { responseType: 'buffer' },\n  ): Promise<HttpResponse<Buffer>>;\n  private async request<T = unknown>(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions & { responseType: 'json' },\n  ): Promise<HttpResponse<T>>;\n\n  private async request(\n    requestUrl: string | URL,\n    httpOptions: InternalHttpOptions,\n  ): Promise<HttpResponse<unknown>> {\n    const resolvedUrl = this.resolveUrl(requestUrl, httpOptions);\n    const url = resolvedUrl.toString();\n\n    this.processOptions(resolvedUrl, httpOptions);\n\n    let options = merge<InternalGotOptions, InternalHttpOptions>(\n      {\n        ...this.options,\n        hostType: this.hostType,\n      },\n      httpOptions,\n      { isMergeableObject: is.plainObject },\n    );\n\n    logger.trace(`HTTP request: ${options.method.toUpperCase()} ${url}`);\n\n    options.hooks = {\n      beforeRedirect: [removeAuthorization],\n    };\n\n    applyDefaultHeaders(options);\n\n    if (\n      is.undefined(options.readOnly) &&\n      ['head', 'get'].includes(options.method)\n    ) {\n      options.readOnly = true;\n    }\n\n    const hostRule = findMatchingRule(url, options);\n    options = applyHostRule(url, options, hostRule);\n    if (options.enabled === false) {\n      logger.debug(`Host is disabled - rejecting request. HostUrl: ${url}`);\n      throw new Error(HOST_DISABLED);\n    }\n    options = applyAuthorization(options);\n    options.timeout ??= 60000;\n\n    const { cacheProvider } = options;\n\n    const memCacheKey =\n      !cacheProvider &&\n      options.memCache !== false &&\n      (options.method === 'get' || options.method === 'head')\n        ? hash(\n            `got-${JSON.stringify({\n              url,\n              headers: options.headers,\n              method: options.method,\n            })}`,\n          )\n        : null;\n\n    const cachedResponse = await cacheProvider?.bypassServer<unknown>(url);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n\n    let resPromise: Promise<HttpResponse<unknown>> | null = null;\n\n    // Cache GET requests unless memCache=false\n    if (memCacheKey) {\n      resPromise = memCache.get(memCacheKey);\n\n      /* v8 ignore start: temporary code */\n      if (resPromise && !cacheProvider) {\n        ObsoleteCacheHitLogger.write(url);\n      }\n      /* v8 ignore stop: temporary code */\n    }\n\n    if (!resPromise) {\n      if (cacheProvider) {\n        await cacheProvider.setCacheHeaders(url, options);\n      }\n\n      const startTime = Date.now();\n      const httpTask: GotTask = () => {\n        const queueMs = Date.now() - startTime;\n        return fetch(url, options, { queueMs });\n      };\n\n      const throttle = getThrottle(url);\n      const throttledTask = throttle ? () => throttle.add(httpTask) : httpTask;\n\n      const queue = getQueue(url);\n      const queuedTask = queue ? () => queue.add(throttledTask) : throttledTask;\n\n      const { maxRetryAfter = 60 } = hostRule;\n      resPromise = wrapWithRetry(queuedTask, url, getRetryAfter, maxRetryAfter);\n\n      if (memCacheKey) {\n        memCache.set(memCacheKey, resPromise);\n      }\n    }\n\n    try {\n      const res = await resPromise;\n      const deepCopyNeeded = !!memCacheKey && res.statusCode !== 304;\n      const resCopy = copyResponse(res, deepCopyNeeded);\n      resCopy.authorization = !!options?.headers?.authorization;\n\n      if (cacheProvider) {\n        return await cacheProvider.wrapServerResponse(url, resCopy);\n      }\n\n      return resCopy;\n    } catch (err) {\n      const { abortOnError, abortIgnoreStatusCodes } = options;\n      if (abortOnError && !abortIgnoreStatusCodes?.includes(err.statusCode)) {\n        throw new ExternalHostError(err);\n      }\n\n      const staleResponse = await cacheProvider?.bypassServer<string | Buffer>(\n        url,\n        true,\n      );\n      if (staleResponse) {\n        logger.debug(\n          { err },\n          `Request error: returning stale cache instead for ${url}`,\n        );\n        return staleResponse;\n      }\n\n      this.handleError(requestUrl, httpOptions, err);\n    }\n  }\n\n  protected processOptions(_url: URL, _options: InternalHttpOptions): void {\n    // noop\n  }\n\n  protected handleError(\n    _url: string | URL,\n    _httpOptions: HttpOptions,\n    err: Error,\n  ): never {\n    throw err;\n  }\n\n  protected resolveUrl(\n    requestUrl: string | URL,\n    options: HttpOptions | undefined,\n  ): URL {\n    let url = requestUrl;\n\n    if (url instanceof URL) {\n      // already a aboslute URL\n      return url;\n    }\n\n    const baseUrl = options?.baseUrl ?? this.baseUrl;\n    if (baseUrl) {\n      url = resolveBaseUrl(baseUrl, url);\n    }\n\n    const parsedUrl = parseUrl(url);\n    if (!parsedUrl || !isHttpUrl(parsedUrl)) {\n      logger.error(\n        { url: requestUrl, baseUrl, resolvedUrl: url },\n        'Request Error: cannot parse url',\n      );\n      throw new Error('Invalid URL');\n    }\n    return parsedUrl;\n  }\n\n  protected calculateRetryDelay({ computedValue }: RetryObject): number {\n    return computedValue;\n  }\n\n  get(\n    url: string,\n    options: HttpOptions = {},\n  ): Promise<HttpResponse<string | Buffer>> {\n    return this.request(url, options);\n  }\n\n  head(url: string, options: HttpOptions = {}): Promise<HttpResponse<never>> {\n    // to complex to validate\n    return this.request(url, {\n      ...options,\n      responseType: 'text',\n      method: 'head',\n    }) as Promise<HttpResponse<never>>;\n  }\n\n  getText(\n    url: string | URL,\n    options: HttpOptions = {},\n  ): Promise<HttpResponse<string>> {\n    return this.request(url, { ...options, responseType: 'text' });\n  }\n\n  getBuffer(\n    url: string | URL,\n    options: HttpOptions = {},\n  ): Promise<HttpResponse<Buffer>> {\n    return this.request(url, { ...options, responseType: 'buffer' });\n  }\n\n  protected requestJsonUnsafe<ResT>(\n    method: HttpMethod,\n    { url, httpOptions: requestOptions }: InternalJsonUnsafeOptions<JSONOpts>,\n  ): Promise<HttpResponse<ResT>> {\n    const { body: json, ...httpOptions } = { ...requestOptions };\n    const opts: InternalHttpOptions = {\n      ...httpOptions,\n      method,\n    };\n    // signal that we expect a json response\n    opts.headers = {\n      accept: 'application/json',\n      ...opts.headers,\n    };\n    if (json) {\n      opts.json = json;\n    }\n    return this.request<ResT>(url, { ...opts, responseType: 'json' });\n  }\n\n  private async requestJson<ResT, Schema extends ZodType<ResT> = ZodType<ResT>>(\n    method: HttpMethod,\n    options: InternalJsonOptions<JSONOpts, ResT, Schema>,\n  ): Promise<HttpResponse<ResT>> {\n    const res = await this.requestJsonUnsafe<ResT>(method, options);\n\n    if (options.schema) {\n      res.body = await options.schema.parseAsync(res.body);\n    }\n\n    return res;\n  }\n\n  private resolveArgs<ResT = unknown>(\n    arg1: string,\n    arg2: JSONOpts | ZodType<ResT> | undefined,\n    arg3: ZodType<ResT> | undefined,\n  ): InternalJsonOptions<JSONOpts, ResT> {\n    const res: InternalJsonOptions<JSONOpts, ResT> = { url: arg1 };\n\n    if (arg2 instanceof ZodType) {\n      res.schema = arg2;\n    } else if (arg2) {\n      res.httpOptions = arg2;\n    }\n\n    if (arg3) {\n      res.schema = arg3;\n    }\n\n    return res;\n  }\n\n  async getPlain(url: string, options?: Opts): Promise<HttpResponse> {\n    const opt = options ?? {};\n    return await this.getText(url, {\n      headers: {\n        Accept: 'text/plain',\n      },\n      ...opt,\n    });\n  }\n\n  /**\n   * @deprecated use `getYaml` instead\n   */\n  async getYamlUnchecked<ResT>(\n    url: string,\n    options?: Opts,\n  ): Promise<HttpResponse<ResT>> {\n    const res = await this.getText(url, options);\n    const body = parseSingleYaml<ResT>(res.body);\n    return { ...res, body };\n  }\n\n  async getYaml<Schema extends ZodType<any, any, any>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  async getYaml<Schema extends ZodType<any, any, any>>(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  async getYaml<Schema extends ZodType<any, any, any>>(\n    arg1: string,\n    arg2?: Opts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>> {\n    const url = arg1;\n    let schema: Schema;\n    let httpOptions: Opts | undefined;\n    if (arg3) {\n      schema = arg3;\n      httpOptions = arg2 as Opts;\n    } else {\n      schema = arg2 as Schema;\n    }\n\n    const opts: InternalHttpOptions = {\n      ...httpOptions,\n      method: 'get',\n    };\n\n    const res = await this.getText(url, opts);\n    const body = await schema.parseAsync(parseSingleYaml(res.body));\n    return { ...res, body };\n  }\n\n  getYamlSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(url: string, schema: Schema): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getYamlSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(\n    url: string,\n    options: Opts,\n    schema: Schema,\n  ): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getYamlSafe<\n    ResT extends NonNullable<unknown>,\n    Schema extends ZodType<ResT> = ZodType<ResT>,\n  >(\n    arg1: string,\n    arg2: Opts | Schema,\n    arg3?: Schema,\n  ): AsyncResult<ResT, SafeJsonError> {\n    const url = arg1;\n    let schema: Schema;\n    let httpOptions: Opts | undefined;\n    if (arg3) {\n      schema = arg3;\n      httpOptions = arg2 as Opts;\n    } else {\n      schema = arg2 as Schema;\n    }\n\n    let res: AsyncResult<HttpResponse<ResT>, SafeJsonError>;\n    if (httpOptions) {\n      res = Result.wrap(this.getYaml(url, httpOptions, schema));\n    } else {\n      res = Result.wrap(this.getYaml(url, schema));\n    }\n\n    return res.transform((response) => Result.ok(response.body));\n  }\n\n  /**\n   * Request JSON and return the response without any validation.\n   *\n   * The usage of this method is discouraged, please use `getJson` instead.\n   *\n   * If you're new to Zod schema validation library:\n   * - consult the [documentation of Zod library](https://github.com/colinhacks/zod?tab=readme-ov-file#basic-usage)\n   * - search the Renovate codebase for 'zod' module usage\n   * - take a look at the `schema-utils.ts` file for Renovate-specific schemas and utilities\n   */\n  getJsonUnchecked<ResT = unknown>(\n    url: string,\n    options?: JSONOpts,\n  ): Promise<HttpResponse<ResT>> {\n    return this.requestJson<ResT>('get', { url, httpOptions: options });\n  }\n\n  /**\n   * Request JSON with a Zod schema for the response,\n   * throwing an error if the response is not valid.\n   *\n   * @param url\n   * @param schema Zod schema for the response\n   */\n  getJson<Schema extends ZodType<any, any, any>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<Schema extends ZodType<any, any, any>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  getJson<Schema extends ZodType<any, any, any>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>> {\n    const args = this.resolveArgs<Infer<Schema>>(arg1, arg2, arg3);\n    return this.requestJson<Infer<Schema>>('get', args);\n  }\n\n  /**\n   * Request JSON with a Zod schema for the response,\n   * wrapping response data in a `Result` class.\n   *\n   * @param url\n   * @param schema Zod schema for the response\n   */\n  getJsonSafe<ResT extends NonNullable<unknown>, Schema extends ZodType<ResT>>(\n    url: string,\n    schema: Schema,\n  ): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getJsonSafe<ResT extends NonNullable<unknown>, Schema extends ZodType<ResT>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): AsyncResult<Infer<Schema>, SafeJsonError>;\n  getJsonSafe<ResT extends NonNullable<unknown>, Schema extends ZodType<ResT>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: Schema,\n  ): AsyncResult<ResT, SafeJsonError> {\n    const args = this.resolveArgs<ResT>(arg1, arg2, arg3);\n    return Result.wrap(this.requestJson<ResT>('get', args)).transform(\n      (response) => Result.ok(response.body),\n    );\n  }\n\n  /**\n   * @deprecated use `head` instead\n   */\n  headJson(url: string, httpOptions?: JSONOpts): Promise<HttpResponse<never>> {\n    return this.requestJson<never>('head', { url, httpOptions });\n  }\n\n  postJson<T>(url: string, options?: JSONOpts): Promise<HttpResponse<T>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  postJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('post', args);\n  }\n\n  putJson<T>(url: string, options?: JSONOpts): Promise<HttpResponse<T>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  putJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: ZodType,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('put', args);\n  }\n\n  patchJson<T>(url: string, options?: JSONOpts): Promise<HttpResponse<T>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  patchJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('patch', args);\n  }\n\n  deleteJson<T>(url: string, options?: JSONOpts): Promise<HttpResponse<T>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T, Schema extends ZodType<T> = ZodType<T>>(\n    url: string,\n    options: JSONOpts,\n    schema: Schema,\n  ): Promise<HttpResponse<Infer<Schema>>>;\n  deleteJson<T = unknown, Schema extends ZodType<T> = ZodType<T>>(\n    arg1: string,\n    arg2?: JSONOpts | Schema,\n    arg3?: Schema,\n  ): Promise<HttpResponse<T>> {\n    const args = this.resolveArgs(arg1, arg2, arg3);\n    return this.requestJson<T>('delete', args);\n  }\n\n  stream(url: string, options?: HttpOptions): NodeJS.ReadableStream {\n    let combinedOptions: Merge<\n      GotStreamOptions,\n      SetRequired<InternalHttpOptions, 'method'>\n    > = {\n      ...this.options,\n      hostType: this.hostType,\n      ...options,\n      method: 'get',\n    };\n\n    const resolvedUrl = this.resolveUrl(url, options).toString();\n\n    applyDefaultHeaders(combinedOptions);\n\n    if (\n      is.undefined(combinedOptions.readOnly) &&\n      ['head', 'get'].includes(combinedOptions.method)\n    ) {\n      combinedOptions.readOnly = true;\n    }\n\n    const hostRule = findMatchingRule(url, combinedOptions);\n    combinedOptions = applyHostRule(resolvedUrl, combinedOptions, hostRule);\n    if (combinedOptions.enabled === false) {\n      throw new Error(HOST_DISABLED);\n    }\n    combinedOptions = applyAuthorization(combinedOptions);\n\n    return stream(resolvedUrl, combinedOptions);\n  }\n}\n"]}