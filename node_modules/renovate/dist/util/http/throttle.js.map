{"version":3,"file":"throttle.js","sourceRoot":"","sources":["../../../lib/util/http/throttle.ts"],"names":[],"mappings":";;;AAwBA,kCAsBC;AAED,sBAEC;;AAlDD,oEAAmC;AACnC,yCAAsC;AACtC,gCAAkC;AAClC,+CAAsD;AAEtD,MAAM,aAAa,GAAG,IAAI,GAAG,EAA2B,CAAC;AAEzD,MAAa,QAAQ;IACX,QAAQ,CAA+B;IAE/C,YAAY,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAA,oBAAS,EAAC;YACxB,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,CAAC;YACR,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CAAI,IAAsB;QAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,aAAa,EAAE,CAAC;IACzB,CAAC;CACF;AAfD,4BAeC;AAED,SAAgB,WAAW,CAAC,GAAW;IACrC,MAAM,IAAI,GAAG,IAAA,cAAQ,EAAC,GAAG,CAAC,EAAE,IAAI,CAAC;IACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,sBAAsB;QACtB,eAAM,CAAC,KAAK,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;QAC3B,QAAQ,GAAG,IAAI,CAAC,CAAC,yDAAyD;QAC1E,MAAM,UAAU,GAAG,IAAA,mCAAqB,EAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,UAAU,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,kBAAkB,UAAU,wBAAwB,IAAI,EAAE,CAAC,CAAC;YACzE,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,aAAa,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IACD,aAAa,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAElC,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAgB,KAAK;IACnB,aAAa,CAAC,KAAK,EAAE,CAAC;AACxB,CAAC","sourcesContent":["import pThrottle from 'p-throttle';\nimport { logger } from '../../logger';\nimport { parseUrl } from '../url';\nimport { getThrottleIntervalMs } from './rate-limits';\n\nconst hostThrottles = new Map<string, Throttle | null>();\n\nexport class Throttle {\n  private throttle: ReturnType<typeof pThrottle>;\n\n  constructor(interval: number) {\n    this.throttle = pThrottle({\n      strict: true,\n      limit: 1,\n      interval,\n    });\n  }\n\n  add<T>(task: () => Promise<T>): Promise<T> {\n    const throttledTask = this.throttle(task);\n    return throttledTask();\n  }\n}\n\nexport function getThrottle(url: string): Throttle | null {\n  const host = parseUrl(url)?.host;\n  if (!host) {\n    // should never happen\n    logger.debug(`No host on ${url}`);\n    return null;\n  }\n\n  let throttle = hostThrottles.get(host);\n  if (throttle === undefined) {\n    throttle = null; // null represents \"no throttle\", as opposed to undefined\n    const throttleMs = getThrottleIntervalMs(url);\n    if (throttleMs) {\n      logger.debug(`Using throttle ${throttleMs} intervalMs for host ${host}`);\n      throttle = new Throttle(throttleMs);\n    } else {\n      logger.trace({ host }, 'No throttle');\n    }\n  }\n  hostThrottles.set(host, throttle);\n\n  return throttle;\n}\n\nexport function clear(): void {\n  hostThrottles.clear();\n}\n"]}