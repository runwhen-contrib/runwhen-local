{"version":3,"file":"rate-limits.js","sourceRoot":"","sources":["../../../lib/util/http/rate-limits.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { matchesHost } from '../host-rules';\nimport * as hostRules from '../host-rules';\nimport type { ConcurrencyLimitRule, ThrottleLimitRule } from './types';\n\n// The first match wins\nconst concurrencyDefaults: ConcurrencyLimitRule[] = [\n  {\n    matchHost: 'registry.npmjs.org',\n    concurrency: 999,\n  },\n  {\n    matchHost: 'repology.org',\n    concurrency: 1,\n  },\n  {\n    matchHost: '*',\n    concurrency: 16,\n  },\n];\n\n// The first match wins\nconst throttleDefaults: ThrottleLimitRule[] = [\n  {\n    // https://guides.rubygems.org/rubygems-org-rate-limits/\n    matchHost: 'rubygems.org',\n    throttleMs: 125,\n  },\n  {\n    // https://crates.io/data-access#api\n    matchHost: 'https://crates.io/api/',\n    throttleMs: 1000,\n  },\n  {\n    // The rate limit is 100 per second, according this comment:\n    // https://github.com/renovatebot/renovate/discussions/27018#discussioncomment-10336270\n    //\n    // We stick to 20 per second just in case.\n    matchHost: 'https://plugins.gradle.org',\n    throttleMs: 50,\n  },\n  {\n    matchHost: 'repology.org',\n    throttleMs: 2000,\n  },\n];\n\nlet throttleLimits: ThrottleLimitRule[] = [];\nlet concurrencyLimits: ConcurrencyLimitRule[] = [];\n\nexport function setHttpRateLimits(\n  concurrencyRules?: ConcurrencyLimitRule[],\n  throttleRules?: ThrottleLimitRule[],\n): void {\n  concurrencyLimits = concurrencyRules ?? concurrencyDefaults;\n  throttleLimits = throttleRules ?? throttleDefaults;\n}\n\nfunction matches(url: string, host: string): boolean {\n  if (host === '*') {\n    return true;\n  }\n\n  return matchesHost(url, host);\n}\n\nexport function getConcurrentRequestsLimit(url: string): number | null {\n  let result: number | null = null;\n\n  const { concurrentRequestLimit: hostRuleLimit } = hostRules.find({ url });\n  if (\n    is.number(hostRuleLimit) &&\n    hostRuleLimit > 0 &&\n    hostRuleLimit < Number.MAX_SAFE_INTEGER\n  ) {\n    result = hostRuleLimit;\n  }\n\n  for (const { matchHost, concurrency: limit } of concurrencyLimits) {\n    if (!matches(url, matchHost)) {\n      continue;\n    }\n\n    if (result && result <= limit) {\n      continue;\n    }\n\n    result = limit;\n    break;\n  }\n\n  return result;\n}\n\nexport function getThrottleIntervalMs(url: string): number | null {\n  let result: number | null = null;\n\n  const { maxRequestsPerSecond } = hostRules.find({ url });\n  if (is.number(maxRequestsPerSecond) && maxRequestsPerSecond > 0) {\n    result = Math.ceil(1000 / maxRequestsPerSecond);\n  }\n\n  for (const { matchHost, throttleMs: limit } of throttleLimits) {\n    if (!matches(url, matchHost)) {\n      continue;\n    }\n\n    if (result && result >= limit) {\n      continue;\n    }\n\n    result = limit;\n    break;\n  }\n\n  return result;\n}\n"]}