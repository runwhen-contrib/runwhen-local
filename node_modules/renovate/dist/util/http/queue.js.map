{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../lib/util/http/queue.ts"],"names":[],"mappings":";;AAOA,4BAsBC;AAED,sBAEC;;AAjCD,8DAA6B;AAC7B,yCAAsC;AACtC,gCAAkC;AAClC,+CAA2D;AAE3D,MAAM,UAAU,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEpD,SAAgB,QAAQ,CAAC,GAAW;IAClC,MAAM,IAAI,GAAG,IAAA,cAAQ,EAAC,GAAG,CAAC,EAAE,IAAI,CAAC;IACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,sBAAsB;QACtB,eAAM,CAAC,KAAK,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACxB,KAAK,GAAG,IAAI,CAAC,CAAC,sDAAsD;QACpE,MAAM,WAAW,GAAG,IAAA,wCAA0B,EAAC,GAAG,CAAC,CAAC;QACpD,IAAI,WAAW,EAAE,CAAC;YAChB,eAAM,CAAC,KAAK,CAAC,qBAAqB,IAAI,iBAAiB,WAAW,EAAE,CAAC,CAAC;YACtE,KAAK,GAAG,IAAI,iBAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,uBAAuB,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IACD,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAE5B,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,KAAK;IACnB,UAAU,CAAC,KAAK,EAAE,CAAC;AACrB,CAAC","sourcesContent":["import PQueue from 'p-queue';\nimport { logger } from '../../logger';\nimport { parseUrl } from '../url';\nimport { getConcurrentRequestsLimit } from './rate-limits';\n\nconst hostQueues = new Map<string, PQueue | null>();\n\nexport function getQueue(url: string): PQueue | null {\n  const host = parseUrl(url)?.host;\n  if (!host) {\n    // should never happen\n    logger.debug(`No host on ${url}`);\n    return null;\n  }\n\n  let queue = hostQueues.get(host);\n  if (queue === undefined) {\n    queue = null; // null represents \"no queue\", as opposed to undefined\n    const concurrency = getConcurrentRequestsLimit(url);\n    if (concurrency) {\n      logger.debug(`Using queue: host=${host}, concurrency=${concurrency}`);\n      queue = new PQueue({ concurrency });\n    } else {\n      logger.trace({ host }, 'No concurrency limits');\n    }\n  }\n  hostQueues.set(host, queue);\n\n  return queue;\n}\n\nexport function clear(): void {\n  hostQueues.clear();\n}\n"]}