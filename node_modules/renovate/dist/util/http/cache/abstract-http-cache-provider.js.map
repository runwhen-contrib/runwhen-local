{"version":3,"file":"abstract-http-cache-provider.js","sourceRoot":"","sources":["../../../../lib/util/http/cache/abstract-http-cache-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { HttpCacheStats } from '../../stats';\nimport type { GotOptions, HttpResponse } from '../types';\nimport { copyResponse } from '../util';\nimport { type HttpCache, HttpCacheSchema } from './schema';\nimport type { HttpCacheProvider } from './types';\n\nexport abstract class AbstractHttpCacheProvider implements HttpCacheProvider {\n  protected abstract load(url: string): Promise<unknown>;\n  protected abstract persist(url: string, data: HttpCache): Promise<void>;\n\n  async get(url: string): Promise<HttpCache | null> {\n    const cache = await this.load(url);\n    const httpCache = HttpCacheSchema.parse(cache);\n    if (!httpCache) {\n      return null;\n    }\n\n    return httpCache;\n  }\n\n  async setCacheHeaders<T extends Pick<GotOptions, 'headers'>>(\n    url: string,\n    opts: T,\n  ): Promise<void> {\n    const httpCache = await this.get(url);\n    if (!httpCache) {\n      return;\n    }\n\n    opts.headers ??= {};\n\n    if (httpCache.etag) {\n      opts.headers['If-None-Match'] = httpCache.etag;\n    }\n\n    if (httpCache.lastModified) {\n      opts.headers['If-Modified-Since'] = httpCache.lastModified;\n    }\n  }\n\n  bypassServer<T>(\n    _url: string,\n    _ignoreSoftTtl: boolean,\n  ): Promise<HttpResponse<T> | null> {\n    return Promise.resolve(null);\n  }\n\n  async wrapServerResponse<T>(\n    url: string,\n    resp: HttpResponse<T>,\n  ): Promise<HttpResponse<T>> {\n    if (resp.statusCode === 200) {\n      const etag = resp.headers?.etag;\n      const lastModified = resp.headers?.['last-modified'];\n\n      HttpCacheStats.incRemoteMisses(url);\n\n      const httpResponse = copyResponse(resp, true);\n      const timestamp = new Date().toISOString();\n\n      const newHttpCache = HttpCacheSchema.parse({\n        etag,\n        lastModified,\n        httpResponse,\n        timestamp,\n      });\n\n      /* v8 ignore start: should never happen */\n      if (!newHttpCache) {\n        logger.debug(`http cache: failed to persist cache for ${url}`);\n        return resp;\n      } /* v8 ignore stop */\n\n      logger.debug(\n        `http cache: saving ${url} (etag=${etag}, lastModified=${lastModified})`,\n      );\n      await this.persist(url, newHttpCache as HttpCache);\n      return resp;\n    }\n\n    if (resp.statusCode === 304) {\n      const httpCache = await this.get(url);\n      if (!httpCache) {\n        return resp;\n      }\n\n      const timestamp = httpCache.timestamp;\n      logger.debug(\n        `http cache: Using cached response: ${url} from ${timestamp}`,\n      );\n      HttpCacheStats.incRemoteHits(url);\n      const cachedResp = copyResponse(\n        httpCache.httpResponse as HttpResponse<T>,\n        true,\n      );\n      cachedResp.authorization = resp.authorization;\n      return cachedResp;\n    }\n\n    return resp;\n  }\n}\n"]}