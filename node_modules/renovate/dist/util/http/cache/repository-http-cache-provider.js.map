{"version":3,"file":"repository-http-cache-provider.js","sourceRoot":"","sources":["../../../../lib/util/http/cache/repository-http-cache-provider.ts"],"names":[],"mappings":";;;AAAA,uDAAkD;AAClD,iFAA2E;AAG3E,MAAa,2BAA4B,SAAQ,wDAAyB;IAC/D,IAAI,CAAC,GAAW;QACvB,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;QACzB,KAAK,CAAC,SAAS,KAAK,EAAE,CAAC;QACvB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEQ,OAAO,CAAC,GAAW,EAAE,IAAe;QAC3C,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;QACzB,KAAK,CAAC,SAAS,KAAK,EAAE,CAAC;QACvB,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAC5B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAbD,kEAaC;AAEY,QAAA,iBAAiB,GAAG,IAAI,2BAA2B,EAAE,CAAC","sourcesContent":["import { getCache } from '../../cache/repository';\nimport { AbstractHttpCacheProvider } from './abstract-http-cache-provider';\nimport type { HttpCache } from './schema';\n\nexport class RepositoryHttpCacheProvider extends AbstractHttpCacheProvider {\n  override load(url: string): Promise<unknown> {\n    const cache = getCache();\n    cache.httpCache ??= {};\n    return Promise.resolve(cache.httpCache[url]);\n  }\n\n  override persist(url: string, data: HttpCache): Promise<void> {\n    const cache = getCache();\n    cache.httpCache ??= {};\n    cache.httpCache[url] = data;\n    return Promise.resolve();\n  }\n}\n\nexport const repoCacheProvider = new RepositoryHttpCacheProvider();\n"]}