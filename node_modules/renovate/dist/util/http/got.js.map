{"version":3,"file":"got.js","sourceRoot":"","sources":["../../../lib/util/http/got.ts"],"names":[],"mappings":";;;AAiBA,sBAuCC;AAED,wBAKC;;AA/DD,6CAA6C;AAC7C,oBAAkB;AAGlB,mDAAwC;AAExC,yCAAsC;AACtC,sCAAyC;AACzC,oCAAqE;AACrE,sCAAyC;AACzC,mCAAgC;AAGhC,2BAAmC;AAA1B,mGAAA,YAAY,OAAA;AAId,KAAK,UAAU,KAAK,CACzB,GAAW,EACX,OAA0C,EAC1C,UAA0B;IAE1B,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,aAAa,CAAC,CAAC;IAE9C,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,CAAC;QACH,gEAAgE;QAChE,kCAAkC;QAClC,MAAM,IAAI,GAAG,MAAM,IAAA,aAAG,EAAC,GAAG,EAAE,EAAE,GAAG,OAAO,EAAE,KAAK,EAAL,aAAK,EAAsB,CAAC,CAAC;QACvE,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAC7B,QAAQ,GAAG,IAAA,qBAAY,EAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,kBAAY,EAAE,CAAC;YAClC,UAAU,GAAG,IAAA,qBAAY,EAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1D,QAAQ,GAAG,IAAA,qBAAY,EAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAC5C,MAAM,IAAI,GAAG,IAAA,qBAAY,EAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACjD,MAAM,UAAU,GAAG,IAAA,qBAAY,EAAC,KAAK,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/D,eAAM,CAAC,KAAK,CACV,GAAG,MAAM,IAAI,GAAG,YAAY,IAAI,gBAAgB,UAAU,eAAe,UAAU,cAAc,QAAQ,GAAG,CAC7G,CAAC;QACJ,CAAC;QAED,MAAM,KAAK,CAAC;QACZ,8DAA8D;IAChE,CAAC;YAAS,CAAC;QACT,iBAAS,CAAC,KAAK,CAAC;YACd,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,GAAG;YACH,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,MAAM,EAAE,UAAU;SACnB,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAgB,MAAM,CACpB,GAAW,EACX,OAAkC;IAElC,OAAO,aAAG,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAClC,CAAC","sourcesContent":["// TODO: refactor code to remove this (#9651)\nimport './legacy';\n\nimport type { Options } from 'got';\nimport got, { RequestError } from 'got';\nimport type { SetRequired } from 'type-fest';\nimport { logger } from '../../logger';\nimport { coerceNumber } from '../number';\nimport { type HttpRequestStatsDataPoint, HttpStats } from '../stats';\nimport { coerceString } from '../string';\nimport { hooks } from './hooks';\nimport type { GotBufferOptions, GotOptions, HttpResponse } from './types';\n\nexport { RequestError } from 'got';\n\ntype QueueStatsData = Pick<HttpRequestStatsDataPoint, 'queueMs'>;\n\nexport async function fetch(\n  url: string,\n  options: SetRequired<GotOptions, 'method'>,\n  queueStats: QueueStatsData,\n): Promise<HttpResponse<unknown>> {\n  logger.trace({ url, options }, 'got request');\n\n  let duration = 0;\n  let statusCode = 0;\n  try {\n    // Cheat the TS compiler using `as` to pick a specific overload.\n    // Otherwise it doesn't typecheck.\n    const resp = await got(url, { ...options, hooks } as GotBufferOptions);\n    statusCode = resp.statusCode;\n    duration = coerceNumber(resp.timings.phases.total, 0);\n    return resp;\n  } catch (error) {\n    if (error instanceof RequestError) {\n      statusCode = coerceNumber(error.response?.statusCode, -1);\n      duration = coerceNumber(error.timings?.phases.total, -1);\n      const method = options.method.toUpperCase();\n      const code = coerceString(error.code, 'UNKNOWN');\n      const retryCount = coerceNumber(error.request?.retryCount, -1);\n      logger.debug(\n        `${method} ${url} = (code=${code}, statusCode=${statusCode} retryCount=${retryCount}, duration=${duration})`,\n      );\n    }\n\n    throw error;\n    /* v8 ignore next: üêõ https://github.com/bcoe/c8/issues/229 */\n  } finally {\n    HttpStats.write({\n      method: options.method,\n      url,\n      reqMs: duration,\n      queueMs: queueStats.queueMs,\n      status: statusCode,\n    });\n  }\n}\n\nexport function stream(\n  url: string,\n  options: Omit<Options, 'isStream'>,\n): NodeJS.ReadableStream {\n  return got.stream(url, options);\n}\n"]}