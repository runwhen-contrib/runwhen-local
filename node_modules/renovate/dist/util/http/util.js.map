{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/util/http/util.ts"],"names":[],"mappings":";;AAKA,oCAgBC;AArBD,oCAAiC;AAGjC,gDAAgD;AAChD,uCAAuC;AACvC,SAAgB,YAAY,CAC1B,QAAyB,EACzB,IAAa;IAEb,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC;IAC/C,OAAO,IAAI;QACT,CAAC,CAAC;YACE,UAAU;YACV,IAAI,EAAE,IAAI,YAAY,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,QAAQ,EAAQ,CAAC,CAAC,CAAC,IAAA,aAAK,EAAI,IAAI,CAAC;YACtE,OAAO,EAAE,IAAA,aAAK,EAAC,OAAO,CAAC;SACxB;QACH,CAAC,CAAC;YACE,UAAU;YACV,IAAI;YACJ,OAAO;SACR,CAAC;AACR,CAAC","sourcesContent":["import { clone } from '../clone';\nimport type { HttpResponse } from './types';\n\n// Copying will help to avoid circular structure\n// and mutation of the cached response.\nexport function copyResponse<T>(\n  response: HttpResponse<T>,\n  deep: boolean,\n): HttpResponse<T> {\n  const { body, statusCode, headers } = response;\n  return deep\n    ? {\n        statusCode,\n        body: body instanceof Buffer ? (body.subarray() as T) : clone<T>(body),\n        headers: clone(headers),\n      }\n    : {\n        statusCode,\n        body,\n        headers,\n      };\n}\n"]}