{"version":3,"file":"regex.js","sourceRoot":"","sources":["../../lib/util/regex.ts"],"names":[],"mappings":";;;AAiCA,sBAkCC;AAED,oCAEC;;AAvED,kEAAkC;AAClC,gEAAgE;AAChE,8CAAoC;AAEpC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;AAUxC,IAAI,MAA0B,CAAC;AAC/B,IAAI,KAAK,GAAsB,MAAM,CAAC;AACtC,uBAAuB;AACvB,IAAI,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC;IACtC,MAAM,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;AAC/B,CAAC;KAAM,CAAC;IACN,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,IAAA,gBAAG,GAAE,CAAC;QAClB,4BAA4B;QAC5B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,KAAK,GAAG,GAAG,CAAC;QACZ,MAAM,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IACjC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC;IACxC,CAAC;AACH,CAAC;AAEY,QAAA,iBAAiB,GAAG,MAAM,CAAC;AAExC,SAAgB,KAAK,CACnB,OAAwB,EACxB,KAAc,EACd,QAAQ,GAAG,IAAI;IAEf,IAAI,WAAW,GAAG,QAAQ,CAAC;IAC3B,IAAI,WAAW,IAAI,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACxC,WAAW,GAAG,KAAK,CAAC;IACtB,CAAC;IACD,IAAI,WAAW,IAAI,YAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACrE,WAAW,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,QAAQ,EAAE,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC1E,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,YAAY,EAAE,CAAC;YACjB,OAAO,YAAY,CAAC;QACtB,CAAC;IACH,CAAC;IAED,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QACxE,IAAI,WAAW,EAAE,CAAC;YAChB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,kCAAiB,CAAC,CAAC;QAC3C,KAAK,CAAC,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC;QACtC,KAAK,CAAC,gBAAgB,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC5C,KAAK,CAAC,eAAe,GAAG,qCAAqC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;QAClF,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED,SAAgB,YAAY,CAAC,KAAa;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,oCAAoC;AACpG,CAAC;AAEY,QAAA,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { CONFIG_VALIDATION } from '../constants/error-messages';\nimport { re2 } from '../expose.cjs';\n\nconst cache = new Map<string, RegExp>();\n\ntype RegExpEngineStatus =\n  | { type: 'available' }\n  | {\n      type: 'unavailable';\n      err: Error;\n    }\n  | { type: 'ignored' };\n\nlet status: RegExpEngineStatus;\nlet RegEx: RegExpConstructor = RegExp;\n// istanbul ignore next\nif (process.env.RENOVATE_X_IGNORE_RE2) {\n  status = { type: 'ignored' };\n} else {\n  try {\n    const RE2 = re2();\n    // Test if native is working\n    new RE2('.*').exec('test');\n    RegEx = RE2;\n    status = { type: 'available' };\n  } catch (err) {\n    status = { type: 'unavailable', err };\n  }\n}\n\nexport const regexEngineStatus = status;\n\nexport function regEx(\n  pattern: string | RegExp,\n  flags?: string,\n  useCache = true,\n): RegExp {\n  let canBeCached = useCache;\n  if (canBeCached && flags?.includes('g')) {\n    canBeCached = false;\n  }\n  if (canBeCached && is.regExp(pattern) && pattern.flags.includes('g')) {\n    canBeCached = false;\n  }\n\n  const key = flags ? `${pattern.toString()}:${flags}` : pattern.toString();\n  if (canBeCached) {\n    const cachedResult = cache.get(key);\n    if (cachedResult) {\n      return cachedResult;\n    }\n  }\n\n  try {\n    const instance = flags ? new RegEx(pattern, flags) : new RegEx(pattern);\n    if (canBeCached) {\n      cache.set(key, instance);\n    }\n    return instance;\n  } catch (err) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationMessage = err.message;\n    error.validationSource = pattern.toString();\n    error.validationError = `Invalid regular expression (re2): ${pattern.toString()}`;\n    throw error;\n  }\n}\n\nexport function escapeRegExp(input: string): string {\n  return input.replace(regEx(/[.*+\\-?^${}()|[\\]\\\\]/g), '\\\\$&'); // $& means the whole matched string\n}\n\nexport const newlineRegex = regEx(/\\r?\\n/);\n"]}