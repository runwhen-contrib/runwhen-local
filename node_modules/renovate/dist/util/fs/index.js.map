{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/fs/index.ts"],"names":[],"mappings":"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","sourcesContent":["import stream from 'node:stream';\nimport util from 'node:util';\nimport is from '@sindresorhus/is';\nimport findUp from 'find-up';\nimport fs from 'fs-extra';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { ensureCachePath, ensureLocalPath, isValidPath } from './util';\n\nexport const pipeline = util.promisify(stream.pipeline);\n\nexport function getParentDir(fileName: string): string {\n  return upath.parse(fileName).dir;\n}\n\nexport function getSiblingFileName(\n  fileName: string,\n  siblingName: string,\n): string {\n  const subDirectory = getParentDir(fileName);\n  return upath.join(subDirectory, siblingName);\n}\n\nexport async function readLocalFile(fileName: string): Promise<Buffer | null>;\nexport async function readLocalFile(\n  fileName: string,\n  encoding: 'utf8',\n): Promise<string | null>;\nexport async function readLocalFile(\n  fileName: string,\n  encoding?: BufferEncoding,\n): Promise<string | Buffer | null> {\n  const localFileName = ensureLocalPath(fileName);\n  try {\n    const fileContent = encoding\n      ? await fs.readFile(localFileName, encoding)\n      : await fs.readFile(localFileName);\n    return fileContent;\n  } catch (err) {\n    logger.trace({ err }, 'Error reading local file');\n    return null;\n  }\n}\n\nexport async function readLocalSymlink(\n  fileName: string,\n): Promise<string | null> {\n  const localFileName = ensureLocalPath(fileName);\n  try {\n    const linkContent = await fs.readlink(localFileName);\n    return linkContent;\n  } catch (err) {\n    logger.trace({ err }, 'Error reading local symlink');\n    return null;\n  }\n}\n\nexport async function writeLocalFile(\n  fileName: string,\n  fileContent: string | Buffer,\n): Promise<void> {\n  const localFileName = ensureLocalPath(fileName);\n  await fs.outputFile(localFileName, fileContent);\n}\n\nexport async function deleteLocalFile(fileName: string): Promise<void> {\n  // This a failsafe and hopefully will never be triggered\n  if (GlobalConfig.get('platform') === 'local') {\n    throw new Error('Cannot delete file when platform=local');\n  }\n  const localDir = GlobalConfig.get('localDir');\n  if (localDir) {\n    const localFileName = ensureLocalPath(fileName);\n    await fs.remove(localFileName);\n  }\n}\n\nexport async function renameLocalFile(\n  fromFile: string,\n  toFile: string,\n): Promise<void> {\n  const fromPath = ensureLocalPath(fromFile);\n  const toPath = ensureLocalPath(toFile);\n  await fs.move(fromPath, toPath);\n}\n\nexport async function ensureDir(dirName: string): Promise<void> {\n  if (is.nonEmptyString(dirName)) {\n    await fs.ensureDir(dirName);\n  }\n}\n\nexport async function ensureLocalDir(dirName: string): Promise<string> {\n  const fullPath = ensureLocalPath(dirName);\n  await fs.ensureDir(fullPath);\n  return fullPath;\n}\n\nexport async function ensureCacheDir(name: string): Promise<string> {\n  const cacheDirName = ensureCachePath(`others/${name}`);\n  await fs.ensureDir(cacheDirName);\n  return cacheDirName;\n}\n\n/**\n * Return the path of the private cache directory. This directory is wiped\n * between repositories, so they can be used to store private registries' index\n * without risk of that information leaking to other repositories/users.\n */\nexport function privateCacheDir(): string {\n  const cacheDir = GlobalConfig.get('cacheDir');\n  return upath.join(cacheDir, '__renovate-private-cache');\n}\n\nexport async function localPathExists(pathName: string): Promise<boolean> {\n  // Works for both files as well as directories\n  const path = ensureLocalPath(pathName);\n  try {\n    const s = await fs.stat(path);\n    return !!s;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate local path without throwing.\n * @param path Path to check\n * @returns `true` if given `path` is a valid local path, otherwise `false`.\n */\nexport function isValidLocalPath(path: string): boolean {\n  return isValidPath(path, 'localDir');\n}\n\n/**\n * Tries to find `otherFileName` in the directory where\n * `existingFileNameWithPath` is, then in its parent directory, then in the\n * grandparent, until we reach the top-level directory. All paths\n * must be relative to `localDir`.\n */\nexport async function findLocalSiblingOrParent(\n  existingFileNameWithPath: string,\n  otherFileName: string,\n): Promise<string | null> {\n  if (upath.isAbsolute(existingFileNameWithPath)) {\n    return null;\n  }\n  if (upath.isAbsolute(otherFileName)) {\n    return null;\n  }\n\n  let current = existingFileNameWithPath;\n  while (current !== '') {\n    current = getParentDir(current);\n    const candidate = upath.join(current, otherFileName);\n    if (await localPathExists(candidate)) {\n      return candidate;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get files by name from directory\n */\nexport async function readLocalDirectory(path: string): Promise<string[]> {\n  const localPath = ensureLocalPath(path);\n  const fileList = await fs.readdir(localPath);\n  return fileList;\n}\n\nexport function createCacheWriteStream(path: string): fs.WriteStream {\n  const fullPath = ensureCachePath(path);\n  return fs.createWriteStream(fullPath);\n}\n\nexport function createCacheReadStream(path: string): fs.ReadStream {\n  const fullPath = ensureCachePath(path);\n  return fs.createReadStream(fullPath);\n}\n\nexport async function localPathIsFile(pathName: string): Promise<boolean> {\n  const path = ensureLocalPath(pathName);\n  try {\n    const s = await fs.stat(path);\n    return s.isFile();\n  } catch {\n    return false;\n  }\n}\n\nexport async function localPathIsSymbolicLink(\n  pathName: string,\n): Promise<boolean> {\n  const path = ensureLocalPath(pathName);\n  try {\n    const s = await fs.lstat(path);\n    return s.isSymbolicLink();\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Find a file or directory by walking up parent directories within localDir\n */\n\nexport async function findUpLocal(\n  fileName: string | string[],\n  cwd: string,\n): Promise<string | null> {\n  const localDir = GlobalConfig.get('localDir');\n  const absoluteCwd = upath.join(localDir, cwd);\n  const normalizedAbsoluteCwd = upath.normalizeSafe(absoluteCwd);\n  const res = await findUp(fileName, {\n    cwd: normalizedAbsoluteCwd,\n    type: 'file',\n  });\n  // Return null if nothing found\n  if (!is.nonEmptyString(res) || !is.nonEmptyString(localDir)) {\n    return null;\n  }\n  const safePath = upath.normalizeSafe(res);\n  // Return relative path if file is inside of local dir\n  if (safePath.startsWith(localDir)) {\n    let relativePath = safePath.replace(localDir, '');\n    if (relativePath.startsWith('/')) {\n      relativePath = relativePath.substring(1);\n    }\n    return relativePath;\n  }\n  // Return null if found file is outside of localDir\n  return null;\n}\n\nexport function chmodLocalFile(\n  fileName: string,\n  mode: string | number,\n): Promise<void> {\n  const fullFileName = ensureLocalPath(fileName);\n  return fs.chmod(fullFileName, mode);\n}\n\nexport async function statLocalFile(\n  fileName: string,\n): Promise<fs.Stats | null> {\n  const fullFileName = ensureLocalPath(fileName);\n  try {\n    return await fs.stat(fullFileName);\n  } catch {\n    return null;\n  }\n}\n\nexport async function statCacheFile(\n  pathName: string,\n): Promise<fs.Stats | null> {\n  const path = ensureCachePath(pathName);\n  try {\n    return await fs.stat(path);\n  } catch {\n    return null;\n  }\n}\n\nexport function listCacheDir(\n  path: string,\n  options: { recursive: boolean } = { recursive: false },\n): Promise<string[]> {\n  const fullPath = ensureCachePath(path);\n  return fs.readdir(fullPath, {\n    encoding: 'utf-8',\n    recursive: options.recursive,\n  });\n}\n\nexport async function rmCache(path: string): Promise<void> {\n  const fullPath = ensureCachePath(path);\n  await fs.rm(fullPath, { recursive: true });\n}\n\nexport async function cachePathExists(pathName: string): Promise<boolean> {\n  const path = ensureCachePath(pathName);\n  try {\n    const s = await fs.stat(path);\n    return !!s;\n  } catch {\n    return false;\n  }\n}\n\nexport async function cachePathIsFile(pathName: string): Promise<boolean> {\n  const path = ensureCachePath(pathName);\n  try {\n    const s = await fs.stat(path);\n    return s.isFile();\n  } catch {\n    return false;\n  }\n}\n\nexport async function readCacheFile(fileName: string): Promise<Buffer>;\nexport async function readCacheFile(\n  fileName: string,\n  encoding: 'utf8',\n): Promise<string>;\nexport function readCacheFile(\n  fileName: string,\n  encoding?: BufferEncoding,\n): Promise<string | Buffer> {\n  const fullPath = ensureCachePath(fileName);\n  return encoding ? fs.readFile(fullPath, encoding) : fs.readFile(fullPath);\n}\n\nexport function outputCacheFile(\n  file: string,\n  data: string | NodeJS.ArrayBufferView,\n): Promise<void> {\n  const filePath = ensureCachePath(file);\n  return fs.outputFile(filePath, data);\n}\n\nexport async function readSystemFile(fileName: string): Promise<Buffer>;\nexport async function readSystemFile(\n  fileName: string,\n  encoding: 'utf8',\n): Promise<string>;\nexport function readSystemFile(\n  fileName: string,\n  encoding?: BufferEncoding,\n): Promise<string | Buffer> {\n  return encoding ? fs.readFile(fileName, encoding) : fs.readFile(fileName);\n}\n\nexport async function writeSystemFile(\n  fileName: string,\n  data: string | Buffer,\n): Promise<void> {\n  await fs.outputFile(fileName, data);\n}\n\nexport async function getLocalFiles(\n  fileNames: string[],\n): Promise<Record<string, string | null>> {\n  const fileContentMap: Record<string, string | null> = {};\n\n  for (const fileName of fileNames) {\n    fileContentMap[fileName] = await readLocalFile(fileName, 'utf8');\n  }\n\n  return fileContentMap;\n}\n"]}