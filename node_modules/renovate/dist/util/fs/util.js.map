{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../lib/util/fs/util.ts"],"names":[],"mappings":";;AAwBA,0CAEC;AAED,0CAEC;AAED,kCAUC;;AA1CD,0DAA0B;AAC1B,gDAAmD;AACnD,mEAA6E;AAC7E,yCAAsC;AAEtC,SAAS,aAAa,CAAC,IAAY,EAAE,UAAkB;IACrD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;QACjC,eAAM,CAAC,KAAK,CACV,EAAE,IAAI,EAAE,UAAU,EAAE,EACpB,qDAAqD,CACtD,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,4CAA2B,CAAC,CAAC;IAC/C,CAAC;AACH,CAAC;AAED,SAAS,UAAU,CAAC,IAAY,EAAE,GAA4B;IAC5D,MAAM,OAAO,GAAG,eAAK,CAAC,OAAO,CAAC,qBAAY,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,eAAK,CAAC,OAAO,CAC5B,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,eAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAC1D,CAAC;IACF,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACjC,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAgB,eAAe,CAAC,IAAY;IAC1C,OAAO,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,eAAe,CAAC,IAAY;IAC1C,OAAO,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,WAAW,CACzB,IAAY,EACZ,GAA4B;IAE5B,MAAM,OAAO,GAAG,eAAK,CAAC,OAAO,CAAC,qBAAY,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,eAAK,CAAC,OAAO,CAC5B,eAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,eAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAC1D,CAAC;IAEF,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACtC,CAAC","sourcesContent":["import upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { FILE_ACCESS_VIOLATION_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\n\nfunction assertBaseDir(path: string, allowedDir: string): void {\n  if (!path.startsWith(allowedDir)) {\n    logger.debug(\n      { path, allowedDir },\n      'Preventing access to file outside allowed directory',\n    );\n    throw new Error(FILE_ACCESS_VIOLATION_ERROR);\n  }\n}\n\nfunction ensurePath(path: string, key: 'localDir' | 'cacheDir'): string {\n  const baseDir = upath.resolve(GlobalConfig.get(key)!);\n  const fullPath = upath.resolve(\n    upath.isAbsolute(path) ? path : upath.join(baseDir, path),\n  );\n  assertBaseDir(fullPath, baseDir);\n  return fullPath;\n}\n\nexport function ensureLocalPath(path: string): string {\n  return ensurePath(path, 'localDir');\n}\n\nexport function ensureCachePath(path: string): string {\n  return ensurePath(path, 'cacheDir');\n}\n\nexport function isValidPath(\n  path: string,\n  key: 'localDir' | 'cacheDir',\n): boolean {\n  const baseDir = upath.resolve(GlobalConfig.get(key)!);\n  const fullPath = upath.resolve(\n    upath.isAbsolute(path) ? path : upath.join(baseDir, path),\n  );\n\n  return fullPath.startsWith(baseDir);\n}\n"]}