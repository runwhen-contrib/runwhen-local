{"version":3,"file":"number.js","sourceRoot":"","sources":["../../lib/util/number.ts"],"names":[],"mappings":";;AAQA,oCAKC;AASD,oCAQC;;AA9BD,kEAAkC;AAElC;;;;;GAKG;AACH,SAAgB,YAAY,CAC1B,GAA8B,EAC9B,GAAY;IAEZ,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;AACzB,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,YAAY,CAC1B,GAA8B,EAC9B,GAAY;IAEZ,oEAAoE;IACpE,MAAM,MAAM,GACV,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;IAC9E,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import is from '@sindresorhus/is';\n\n/**\n * Coerces a value to a number with optional default value.\n * @param val the value to coerce\n * @param def default value\n * @returns cocerced value\n */\nexport function coerceNumber(\n  val: number | null | undefined,\n  def?: number,\n): number {\n  return val ?? def ?? 0;\n}\n\n/**\n * Parses a value as a finite positive integer with optional default value.\n * If no default value is provided, the default value is 0.\n * @param val Value to parse as finite integer.\n * @param def Optional default value.\n * @returns The parsed value or the default value if the parsed value is not finite.\n */\nexport function parseInteger(\n  val: string | undefined | null,\n  def?: number,\n): number {\n  // Number.parseInt returns NaN if the value is not a finite integer.\n  const parsed =\n    is.string(val) && /^\\d+$/.test(val) ? Number.parseInt(val, 10) : Number.NaN;\n  return Number.isFinite(parsed) ? parsed : (def ?? 0);\n}\n"]}