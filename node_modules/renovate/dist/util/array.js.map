{"version":3,"file":"array.js","sourceRoot":"","sources":["../../lib/util/array.ts"],"names":[],"mappings":";;AAEA,kCAKC;AAKD,oDAIC;AAOD,0BAEC;AAED,4CAEC;;AA7BD,kEAAkC;AAElC,SAAgB,WAAW,CAAI,KAA6B;IAC1D,IAAI,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,gFAAgF;AAChF,gFAAgF;AAChF,kDAAkD;AAClD,SAAgB,oBAAoB,CAClC,KAA2B;IAE3B,OAAO,CAAC,YAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAI,KAAc;IACvC,OAAO,YAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC;AAED,SAAgB,gBAAgB,CAAI,KAAU;IAC5C,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\n\nexport function coerceArray<T>(input: T[] | null | undefined): T[] {\n  if (is.array(input)) {\n    return input;\n  }\n  return [];\n}\n\n// Useful for filtering an array so that it includes values that are not null or\n// undefined. This predicate acts as a type guard so that the resulting type for\n// `values.filter(isNotNullOrUndefined)` is `T[]`.\nexport function isNotNullOrUndefined<T>(\n  value: T | undefined | null,\n): value is T {\n  return !is.nullOrUndefined(value);\n}\n\n/**\n * Converts a single value or an array of values to an array of values.\n * @param value a single value or an array of values\n * @returns array of values\n */\nexport function toArray<T>(value: T | T[]): T[] {\n  return is.array(value) ? value : [value];\n}\n\nexport function deduplicateArray<T>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n"]}