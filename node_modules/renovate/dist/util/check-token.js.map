{"version":3,"file":"check-token.js","sourceRoot":"","sources":["../../lib/util/check-token.ts"],"names":[],"mappings":";;AAUA,4CAkDC;AAED,kEAEC;AAED,kEAEC;AAED,wFAEC;AAED,0CAIC;AAED,8EA6CC;;AA7HD,6CAAgD;AAChD,sCAAmC;AACnC,iGAAsG;AACtG,2EAAiF;AACjF,mEAAyE;AAGzE,uEAAiD;AACjD,gEAA0C;AAE1C,SAAgB,gBAAgB,CAC9B,eAAqD,EAAE;IAEvD,MAAM,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC;QAC/B,QAAQ,EAAE,QAAQ;QAClB,GAAG,EAAE,wBAAwB;KAC9B,CAAC,CAAC;IAEH,IAAI,KAAK,EAAE,CAAC;QACV,eAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACtC,OAAO;IACT,CAAC;IAED,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;QACzC,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACjD,OAAO;IACT,CAAC;IAED,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;SACrC,IAAI,EAAE;SACN,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;SACxB,IAAI,EAAE,CAAC;IACV,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IACE,CAAC,GAAG,CAAC,UAAU;YACf,CAAC,GAAG,CAAC,UAAU,KAAK,kCAAoB,CAAC,EAAE;gBACzC,GAAG,CAAC,UAAU,KAAK,0CAAwB,CAAC,EAAE;gBAC9C,GAAG,CAAC,UAAU,KAAK,+DAAkC,CAAC,EAAE,CAAC,EAC3D,CAAC;YACD,GAAG,CAAC,UAAU,GAAG,uBAAuB,CAAC;YACzC,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;gBAChB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC1B,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAChC,sCAAsC,CACvC,CAAC;QACF,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,iBAAiB,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YACnD,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,iBAAiB,EAAE,EACjC,gDAAgD,CACjD,CAAC;YACF,QAAQ,CAAC,GAAG,CAAC,sCAAsC,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAgB,2BAA2B,CAAC,KAAa;IACvD,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAED,SAAgB,2BAA2B,CAAC,KAAa;IACvD,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAED,SAAgB,sCAAsC,CAAC,KAAa;IAClE,OAAO,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AACzC,CAAC;AAED,SAAgB,eAAe,CAC7B,YAA8B;IAE9B,OAAO,YAAY,EAAE,KAAK,EAAE,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;AAC7D,CAAC;AAED,SAAgB,iCAAiC,CAC/C,WAA+B,EAC/B,kBAAsC;IAEtC,IAAI,kBAAkB,IAAI,2BAA2B,CAAC,kBAAkB,CAAC,EAAE,CAAC;QAC1E,eAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC9D,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,IAAI,WAAW,IAAI,2BAA2B,CAAC,WAAW,CAAC,EAAE,CAAC;QAC5D,eAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACnD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,IACE,kBAAkB;QAClB,sCAAsC,CAAC,kBAAkB,CAAC,EAC1D,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,4DAA4D,CAAC,CAAC;QAC3E,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,IAAI,WAAW,IAAI,sCAAsC,CAAC,WAAW,CAAC,EAAE,CAAC;QACvE,eAAM,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAChE,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,IAAI,kBAAkB,EAAE,CAAC;QACvB,IAAI,2BAA2B,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACpD,eAAM,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACjE,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAC7D,CAAC;QACD,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,IAAI,WAAW,EAAE,CAAC;QAChB,IAAI,2BAA2B,CAAC,WAAW,CAAC,EAAE,CAAC;YAC7C,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["import { GlobalConfig } from '../config/global';\nimport { logger } from '../logger';\nimport { GithubReleaseAttachmentsDatasource } from '../modules/datasource/github-release-attachments';\nimport { GithubReleasesDatasource } from '../modules/datasource/github-releases';\nimport { GithubTagsDatasource } from '../modules/datasource/github-tags';\nimport type { PackageFileContent } from '../modules/manager/types';\nimport type { CombinedHostRule } from '../types';\nimport * as memCache from '../util/cache/memory';\nimport * as hostRules from './host-rules';\n\nexport function checkGithubToken(\n  packageFiles: Record<string, PackageFileContent[]> = {},\n): void {\n  const { token } = hostRules.find({\n    hostType: 'github',\n    url: 'https://api.github.com',\n  });\n\n  if (token) {\n    logger.trace('GitHub token is found');\n    return;\n  }\n\n  if (!GlobalConfig.get('githubTokenWarn')) {\n    logger.trace('GitHub token warning is disabled');\n    return;\n  }\n\n  const githubDeps: string[] = [];\n  const deps = Object.values(packageFiles)\n    .flat()\n    .map((file) => file.deps)\n    .flat();\n  for (const dep of deps) {\n    if (\n      !dep.skipReason &&\n      (dep.datasource === GithubTagsDatasource.id ||\n        dep.datasource === GithubReleasesDatasource.id ||\n        dep.datasource === GithubReleaseAttachmentsDatasource.id)\n    ) {\n      dep.skipReason = 'github-token-required';\n      if (dep.depName) {\n        githubDeps.push(dep.depName);\n      }\n    }\n  }\n\n  if (githubDeps.length > 0) {\n    const warningLogged = memCache.get<boolean | undefined>(\n      'github-token-required-warning-logged',\n    );\n    if (!warningLogged) {\n      const withoutDuplicates = [...new Set(githubDeps)];\n      logger.warn(\n        { githubDeps: withoutDuplicates },\n        `GitHub token is required for some dependencies`,\n      );\n      memCache.set('github-token-required-warning-logged', true);\n    }\n  }\n}\n\nexport function isGithubPersonalAccessToken(token: string): boolean {\n  return token.startsWith('ghp_');\n}\n\nexport function isGithubServerToServerToken(token: string): boolean {\n  return token.startsWith('ghs_');\n}\n\nexport function isGithubFineGrainedPersonalAccessToken(token: string): boolean {\n  return token.startsWith('github_pat_');\n}\n\nexport function findGithubToken(\n  searchResult: CombinedHostRule,\n): string | undefined {\n  return searchResult?.token?.replace('x-access-token:', '');\n}\n\nexport function takePersonalAccessTokenIfPossible(\n  githubToken: string | undefined,\n  gitTagsGithubToken: string | undefined,\n): string | undefined {\n  if (gitTagsGithubToken && isGithubPersonalAccessToken(gitTagsGithubToken)) {\n    logger.debug('Using GitHub Personal Access Token (git-tags)');\n    return gitTagsGithubToken;\n  }\n\n  if (githubToken && isGithubPersonalAccessToken(githubToken)) {\n    logger.debug('Using GitHub Personal Access Token');\n    return githubToken;\n  }\n\n  if (\n    gitTagsGithubToken &&\n    isGithubFineGrainedPersonalAccessToken(gitTagsGithubToken)\n  ) {\n    logger.debug('Using GitHub Fine-grained Personal Access Token (git-tags)');\n    return gitTagsGithubToken;\n  }\n\n  if (githubToken && isGithubFineGrainedPersonalAccessToken(githubToken)) {\n    logger.debug('Using GitHub Fine-grained Personal Access Token');\n    return githubToken;\n  }\n\n  if (gitTagsGithubToken) {\n    if (isGithubServerToServerToken(gitTagsGithubToken)) {\n      logger.debug('Using GitHub Server-to-Server token (git-tags)');\n    } else {\n      logger.debug('Using unknown GitHub token type (git-tags)');\n    }\n    return gitTagsGithubToken;\n  }\n\n  if (githubToken) {\n    if (isGithubServerToServerToken(githubToken)) {\n      logger.debug('Using GitHub Server-to-Server token');\n    } else {\n      logger.debug('Using unknown GitHub token type');\n    }\n  }\n\n  return githubToken;\n}\n"]}