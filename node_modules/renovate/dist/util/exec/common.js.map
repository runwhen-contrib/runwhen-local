{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../lib/util/exec/common.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChildProcess } from 'node:child_process';\nimport { spawn } from 'node:child_process';\nimport type { Readable } from 'node:stream';\nimport is from '@sindresorhus/is';\nimport type { ExecErrorData } from './exec-error';\nimport { ExecError } from './exec-error';\nimport type { DataListener, ExecResult, RawExecOptions } from './types';\n\n// https://man7.org/linux/man-pages/man7/signal.7.html#NAME\n// Non TERM/CORE signals\n// The following is step 3. in https://github.com/renovatebot/renovate/issues/16197#issuecomment-1171423890\nconst NONTERM = [\n  'SIGCHLD',\n  'SIGCLD',\n  'SIGCONT',\n  'SIGSTOP',\n  'SIGTSTP',\n  'SIGTTIN',\n  'SIGTTOU',\n  'SIGURG',\n  'SIGWINCH',\n];\n\nconst encoding = 'utf8';\n\nfunction stringify(list: Buffer[]): string {\n  return Buffer.concat(list).toString(encoding);\n}\n\nfunction initStreamListeners(\n  cp: ChildProcess,\n  opts: RawExecOptions & { maxBuffer: number },\n): [Buffer[], Buffer[]] {\n  const stdout: Buffer[] = [];\n  const stderr: Buffer[] = [];\n  let stdoutLen = 0;\n  let stderrLen = 0;\n\n  registerDataListeners(cp.stdout, opts.outputListeners?.stdout);\n  registerDataListeners(cp.stderr, opts.outputListeners?.stderr);\n\n  cp.stdout?.on('data', (chunk: Buffer) => {\n    // process.stdout.write(data.toString());\n    const len = Buffer.byteLength(chunk, encoding);\n    stdoutLen += len;\n    if (stdoutLen > opts.maxBuffer) {\n      cp.emit('error', new Error('stdout maxBuffer exceeded'));\n    } else {\n      stdout.push(chunk);\n    }\n  });\n\n  cp.stderr?.on('data', (chunk: Buffer) => {\n    // process.stderr.write(data.toString());\n    const len = Buffer.byteLength(chunk, encoding);\n    stderrLen += len;\n    if (stderrLen > opts.maxBuffer) {\n      cp.emit('error', new Error('stderr maxBuffer exceeded'));\n    } else {\n      stderr.push(chunk);\n    }\n  });\n  return [stdout, stderr];\n}\n\nfunction registerDataListeners(\n  readable: Readable | null,\n  dataListeners: DataListener[] | undefined,\n): void {\n  if (is.nullOrUndefined(readable) || is.nullOrUndefined(dataListeners)) {\n    return;\n  }\n\n  for (const listener of dataListeners) {\n    readable.on('data', listener);\n  }\n}\n\nexport function exec(cmd: string, opts: RawExecOptions): Promise<ExecResult> {\n  return new Promise((resolve, reject) => {\n    const maxBuffer = opts.maxBuffer ?? 10 * 1024 * 1024; // Set default max buffer size to 10MB\n    const cp = spawn(cmd, {\n      ...opts,\n      // force detached on non WIN platforms\n      // https://github.com/nodejs/node/issues/21825#issuecomment-611328888\n      detached: process.platform !== 'win32',\n      shell: typeof opts.shell === 'string' ? opts.shell : true, // force shell\n    });\n\n    // handle streams\n    const [stdout, stderr] = initStreamListeners(cp, {\n      ...opts,\n      maxBuffer,\n    });\n\n    // handle process events\n    cp.on('error', (error) => {\n      kill(cp, 'SIGTERM');\n      // rethrowing, use originally emitted error message\n      reject(new ExecError(error.message, rejectInfo(), error));\n    });\n\n    cp.on('exit', (code: number, signal: NodeJS.Signals) => {\n      if (NONTERM.includes(signal)) {\n        return;\n      }\n      if (signal) {\n        kill(cp, signal);\n        reject(\n          new ExecError(`Command failed: ${cmd}\\nInterrupted by ${signal}`, {\n            ...rejectInfo(),\n            signal,\n          }),\n        );\n        return;\n      }\n      if (code !== 0) {\n        reject(\n          new ExecError(`Command failed: ${cmd}\\n${stringify(stderr)}`, {\n            ...rejectInfo(),\n            exitCode: code,\n          }),\n        );\n        return;\n      }\n      resolve({\n        stderr: stringify(stderr),\n        stdout: stringify(stdout),\n      });\n    });\n\n    function rejectInfo(): ExecErrorData {\n      return {\n        cmd: cp.spawnargs.join(' '),\n        options: opts,\n        stdout: stringify(stdout),\n        stderr: stringify(stderr),\n      };\n    }\n  });\n}\n\nfunction kill(cp: ChildProcess, signal: NodeJS.Signals): boolean {\n  try {\n    if (cp.pid && process.env.RENOVATE_X_EXEC_GPID_HANDLE) {\n      /**\n       * If `pid` is negative, but not `-1`, signal shall be sent to all processes\n       * (excluding an unspecified set of system processes),\n       * whose process group ID (pgid) is equal to the absolute value of pid,\n       * and for which the process has permission to send a signal.\n       */\n      return process.kill(-cp.pid, signal);\n    } else {\n      // destroying stdio is needed for unref to work\n      // https://nodejs.org/api/child_process.html#subprocessunref\n      // https://github.com/nodejs/node/blob/4d5ff25a813fd18939c9f76b17e36291e3ea15c3/lib/child_process.js#L412-L426\n      cp.stderr?.destroy();\n      cp.stdout?.destroy();\n      cp.unref();\n      return cp.kill(signal);\n    }\n  } catch {\n    // cp is a single node tree, therefore -pid is invalid as there is no such pgid,\n    return false;\n  }\n}\n\nexport const rawExec: (\n  cmd: string,\n  opts: RawExecOptions,\n) => Promise<ExecResult> = exec;\n"]}