{"version":3,"file":"hermit.js","sourceRoot":"","sources":["../../../lib/util/exec/hermit.ts"],"names":[],"mappings":";;AAQA,4BAEC;AAED,sCASC;AAED,sCAyBC;;AAhDD,0DAA0B;AAC1B,gDAAmD;AACnD,yCAAsC;AACtC,8BAAoC;AACpC,oCAAwC;AACxC,qCAAmC;AAGnC,SAAgB,QAAQ;IACtB,OAAO,qBAAY,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,QAAQ,CAAC;AACvD,CAAC;AAEM,KAAK,UAAU,aAAa,CAAC,GAAW;IAC7C,MAAM,WAAW,GAAG,eAAK,CAAC,QAAQ,CAAC,qBAAY,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,MAAM,IAAA,gBAAW,EAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAEhE,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,OAAO,eAAK,CAAC,IAAI,CAAC,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,eAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;AAC7E,CAAC;AAEM,KAAK,UAAU,aAAa,CACjC,UAA0B;IAE1B,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,IAAI,0BAA0B,CAAC,EAAE,CAAC;IAC5D,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,GAAG,CAAC,CAAC;IAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,uCAAuC,CAAC,CAAC;IAC1E,wEAAwE;IACxE,MAAM,aAAa,GAAG,MAAM,IAAA,gBAAO,EAAC,iBAAiB,EAAE;QACrD,GAAG,UAAU;QACb,GAAG,EAAE,SAAS;KACf,CAAC,CAAC;IAEH,MAAM,GAAG,GAA2B,EAAE,CAAC;IAEvC,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM;SAC/B,KAAK,CAAC,oBAAY,CAAC;SACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACxC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { findUpLocal } from '../fs';\nimport { newlineRegex } from '../regex';\nimport { rawExec } from './common';\nimport type { RawExecOptions } from './types';\n\nexport function isHermit(): boolean {\n  return GlobalConfig.get('binarySource') === 'hermit';\n}\n\nexport async function findHermitCwd(cwd: string): Promise<string> {\n  const relativeCwd = upath.relative(GlobalConfig.get('localDir', ''), cwd);\n  const hermitFile = await findUpLocal('bin/hermit', relativeCwd);\n\n  if (hermitFile === null) {\n    throw new Error(`hermit not found for ${cwd}`);\n  }\n\n  return upath.join(GlobalConfig.get('localDir'), upath.dirname(hermitFile));\n}\n\nexport async function getHermitEnvs(\n  rawOptions: RawExecOptions,\n): Promise<Record<string, string>> {\n  const cwd = rawOptions.cwd ?? /* istanbul ignore next */ '';\n  const hermitCwd = await findHermitCwd(cwd);\n  logger.debug({ cwd, hermitCwd }, 'fetching hermit environment variables');\n  // with -r will output the raw unquoted environment variables to consume\n  const hermitEnvResp = await rawExec('./hermit env -r', {\n    ...rawOptions,\n    cwd: hermitCwd,\n  });\n\n  const out: Record<string, string> = {};\n\n  const lines = hermitEnvResp.stdout\n    .split(newlineRegex)\n    .map((line) => line.trim())\n    .filter((line) => line.includes('='));\n  for (const line of lines) {\n    const equalIndex = line.indexOf('=');\n    const name = line.substring(0, equalIndex);\n    out[name] = line.substring(equalIndex + 1);\n  }\n\n  return out;\n}\n"]}