{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/util/exec/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../config/global';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { getCustomEnv, getUserEnv } from '../env';\nimport { rawExec } from './common';\nimport { generateInstallCommands, isDynamicInstall } from './containerbase';\nimport {\n  generateDockerCommand,\n  removeDockerContainer,\n  sideCarImage,\n} from './docker';\nimport { getHermitEnvs, isHermit } from './hermit';\nimport type {\n  DockerOptions,\n  ExecOptions,\n  ExecResult,\n  ExtraEnv,\n  Opt,\n  RawExecOptions,\n} from './types';\nimport { getChildEnv } from './utils';\n\nfunction dockerEnvVars(extraEnv: ExtraEnv, childEnv: ExtraEnv): string[] {\n  const extraEnvKeys = Object.keys(extraEnv);\n  return extraEnvKeys.filter((key) => is.nonEmptyString(childEnv[key]));\n}\n\nfunction getCwd({ cwd, cwdFile }: ExecOptions): string | undefined {\n  const defaultCwd = GlobalConfig.get('localDir');\n  const paramCwd = cwdFile\n    ? upath.join(defaultCwd, upath.dirname(cwdFile))\n    : cwd;\n  return paramCwd ?? defaultCwd;\n}\n\nfunction getRawExecOptions(opts: ExecOptions): RawExecOptions {\n  const defaultExecutionTimeout = GlobalConfig.get('executionTimeout');\n  const childEnv = getChildEnv(opts);\n  const cwd = getCwd(opts);\n  const rawExecOptions: RawExecOptions = {\n    cwd,\n    encoding: 'utf-8',\n    env: childEnv,\n    maxBuffer: opts.maxBuffer,\n    timeout: opts.timeout,\n  };\n  // Set default timeout config.executionTimeout if specified; othrwise to 15 minutes\n  if (!rawExecOptions.timeout) {\n    if (defaultExecutionTimeout) {\n      rawExecOptions.timeout = defaultExecutionTimeout * 60 * 1000;\n    } else {\n      rawExecOptions.timeout = 15 * 60 * 1000;\n    }\n  }\n\n  // Set default max buffer size to 10MB\n  rawExecOptions.maxBuffer = rawExecOptions.maxBuffer ?? 10 * 1024 * 1024;\n\n  if (opts.ignoreStdout) {\n    rawExecOptions.stdio = ['pipe', 'ignore', 'pipe'];\n  }\n\n  return rawExecOptions;\n}\n\nfunction isDocker(docker: Opt<DockerOptions>): docker is DockerOptions {\n  return GlobalConfig.get('binarySource') === 'docker' && !!docker;\n}\n\ninterface RawExecArguments {\n  rawCommands: string[];\n  rawOptions: RawExecOptions;\n}\n\nasync function prepareRawExec(\n  cmd: string | string[],\n  opts: ExecOptions,\n): Promise<RawExecArguments> {\n  const { docker } = opts;\n  const preCommands = opts.preCommands ?? [];\n  const customEnvVariables = getCustomEnv();\n  const userConfiguredEnv = getUserEnv();\n  const { containerbaseDir, binarySource } = GlobalConfig.get();\n\n  if (binarySource === 'docker' || binarySource === 'install') {\n    logger.debug(`Setting CONTAINERBASE_CACHE_DIR to ${containerbaseDir!}`);\n    opts.env ??= {};\n    opts.env.CONTAINERBASE_CACHE_DIR = containerbaseDir;\n  }\n\n  const rawOptions = getRawExecOptions(opts);\n\n  let rawCommands = typeof cmd === 'string' ? [cmd] : cmd;\n\n  if (isDocker(docker)) {\n    logger.debug({ image: sideCarImage }, 'Using docker to execute');\n    const extraEnv = {\n      ...opts.extraEnv,\n      ...customEnvVariables,\n      ...userConfiguredEnv,\n    };\n    const childEnv = getChildEnv(opts);\n    const envVars = [\n      ...dockerEnvVars(extraEnv, childEnv),\n      'CONTAINERBASE_CACHE_DIR',\n    ];\n    const cwd = getCwd(opts);\n    const dockerOptions: DockerOptions = { ...docker, cwd, envVars };\n    const dockerCommand = await generateDockerCommand(\n      rawCommands,\n      [\n        ...(await generateInstallCommands(opts.toolConstraints)),\n        ...preCommands,\n      ],\n      dockerOptions,\n    );\n    rawCommands = [dockerCommand];\n  } else if (isDynamicInstall(opts.toolConstraints)) {\n    logger.debug('Using containerbase dynamic installs');\n    rawCommands = [\n      ...(await generateInstallCommands(opts.toolConstraints)),\n      ...preCommands,\n      ...rawCommands,\n    ];\n  } else if (isHermit()) {\n    const hermitEnvVars = await getHermitEnvs(rawOptions);\n    logger.debug(\n      { hermitEnvVars },\n      'merging hermit environment variables into the execution options',\n    );\n    rawOptions.env = {\n      ...rawOptions.env,\n      ...hermitEnvVars,\n    };\n  }\n\n  return { rawCommands, rawOptions };\n}\n\nexport async function exec(\n  cmd: string | string[],\n  opts: ExecOptions = {},\n): Promise<ExecResult> {\n  const { docker } = opts;\n  const dockerChildPrefix = GlobalConfig.get('dockerChildPrefix', 'renovate_');\n\n  const { rawCommands, rawOptions } = await prepareRawExec(cmd, opts);\n  const useDocker = isDocker(docker);\n\n  let res: ExecResult = { stdout: '', stderr: '' };\n  for (const rawCmd of rawCommands) {\n    const startTime = Date.now();\n    if (useDocker) {\n      await removeDockerContainer(sideCarImage, dockerChildPrefix);\n    }\n    logger.debug({ command: rawCmd }, 'Executing command');\n    logger.trace({ commandOptions: rawOptions }, 'Command options');\n    try {\n      res = await rawExec(rawCmd, rawOptions);\n    } catch (err) {\n      const durationMs = Math.round(Date.now() - startTime);\n      logger.debug({ err, durationMs }, 'rawExec err');\n      if (useDocker) {\n        await removeDockerContainer(sideCarImage, dockerChildPrefix).catch(\n          (removeErr: Error) => {\n            const message: string = err.message;\n            throw new Error(\n              `Error: \"${removeErr.message}\" - Original Error: \"${message}\"`,\n            );\n          },\n        );\n      }\n      if (err.signal === `SIGTERM`) {\n        logger.debug(\n          { err },\n          'exec interrupted by SIGTERM - run needs to be aborted',\n        );\n        throw new Error(TEMPORARY_ERROR);\n      }\n      throw err;\n    }\n    const durationMs = Math.round(Date.now() - startTime);\n    logger.debug(\n      {\n        durationMs,\n        stdout: res.stdout,\n        stderr: res.stderr,\n      },\n      'exec completed',\n    );\n  }\n\n  return res;\n}\n"]}