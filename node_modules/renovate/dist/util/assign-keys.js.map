{"version":3,"file":"assign-keys.js","sourceRoot":"","sources":["../../lib/util/assign-keys.ts"],"names":[],"mappings":";;AAKA,gCAYC;;AAjBD,kEAAkC;AAElC;;GAEG;AACH,SAAgB,UAAU,CAIxB,IAAU,EAAE,KAAY,EAAE,IAAS;IACnC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,YAAE,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;YAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,GAAkC,CAAC;QACjD,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\n\n/**\n * Assigns non-nullish values from `right` to `left` for the given `keys`.\n */\nexport function assignKeys<\n  Left extends Partial<Record<K, unknown>>,\n  Right extends { [key in K]?: Left[key] },\n  K extends keyof Right,\n>(left: Left, right: Right, keys: K[]): Left {\n  for (const key of keys) {\n    const val = right[key];\n    if (!is.nullOrUndefined(val)) {\n      left[key] = val as unknown as Left[typeof key];\n    }\n  }\n  return left;\n}\n"]}