{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/logger/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as bunyan from 'bunyan';\nimport fs from 'fs-extra';\nimport { nanoid } from 'nanoid';\nimport upath from 'upath';\nimport cmdSerializer from './cmd-serializer';\nimport configSerializer from './config-serializer';\nimport errSerializer from './err-serializer';\nimport { RenovateStream } from './pretty-stdout';\nimport { RenovateLogger } from './renovate-logger';\nimport type { BunyanRecord, Logger } from './types';\nimport {\n  ProblemStream,\n  getEnv,\n  validateLogLevel,\n  withSanitizer,\n} from './utils';\n\nconst problems = new ProblemStream();\nlet stdoutLevel = validateLogLevel(getEnv('LOG_LEVEL'), 'info');\n\nexport function logLevel(): bunyan.LogLevelString {\n  return stdoutLevel;\n}\n\nexport function createDefaultStreams(\n  stdoutLevel: bunyan.LogLevelString,\n  problems: ProblemStream,\n  logFile: string | undefined,\n): bunyan.Stream[] {\n  const stdout: bunyan.Stream = {\n    name: 'stdout',\n    level: stdoutLevel,\n    stream: process.stdout,\n  };\n\n  if (getEnv('LOG_FORMAT') !== 'json') {\n    // TODO: typings (#9615)\n    const prettyStdOut = new RenovateStream() as any;\n    prettyStdOut.pipe(process.stdout);\n    stdout.stream = prettyStdOut;\n    stdout.type = 'raw';\n  }\n\n  const problemsStream: bunyan.Stream = {\n    name: 'problems',\n    level: 'warn' as bunyan.LogLevel,\n    stream: problems as any,\n    type: 'raw',\n  };\n\n  const logFileStream: bunyan.Stream | undefined = is.string(logFile)\n    ? createLogFileStream(logFile)\n    : undefined;\n\n  return [stdout, problemsStream, logFileStream].filter(\n    Boolean,\n  ) as bunyan.Stream[];\n}\n\nfunction createLogFileStream(logFile: string): bunyan.Stream {\n  // Ensure log file directory exists\n  const directoryName = upath.dirname(logFile);\n  fs.ensureDirSync(directoryName);\n\n  return {\n    name: 'logfile',\n    path: logFile,\n    level: validateLogLevel(getEnv('LOG_FILE_LEVEL'), 'debug'),\n  };\n}\n\nfunction serializedSanitizedLogger(streams: bunyan.Stream[]): bunyan {\n  return bunyan.createLogger({\n    name: 'renovate',\n    serializers: {\n      body: configSerializer,\n      cmd: cmdSerializer,\n      config: configSerializer,\n      migratedConfig: configSerializer,\n      originalConfig: configSerializer,\n      presetConfig: configSerializer,\n      oldConfig: configSerializer,\n      newConfig: configSerializer,\n      err: errSerializer,\n    },\n    streams: streams.map(withSanitizer),\n  });\n}\n\nconst defaultStreams = createDefaultStreams(\n  stdoutLevel,\n  problems,\n  getEnv('LOG_FILE'),\n);\n\nconst bunyanLogger = serializedSanitizedLogger(defaultStreams);\nconst logContext = getEnv('LOG_CONTEXT') ?? nanoid();\nconst loggerInternal = new RenovateLogger(bunyanLogger, logContext, {});\n\nexport const logger: Logger = loggerInternal;\n\nexport function setContext(value: string): void {\n  loggerInternal.logContext = value;\n}\n\nexport function getContext(): any {\n  return loggerInternal.logContext;\n}\n\n// setMeta overrides existing meta, may remove fields if no longer existing\nexport function setMeta(obj: Record<string, unknown>): void {\n  loggerInternal.setMeta(obj);\n}\n\n// addMeta overrides or adds fields but does not remove any\nexport function addMeta(obj: Record<string, unknown>): void {\n  loggerInternal.addMeta(obj);\n}\n\n// removeMeta removes the provided fields from meta\nexport function removeMeta(fields: string[]): void {\n  loggerInternal.removeMeta(fields);\n}\n\nexport function withMeta<T>(obj: Record<string, unknown>, cb: () => T): T {\n  addMeta(obj);\n  try {\n    return cb();\n  } finally {\n    removeMeta(Object.keys(obj));\n  }\n}\n\nexport function addStream(stream: bunyan.Stream): void {\n  loggerInternal.addStream(stream);\n}\n\n/**\n * For testing purposes only\n * @param name stream name\n * @param level log level\n * @private\n */\nexport function levels(\n  name: 'stdout' | 'logfile',\n  level: bunyan.LogLevelString,\n): void {\n  bunyanLogger.levels(name, level);\n  if (name === 'stdout') {\n    stdoutLevel = level;\n  }\n}\n\nexport function getProblems(): BunyanRecord[] {\n  return problems.getProblems();\n}\n\nexport function clearProblems(): void {\n  return problems.clearProblems();\n}\n"]}