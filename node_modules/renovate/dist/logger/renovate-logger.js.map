{"version":3,"file":"renovate-logger.js","sourceRoot":"","sources":["../../lib/logger/renovate-logger.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type * as bunyan from 'bunyan';\nimport { once, reset as onceReset } from './once';\nimport { getRemappedLevel } from './remap';\nimport type { Logger } from './types';\nimport { getMessage, toMeta, withSanitizer } from './utils';\n\nconst loggerLevels: bunyan.LogLevelString[] = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'fatal',\n];\n\ntype LoggerFunction = (p1: string | Record<string, any>, p2?: string) => void;\n\nexport class RenovateLogger implements Logger {\n  readonly logger: Logger = { once: { reset: onceReset } } as any;\n  readonly once = this.logger.once;\n\n  constructor(\n    private readonly bunyanLogger: bunyan,\n    private context: string,\n    private meta: Record<string, unknown>,\n  ) {\n    for (const level of loggerLevels) {\n      this.logger[level] = this.logFactory(level) as never;\n      this.logger.once[level] = this.logOnceFn(level);\n    }\n  }\n\n  trace(p1: string): void;\n  trace(p1: Record<string, any>, p2?: string): void;\n  trace(p1: string | Record<string, any>, p2?: string): void {\n    this.log('trace', p1, p2);\n  }\n\n  debug(p1: string): void;\n  debug(p1: Record<string, any>, p2?: string): void;\n  debug(p1: string | Record<string, any>, p2?: string): void {\n    this.log('debug', p1, p2);\n  }\n\n  info(p1: string): void;\n  info(p1: Record<string, any>, p2?: string): void;\n  info(p1: string | Record<string, any>, p2?: string): void {\n    this.log('info', p1, p2);\n  }\n\n  warn(p1: string): void;\n  warn(p1: Record<string, any>, p2?: string): void;\n  warn(p1: string | Record<string, any>, p2?: string): void {\n    this.log('warn', p1, p2);\n  }\n\n  error(p1: string): void;\n  error(p1: Record<string, any>, p2?: string): void;\n  error(p1: string | Record<string, any>, p2?: string): void {\n    this.log('error', p1, p2);\n  }\n\n  fatal(p1: string): void;\n  fatal(p1: Record<string, any>, p2?: string): void;\n  fatal(p1: string | Record<string, any>, p2?: string): void {\n    this.log('fatal', p1, p2);\n  }\n\n  addStream(stream: bunyan.Stream): void {\n    this.bunyanLogger.addStream(withSanitizer(stream));\n  }\n\n  childLogger(): RenovateLogger {\n    return new RenovateLogger(\n      this.bunyanLogger.child({}),\n      this.context,\n      this.meta,\n    );\n  }\n\n  get logContext(): string {\n    return this.context;\n  }\n\n  set logContext(context: string) {\n    this.context = context;\n  }\n\n  setMeta(obj: Record<string, unknown>): void {\n    this.meta = { ...obj };\n  }\n\n  addMeta(obj: Record<string, unknown>): void {\n    this.meta = { ...this.meta, ...obj };\n  }\n\n  removeMeta(fields: string[]): void {\n    for (const key of Object.keys(this.meta)) {\n      if (fields.includes(key)) {\n        delete this.meta[key];\n      }\n    }\n  }\n\n  private logFactory(_level: bunyan.LogLevelString): LoggerFunction {\n    return (p1: string | Record<string, any>, p2?: string): void => {\n      const meta: Record<string, unknown> = {\n        logContext: this.context,\n        ...this.meta,\n        ...toMeta(p1),\n      };\n      const msg = getMessage(p1, p2);\n      let level = _level;\n\n      if (is.string(msg)) {\n        const remappedLevel = getRemappedLevel(msg);\n        /* v8 ignore next 4 -- not easily testable */\n        if (remappedLevel) {\n          meta.oldLevel = level;\n          level = remappedLevel;\n        }\n        this.bunyanLogger[level](meta, msg);\n      } else {\n        this.bunyanLogger[level](meta);\n      }\n    };\n  }\n\n  private logOnceFn(level: bunyan.LogLevelString): LoggerFunction {\n    const logOnceFn = (p1: string | Record<string, any>, p2?: string): void => {\n      once(() => {\n        const logFn = this[level].bind(this); // bind to the instance.\n        if (is.string(p1)) {\n          logFn(p1);\n        } else {\n          logFn(p1, p2);\n        }\n      }, logOnceFn);\n    };\n    return logOnceFn;\n  }\n\n  private log(\n    level: bunyan.LogLevelString,\n    p1: string | Record<string, any>,\n    p2?: string,\n  ): void {\n    const logFn = this.logger[level];\n    if (is.string(p1)) {\n      logFn(p1);\n    } else {\n      logFn(p1, p2);\n    }\n  }\n}\n"]}