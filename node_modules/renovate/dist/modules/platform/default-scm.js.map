{"version":3,"file":"default-scm.js","sourceRoot":"","sources":["../../../lib/modules/platform/default-scm.ts"],"names":[],"mappings":";;;;AAAA,4DAAsC;AAItC,MAAa,aAAa;IACxB,YAAY,CAAC,UAAkB;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,aAAa,CACX,YAA+B;QAE/B,OAAO,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED,eAAe,CAAC,UAAkB;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,kBAAkB,CAAC,UAAkB,EAAE,UAAkB;QACvD,OAAO,GAAG,CAAC,kBAAkB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACxD,CAAC;IAED,kBAAkB,CAAC,UAAkB,EAAE,MAAc;QACnD,OAAO,GAAG,CAAC,kBAAkB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAED,gBAAgB,CAAC,UAAkB,EAAE,UAAkB;QACrD,OAAO,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IACtD,CAAC;IAED,WAAW;QACT,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC;IAED,cAAc,CAAC,UAAkB;QAC/B,OAAO,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;CACF;AA9CD,sCA8CC","sourcesContent":["import * as git from '../../util/git';\nimport type { CommitFilesConfig, LongCommitSha } from '../../util/git/types';\nimport type { PlatformScm } from './types';\n\nexport class DefaultGitScm implements PlatformScm {\n  branchExists(branchName: string): Promise<boolean> {\n    return Promise.resolve(git.branchExists(branchName));\n  }\n\n  commitAndPush(\n    commitConfig: CommitFilesConfig,\n  ): Promise<LongCommitSha | null> {\n    return git.commitFiles(commitConfig);\n  }\n\n  deleteBranch(branchName: string): Promise<void> {\n    return git.deleteBranch(branchName);\n  }\n\n  getBranchCommit(branchName: string): Promise<LongCommitSha | null> {\n    return Promise.resolve(git.getBranchCommit(branchName));\n  }\n\n  isBranchBehindBase(branchName: string, baseBranch: string): Promise<boolean> {\n    return git.isBranchBehindBase(branchName, baseBranch);\n  }\n\n  isBranchConflicted(baseBranch: string, branch: string): Promise<boolean> {\n    return git.isBranchConflicted(baseBranch, branch);\n  }\n\n  isBranchModified(branchName: string, baseBranch: string): Promise<boolean> {\n    return git.isBranchModified(branchName, baseBranch);\n  }\n\n  getFileList(): Promise<string[]> {\n    return git.getFileList();\n  }\n\n  checkoutBranch(branchName: string): Promise<LongCommitSha> {\n    return git.checkoutBranch(branchName);\n  }\n\n  mergeAndPush(branchName: string): Promise<void> {\n    return git.mergeBranch(branchName);\n  }\n\n  mergeToLocal(branchName: string): Promise<void> {\n    return git.mergeToLocal(branchName);\n  }\n}\n"]}