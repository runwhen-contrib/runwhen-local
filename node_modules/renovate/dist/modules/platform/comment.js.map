{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../lib/modules/platform/comment.ts"],"names":[],"mappings":";;AAKA,sCAoBC;AAED,oDAuBC;AAlDD,4DAAuD;AACvD,0CAAuC;AAEvC,wBAA6B;AAEtB,KAAK,UAAU,aAAa,CACjC,aAAkC;IAElC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;IAC1C,MAAM,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;IAExC,MAAM,WAAW,GAAG,IAAA,WAAI,EAAC,OAAO,CAAC,CAAC;IAClC,MAAM,SAAS,GAAG,IAAA,qBAAQ,GAAE,CAAC;IAE7B,IAAI,WAAW,KAAK,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5D,MAAM,GAAG,GAAG,MAAM,WAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,GAAG,EAAE,CAAC;YACR,SAAS,CAAC,UAAU,KAAK,EAAE,CAAC;YAC5B,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;QACpD,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,oBAAoB,CACxC,MAAkC;IAElC,MAAM,WAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,SAAS,GAAG,IAAA,qBAAQ,GAAE,CAAC;IAE7B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAChC,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QACnC,IAAI,IAAI,KAAK,UAAU,EAAE,CAAC;YACxB,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC;aAAM,IAAI,IAAI,KAAK,YAAY,EAAE,CAAC;YACjC,MAAM,WAAW,GAAG,IAAA,WAAI,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACzC,KAAK,MAAM,CAAC,WAAW,EAAE,iBAAiB,CAAC,IAAI,MAAM,CAAC,OAAO,CAC3D,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAC/B,EAAE,CAAC;gBACF,IAAI,iBAAiB,KAAK,WAAW,EAAE,CAAC;oBACtC,OAAO,SAAS,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;oBACrD,OAAO;gBACT,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { getCache } from '../../util/cache/repository';\nimport { hash } from '../../util/hash';\nimport type { EnsureCommentConfig, EnsureCommentRemovalConfig } from './types';\nimport { platform } from '.';\n\nexport async function ensureComment(\n  commentConfig: EnsureCommentConfig,\n): Promise<boolean> {\n  const { number, content } = commentConfig;\n  const topic = commentConfig.topic ?? '';\n\n  const contentHash = hash(content);\n  const repoCache = getCache();\n\n  if (contentHash !== repoCache.prComments?.[number]?.[topic]) {\n    const res = await platform.ensureComment(commentConfig);\n    if (res) {\n      repoCache.prComments ??= {};\n      repoCache.prComments[number] ??= {};\n      repoCache.prComments[number][topic] = contentHash;\n    }\n    return res;\n  }\n\n  return true;\n}\n\nexport async function ensureCommentRemoval(\n  config: EnsureCommentRemovalConfig,\n): Promise<void> {\n  await platform.ensureCommentRemoval(config);\n\n  const repoCache = getCache();\n\n  const { type, number } = config;\n  if (repoCache.prComments?.[number]) {\n    if (type === 'by-topic') {\n      delete repoCache.prComments?.[number]?.[config.topic];\n    } else if (type === 'by-content') {\n      const contentHash = hash(config.content);\n      for (const [cachedTopic, cachedContentHash] of Object.entries(\n        repoCache.prComments?.[number],\n      )) {\n        if (cachedContentHash === contentHash) {\n          delete repoCache.prComments?.[number]?.[cachedTopic];\n          return;\n        }\n      }\n    }\n  }\n}\n"]}