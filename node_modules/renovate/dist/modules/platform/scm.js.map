{"version":3,"file":"scm.js","sourceRoot":"","sources":["../../../lib/modules/platform/scm.ts"],"names":[],"mappings":";;;AAgCA,8CAKC;AAnCD,mEAAoE;AACpE,+CAA8C;AAC9C,sCAAyC;AACzC,sCAAyC;AACzC,qCAAsC;AAGzB,QAAA,gBAAgB,GAAG,IAAI,GAAG,EAAwC,CAAC;AAChF,wBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,2BAAa,CAAC,CAAC;AAC7C,wBAAgB,CAAC,GAAG,CAAC,YAAY,EAAE,2BAAa,CAAC,CAAC;AAClD,wBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,2BAAa,CAAC,CAAC;AACjD,wBAAgB,CAAC,GAAG,CAAC,kBAAkB,EAAE,2BAAa,CAAC,CAAC;AACxD,wBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAS,CAAC,CAAC;AAC1C,wBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,2BAAa,CAAC,CAAC;AAC7C,wBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAS,CAAC,CAAC;AAC1C,wBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,2BAAa,CAAC,CAAC;AAC9C,wBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,aAAO,CAAC,CAAC;AAEvC,IAAI,IAA6B,CAAC;AAElC,MAAM,OAAO,GAA8B;IACzC,GAAG,CAAC,OAAoB,EAAE,IAAuB;QAC/C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,mCAAkB,CAAC,CAAC;QACtC,CAAC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;CACF,CAAC;AACW,QAAA,GAAG,GAAG,IAAI,KAAK,CAAc,EAAS,EAAE,OAAO,CAAC,CAAC;AAE9D,SAAgB,iBAAiB,CAAC,IAAgB;IAChD,IAAI,CAAC,wBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CAAC,mCAAkB,CAAC,CAAC;IACtC,CAAC;IACD,IAAI,GAAG,IAAI,CAAC,wBAAgB,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,EAAE,CAAC;AAC7C,CAAC","sourcesContent":["import type { Constructor } from 'type-fest';\nimport type { PlatformId } from '../../constants';\nimport { PLATFORM_NOT_FOUND } from '../../constants/error-messages';\nimport { DefaultGitScm } from './default-scm';\nimport { GerritScm } from './gerrit/scm';\nimport { GithubScm } from './github/scm';\nimport { LocalFs } from './local/scm';\nimport type { PlatformScm } from './types';\n\nexport const platformScmImpls = new Map<PlatformId, Constructor<PlatformScm>>();\nplatformScmImpls.set('azure', DefaultGitScm);\nplatformScmImpls.set('codecommit', DefaultGitScm);\nplatformScmImpls.set('bitbucket', DefaultGitScm);\nplatformScmImpls.set('bitbucket-server', DefaultGitScm);\nplatformScmImpls.set('gerrit', GerritScm);\nplatformScmImpls.set('gitea', DefaultGitScm);\nplatformScmImpls.set('github', GithubScm);\nplatformScmImpls.set('gitlab', DefaultGitScm);\nplatformScmImpls.set('local', LocalFs);\n\nlet _scm: PlatformScm | undefined;\n\nconst handler: ProxyHandler<PlatformScm> = {\n  get(_target: PlatformScm, prop: keyof PlatformScm) {\n    if (!_scm) {\n      throw new Error(PLATFORM_NOT_FOUND);\n    }\n    return _scm[prop];\n  },\n};\nexport const scm = new Proxy<PlatformScm>({} as any, handler);\n\nexport function setPlatformScmApi(name: PlatformId): void {\n  if (!platformScmImpls.has(name)) {\n    throw new Error(PLATFORM_NOT_FOUND);\n  }\n  _scm = new (platformScmImpls.get(name)!)();\n}\n"]}