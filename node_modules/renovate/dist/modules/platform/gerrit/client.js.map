{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gerrit/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { REPOSITORY_ARCHIVED } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { memCacheProvider } from '../../../util/http/cache/memory-http-cache-provider';\nimport { GerritHttp } from '../../../util/http/gerrit';\nimport type { HttpOptions } from '../../../util/http/types';\nimport { regEx } from '../../../util/regex';\nimport { getQueryString } from '../../../util/url';\nimport type {\n  GerritAccountInfo,\n  GerritBranchInfo,\n  GerritChange,\n  GerritChangeMessageInfo,\n  GerritFindPRConfig,\n  GerritMergeableInfo,\n  GerritProjectInfo,\n} from './types';\nimport { mapPrStateToGerritFilter } from './utils';\n\nconst QUOTES_REGEX = regEx('\"', 'g');\n\nclass GerritClient {\n  private requestDetails = [\n    'SUBMITTABLE', //include the submittable field in ChangeInfo, which can be used to tell if the change is reviewed and ready for submit.\n    'CHECK', // include potential consistency problems with the change (not related to labels)\n    'MESSAGES',\n    'DETAILED_ACCOUNTS',\n    'LABELS',\n    'CURRENT_ACTIONS', //to check if current_revision can be \"rebased\"\n    'CURRENT_REVISION', //get RevisionInfo::ref to fetch\n    'CURRENT_COMMIT', // to get the commit message\n  ] as const;\n\n  private gerritHttp = new GerritHttp();\n\n  async getRepos(): Promise<string[]> {\n    const res = await this.gerritHttp.getJsonUnchecked<string[]>(\n      'a/projects/?type=CODE&state=ACTIVE',\n      {},\n    );\n    return Object.keys(res.body);\n  }\n\n  async getProjectInfo(repository: string): Promise<GerritProjectInfo> {\n    const projectInfo =\n      await this.gerritHttp.getJsonUnchecked<GerritProjectInfo>(\n        `a/projects/${encodeURIComponent(repository)}`,\n      );\n    if (projectInfo.body.state !== 'ACTIVE') {\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    return projectInfo.body;\n  }\n\n  async getBranchInfo(repository: string): Promise<GerritBranchInfo> {\n    const branchInfo = await this.gerritHttp.getJsonUnchecked<GerritBranchInfo>(\n      `a/projects/${encodeURIComponent(repository)}/branches/HEAD`,\n    );\n    return branchInfo.body;\n  }\n\n  async findChanges(\n    repository: string,\n    findPRConfig: GerritFindPRConfig,\n    refreshCache?: boolean,\n  ): Promise<GerritChange[]> {\n    const opts: HttpOptions = {};\n    /* v8 ignore start: temporary code */\n    // TODO: should refresh the cache rather than just ignore it\n    if (refreshCache) {\n      opts.memCache = false;\n    } else {\n      opts.cacheProvider = memCacheProvider;\n    }\n    /* v8 ignore stop */\n\n    const filters = GerritClient.buildSearchFilters(repository, findPRConfig);\n    const queryString = getQueryString({\n      o: this.requestDetails,\n    });\n    const changes = await this.gerritHttp.getJsonUnchecked<GerritChange[]>(\n      `a/changes/?q=${filters.join('+')}&${queryString}`,\n      opts,\n    );\n    logger.trace(\n      `findChanges(${filters.join(', ')}) => ${changes.body.length}`,\n    );\n    return changes.body;\n  }\n\n  async getChange(changeNumber: number): Promise<GerritChange> {\n    const queryString = getQueryString({ o: this.requestDetails });\n    const changes = await this.gerritHttp.getJsonUnchecked<GerritChange>(\n      `a/changes/${changeNumber}?${queryString}`,\n    );\n    return changes.body;\n  }\n\n  async getMergeableInfo(change: GerritChange): Promise<GerritMergeableInfo> {\n    const mergeable =\n      await this.gerritHttp.getJsonUnchecked<GerritMergeableInfo>(\n        `a/changes/${change._number}/revisions/current/mergeable`,\n      );\n    return mergeable.body;\n  }\n\n  async abandonChange(changeNumber: number): Promise<void> {\n    await this.gerritHttp.postJson(`a/changes/${changeNumber}/abandon`);\n  }\n\n  async submitChange(changeNumber: number): Promise<GerritChange> {\n    const change = await this.gerritHttp.postJson<GerritChange>(\n      `a/changes/${changeNumber}/submit`,\n    );\n    return change.body;\n  }\n\n  async getMessages(changeNumber: number): Promise<GerritChangeMessageInfo[]> {\n    const messages = await this.gerritHttp.getJsonUnchecked<\n      GerritChangeMessageInfo[]\n    >(`a/changes/${changeNumber}/messages`, { memCache: false });\n    return messages.body;\n  }\n\n  async addMessage(\n    changeNumber: number,\n    fullMessage: string,\n    tag?: string,\n  ): Promise<void> {\n    const message = this.normalizeMessage(fullMessage);\n    await this.gerritHttp.postJson(\n      `a/changes/${changeNumber}/revisions/current/review`,\n      { body: { message, tag, notify: 'NONE' } },\n    );\n  }\n\n  async checkForExistingMessage(\n    changeNumber: number,\n    newMessage: string,\n    msgType?: string,\n  ): Promise<boolean> {\n    const messages = await this.getMessages(changeNumber);\n    return messages.some(\n      (existingMsg) =>\n        (msgType === undefined || msgType === existingMsg.tag) &&\n        existingMsg.message.includes(newMessage),\n    );\n  }\n\n  async addMessageIfNotAlreadyExists(\n    changeNumber: number,\n    message: string,\n    tag?: string,\n  ): Promise<void> {\n    const newMsg = this.normalizeMessage(message);\n    if (!(await this.checkForExistingMessage(changeNumber, newMsg, tag))) {\n      await this.addMessage(changeNumber, newMsg, tag);\n    }\n  }\n\n  async setLabel(\n    changeNumber: number,\n    label: string,\n    value: number,\n  ): Promise<void> {\n    await this.gerritHttp.postJson(\n      `a/changes/${changeNumber}/revisions/current/review`,\n      { body: { labels: { [label]: value }, notify: 'NONE' } },\n    );\n  }\n\n  async addReviewers(changeNumber: number, reviewers: string[]): Promise<void> {\n    await this.gerritHttp.postJson(\n      `a/changes/${changeNumber}/revisions/current/review`,\n      {\n        body: {\n          reviewers: reviewers.map((r) => ({ reviewer: r })),\n          notify: 'OWNER_REVIEWERS', // Avoids notifying cc's\n        },\n      },\n    );\n  }\n\n  async addAssignee(changeNumber: number, assignee: string): Promise<void> {\n    await this.gerritHttp.putJson<GerritAccountInfo>(\n      // TODO: refactor this as this API removed in Gerrit 3.8\n      `a/changes/${changeNumber}/assignee`,\n      {\n        body: { assignee },\n      },\n    );\n  }\n\n  async getFile(\n    repo: string,\n    branch: string,\n    fileName: string,\n  ): Promise<string> {\n    const base64Content = await this.gerritHttp.getText(\n      `a/projects/${encodeURIComponent(\n        repo,\n      )}/branches/${encodeURIComponent(branch)}/files/${encodeURIComponent(fileName)}/content`,\n    );\n    return Buffer.from(base64Content.body, 'base64').toString();\n  }\n\n  normalizeMessage(message: string): string {\n    //the last \\n was removed from gerrit after the comment was added...\n    return message.substring(0, 0x4000).trim();\n  }\n\n  private static buildSearchFilters(\n    repository: string,\n    searchConfig: GerritFindPRConfig,\n  ): string[] {\n    const filterState = mapPrStateToGerritFilter(searchConfig.state);\n    const filters = ['owner:self', 'project:' + repository, filterState];\n    if (searchConfig.branchName) {\n      filters.push(`footer:Renovate-Branch=${searchConfig.branchName}`);\n    }\n    if (searchConfig.targetBranch) {\n      filters.push(`branch:${searchConfig.targetBranch}`);\n    }\n    if (searchConfig.label) {\n      filters.push(`label:Code-Review=${searchConfig.label}`);\n    }\n    if (searchConfig.prTitle) {\n      // escaping support in Gerrit is not great, so we need to remove quotes\n      // special characters are ignored anyway in the search so it does not create any issues\n      filters.push(\n        `message:${encodeURIComponent('\"' + searchConfig.prTitle.replace(QUOTES_REGEX, '') + '\"')}`,\n      );\n    }\n    return filters;\n  }\n}\n\nexport const client = new GerritClient();\n"]}