{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/user.ts"],"names":[],"mappings":";;AAMA,sCAoBC;AAED,wCAuBC;AAED,oCAoBC;;AAzED,4CAAyC;AACzC,8EAAwD;AAGxD,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,UAAU,EAAE,CAAC;AAEvC,KAAK,UAAU,aAAa,CAAC,KAAa;IAC/C,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,cAAc,CAK3C,sCAAsC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QACD,OAAO;YACL,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;YACnC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;YAC/B,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;SACnC,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC1D,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,cAAc,CAClC,QAAgB,EAChB,KAAa;IAEb,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,CACf,MAAM,SAAS,CAAC,gBAAgB,CAI7B,QAAQ,GAAG,MAAM,EAAE;YACpB,KAAK;SACN,CAAC,CACH,CAAC,IAAI,CAAC;QACP,OAAO;YACL,QAAQ,EAAE,QAAQ,CAAC,KAAK;YACxB,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,EAAE,EAAE,QAAQ,CAAC,EAAE;SAChB,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAC1D,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,YAAY,CAChC,QAAgB,EAChB,KAAa;IAEb,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,CACb,MAAM,SAAS,CAAC,gBAAgB,CAC9B,QAAQ,GAAG,aAAa,EACxB;YACE,KAAK;SACN,CACF,CACF,CAAC,IAAI,CAAC;QACP,OAAO,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;IACnC,CAAC;IAAC,MAAM,CAAC;QACP,eAAM,CAAC,KAAK,CACV,kEAAkE,CACnE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport * as githubHttp from '../../../util/http/github';\nimport type { UserDetails } from './types';\n\nconst githubApi = new githubHttp.GithubHttp();\n\nexport async function getAppDetails(token: string): Promise<UserDetails> {\n  try {\n    const appData = await githubApi.requestGraphql<{\n      viewer: {\n        login: string;\n        databaseId: number;\n      };\n    }>('query { viewer { login databaseId }}', { token });\n    if (!appData?.data) {\n      throw new Error(\"Init: Can't get App details\");\n    }\n    return {\n      username: appData.data.viewer.login,\n      name: appData.data.viewer.login,\n      id: appData.data.viewer.databaseId,\n    };\n  } catch (err) {\n    logger.debug({ err }, 'Error authenticating with GitHub');\n    throw new Error('Init: Authentication failure');\n  }\n}\n\nexport async function getUserDetails(\n  endpoint: string,\n  token: string,\n): Promise<UserDetails> {\n  try {\n    const userData = (\n      await githubApi.getJsonUnchecked<{\n        login: string;\n        name: string;\n        id: number;\n      }>(endpoint + 'user', {\n        token,\n      })\n    ).body;\n    return {\n      username: userData.login,\n      name: userData.name,\n      id: userData.id,\n    };\n  } catch (err) {\n    logger.debug({ err }, 'Error authenticating with GitHub');\n    throw new Error('Init: Authentication failure');\n  }\n}\n\nexport async function getUserEmail(\n  endpoint: string,\n  token: string,\n): Promise<string | null> {\n  try {\n    const emails = (\n      await githubApi.getJsonUnchecked<{ email: string }[]>(\n        endpoint + 'user/emails',\n        {\n          token,\n        },\n      )\n    ).body;\n    return emails?.[0].email ?? null;\n  } catch {\n    logger.debug(\n      'Cannot read user/emails endpoint on GitHub to retrieve gitAuthor',\n    );\n    return null;\n  }\n}\n"]}