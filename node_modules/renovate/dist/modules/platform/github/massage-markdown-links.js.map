{"version":3,"file":"massage-markdown-links.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/massage-markdown-links.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Content } from 'mdast';\nimport remark from 'remark';\nimport type { Plugin, Transformer } from 'unified';\nimport { logger } from '../../../logger';\nimport { coerceNumber } from '../../../util/number';\nimport { regEx } from '../../../util/regex';\n\ninterface UrlMatch {\n  start: number;\n  end: number;\n  replaceTo: string;\n}\n\n//according to https://github.com/dead-claudia/github-limits\nconst urlRegex =\n  /(?:https?:)?(?:\\/\\/)?(?:www\\.)?(?<!api\\.)(?:to)?github\\.com\\/[-a-z0-9]+\\/[-_a-z0-9.]+\\/(?:discussions|issues|pull)\\/[0-9]+(?:#[-_a-z0-9]+)?/i; // TODO #12872 (?<!re) after text not matching\n\nfunction massageLink(input: string): string {\n  return input.replace(\n    regEx(/(?:to|redirect\\.|www\\.)?github\\.com/i),\n    'redirect.github.com',\n  );\n}\n\nfunction collectLinkPosition(input: string, matches: UrlMatch[]): Plugin {\n  const transformer = (tree: Content): void => {\n    const startOffset = coerceNumber(tree.position?.start.offset);\n    const endOffset = coerceNumber(tree.position?.end.offset);\n\n    if (tree.type === 'link') {\n      const substr = input.slice(startOffset, endOffset);\n      const url: string = tree.url;\n      const offset: number = startOffset + substr.lastIndexOf(url);\n      if (urlRegex.test(url)) {\n        matches.push({\n          start: offset,\n          end: offset + url.length,\n          replaceTo: massageLink(url),\n        });\n      }\n    } else if (tree.type === 'text') {\n      const globalUrlReg = new RegExp(urlRegex, 'gi');\n      const urlMatches = [...tree.value.matchAll(globalUrlReg)];\n      for (const match of urlMatches) {\n        const [url] = match;\n        const start = startOffset + coerceNumber(match.index);\n        const end = start + url.length;\n        const newUrl = massageLink(url);\n        matches.push({ start, end, replaceTo: `[${url}](${newUrl})` });\n      }\n    } else if ('children' in tree) {\n      tree.children.forEach((child: Content) => {\n        transformer(child);\n      });\n    }\n  };\n\n  return () => transformer as Transformer;\n}\n\nexport function massageMarkdownLinks(content: string): string {\n  try {\n    const rightSpaces = content.replace(content.trimEnd(), '');\n    const matches: UrlMatch[] = [];\n    remark().use(collectLinkPosition(content, matches)).processSync(content);\n    const result = matches.reduceRight((acc, { start, end, replaceTo }) => {\n      const leftPart = acc.slice(0, start);\n      const rightPart = acc.slice(end);\n      return leftPart + replaceTo + rightPart;\n    }, content);\n    return result.trimEnd() + rightSpaces;\n  } catch (err) /* v8 ignore start */ {\n    logger.warn({ err }, `Unable to massage markdown text`);\n    return content;\n  } /* v8 ignore stop */\n}\n"]}