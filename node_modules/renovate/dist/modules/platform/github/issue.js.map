{"version":3,"file":"issue.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/issue.ts"],"names":[],"mappings":";;;;AAAA,iCAAiC;AACjC,6BAAwB;AACxB,4CAAyC;AACzC,6EAAuD;AACvD,+DAA0D;AAE1D,MAAM,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IAC/B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;IAClB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACvD,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;IACjB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;CACjB,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,eAAe,CAAC,MAAM,CAAC;IAChD,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE;CACtB,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;IACrB,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC;IACrC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAC7C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;AACtD,CAAC,CAAC,CAAC;AAEH,MAAM,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC;IAC7C,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE;CACvB,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;IACrB,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC;IACtC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IAC7C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;AACtD,CAAC,CAAC,CAAC;AAEU,QAAA,WAAW,GAAG,OAAC,CAAC,KAAK,CAAC,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC,CAAC;AAK1E,MAAa,gBAAgB;IACnB,MAAM,CAAC,KAAK,CAAC,SAA2B;QAC9C,QAAQ,CAAC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,IAAA,qBAAQ,GAAE,CAAC;QAC7B,SAAS,CAAC,QAAQ,KAAK,EAAE,CAAC;QAC1B,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,EAAE,CAAC;QACjC,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC;QAC/C,CAAC;IACH,CAAC;IAEO,MAAM,KAAK,IAAI;QACrB,IAAI,SAAS,GAAiC,IAAA,qBAAQ,GAAE,CAAC,QAAQ,EAAE,MAAM;YACvE,EAAE,WAAoC,CAAC;QACzC,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QAED,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACtC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,SAAS;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAChD,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,CAC3C,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAClE,CAAC;QAEF,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,MAAqB;QACpC,MAAM,SAAS,GAAc,EAAE,CAAC;QAChC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,KAAkB;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC;IACH,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,MAAc;QAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,oBAAoB,CAAC,MAAiC;QAC3D,QAAQ,CAAC,GAAG,CAAC,+BAA+B,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAEO,MAAM,CAAC,SAAS,CAAC,SAAoB;QAC3C,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CACpC,+BAA+B,CAChC,CAAC;QACF,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,IAAI,YAAY,GAAG,KAAK,CAAC;QAEzB,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE,CAAC;YACtC,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAE5C,wDAAwD;YACxD,yBAAyB;YACzB,IACE,WAAW;gBACX,WAAW,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;gBACnC,WAAW,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,EAC/C,CAAC;gBACD,YAAY,GAAG,IAAI,CAAC;gBACpB,MAAM;YACR,CAAC;YAED,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC;QAED,0DAA0D;QAC1D,8BAA8B;QAC9B,IAAI,iBAAiB,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;YAC9D,YAAY,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,eAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACtB,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA/GD,4CA+GC","sourcesContent":["import { DateTime } from 'luxon';\nimport { z } from 'zod';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport { getCache } from '../../../util/cache/repository';\n\nconst GithubIssueBase = z.object({\n  number: z.number(),\n  state: z.string().transform((val) => val.toLowerCase()),\n  title: z.string(),\n  body: z.string(),\n});\n\nconst GithubGraphqlIssue = GithubIssueBase.extend({\n  updatedAt: z.string(),\n}).transform((issue) => {\n  const lastModified = issue.updatedAt;\n  const { number, state, title, body } = issue;\n  return { number, state, title, body, lastModified };\n});\n\nconst GithubRestIssue = GithubIssueBase.extend({\n  updated_at: z.string(),\n}).transform((issue) => {\n  const lastModified = issue.updated_at;\n  const { number, state, title, body } = issue;\n  return { number, state, title, body, lastModified };\n});\n\nexport const GithubIssue = z.union([GithubGraphqlIssue, GithubRestIssue]);\nexport type GithubIssue = z.infer<typeof GithubIssue>;\n\ntype CacheData = Record<number, GithubIssue>;\n\nexport class GithubIssueCache {\n  private static reset(cacheData: CacheData | null): void {\n    memCache.set('github-issues-reconcile-queue', null);\n    const repoCache = getCache();\n    repoCache.platform ??= {};\n    repoCache.platform.github ??= {};\n    if (cacheData) {\n      repoCache.platform.github.issuesCache = cacheData;\n    } else {\n      delete repoCache.platform.github.issuesCache;\n    }\n  }\n\n  private static get data(): CacheData | null {\n    let cacheData: CacheData | undefined | null = getCache().platform?.github\n      ?.issuesCache as CacheData | undefined;\n    if (!cacheData) {\n      return null;\n    }\n\n    cacheData = this.reconcile(cacheData);\n    return cacheData;\n  }\n\n  static getIssues(): GithubIssue[] | null {\n    const cacheData = this.data;\n    if (!cacheData) {\n      return null;\n    }\n\n    const sortedResult = Object.values(cacheData).sort(\n      ({ lastModified: a }, { lastModified: b }) =>\n        DateTime.fromISO(b).toMillis() - DateTime.fromISO(a).toMillis(),\n    );\n\n    return sortedResult;\n  }\n\n  static setIssues(issues: GithubIssue[]): void {\n    const cacheData: CacheData = {};\n    for (const issue of issues) {\n      cacheData[issue.number] = issue;\n    }\n    this.reset(cacheData);\n  }\n\n  static updateIssue(issue: GithubIssue): void {\n    const cacheData = this.data;\n    if (cacheData) {\n      cacheData[issue.number] = issue;\n    }\n  }\n\n  static deleteIssue(number: number): void {\n    const cacheData = this.data;\n    if (cacheData) {\n      delete cacheData[number];\n    }\n  }\n\n  /**\n   * At the moment of repo initialization, repository cache is not available.\n   * What we can do is to store issues for later reconciliation.\n   */\n  static addIssuesToReconcile(issues: GithubIssue[] | undefined): void {\n    memCache.set('github-issues-reconcile-queue', issues);\n  }\n\n  private static reconcile(cacheData: CacheData): CacheData | null {\n    const issuesToReconcile = memCache.get<GithubIssue[]>(\n      'github-issues-reconcile-queue',\n    );\n    if (!issuesToReconcile) {\n      return cacheData;\n    }\n\n    let isReconciled = false;\n\n    for (const issue of issuesToReconcile) {\n      const cachedIssue = cacheData[issue.number];\n\n      // If we reached the item which is already in the cache,\n      // it means sync is done.\n      if (\n        cachedIssue &&\n        cachedIssue.number === issue.number &&\n        cachedIssue.lastModified === issue.lastModified\n      ) {\n        isReconciled = true;\n        break;\n      }\n\n      cacheData[issue.number] = issue;\n    }\n\n    // If we've just iterated over all the items in the cache,\n    // it means sync is also done.\n    if (issuesToReconcile.length >= Object.keys(cacheData).length) {\n      isReconciled = true;\n    }\n\n    if (!isReconciled) {\n      logger.debug('Issues cache: reset');\n      this.reset(null);\n      return null;\n    }\n\n    logger.debug('Issues cache: synced');\n    this.reset(cacheData);\n    return cacheData;\n  }\n}\n"]}