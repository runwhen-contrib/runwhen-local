{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/platform/github/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { LongCommitSha } from '../../../util/git/types';\nimport type { Pr, PrBodyStruct } from '../types';\n\n// https://developer.github.com/v3/repos/statuses\n// https://developer.github.com/v3/checks/runs/\nexport type CombinedBranchState = 'failure' | 'pending' | 'success';\nexport type BranchState = 'failure' | 'pending' | 'success' | 'error';\n\nexport interface GhBranchStatus {\n  context: string;\n  state: BranchState;\n}\n\nexport interface CombinedBranchStatus {\n  state: CombinedBranchState;\n  statuses: GhBranchStatus[];\n}\n\nexport interface Comment {\n  id: number;\n  body: string;\n}\n\nexport interface GhRestRepo {\n  full_name: string;\n  default_branch: string;\n  owner: {\n    login: string;\n  };\n  archived: boolean;\n  topics: string[];\n}\n\nexport interface GhRestPr {\n  head: {\n    ref: string;\n    sha: LongCommitSha;\n    repo: {\n      full_name: string;\n      pushed_at?: string;\n    };\n  };\n  base: {\n    repo: {\n      pushed_at?: string;\n    };\n    ref: string;\n  };\n  mergeable_state: string;\n  number: number;\n  title: string;\n  body?: string;\n  bodyStruct?: PrBodyStruct;\n  state: string;\n  merged_at?: string;\n  created_at: string;\n  closed_at?: string;\n  updated_at: string;\n  user?: { login?: string };\n  node_id: string;\n  assignee?: { login?: string };\n  assignees?: { login?: string }[];\n  requested_reviewers?: { login?: string }[];\n  labels?: { name: string }[];\n  _links?: unknown;\n}\n\nexport interface GhPr extends Pr {\n  updated_at: string;\n  node_id: string;\n}\n\nexport interface UserDetails {\n  username: string;\n  name: string;\n  id: number;\n}\n\nexport interface PlatformConfig {\n  hostType: string;\n  endpoint: string;\n  isGhe?: boolean;\n  gheVersion?: string | null;\n  isGHApp?: boolean;\n  existingRepos?: string[];\n  userDetails?: UserDetails;\n  userEmail?: string | null;\n}\n\nexport interface LocalRepoConfig {\n  repositoryName: string;\n  pushProtection: boolean;\n  prReviewsRequired: boolean;\n  branchForceRebase?: Record<string, boolean>;\n  parentRepo: string | null;\n  forkOrg?: string;\n  forkToken?: string;\n  forkCreation?: boolean;\n  prList: GhPr[] | null;\n  mergeMethod: 'rebase' | 'squash' | 'merge';\n  defaultBranch: string;\n  repositoryOwner: string;\n  repository: string | null;\n  renovateUsername: string | undefined;\n  renovateForkUser: string | undefined;\n  productLinks: any;\n  ignorePrAuthor: boolean;\n  autoMergeAllowed: boolean;\n  hasIssuesEnabled: boolean;\n  hasVulnerabilityAlertsEnabled: boolean;\n}\n\nexport type BranchProtection = any;\n\nexport interface GhRepo {\n  id: string;\n  isFork: boolean;\n  parent?: {\n    nameWithOwner: string;\n  };\n  isArchived: boolean;\n  nameWithOwner: string;\n  autoMergeAllowed: boolean;\n  hasIssuesEnabled: boolean;\n  hasVulnerabilityAlertsEnabled: boolean;\n  mergeCommitAllowed: boolean;\n  rebaseMergeAllowed: boolean;\n  squashMergeAllowed: boolean;\n  defaultBranchRef: {\n    name: string;\n    target: {\n      oid: string;\n    };\n  };\n  issues: { nodes: unknown[] };\n}\n\nexport interface GhAutomergeResponse {\n  enablePullRequestAutoMerge: {\n    pullRequest: { number: number };\n  };\n}\n\nexport interface ApiPageItem {\n  number: number;\n  updated_at: string;\n}\n\n/**\n * Mutable object designed to be used in the repository cache\n */\nexport interface ApiPageCache<T extends ApiPageItem = ApiPageItem> {\n  items: Record<number, T>;\n  lastModified?: string;\n}\n"]}