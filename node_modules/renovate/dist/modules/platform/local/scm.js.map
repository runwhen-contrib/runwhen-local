{"version":3,"file":"scm.js","sourceRoot":"","sources":["../../../../lib/modules/platform/local/scm.ts"],"names":[],"mappings":";;;AAAA,2DAA8C;AAC9C,+BAA4B;AAC5B,4CAAyC;AAIzC,IAAI,QAA8B,CAAC;AACnC,MAAa,OAAO;IAClB,kBAAkB,CAAC,UAAkB,EAAE,UAAkB;QACvD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,gBAAgB,CAAC,UAAkB,EAAE,UAAkB;QACrD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,kBAAkB,CAAC,UAAkB,EAAE,MAAc;QACnD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACD,YAAY,CAAC,UAAkB;QAC7B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,eAAe,CAAC,UAAkB;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,YAAY,CAAC,UAAkB;QAC7B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,aAAa,CACX,YAA+B;QAE/B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,WAAW;QACf,IAAI,CAAC;YACH,4BAA4B;YAC5B,MAAM,MAAM,GAAG,IAAA,6BAAQ,EAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YAC/D,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,MAAM,CAAC;YACP,eAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;YACtE,QAAQ,KAAK,MAAM,IAAA,WAAI,EAAC,IAAI,EAAE;gBAC5B,GAAG,EAAE,IAAI;gBACT,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC;QACL,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,cAAc,CAAC,UAAkB;QAC/B,mDAAmD;QACnD,OAAO,OAAO,CAAC,OAAO,CAAC,EAAmB,CAAC,CAAC;IAC9C,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,YAAY,CAAC,UAAkB;QAC7B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAtDD,0BAsDC","sourcesContent":["import { execSync } from 'node:child_process';\nimport { glob } from 'glob';\nimport { logger } from '../../../logger';\nimport type { CommitFilesConfig, LongCommitSha } from '../../../util/git/types';\nimport type { PlatformScm } from '../types';\n\nlet fileList: string[] | undefined;\nexport class LocalFs implements PlatformScm {\n  isBranchBehindBase(branchName: string, baseBranch: string): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  isBranchModified(branchName: string, baseBranch: string): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  isBranchConflicted(baseBranch: string, branch: string): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  branchExists(branchName: string): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n  getBranchCommit(branchName: string): Promise<LongCommitSha | null> {\n    return Promise.resolve(null);\n  }\n  deleteBranch(branchName: string): Promise<void> {\n    return Promise.resolve();\n  }\n  commitAndPush(\n    commitConfig: CommitFilesConfig,\n  ): Promise<LongCommitSha | null> {\n    return Promise.resolve(null);\n  }\n\n  async getFileList(): Promise<string[]> {\n    try {\n      // fetch file list using git\n      const stdout = execSync('git ls-files', { encoding: 'utf-8' });\n      logger.debug('Got file list using git');\n      fileList = stdout.split('\\n');\n    } catch {\n      logger.debug('Could not get file list using git, using glob instead');\n      fileList ??= await glob('**', {\n        dot: true,\n        nodir: true,\n      });\n    }\n\n    return fileList;\n  }\n\n  checkoutBranch(branchName: string): Promise<LongCommitSha> {\n    // We don't care about the commit sha in local mode\n    return Promise.resolve('' as LongCommitSha);\n  }\n\n  mergeAndPush(branchName: string): Promise<void> {\n    return Promise.resolve();\n  }\n\n  mergeToLocal(branchName: string): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}