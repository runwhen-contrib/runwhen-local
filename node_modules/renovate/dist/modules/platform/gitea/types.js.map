{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { LongCommitSha } from '../../../util/git/types';\nimport type { Pr, RepoSortMethod, SortMethod } from '../types';\n\nexport interface PrReviewersParams {\n  reviewers?: string[];\n  team_reviewers?: string[];\n}\n\nexport type PRState = 'open' | 'closed' | 'all';\nexport type IssueState = 'open' | 'closed' | 'all';\nexport type CommitStatusType =\n  | 'pending'\n  | 'success'\n  | 'error'\n  | 'failure'\n  | 'warning'\n  | 'unknown';\nexport type PRMergeMethod = 'merge' | 'rebase' | 'rebase-merge' | 'squash';\n\nexport interface GiteaLabel {\n  id: number;\n  name: string;\n}\nexport interface PR {\n  number: number;\n  state: PRState;\n  title: string;\n  body: string;\n  mergeable: boolean;\n  merged?: boolean;\n  created_at: string;\n  updated_at: string;\n  closed_at: string | null;\n  diff_url: string;\n  base?: {\n    ref: string;\n  };\n  head?: {\n    label: string;\n    sha: LongCommitSha;\n    repo?: Repo;\n  };\n  assignee?: {\n    login?: string;\n  };\n  assignees?: any[];\n  user?: { username?: string };\n\n  // labels returned from the Gitea API are represented as an array of objects\n  // ref: https://docs.gitea.com/api/1.20/#tag/repository/operation/repoGetPullRequest\n  labels?: GiteaLabel[];\n}\n\nexport interface Issue {\n  number: number;\n  state: IssueState;\n  title: string;\n  body: string;\n  assignees: User[];\n  labels: Label[];\n}\n\nexport interface User {\n  id: number;\n  email: string;\n  full_name?: string;\n  username: string;\n}\n\nexport interface Repo {\n  id: number;\n  allow_merge_commits: boolean;\n  allow_rebase: boolean;\n  allow_rebase_explicit: boolean;\n  allow_squash_merge: boolean;\n  archived: boolean;\n  clone_url?: string;\n  default_merge_style: string;\n  external_tracker?: unknown;\n  has_issues: boolean;\n  has_pull_requests: boolean;\n  ssh_url?: string;\n  default_branch: string;\n  empty: boolean;\n  fork: boolean;\n  full_name: string;\n  mirror: boolean;\n  owner: User;\n  permissions: RepoPermission;\n}\n\nexport interface RepoPermission {\n  admin: boolean;\n  pull: boolean;\n  push: boolean;\n}\n\nexport interface RepoSearchResults {\n  ok: boolean;\n  data: Repo[];\n}\n\nexport interface RepoContents {\n  path: string;\n  content?: string;\n  contentString?: string;\n}\n\nexport interface Comment {\n  id: number;\n  body: string;\n}\n\nexport interface Label {\n  id: number;\n  name: string;\n  description: string;\n  color: string;\n}\n\nexport interface Branch {\n  name: string;\n  commit: Commit;\n}\n\nexport interface Commit {\n  id: string;\n  author: CommitUser;\n}\n\nexport interface CommitUser {\n  name: string;\n  email: string;\n  username: string;\n}\n\nexport interface CommitStatus {\n  id: number;\n  status: CommitStatusType;\n  context: string;\n  description?: string;\n  target_url?: string;\n  created_at: string;\n}\n\nexport interface CombinedCommitStatus {\n  worstStatus: CommitStatusType;\n  statuses: CommitStatus[];\n}\n\nexport interface RepoSearchParams {\n  uid?: number;\n  archived?: boolean;\n  topic?: boolean;\n  q?: string;\n\n  /**\n   * Repo sort type, defaults to `alpha`.\n   */\n  sort?: RepoSortMethod;\n\n  /**\n   * Repo sort order, defaults to `asc`\n   */\n  order?: SortMethod;\n}\n\nexport type IssueCreateParams = Partial<IssueUpdateLabelsParams> &\n  IssueUpdateParams;\n\nexport interface IssueUpdateParams {\n  title?: string;\n  body?: string;\n  state?: IssueState;\n  assignees?: string[];\n}\n\nexport interface IssueUpdateLabelsParams {\n  labels?: number[];\n}\n\nexport interface IssueSearchParams {\n  state?: IssueState;\n}\n\nexport interface PRCreateParams extends PRUpdateParams {\n  head?: string;\n}\n\nexport interface PRUpdateParams {\n  title?: string;\n  body?: string;\n  assignees?: string[];\n  labels?: number[];\n  state?: PRState;\n  base?: string;\n}\n\nexport interface PRMergeParams {\n  Do: PRMergeMethod;\n  merge_when_checks_succeed?: boolean;\n  delete_branch_after_merge?: boolean;\n}\n\nexport type CommentCreateParams = CommentUpdateParams;\n\nexport interface CommentUpdateParams {\n  body: string;\n}\n\nexport interface CommitStatusCreateParams {\n  context?: string;\n  description?: string;\n  state?: CommitStatusType;\n  target_url?: string;\n}\n\nexport interface GiteaPrCacheData {\n  items: Record<number, Pr>;\n  updated_at: string | null;\n  author: string | null;\n}\n"]}