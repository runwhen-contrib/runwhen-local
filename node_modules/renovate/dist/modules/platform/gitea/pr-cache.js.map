{"version":3,"file":"pr-cache.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/pr-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { dequal } from 'dequal';\nimport { DateTime } from 'luxon';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport { getCache } from '../../../util/cache/repository';\nimport type { GiteaHttp } from '../../../util/http/gitea';\nimport type { HttpResponse } from '../../../util/http/types';\nimport { getQueryString, parseLinkHeader, parseUrl } from '../../../util/url';\nimport type { Pr } from '../types';\nimport type { GiteaPrCacheData, PR } from './types';\nimport { API_PATH, toRenovatePR } from './utils';\n\nexport class GiteaPrCache {\n  private cache: GiteaPrCacheData;\n  private items: Pr[] = [];\n\n  private constructor(\n    private repo: string,\n    private readonly ignorePrAuthor: boolean,\n    private author: string | null,\n  ) {\n    const repoCache = getCache();\n    repoCache.platform ??= {};\n    repoCache.platform.gitea ??= {};\n    let pullRequestCache = repoCache.platform.gitea.pullRequestsCache as\n      | GiteaPrCacheData\n      | undefined;\n    if (!pullRequestCache || pullRequestCache.author !== author) {\n      pullRequestCache = {\n        items: {},\n        updated_at: null,\n        author,\n      };\n    }\n    repoCache.platform.gitea.pullRequestsCache = pullRequestCache;\n    this.cache = pullRequestCache;\n    this.updateItems();\n  }\n\n  static forceSync(): void {\n    memCache.set('gitea-pr-cache-synced', false);\n  }\n\n  private static async init(\n    http: GiteaHttp,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string | null,\n  ): Promise<GiteaPrCache> {\n    const res = new GiteaPrCache(repo, ignorePrAuthor, author);\n    const isSynced = memCache.get<true | undefined>('gitea-pr-cache-synced');\n\n    if (!isSynced) {\n      await res.sync(http);\n      memCache.set('gitea-pr-cache-synced', true);\n    }\n\n    return res;\n  }\n\n  private getPrs(): Pr[] {\n    return this.items;\n  }\n\n  static async getPrs(\n    http: GiteaHttp,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string,\n  ): Promise<Pr[]> {\n    const prCache = await GiteaPrCache.init(http, repo, ignorePrAuthor, author);\n    return prCache.getPrs();\n  }\n\n  private setPr(item: Pr): void {\n    this.cache.items[item.number] = item;\n    this.updateItems();\n  }\n\n  static async setPr(\n    http: GiteaHttp,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string,\n    item: Pr,\n  ): Promise<void> {\n    const prCache = await GiteaPrCache.init(http, repo, ignorePrAuthor, author);\n    prCache.setPr(item);\n  }\n\n  private reconcile(rawItems: (PR | null)[]): boolean {\n    const { items } = this.cache;\n    let { updated_at } = this.cache;\n    const cacheTime = updated_at ? DateTime.fromISO(updated_at) : null;\n\n    let needNextPage = true;\n\n    for (const rawItem of rawItems) {\n      if (!rawItem) {\n        logger.warn('Gitea PR is empty, throwing temporary error');\n        // Gitea API sometimes returns empty PRs, so we throw a temporary error\n        // https://github.com/go-gitea/gitea/blob/fcd096231ac2deaefbca10a7db1b9b01f1da93d7/services/convert/pull.go#L34-L52\n        throw new Error(TEMPORARY_ERROR);\n      }\n      const id = rawItem.number;\n\n      const newItem = toRenovatePR(rawItem, this.author);\n      if (!newItem) {\n        continue;\n      }\n\n      const oldItem = items[id];\n      if (dequal(oldItem, newItem)) {\n        needNextPage = false;\n        continue;\n      }\n\n      items[id] = newItem;\n\n      const itemTime = DateTime.fromISO(rawItem.updated_at);\n      if (!cacheTime || itemTime > cacheTime) {\n        updated_at = rawItem.updated_at;\n      }\n    }\n\n    this.cache.updated_at = updated_at;\n\n    return needNextPage;\n  }\n\n  private async sync(http: GiteaHttp): Promise<GiteaPrCache> {\n    let query: string | null = getQueryString({\n      state: 'all',\n      sort: 'recentupdate',\n      // Fetch 100 PRs on the first run to ensure we have the most recent PRs.\n      // Gitea / Forgejo will cap appropriate (50 by default, see `MAX_RESPONSE_ITEMS`).\n      // https://docs.gitea.com/administration/config-cheat-sheet#api-api\n      // https://forgejo.org/docs/latest/admin/config-cheat-sheet/#api-api\n      limit: this.items.length ? 20 : 100,\n      // Supported since Gitea 1.23.0 and Forgejo v10.0.0.\n      // Will be ignoded by older instances.\n      ...(this.ignorePrAuthor ? {} : { poster: this.author }),\n    });\n\n    while (query) {\n      // TODO: use zod, typescript can't infer the type of the response #22198\n      const res: HttpResponse<(PR | null)[]> = await http.getJsonUnchecked(\n        `${API_PATH}/repos/${this.repo}/pulls?${query}`,\n        {\n          memCache: false,\n          paginate: false,\n        },\n      );\n\n      const needNextPage = this.reconcile(res.body);\n      if (!needNextPage) {\n        break;\n      }\n\n      const uri = parseUrl(parseLinkHeader(res.headers.link)?.next?.url);\n      query = uri ? uri.search : null;\n    }\n\n    this.updateItems();\n\n    return this;\n  }\n\n  /**\n   * Ensure the pr cache starts with the most recent PRs.\n   * JavaScript ensures that the cache is sorted by PR number.\n   */\n  private updateItems(): void {\n    this.items = Object.values(this.cache.items).reverse();\n  }\n}\n"]}