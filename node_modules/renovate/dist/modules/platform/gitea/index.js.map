{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport semver from 'semver';\nimport {\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_BLOCKED,\n  REPOSITORY_CHANGED,\n  REPOSITORY_EMPTY,\n  REPOSITORY_MIRRORED,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { BranchStatus } from '../../../types';\nimport { deduplicateArray } from '../../../util/array';\nimport { parseJson } from '../../../util/common';\nimport * as git from '../../../util/git';\nimport { setBaseUrl } from '../../../util/http/gitea';\nimport { map } from '../../../util/promises';\nimport { sanitize } from '../../../util/sanitize';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { getPrBodyStruct, hashBody } from '../pr-body';\nimport type {\n  AutodiscoverConfig,\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  FindPRConfig,\n  Issue,\n  MergePRConfig,\n  Platform,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  RepoSortMethod,\n  SortMethod,\n  UpdatePrConfig,\n} from '../types';\nimport { repoFingerprint } from '../util';\nimport { smartTruncate } from '../utils/pr-body';\nimport * as helper from './gitea-helper';\nimport { giteaHttp } from './gitea-helper';\nimport { GiteaPrCache } from './pr-cache';\nimport type {\n  CombinedCommitStatus,\n  Comment,\n  IssueState,\n  Label,\n  PRMergeMethod,\n  PRUpdateParams,\n  Repo,\n} from './types';\nimport {\n  DRAFT_PREFIX,\n  getMergeMethod,\n  getRepoUrl,\n  smartLinks,\n  toRenovatePR,\n  trimTrailingApiPath,\n  usableRepo,\n} from './utils';\n\ninterface GiteaRepoConfig {\n  ignorePrAuthor: boolean;\n  repository: string;\n  mergeMethod: PRMergeMethod;\n\n  issueList: Promise<Issue[]> | null;\n  labelList: Promise<Label[]> | null;\n  defaultBranch: string;\n  cloneSubmodules: boolean;\n  cloneSubmodulesFilter: string[] | undefined;\n  hasIssuesEnabled: boolean;\n}\n\nexport const id = 'gitea';\n\nconst defaults = {\n  hostType: 'gitea',\n  endpoint: 'https://gitea.com/',\n  version: '0.0.0',\n  isForgejo: false,\n};\n\nlet config: GiteaRepoConfig = {} as any;\nlet botUserID: number;\nlet botUserName: string;\n\nexport function resetPlatform(): void {\n  config = {} as any;\n  botUserID = undefined as never;\n  botUserName = undefined as never;\n  defaults.hostType = 'gitea';\n  defaults.endpoint = 'https://gitea.com/';\n  defaults.version = '0.0.0';\n  defaults.isForgejo = false;\n  setBaseUrl(defaults.endpoint);\n}\n\nfunction toRenovateIssue(data: Issue): Issue {\n  return {\n    number: data.number,\n    state: data.state,\n    title: data.title,\n    body: data.body,\n  };\n}\n\nfunction matchesState(actual: string, expected: string): boolean {\n  if (expected === 'all') {\n    return true;\n  }\n  if (expected.startsWith('!')) {\n    return actual !== expected.substring(1);\n  }\n\n  return actual === expected;\n}\n\nfunction findCommentByTopic(\n  comments: Comment[],\n  topic: string,\n): Comment | null {\n  return comments.find((c) => c.body.startsWith(`### ${topic}\\n\\n`)) ?? null;\n}\n\nfunction findCommentByContent(\n  comments: Comment[],\n  content: string,\n): Comment | null {\n  return comments.find((c) => c.body.trim() === content) ?? null;\n}\n\nfunction getLabelList(): Promise<Label[]> {\n  if (config.labelList === null) {\n    const repoLabels = helper\n      .getRepoLabels(config.repository, {\n        memCache: false,\n      })\n      .then((labels) => {\n        logger.debug(`Retrieved ${labels.length} repo labels`);\n        return labels;\n      });\n\n    const orgLabels = helper\n      .getOrgLabels(config.repository.split('/')[0], {\n        memCache: false,\n      })\n      .then((labels) => {\n        logger.debug(`Retrieved ${labels.length} org labels`);\n        return labels;\n      })\n      .catch((err) => {\n        // Will fail if owner of repo is not org or Gitea version < 1.12\n        logger.debug(`Unable to fetch organization labels`);\n        return [] as Label[];\n      });\n\n    config.labelList = Promise.all([repoLabels, orgLabels]).then((labels) =>\n      ([] as Label[]).concat(...labels),\n    );\n  }\n\n  return config.labelList;\n}\n\nasync function lookupLabelByName(name: string): Promise<number | null> {\n  logger.debug(`lookupLabelByName(${name})`);\n  const labelList = await getLabelList();\n  return labelList.find((l) => l.name === name)?.id ?? null;\n}\n\ninterface FetchRepositoriesArgs {\n  topic?: string;\n  sort?: RepoSortMethod;\n  order?: SortMethod;\n}\n\nasync function fetchRepositories({\n  topic,\n  sort,\n  order,\n}: FetchRepositoriesArgs): Promise<string[]> {\n  const repos = await helper.searchRepos({\n    uid: botUserID,\n    archived: false,\n    ...(topic && {\n      topic: true,\n      q: topic,\n    }),\n    ...(sort && {\n      sort,\n    }),\n    ...(order && {\n      order,\n    }),\n  });\n  return repos.filter(usableRepo).map((r) => r.full_name);\n}\n\nconst platform: Platform = {\n  async initPlatform({\n    endpoint,\n    token,\n  }: PlatformParams): Promise<PlatformResult> {\n    if (!token) {\n      throw new Error('Init: You must configure a Gitea personal access token');\n    }\n\n    if (endpoint) {\n      let baseEndpoint = trimTrailingApiPath(endpoint);\n      baseEndpoint = ensureTrailingSlash(baseEndpoint);\n      defaults.endpoint = baseEndpoint;\n    } else {\n      logger.debug('Using default Gitea endpoint: ' + defaults.endpoint);\n    }\n    setBaseUrl(defaults.endpoint);\n\n    let gitAuthor: string;\n    try {\n      const user = await helper.getCurrentUser({ token });\n      gitAuthor = `${user.full_name ?? user.username} <${user.email}>`;\n      botUserID = user.id;\n      botUserName = user.username;\n      /* v8 ignore start: experimental feature */\n      if (semver.valid(process.env.RENOVATE_X_PLATFORM_VERSION)) {\n        defaults.version = process.env.RENOVATE_X_PLATFORM_VERSION!;\n      } /* v8 ignore stop */ else {\n        defaults.version = await helper.getVersion({ token });\n      }\n      if (defaults.version?.includes('gitea-')) {\n        defaults.isForgejo = true;\n      }\n      logger.debug(\n        `${defaults.isForgejo ? 'Forgejo' : 'Gitea'} version: ${defaults.version}`,\n      );\n    } catch (err) {\n      logger.debug(\n        { err },\n        'Error authenticating with Gitea. Check your token',\n      );\n      throw new Error('Init: Authentication failure');\n    }\n\n    return {\n      endpoint: defaults.endpoint,\n      gitAuthor,\n    };\n  },\n\n  async getRawFile(\n    fileName: string,\n    repoName?: string,\n    branchOrTag?: string,\n  ): Promise<string | null> {\n    const repo = repoName ?? config.repository;\n    const contents = await helper.getRepoContents(repo, fileName, branchOrTag);\n    return contents.contentString ?? null;\n  },\n\n  async getJsonFile(\n    fileName: string,\n    repoName?: string,\n    branchOrTag?: string,\n  ): Promise<any> {\n    // TODO #22198\n    const raw = await platform.getRawFile(fileName, repoName, branchOrTag);\n    return parseJson(raw, fileName);\n  },\n\n  async initRepo({\n    repository,\n    cloneSubmodules,\n    cloneSubmodulesFilter,\n    gitUrl,\n    ignorePrAuthor,\n  }: RepoParams): Promise<RepoResult> {\n    let repo: Repo;\n\n    config = {} as any;\n    config.repository = repository;\n    config.cloneSubmodules = !!cloneSubmodules;\n    config.cloneSubmodulesFilter = cloneSubmodulesFilter;\n    config.ignorePrAuthor = !!ignorePrAuthor;\n\n    // Try to fetch information about repository\n    try {\n      repo = await helper.getRepo(repository);\n    } catch (err) {\n      logger.debug({ err }, 'Unknown Gitea initRepo error');\n      throw err;\n    }\n\n    // Ensure appropriate repository state and permissions\n    if (repo.archived) {\n      logger.debug('Repository is archived - aborting renovation');\n      throw new Error(REPOSITORY_ARCHIVED);\n    }\n    if (repo.mirror) {\n      logger.debug('Repository is a mirror - aborting renovation');\n      throw new Error(REPOSITORY_MIRRORED);\n    }\n    if (repo.permissions.pull === false || repo.permissions.push === false) {\n      logger.debug(\n        'Repository does not permit pull or push - aborting renovation',\n      );\n      throw new Error(REPOSITORY_ACCESS_FORBIDDEN);\n    }\n    if (repo.empty) {\n      logger.debug('Repository is empty - aborting renovation');\n      throw new Error(REPOSITORY_EMPTY);\n    }\n\n    if (repo.has_pull_requests === false) {\n      logger.debug('Repo has disabled pull requests - aborting renovation');\n      throw new Error(REPOSITORY_BLOCKED);\n    }\n\n    if (repo.allow_rebase) {\n      config.mergeMethod = 'rebase';\n    } else if (repo.allow_rebase_explicit) {\n      config.mergeMethod = 'rebase-merge';\n    } else if (repo.allow_squash_merge) {\n      config.mergeMethod = 'squash';\n    } else if (repo.allow_merge_commits) {\n      config.mergeMethod = 'merge';\n    } else {\n      logger.debug(\n        'Repository has no allowed merge methods - aborting renovation',\n      );\n      throw new Error(REPOSITORY_BLOCKED);\n    }\n\n    // Determine author email and branches\n    config.defaultBranch = repo.default_branch;\n    logger.debug(`${repository} default branch = ${config.defaultBranch}`);\n\n    const url = getRepoUrl(repo, gitUrl, defaults.endpoint);\n\n    // Initialize Git storage\n    await git.initRepo({\n      ...config,\n      url,\n    });\n\n    // Reset cached resources\n    config.issueList = null;\n    config.labelList = null;\n    config.hasIssuesEnabled = !repo.external_tracker && repo.has_issues;\n\n    return {\n      defaultBranch: config.defaultBranch,\n      isFork: !!repo.fork,\n      repoFingerprint: repoFingerprint(repo.id, defaults.endpoint),\n    };\n  },\n\n  async getRepos(config?: AutodiscoverConfig): Promise<string[]> {\n    logger.debug('Auto-discovering Gitea repositories');\n    try {\n      if (config?.topics) {\n        logger.debug({ topics: config.topics }, 'Auto-discovering by topics');\n        const fetchRepoArgs: FetchRepositoriesArgs[] = config.topics.map(\n          (topic) => {\n            return {\n              topic,\n              sort: config.sort,\n              order: config.order,\n            };\n          },\n        );\n        const repos = await map(fetchRepoArgs, fetchRepositories);\n        return deduplicateArray(repos.flat());\n      } else if (config?.namespaces) {\n        logger.debug(\n          { namespaces: config.namespaces },\n          'Auto-discovering by organization',\n        );\n        const repos = await map(\n          config.namespaces,\n          async (organization: string) => {\n            const orgRepos = await helper.orgListRepos(organization);\n            return orgRepos\n              .filter((r) => !r.mirror && !r.archived)\n              .map((r) => r.full_name);\n          },\n        );\n        return deduplicateArray(repos.flat());\n      } else {\n        return await fetchRepositories({\n          sort: config?.sort,\n          order: config?.order,\n        });\n      }\n    } catch (err) {\n      logger.error({ err }, 'Gitea getRepos() error');\n      throw err;\n    }\n  },\n\n  async setBranchStatus({\n    branchName,\n    context,\n    description,\n    state,\n    url: target_url,\n  }: BranchStatusConfig): Promise<void> {\n    try {\n      // Create new status for branch commit\n      const branchCommit = git.getBranchCommit(branchName);\n      // TODO: check branchCommit\n\n      await helper.createCommitStatus(config.repository, branchCommit!, {\n        state: helper.renovateToGiteaStatusMapping[state] || 'pending',\n        context,\n        description,\n        ...(target_url && { target_url }),\n      });\n\n      // Refresh caches by re-fetching commit status for branch\n      await helper.getCombinedCommitStatus(config.repository, branchName, {\n        memCache: false,\n      });\n    } catch (err) {\n      logger.warn({ err }, 'Failed to set branch status');\n    }\n  },\n\n  async getBranchStatus(\n    branchName: string,\n    internalChecksAsSuccess: boolean,\n  ): Promise<BranchStatus> {\n    let ccs: CombinedCommitStatus;\n    try {\n      ccs = await helper.getCombinedCommitStatus(config.repository, branchName);\n    } catch (err) {\n      if (err.statusCode === 404) {\n        logger.debug(\n          'Received 404 when checking branch status, assuming branch deletion',\n        );\n        throw new Error(REPOSITORY_CHANGED);\n      }\n\n      logger.debug('Unknown error when checking branch status');\n      throw err;\n    }\n\n    logger.debug({ ccs }, 'Branch status check result');\n    if (\n      !internalChecksAsSuccess &&\n      ccs.worstStatus === 'success' &&\n      ccs.statuses.every((status) => status.context?.startsWith('renovate/'))\n    ) {\n      logger.debug(\n        'Successful checks are all internal renovate/ checks, so returning \"pending\" branch status',\n      );\n      return 'yellow';\n    }\n\n    /* v8 ignore next */\n    return helper.giteaToRenovateStatusMapping[ccs.worstStatus] ?? 'yellow';\n  },\n\n  async getBranchStatusCheck(\n    branchName: string,\n    context: string,\n  ): Promise<BranchStatus | null> {\n    const ccs = await helper.getCombinedCommitStatus(\n      config.repository,\n      branchName,\n    );\n    const cs = ccs.statuses.find((s) => s.context === context);\n    if (!cs) {\n      return null;\n    } // no status check exists\n    const status = helper.giteaToRenovateStatusMapping[cs.status];\n    if (status) {\n      return status;\n    }\n    logger.warn(\n      { check: cs },\n      'Could not map Gitea status value to Renovate status',\n    );\n    return 'yellow';\n  },\n\n  getPrList(): Promise<Pr[]> {\n    return GiteaPrCache.getPrs(\n      giteaHttp,\n      config.repository,\n      config.ignorePrAuthor,\n      botUserName,\n    );\n  },\n\n  async getPr(number: number): Promise<Pr | null> {\n    // Search for pull request in cached list or attempt to query directly\n    const prList = await platform.getPrList();\n    let pr = prList.find((p) => p.number === number) ?? null;\n    if (pr) {\n      logger.debug('Returning from cached PRs');\n    } else {\n      logger.debug('PR not found in cached PRs - trying to fetch directly');\n      const gpr = await helper.getPR(config.repository, number);\n      pr = toRenovatePR(gpr, botUserName);\n\n      // Add pull request to cache for further lookups / queries\n      if (pr) {\n        await GiteaPrCache.setPr(\n          giteaHttp,\n          config.repository,\n          config.ignorePrAuthor,\n          botUserName,\n          pr,\n        );\n      }\n    }\n\n    // Abort and return null if no match was found\n    if (!pr) {\n      return null;\n    }\n\n    return pr;\n  },\n\n  async findPr({\n    branchName,\n    prTitle: title,\n    state = 'all',\n    includeOtherAuthors,\n    targetBranch,\n  }: FindPRConfig): Promise<Pr | null> {\n    logger.debug(`findPr(${branchName}, ${title!}, ${state})`);\n    if (includeOtherAuthors && is.string(targetBranch)) {\n      // do not use pr cache as it only fetches prs created by the bot account\n      const pr = await helper.getPRByBranch(\n        config.repository,\n        targetBranch,\n        branchName,\n      );\n      if (!pr) {\n        return null;\n      }\n\n      return toRenovatePR(pr, null);\n    }\n    const prList = await platform.getPrList();\n    const pr = prList.find(\n      (p) =>\n        p.sourceRepo === config.repository &&\n        p.sourceBranch === branchName &&\n        matchesState(p.state, state) &&\n        (!title || p.title === title),\n    );\n\n    if (pr) {\n      logger.debug(`Found PR #${pr.number}`);\n    }\n    return pr ?? null;\n  },\n\n  async createPr({\n    sourceBranch,\n    targetBranch,\n    prTitle,\n    prBody: rawBody,\n    labels: labelNames,\n    platformPrOptions,\n    draftPR,\n  }: CreatePRConfig): Promise<Pr> {\n    let title = prTitle;\n    const base = targetBranch;\n    const head = sourceBranch;\n    const body = sanitize(rawBody);\n    if (draftPR) {\n      title = DRAFT_PREFIX + title;\n    }\n\n    logger.debug(`Creating pull request: ${title} (${head} => ${base})`);\n    try {\n      const labels = Array.isArray(labelNames)\n        ? await map(labelNames, lookupLabelByName)\n        : [];\n      const gpr = await helper.createPR(config.repository, {\n        base,\n        head,\n        title,\n        body,\n        labels: labels.filter(is.number),\n      });\n\n      if (platformPrOptions?.usePlatformAutomerge) {\n        // Only Gitea v1.24.0+ and Forgejo v10.0.0+ support delete_branch_after_merge.\n        // This is required to not have undesired behavior when renovate finds existing branches on next run.\n        if (\n          semver.gte(defaults.version, defaults.isForgejo ? '10.0.0' : '1.24.0')\n        ) {\n          try {\n            await helper.mergePR(config.repository, gpr.number, {\n              Do:\n                getMergeMethod(platformPrOptions?.automergeStrategy) ??\n                config.mergeMethod,\n              merge_when_checks_succeed: true,\n              delete_branch_after_merge: true,\n            });\n\n            logger.debug(\n              { prNumber: gpr.number },\n              'Gitea-native automerge: success',\n            );\n          } catch (err) {\n            logger.warn(\n              { err, prNumber: gpr.number },\n              'Gitea-native automerge: fail',\n            );\n          }\n        } else {\n          logger.debug(\n            { prNumber: gpr.number },\n            `Gitea-native automerge: not supported on this version of ${defaults.isForgejo ? 'Forgejo' : 'Gitea'}. Use ${defaults.isForgejo ? '10.0.0' : '1.24.0'} or newer.`,\n          );\n        }\n      }\n\n      const pr = toRenovatePR(gpr, botUserName);\n      if (!pr) {\n        throw new Error('Can not parse newly created Pull Request');\n      }\n\n      await GiteaPrCache.setPr(\n        giteaHttp,\n        config.repository,\n        config.ignorePrAuthor,\n        botUserName,\n        pr,\n      );\n      return pr;\n    } catch (err) {\n      // When the user manually deletes a branch from Renovate, the PR remains but is no longer linked to any branch. In\n      // the most recent versions of Gitea, the PR gets automatically closed when that happens, but older versions do\n      // not handle this properly and keep the PR open. As pushing a branch with the same name resurrects the PR, this\n      // would cause a HTTP 409 conflict error, which we hereby gracefully handle.\n      if (err.statusCode === 409) {\n        logger.warn(\n          { prTitle: title, sourceBranch },\n          'Attempting to gracefully recover from 409 Conflict response in createPr()',\n        );\n\n        // Refresh cached PR list and search for pull request with matching information\n        GiteaPrCache.forceSync();\n        const pr = await platform.findPr({\n          branchName: sourceBranch,\n          state: 'open',\n        });\n\n        // If a valid PR was found, return and gracefully recover from the error. Otherwise, abort and throw error.\n        if (pr?.bodyStruct) {\n          if (pr.title !== title || pr.bodyStruct.hash !== hashBody(body)) {\n            logger.debug(\n              `Recovered from 409 Conflict, but PR for ${sourceBranch} is outdated. Updating...`,\n            );\n            await platform.updatePr({\n              number: pr.number,\n              prTitle: title,\n              prBody: body,\n            });\n            pr.title = title;\n            pr.bodyStruct = getPrBodyStruct(body);\n          } else {\n            logger.debug(\n              `Recovered from 409 Conflict and PR for ${sourceBranch} is up-to-date`,\n            );\n          }\n\n          return pr;\n        }\n      }\n\n      throw err;\n    }\n  },\n\n  async updatePr({\n    number,\n    prTitle,\n    prBody: body,\n    labels,\n    state,\n    targetBranch,\n  }: UpdatePrConfig): Promise<void> {\n    let title = prTitle;\n    if ((await getPrList()).find((pr) => pr.number === number)?.isDraft) {\n      title = DRAFT_PREFIX + title;\n    }\n\n    const prUpdateParams: PRUpdateParams = {\n      title,\n      ...(body && { body }),\n      ...(state && { state }),\n    };\n    if (targetBranch) {\n      prUpdateParams.base = targetBranch;\n    }\n\n    /**\n     * Update PR labels.\n     * In the Gitea API, labels are replaced on each update if the field is present.\n     * If the field is not present (i.e., undefined), labels aren't updated.\n     * However, the labels array must contain label IDs instead of names,\n     * so a lookup is performed to fetch the details (including the ID) of each label.\n     */\n    if (Array.isArray(labels)) {\n      prUpdateParams.labels = (await map(labels, lookupLabelByName)).filter(\n        is.number,\n      );\n      if (labels.length !== prUpdateParams.labels.length) {\n        logger.warn(\n          'Some labels could not be looked up. Renovate may halt label updates assuming changes by others.',\n        );\n      }\n    }\n\n    const gpr = await helper.updatePR(\n      config.repository,\n      number,\n      prUpdateParams,\n    );\n    const pr = toRenovatePR(gpr, botUserName);\n    if (pr) {\n      await GiteaPrCache.setPr(\n        giteaHttp,\n        config.repository,\n        config.ignorePrAuthor,\n        botUserName,\n        pr,\n      );\n    }\n  },\n\n  async mergePr({ id, strategy }: MergePRConfig): Promise<boolean> {\n    try {\n      await helper.mergePR(config.repository, id, {\n        Do: getMergeMethod(strategy) ?? config.mergeMethod,\n      });\n      return true;\n    } catch (err) {\n      logger.warn({ err, id }, 'Merging of PR failed');\n      return false;\n    }\n  },\n\n  getIssueList(): Promise<Issue[]> {\n    if (config.hasIssuesEnabled === false) {\n      return Promise.resolve([]);\n    }\n    config.issueList ??= helper\n      .searchIssues(config.repository, { state: 'all' }, { memCache: false })\n      .then((issues) => {\n        const issueList = issues.map(toRenovateIssue);\n        logger.debug(`Retrieved ${issueList.length} Issues`);\n        return issueList;\n      });\n\n    return config.issueList;\n  },\n\n  async getIssue(number: number, memCache = true): Promise<Issue | null> {\n    if (config.hasIssuesEnabled === false) {\n      return null;\n    }\n    try {\n      const body = (\n        await helper.getIssue(config.repository, number, { memCache })\n      ).body;\n      return {\n        number,\n        body,\n      };\n    } catch (err) /* v8 ignore start */ {\n      logger.debug({ err, number }, 'Error getting issue');\n      return null;\n    } /* v8 ignore stop */\n  },\n\n  async findIssue(title: string): Promise<Issue | null> {\n    const issueList = await platform.getIssueList();\n    const issue = issueList.find(\n      (i) => i.state === 'open' && i.title === title,\n    );\n\n    if (!issue) {\n      return null;\n    }\n    // TODO: types (#22198)\n    logger.debug(`Found Issue #${issue.number!}`);\n    // TODO #22198\n    return getIssue!(issue.number!);\n  },\n\n  async ensureIssue({\n    title,\n    reuseTitle,\n    body: content,\n    labels: labelNames,\n    shouldReOpen,\n    once,\n  }: EnsureIssueConfig): Promise<'updated' | 'created' | null> {\n    logger.debug(`ensureIssue(${title})`);\n    if (config.hasIssuesEnabled === false) {\n      logger.info(\n        'Cannot ensure issue because issues are disabled in this repository',\n      );\n      return null;\n    }\n    try {\n      const body = smartLinks(content);\n\n      const issueList = await platform.getIssueList();\n      let issues = issueList.filter((i) => i.title === title);\n      if (!issues.length) {\n        issues = issueList.filter((i) => i.title === reuseTitle);\n      }\n\n      const labels = Array.isArray(labelNames)\n        ? (await Promise.all(labelNames.map(lookupLabelByName))).filter(\n            is.number,\n          )\n        : undefined;\n\n      // Update any matching issues which currently exist\n      if (issues.length) {\n        let activeIssue = issues.find((i) => i.state === 'open');\n\n        // If no active issue was found, decide if it shall be skipped, re-opened or updated without state change\n        if (!activeIssue) {\n          if (once) {\n            logger.debug('Issue already closed - skipping update');\n            return null;\n          }\n          if (shouldReOpen) {\n            logger.debug('Reopening previously closed Issue');\n          }\n\n          // Pick the last issue in the list as the active one\n          activeIssue = issues[issues.length - 1];\n        }\n\n        // Close any duplicate issues\n        for (const issue of issues) {\n          if (issue.state === 'open' && issue.number !== activeIssue.number) {\n            // TODO: types (#22198)\n            logger.warn({ issueNo: issue.number! }, 'Closing duplicate issue');\n            // TODO #22198\n            await helper.closeIssue(config.repository, issue.number!);\n          }\n        }\n\n        // Check if issue has already correct state\n        if (\n          activeIssue.title === title &&\n          activeIssue.body === body &&\n          activeIssue.state === 'open'\n        ) {\n          logger.debug(\n            // TODO: types (#22198)\n            `Issue #${activeIssue.number!} is open and up to date - nothing to do`,\n          );\n          return null;\n        }\n\n        // Update issue body and re-open if enabled\n        // TODO: types (#22198)\n        logger.debug(`Updating Issue #${activeIssue.number!}`);\n        const existingIssue = await helper.updateIssue(\n          config.repository,\n          // TODO #22198\n          activeIssue.number!,\n          {\n            body,\n            title,\n            state: shouldReOpen ? 'open' : (activeIssue.state as IssueState),\n          },\n        );\n\n        // Test whether the issues need to be updated\n        const existingLabelIds = (existingIssue.labels ?? []).map(\n          (label) => label.id,\n        );\n        if (\n          labels &&\n          (labels.length !== existingLabelIds.length ||\n            labels.filter((labelId) => !existingLabelIds.includes(labelId))\n              .length !== 0)\n        ) {\n          await helper.updateIssueLabels(\n            config.repository,\n            // TODO #22198\n            activeIssue.number!,\n            {\n              labels,\n            },\n          );\n        }\n\n        return 'updated';\n      }\n\n      // Create new issue and reset cache\n      const issue = await helper.createIssue(config.repository, {\n        body,\n        title,\n        labels,\n      });\n      logger.debug(`Created new Issue #${issue.number}`);\n      config.issueList = null;\n\n      return 'created';\n    } catch (err) {\n      logger.warn({ err }, 'Could not ensure issue');\n    }\n\n    return null;\n  },\n\n  async ensureIssueClosing(title: string): Promise<void> {\n    logger.debug(`ensureIssueClosing(${title})`);\n    if (config.hasIssuesEnabled === false) {\n      return;\n    }\n    const issueList = await platform.getIssueList();\n    for (const issue of issueList) {\n      if (issue.state === 'open' && issue.title === title) {\n        logger.debug(`Closing issue...issueNo: ${issue.number!}`);\n        // TODO #22198\n        await helper.closeIssue(config.repository, issue.number!);\n      }\n    }\n  },\n\n  async deleteLabel(issue: number, labelName: string): Promise<void> {\n    logger.debug(`Deleting label ${labelName} from Issue #${issue}`);\n    const label = await lookupLabelByName(labelName);\n    if (label) {\n      await helper.unassignLabel(config.repository, issue, label);\n    } else {\n      logger.warn({ issue, labelName }, 'Failed to lookup label for deletion');\n    }\n  },\n\n  async ensureComment({\n    number: issue,\n    topic,\n    content,\n  }: EnsureCommentConfig): Promise<boolean> {\n    try {\n      let body = sanitize(content);\n      const commentList = await helper.getComments(config.repository, issue);\n\n      // Search comment by either topic or exact body\n      let comment: Comment | null = null;\n      if (topic) {\n        comment = findCommentByTopic(commentList, topic);\n        body = `### ${topic}\\n\\n${body}`;\n      } else {\n        comment = findCommentByContent(commentList, body);\n      }\n\n      // Create a new comment if no match has been found, otherwise update if necessary\n      if (!comment) {\n        comment = await helper.createComment(config.repository, issue, body);\n        logger.info(\n          { repository: config.repository, issue, comment: comment.id },\n          'Comment added',\n        );\n      } else if (comment.body === body) {\n        logger.debug(`Comment #${comment.id} is already up-to-date`);\n      } else {\n        await helper.updateComment(config.repository, comment.id, body);\n        logger.debug(\n          { repository: config.repository, issue, comment: comment.id },\n          'Comment updated',\n        );\n      }\n\n      return true;\n    } catch (err) {\n      logger.warn({ err, issue, subject: topic }, 'Error ensuring comment');\n      return false;\n    }\n  },\n\n  async ensureCommentRemoval(\n    deleteConfig: EnsureCommentRemovalConfig,\n  ): Promise<void> {\n    const { number: issue } = deleteConfig;\n    const key =\n      deleteConfig.type === 'by-topic'\n        ? deleteConfig.topic\n        : deleteConfig.content;\n    logger.debug(`Ensuring comment \"${key}\" in #${issue} is removed`);\n    const commentList = await helper.getComments(config.repository, issue);\n\n    let comment: Comment | null = null;\n    if (deleteConfig.type === 'by-topic') {\n      comment = findCommentByTopic(commentList, deleteConfig.topic);\n    } else if (deleteConfig.type === 'by-content') {\n      const body = sanitize(deleteConfig.content);\n      comment = findCommentByContent(commentList, body);\n    }\n\n    // Abort and do nothing if no matching comment was found\n    if (!comment) {\n      return;\n    }\n\n    // Try to delete comment\n    try {\n      await helper.deleteComment(config.repository, comment.id);\n    } catch (err) {\n      logger.warn(\n        { err, issue, config: deleteConfig },\n        'Error deleting comment',\n      );\n    }\n  },\n\n  async getBranchPr(branchName: string): Promise<Pr | null> {\n    logger.debug(`getBranchPr(${branchName})`);\n    const pr = await platform.findPr({ branchName, state: 'open' });\n    return pr ? platform.getPr(pr.number) : null;\n  },\n\n  async addAssignees(number: number, assignees: string[]): Promise<void> {\n    logger.debug(\n      `Updating assignees '${assignees?.join(', ')}' on Issue #${number}`,\n    );\n    await helper.updateIssue(config.repository, number, {\n      assignees,\n    });\n  },\n\n  async addReviewers(number: number, reviewers: string[]): Promise<void> {\n    logger.debug(`Adding reviewers '${reviewers?.join(', ')}' to #${number}`);\n    if (semver.lt(defaults.version, '1.14.0')) {\n      logger.debug(\n        { version: defaults.version },\n        'Adding reviewer not yet supported.',\n      );\n      return;\n    }\n    try {\n      await helper.requestPrReviewers(config.repository, number, { reviewers });\n    } catch (err) {\n      logger.warn({ err, number, reviewers }, 'Failed to assign reviewer');\n    }\n  },\n\n  massageMarkdown(prBody: string): string {\n    return smartTruncate(smartLinks(prBody), maxBodyLength());\n  },\n\n  maxBodyLength,\n};\n\nexport function maxBodyLength(): number {\n  return 1000000;\n}\n\n/* eslint-disable @typescript-eslint/unbound-method */\nexport const {\n  addAssignees,\n  addReviewers,\n  createPr,\n  deleteLabel,\n  ensureComment,\n  ensureCommentRemoval,\n  ensureIssue,\n  ensureIssueClosing,\n  findIssue,\n  findPr,\n  getBranchPr,\n  getBranchStatus,\n  getBranchStatusCheck,\n  getIssue,\n  getRawFile,\n  getJsonFile,\n  getIssueList,\n  getPr,\n  massageMarkdown,\n  getPrList,\n  getRepos,\n  initPlatform,\n  initRepo,\n  mergePr,\n  setBranchStatus,\n  updatePr,\n} = platform;\n"]}