{"version":3,"file":"gitea-helper.js","sourceRoot":"","sources":["../../../../lib/modules/platform/gitea/gitea-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport type { BranchStatus } from '../../../types';\nimport type { GiteaHttpOptions } from '../../../util/http/gitea';\nimport { GiteaHttp } from '../../../util/http/gitea';\nimport { getQueryString } from '../../../util/url';\nimport type {\n  Branch,\n  CombinedCommitStatus,\n  Comment,\n  CommentCreateParams,\n  CommentUpdateParams,\n  CommitStatus,\n  CommitStatusCreateParams,\n  CommitStatusType,\n  Issue,\n  IssueCreateParams,\n  IssueSearchParams,\n  IssueUpdateLabelsParams,\n  IssueUpdateParams,\n  Label,\n  PR,\n  PRCreateParams,\n  PRMergeParams,\n  PRUpdateParams,\n  PrReviewersParams,\n  Repo,\n  RepoContents,\n  RepoSearchParams,\n  RepoSearchResults,\n  User,\n} from './types';\nimport { API_PATH } from './utils';\n\nexport const giteaHttp = new GiteaHttp();\n\nconst urlEscape = (raw: string): string => encodeURIComponent(raw);\nconst commitStatusStates: CommitStatusType[] = [\n  'unknown',\n  'success',\n  'pending',\n  'warning',\n  'failure',\n  'error',\n];\n\nexport async function getCurrentUser(\n  options?: GiteaHttpOptions,\n): Promise<User> {\n  const url = `${API_PATH}/user`;\n  const res = await giteaHttp.getJsonUnchecked<User>(url, options);\n  return res.body;\n}\n\nexport async function getVersion(options?: GiteaHttpOptions): Promise<string> {\n  const url = `${API_PATH}/version`;\n  const res = await giteaHttp.getJsonUnchecked<{ version: string }>(\n    url,\n    options,\n  );\n  return res.body.version;\n}\n\nexport async function searchRepos(\n  params: RepoSearchParams,\n  options?: GiteaHttpOptions,\n): Promise<Repo[]> {\n  const query = getQueryString(params);\n  const url = `${API_PATH}/repos/search?${query}`;\n  const res = await giteaHttp.getJsonUnchecked<RepoSearchResults>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  if (!res.body.ok) {\n    throw new Error(\n      'Unable to search for repositories, ok flag has not been set',\n    );\n  }\n\n  return res.body.data;\n}\n\nexport async function orgListRepos(\n  organization: string,\n  options?: GiteaHttpOptions,\n): Promise<Repo[]> {\n  const url = `${API_PATH}/orgs/${organization}/repos`;\n  const res = await giteaHttp.getJsonUnchecked<Repo[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  return res.body;\n}\n\nexport async function getRepo(\n  repoPath: string,\n  options?: GiteaHttpOptions,\n): Promise<Repo> {\n  const url = `${API_PATH}/repos/${repoPath}`;\n  const res = await giteaHttp.getJsonUnchecked<Repo>(url, options);\n  return res.body;\n}\n\nexport async function getRepoContents(\n  repoPath: string,\n  filePath: string,\n  ref?: string | null,\n  options?: GiteaHttpOptions,\n): Promise<RepoContents> {\n  const query = getQueryString(ref ? { ref } : {});\n  const url = `${API_PATH}/repos/${repoPath}/contents/${urlEscape(\n    filePath,\n  )}?${query}`;\n  const res = await giteaHttp.getJsonUnchecked<RepoContents>(url, options);\n\n  if (res.body.content) {\n    res.body.contentString = Buffer.from(res.body.content, 'base64').toString();\n  }\n\n  return res.body;\n}\n\nexport async function createPR(\n  repoPath: string,\n  params: PRCreateParams,\n  options?: GiteaHttpOptions,\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls`;\n  const res = await giteaHttp.postJson<PR>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updatePR(\n  repoPath: string,\n  idx: number,\n  params: PRUpdateParams,\n  options?: GiteaHttpOptions,\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}`;\n  const res = await giteaHttp.patchJson<PR>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function closePR(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  await updatePR(repoPath, idx, {\n    ...options,\n    state: 'closed',\n  });\n}\n\nexport async function mergePR(\n  repoPath: string,\n  idx: number,\n  params: PRMergeParams,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}/merge`;\n  await giteaHttp.postJson(url, {\n    ...options,\n    body: params,\n  });\n}\n\nexport async function getPR(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions,\n): Promise<PR> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}`;\n  const res = await giteaHttp.getJsonUnchecked<PR>(url, options);\n  return res.body;\n}\n\nexport async function getPRByBranch(\n  repoPath: string,\n  base: string,\n  head: string,\n  options?: GiteaHttpOptions,\n): Promise<PR | null> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${base}/${head}`;\n  try {\n    const res = await giteaHttp.getJsonUnchecked<PR>(url, options);\n    return res.body;\n  } catch (err) {\n    logger.trace({ err }, 'Error while fetching PR');\n    if (err.statusCode !== 404) {\n      logger.debug({ err }, 'Error while fetching PR');\n    }\n    return null;\n  }\n}\n\nexport async function requestPrReviewers(\n  repoPath: string,\n  idx: number,\n  params: PrReviewersParams,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/pulls/${idx}/requested_reviewers`;\n  await giteaHttp.postJson(url, {\n    ...options,\n    body: params,\n  });\n}\n\nexport async function createIssue(\n  repoPath: string,\n  params: IssueCreateParams,\n  options?: GiteaHttpOptions,\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues`;\n  const res = await giteaHttp.postJson<Issue>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateIssue(\n  repoPath: string,\n  idx: number,\n  params: IssueUpdateParams,\n  options?: GiteaHttpOptions,\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}`;\n  const res = await giteaHttp.patchJson<Issue>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateIssueLabels(\n  repoPath: string,\n  idx: number,\n  params: IssueUpdateLabelsParams,\n  options?: GiteaHttpOptions,\n): Promise<Label[]> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}/labels`;\n  const res = await giteaHttp.putJson<Label[]>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function closeIssue(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  await updateIssue(repoPath, idx, {\n    ...options,\n    state: 'closed',\n  });\n}\n\nexport async function searchIssues(\n  repoPath: string,\n  params: IssueSearchParams,\n  options?: GiteaHttpOptions,\n): Promise<Issue[]> {\n  const query = getQueryString({ ...params, type: 'issues' });\n  const url = `${API_PATH}/repos/${repoPath}/issues?${query}`;\n  const res = await giteaHttp.getJsonUnchecked<Issue[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  return res.body;\n}\n\nexport async function getIssue(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions,\n): Promise<Issue> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${idx}`;\n  const res = await giteaHttp.getJsonUnchecked<Issue>(url, options);\n  return res.body;\n}\n\nexport async function getRepoLabels(\n  repoPath: string,\n  options?: GiteaHttpOptions,\n): Promise<Label[]> {\n  const url = `${API_PATH}/repos/${repoPath}/labels`;\n  const res = await giteaHttp.getJsonUnchecked<Label[]>(url, options);\n\n  return res.body;\n}\n\nexport async function getOrgLabels(\n  orgName: string,\n  options?: GiteaHttpOptions,\n): Promise<Label[]> {\n  const url = `${API_PATH}/orgs/${orgName}/labels`;\n  const res = await giteaHttp.getJsonUnchecked<Label[]>(url, options);\n\n  return res.body;\n}\n\nexport async function unassignLabel(\n  repoPath: string,\n  issue: number,\n  label: number,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/labels/${label}`;\n  await giteaHttp.deleteJson(url, options);\n}\n\nexport async function createComment(\n  repoPath: string,\n  issue: number,\n  body: string,\n  options?: GiteaHttpOptions,\n): Promise<Comment> {\n  const params: CommentCreateParams = { body };\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/comments`;\n  const res = await giteaHttp.postJson<Comment>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function updateComment(\n  repoPath: string,\n  idx: number,\n  body: string,\n  options?: GiteaHttpOptions,\n): Promise<Comment> {\n  const params: CommentUpdateParams = { body };\n  const url = `${API_PATH}/repos/${repoPath}/issues/comments/${idx}`;\n  const res = await giteaHttp.patchJson<Comment>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport async function deleteComment(\n  repoPath: string,\n  idx: number,\n  options?: GiteaHttpOptions,\n): Promise<void> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/comments/${idx}`;\n  await giteaHttp.deleteJson(url, options);\n}\n\nexport async function getComments(\n  repoPath: string,\n  issue: number,\n  options?: GiteaHttpOptions,\n): Promise<Comment[]> {\n  const url = `${API_PATH}/repos/${repoPath}/issues/${issue}/comments`;\n  const res = await giteaHttp.getJsonUnchecked<Comment[]>(url, options);\n\n  return res.body;\n}\n\nexport async function createCommitStatus(\n  repoPath: string,\n  branchCommit: string,\n  params: CommitStatusCreateParams,\n  options?: GiteaHttpOptions,\n): Promise<CommitStatus> {\n  const url = `${API_PATH}/repos/${repoPath}/statuses/${branchCommit}`;\n  const res = await giteaHttp.postJson<CommitStatus>(url, {\n    ...options,\n    body: params,\n  });\n\n  return res.body;\n}\n\nexport const giteaToRenovateStatusMapping: Record<\n  CommitStatusType,\n  BranchStatus | null\n> = {\n  unknown: 'yellow',\n  success: 'green',\n  pending: 'yellow',\n  warning: 'red',\n  failure: 'red',\n  error: 'red',\n};\n\nexport const renovateToGiteaStatusMapping: Record<\n  BranchStatus,\n  CommitStatusType\n> = {\n  green: 'success',\n  yellow: 'pending',\n  red: 'failure',\n};\n\nfunction filterStatus(data: CommitStatus[]): CommitStatus[] {\n  const ret: Record<string, CommitStatus> = {};\n  for (const i of data) {\n    if (!ret[i.context] || ret[i.context].id < i.id) {\n      ret[i.context] = i;\n    }\n  }\n  return Object.values(ret);\n}\n\nexport async function getCombinedCommitStatus(\n  repoPath: string,\n  branchName: string,\n  options?: GiteaHttpOptions,\n): Promise<CombinedCommitStatus> {\n  const url = `${API_PATH}/repos/${repoPath}/commits/${urlEscape(\n    branchName,\n  )}/statuses`;\n  const res = await giteaHttp.getJsonUnchecked<CommitStatus[]>(url, {\n    ...options,\n    paginate: true,\n  });\n\n  let worstState = 0;\n  const statuses = filterStatus(res.body);\n  for (const cs of statuses) {\n    worstState = Math.max(worstState, commitStatusStates.indexOf(cs.status));\n  }\n\n  return {\n    worstStatus: commitStatusStates[worstState],\n    statuses,\n  };\n}\n\nexport async function getBranch(\n  repoPath: string,\n  branchName: string,\n  options?: GiteaHttpOptions,\n): Promise<Branch> {\n  const url = `${API_PATH}/repos/${repoPath}/branches/${urlEscape(branchName)}`;\n  const res = await giteaHttp.getJsonUnchecked<Branch>(url, options);\n\n  return res.body;\n}\n"]}