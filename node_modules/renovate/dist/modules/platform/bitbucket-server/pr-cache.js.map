{"version":3,"file":"pr-cache.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket-server/pr-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { dequal } from 'dequal';\nimport { DateTime } from 'luxon';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport { getCache } from '../../../util/cache/repository';\nimport type { BitbucketServerHttp } from '../../../util/http/bitbucket-server';\nimport { getQueryString } from '../../../util/url';\nimport type { BbsPr, BbsPrCacheData, BbsRestPr } from './types';\nimport { prInfo } from './utils';\n\nexport class BbsPrCache {\n  private cache: BbsPrCacheData;\n  private items: BbsPr[] = [];\n\n  private constructor(\n    private projectKey: string,\n    private repo: string,\n    private readonly ignorePrAuthor: boolean,\n    private author: string | null,\n  ) {\n    const repoCache = getCache();\n    repoCache.platform ??= {};\n    repoCache.platform.bitbucketServer ??= {};\n    let pullRequestCache = repoCache.platform.bitbucketServer\n      .pullRequestsCache as BbsPrCacheData;\n    if (!pullRequestCache || pullRequestCache.author !== author) {\n      pullRequestCache = {\n        items: {},\n        updatedDate: null,\n        author,\n      };\n    }\n    repoCache.platform.bitbucketServer.pullRequestsCache = pullRequestCache;\n    this.cache = pullRequestCache;\n    this.updateItems();\n  }\n\n  private static async init(\n    http: BitbucketServerHttp,\n    projectKey: string,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string | null,\n  ): Promise<BbsPrCache> {\n    const res = new BbsPrCache(projectKey, repo, ignorePrAuthor, author);\n    const isSynced = memCache.get<true | undefined>('bbs-pr-cache-synced');\n\n    if (!isSynced) {\n      await res.sync(http);\n      memCache.set('bbs-pr-cache-synced', true);\n    }\n\n    return res;\n  }\n\n  private getPrs(): BbsPr[] {\n    return this.items;\n  }\n\n  static async getPrs(\n    http: BitbucketServerHttp,\n    projectKey: string,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string,\n  ): Promise<BbsPr[]> {\n    const prCache = await BbsPrCache.init(\n      http,\n      projectKey,\n      repo,\n      ignorePrAuthor,\n      author,\n    );\n    return prCache.getPrs();\n  }\n\n  private setPr(item: BbsPr): void {\n    this.cache.items[item.number] = item;\n    this.updateItems();\n  }\n\n  static async setPr(\n    http: BitbucketServerHttp,\n    projectKey: string,\n    repo: string,\n    ignorePrAuthor: boolean,\n    author: string,\n    item: BbsPr,\n  ): Promise<void> {\n    const prCache = await BbsPrCache.init(\n      http,\n      projectKey,\n      repo,\n      ignorePrAuthor,\n      author,\n    );\n    prCache.setPr(item);\n  }\n\n  private reconcile(rawItems: BbsRestPr[]): boolean {\n    logger.debug('reconciled');\n    const { items } = this.cache;\n    let { updatedDate } = this.cache;\n    const cacheTime = updatedDate ? DateTime.fromMillis(updatedDate) : null;\n\n    let needNextPage = true;\n\n    for (const rawItem of rawItems) {\n      const id = rawItem.id;\n\n      const newItem = prInfo(rawItem);\n\n      const oldItem = items[id];\n      if (dequal(oldItem, newItem)) {\n        needNextPage = false;\n        continue;\n      }\n\n      items[id] = newItem;\n\n      const itemTime = DateTime.fromMillis(rawItem.updatedDate);\n      if (!cacheTime || itemTime > cacheTime) {\n        updatedDate = rawItem.updatedDate;\n      }\n    }\n\n    this.cache.updatedDate = updatedDate;\n\n    return needNextPage;\n  }\n\n  private async sync(http: BitbucketServerHttp): Promise<BbsPrCache> {\n    const searchParams: Record<string, string> = {\n      state: 'ALL',\n      limit: this.items.length ? '20' : '100',\n    };\n    if (!this.ignorePrAuthor && is.string(this.author)) {\n      searchParams['role.1'] = 'AUTHOR';\n      searchParams['username.1'] = this.author;\n    }\n    let query: string | null = getQueryString(searchParams);\n\n    while (query) {\n      const res = await http.getJsonUnchecked<{\n        nextPageStart: string;\n        values: BbsRestPr[];\n      }>(\n        `./rest/api/1.0/projects/${this.projectKey}/repos/${this.repo}/pull-requests?${query}`,\n        {\n          memCache: false,\n        },\n      );\n\n      const needNextPage = this.reconcile(res.body.values);\n      if (!needNextPage) {\n        break;\n      }\n\n      if (res.body.nextPageStart) {\n        searchParams.start = res.body.nextPageStart.toString();\n      } else {\n        query = null;\n      }\n    }\n\n    this.updateItems();\n\n    return this;\n  }\n\n  /**\n   * Ensure the pr cache starts with the most recent PRs.\n   * JavaScript ensures that the cache is sorted by PR number.\n   */\n  private updateItems(): void {\n    this.items = Object.values(this.cache.items).reverse();\n  }\n}\n"]}