{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/platform/azure/util.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  GitPullRequest,\n  GitRepository,\n  GitStatusContext,\n} from 'azure-devops-node-api/interfaces/GitInterfaces.js';\nimport {\n  GitPullRequestMergeStrategy,\n  PullRequestStatus,\n} from 'azure-devops-node-api/interfaces/GitInterfaces.js';\nimport type { MergeStrategy } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport type { HostRule, PrState } from '../../../types';\nimport type { GitOptions } from '../../../types/git';\nimport { addSecretForSanitizing } from '../../../util/sanitize';\nimport { toBase64 } from '../../../util/string';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { AzurePr } from './types';\n\nexport function getGitStatusContextCombinedName(\n  context: GitStatusContext | null | undefined,\n): string | undefined {\n  if (!context) {\n    return undefined;\n  }\n  const combinedName = `${context.genre ? `${context.genre}/` : ''}${\n    // TODO: types (#22198)\n    context.name!\n  }`;\n  logger.trace(`Got combined context name of ${combinedName}`);\n  return combinedName;\n}\n\nexport function getGitStatusContextFromCombinedName(\n  context: string | undefined | null,\n): GitStatusContext | undefined {\n  if (!context) {\n    return undefined;\n  }\n  let name = context;\n  let genre: string | undefined;\n  const lastSlash = context.lastIndexOf('/');\n  if (lastSlash > 0) {\n    name = context.substring(lastSlash + 1);\n    genre = context.substring(0, lastSlash);\n  }\n  return {\n    genre,\n    name,\n  };\n}\n\nexport function getBranchNameWithoutRefsheadsPrefix(\n  branchPath: string | undefined,\n): string | undefined {\n  if (!branchPath) {\n    logger.error(`getBranchNameWithoutRefsheadsPrefix(undefined)`);\n    return undefined;\n  }\n  if (!branchPath.startsWith('refs/heads/')) {\n    logger.trace(\n      `The refs/heads/ name should have started with 'refs/heads/' but it didn't. (${branchPath})`,\n    );\n    return branchPath;\n  }\n  return branchPath.substring(11, branchPath.length);\n}\n\nexport function getBranchNameWithoutRefsPrefix(\n  branchPath?: string,\n): string | undefined {\n  if (!branchPath) {\n    logger.error(`getBranchNameWithoutRefsPrefix(undefined)`);\n    return undefined;\n  }\n  if (!branchPath.startsWith('refs/')) {\n    logger.trace(\n      `The ref name should have started with 'refs/' but it didn't. (${branchPath})`,\n    );\n    return branchPath;\n  }\n  return branchPath.substring(5, branchPath.length);\n}\n\nconst stateMap = {\n  [PullRequestStatus.Abandoned]: 'closed',\n  [PullRequestStatus.Completed]: 'merged',\n} as Record<PullRequestStatus, PrState | undefined>;\n\nexport function getRenovatePRFormat(azurePr: GitPullRequest): AzurePr {\n  const number = azurePr.pullRequestId;\n\n  const sourceBranch = getBranchNameWithoutRefsheadsPrefix(\n    azurePr.sourceRefName,\n  );\n  const targetBranch = getBranchNameWithoutRefsheadsPrefix(\n    azurePr.targetRefName,\n  );\n  const bodyStruct = getPrBodyStruct(azurePr.description);\n\n  const createdAt = azurePr.creationDate?.toISOString();\n\n  // TODO #22198\n  const state = stateMap[azurePr.status!] ?? 'open';\n\n  const sourceRefName = azurePr.sourceRefName;\n\n  return {\n    ...azurePr,\n    sourceBranch,\n    state,\n    number,\n    bodyStruct,\n    sourceRefName,\n    targetBranch,\n    createdAt,\n  } as AzurePr;\n}\n\nexport function getStorageExtraCloneOpts(config: HostRule): GitOptions {\n  let authType: string;\n  let authValue: string;\n  if (!config.token && config.username && config.password) {\n    authType = 'basic';\n    authValue = toBase64(`${config.username}:${config.password}`);\n  } else if (config.token?.length === 52) {\n    authType = 'basic';\n    authValue = toBase64(`:${config.token}`);\n  } else {\n    authType = 'bearer';\n    authValue = config.token!;\n  }\n  addSecretForSanitizing(authValue, 'global');\n  return {\n    '-c': `http.extraheader=AUTHORIZATION: ${authType} ${authValue}`,\n  };\n}\n\nexport function max4000Chars(str: string): string {\n  if (str && str.length >= 4000) {\n    return str.substring(0, 3999);\n  }\n  return str;\n}\n\nexport function getProjectAndRepo(str: string): {\n  project: string;\n  repo: string;\n} {\n  logger.trace(`getProjectAndRepo(${str})`);\n  const strSplit = str.split(`/`);\n  if (strSplit.length === 1) {\n    return {\n      project: str,\n      repo: str,\n    };\n  }\n  if (strSplit.length === 2) {\n    return {\n      project: strSplit[0],\n      repo: strSplit[1],\n    };\n  }\n  const msg = `Azure repository can be only structured this way : 'repository' or 'projectName/repository'!`;\n  logger.warn({ repository: str }, msg);\n  throw new Error(msg);\n}\n\nexport function getRepoByName(\n  name: string,\n  repos: (GitRepository | null | undefined)[] | undefined | null,\n): GitRepository | null {\n  logger.trace(`getRepoByName(${name})`);\n\n  let { project, repo } = getProjectAndRepo(name);\n  project = project.toLowerCase();\n  repo = repo.toLowerCase();\n\n  const foundRepo = repos?.find(\n    (r) =>\n      project === r?.project?.name?.toLowerCase() &&\n      repo === r?.name?.toLowerCase(),\n  );\n  if (!foundRepo) {\n    logger.debug(`Repo not found: ${name}`);\n  }\n  return foundRepo ?? null;\n}\n\nexport function mapMergeStrategy(\n  mergeStrategy?: MergeStrategy,\n): GitPullRequestMergeStrategy {\n  switch (mergeStrategy) {\n    case 'rebase':\n    case 'fast-forward':\n      return GitPullRequestMergeStrategy.Rebase;\n    case 'merge-commit':\n      return GitPullRequestMergeStrategy.NoFastForward;\n    case 'squash':\n      return GitPullRequestMergeStrategy.Squash;\n    default:\n      return GitPullRequestMergeStrategy.NoFastForward;\n  }\n}\n"]}