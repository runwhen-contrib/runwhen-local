{"version":3,"file":"codecommit-client.js","sourceRoot":"","sources":["../../../../lib/modules/platform/codecommit/codecommit-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  CreatePullRequestApprovalRuleInput,\n  CreatePullRequestApprovalRuleOutput,\n  CreatePullRequestInput,\n  CreatePullRequestOutput,\n  DeleteCommentContentInput,\n  DeleteCommentContentOutput,\n  GetCommentsForPullRequestInput,\n  GetCommentsForPullRequestOutput,\n  GetFileInput,\n  GetFileOutput,\n  GetPullRequestInput,\n  GetPullRequestOutput,\n  GetRepositoryInput,\n  GetRepositoryOutput,\n  ListPullRequestsInput,\n  ListPullRequestsOutput,\n  ListRepositoriesInput,\n  ListRepositoriesOutput,\n  PostCommentForPullRequestInput,\n  PostCommentForPullRequestOutput,\n  UpdateCommentInput,\n  UpdateCommentOutput,\n  UpdatePullRequestDescriptionInput,\n  UpdatePullRequestDescriptionOutput,\n  UpdatePullRequestStatusInput,\n  UpdatePullRequestStatusOutput,\n  UpdatePullRequestTitleInput,\n  UpdatePullRequestTitleOutput,\n} from '@aws-sdk/client-codecommit';\nimport {\n  CodeCommitClient,\n  CreatePullRequestApprovalRuleCommand,\n  CreatePullRequestCommand,\n  DeleteCommentContentCommand,\n  GetCommentsForPullRequestCommand,\n  GetFileCommand,\n  GetPullRequestCommand,\n  GetRepositoryCommand,\n  ListPullRequestsCommand,\n  ListRepositoriesCommand,\n  PostCommentForPullRequestCommand,\n  PullRequestStatusEnum,\n  UpdateCommentCommand,\n  UpdatePullRequestDescriptionCommand,\n  UpdatePullRequestStatusCommand,\n  UpdatePullRequestTitleCommand,\n} from '@aws-sdk/client-codecommit';\nimport type { RepositoryMetadata } from '@aws-sdk/client-codecommit/dist-types/models/models_0';\nimport is from '@sindresorhus/is';\nimport * as aws4 from 'aws4';\nimport { REPOSITORY_UNINITIATED } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\n\nlet codeCommitClient: CodeCommitClient;\n\nexport function buildCodeCommitClient(): void {\n  if (!codeCommitClient) {\n    codeCommitClient = new CodeCommitClient({});\n  }\n\n  /* v8 ignore start */\n  if (!codeCommitClient) {\n    throw new Error('Failed to initialize codecommit client');\n  } /* v8 ignore stop */\n}\n\nexport async function deleteComment(\n  commentId: string,\n): Promise<DeleteCommentContentOutput> {\n  const input: DeleteCommentContentInput = {\n    commentId,\n  };\n  const cmd = new DeleteCommentContentCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function getPrComments(\n  pullRequestId: string,\n): Promise<GetCommentsForPullRequestOutput> {\n  const input: GetCommentsForPullRequestInput = {\n    pullRequestId,\n  };\n  const cmd = new GetCommentsForPullRequestCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function updateComment(\n  commentId: string,\n  content: string,\n): Promise<UpdateCommentOutput> {\n  const input: UpdateCommentInput = {\n    commentId,\n    content,\n  };\n  const cmd = new UpdateCommentCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function createPrComment(\n  pullRequestId: string,\n  repositoryName: string | undefined,\n  content: string,\n  beforeCommitId: string,\n  afterCommitId: string,\n): Promise<PostCommentForPullRequestOutput> {\n  const input: PostCommentForPullRequestInput = {\n    pullRequestId,\n    repositoryName,\n    content,\n    afterCommitId,\n    beforeCommitId,\n  };\n  const cmd = new PostCommentForPullRequestCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\n// export async function fastForwardMerge(\n//   repositoryName: string,\n//   sourceCommitSpecifier: string,\n//   destinationReference: string\n// ): Promise<MergeBranchesByFastForwardOutput> {\n//   const input: MergeBranchesByFastForwardInput = {\n//     repositoryName,\n//     sourceCommitSpecifier,\n//     destinationCommitSpecifier: destinationReference,\n//     targetBranch: destinationReference,\n//   };\n//   const cmd = new MergeBranchesByFastForwardCommand(input);\n//   return await codeCommitClient.send(cmd);\n// }\n\n// export async function squashMerge(\n//   repositoryName: string,\n//   sourceCommitSpecifier: string,\n//   destinationReference: string,\n//   commitMessage: string | undefined\n// ): Promise<MergeBranchesBySquashOutput> {\n//   const input: MergeBranchesBySquashInput = {\n//     repositoryName,\n//     sourceCommitSpecifier,\n//     destinationCommitSpecifier: destinationReference,\n//     targetBranch: destinationReference,\n//     commitMessage,\n//   };\n//   const cmd = new MergeBranchesBySquashCommand(input);\n//   return await codeCommitClient.send(cmd);\n// }\n\nexport async function updatePrStatus(\n  pullRequestId: string,\n  pullRequestStatus: PullRequestStatusEnum,\n): Promise<UpdatePullRequestStatusOutput> {\n  const input: UpdatePullRequestStatusInput = {\n    pullRequestId,\n    pullRequestStatus,\n  };\n  const cmd = new UpdatePullRequestStatusCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function updatePrTitle(\n  prNo: string,\n  title: string,\n): Promise<UpdatePullRequestTitleOutput> {\n  const input: UpdatePullRequestTitleInput = {\n    pullRequestId: `${prNo}`,\n    title,\n  };\n  const cmd = new UpdatePullRequestTitleCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function updatePrDescription(\n  pullRequestId: string,\n  description: string,\n): Promise<UpdatePullRequestDescriptionOutput> {\n  const input: UpdatePullRequestDescriptionInput = {\n    pullRequestId,\n    description,\n  };\n  const cmd = new UpdatePullRequestDescriptionCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function createPr(\n  title: string,\n  description: string,\n  sourceReference: string,\n  destinationReference: string,\n  repositoryName: string | undefined,\n): Promise<CreatePullRequestOutput> {\n  const input: CreatePullRequestInput = {\n    title,\n    description,\n    targets: [\n      {\n        sourceReference,\n        destinationReference,\n        repositoryName,\n      },\n    ],\n  };\n  const cmd = new CreatePullRequestCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function getFile(\n  repositoryName: string | undefined,\n  filePath: string,\n  commitSpecifier: string | undefined,\n): Promise<GetFileOutput> {\n  const input: GetFileInput = {\n    repositoryName,\n    filePath,\n    commitSpecifier,\n  };\n  const cmd: GetFileCommand = new GetFileCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function listPullRequests(\n  repositoryName: string,\n): Promise<ListPullRequestsOutput> {\n  const input: ListPullRequestsInput = {\n    repositoryName,\n    pullRequestStatus: PullRequestStatusEnum.OPEN,\n  };\n\n  const cmd = new ListPullRequestsCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function getRepositoryInfo(\n  repository: string,\n): Promise<GetRepositoryOutput> {\n  const input: GetRepositoryInput = {\n    repositoryName: `${repository}`,\n  };\n  const cmd = new GetRepositoryCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function getPr(\n  pullRequestId: string,\n): Promise<GetPullRequestOutput | undefined> {\n  const input: GetPullRequestInput = {\n    pullRequestId,\n  };\n  const cmd = new GetPullRequestCommand(input);\n  let res;\n  try {\n    res = await codeCommitClient.send(cmd);\n  } catch (err) {\n    logger.debug({ err }, 'failed to get PR using prId');\n  }\n  return res;\n}\n\nexport async function listRepositories(): Promise<ListRepositoriesOutput> {\n  const input: ListRepositoriesInput = {};\n  const cmd = new ListRepositoriesCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport async function createPrApprovalRule(\n  pullRequestId: string,\n  approvalRuleContent: string,\n): Promise<CreatePullRequestApprovalRuleOutput> {\n  const input: CreatePullRequestApprovalRuleInput = {\n    approvalRuleContent,\n    approvalRuleName: 'Reviewers By Renovate',\n    pullRequestId,\n  };\n  const cmd = new CreatePullRequestApprovalRuleCommand(input);\n  return await codeCommitClient.send(cmd);\n}\n\nexport function getCodeCommitUrl(\n  repoMetadata: RepositoryMetadata,\n  repoName: string,\n): string {\n  logger.debug('get code commit url');\n  if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\n    if (repoMetadata.cloneUrlHttp) {\n      return repoMetadata.cloneUrlHttp;\n    }\n    // shouldn't reach here, but just in case\n    return `https://git-codecommit.${\n      process.env.AWS_REGION ?? 'us-east-1'\n    }.amazonaws.com/v1/repos/${repoName}`;\n  }\n\n  const signer = new aws4.RequestSigner({\n    service: 'codecommit',\n    host: `git-codecommit.${\n      process.env.AWS_REGION ?? 'us-east-1'\n    }.amazonaws.com`,\n    method: 'GIT',\n    path: `v1/repos/${repoName}`,\n  });\n  const dateTime = signer.getDateTime();\n\n  /* v8 ignore start */\n  if (!is.string(dateTime)) {\n    throw new Error(REPOSITORY_UNINITIATED);\n  } /* v8 ignore stop */\n\n  const token = `${dateTime}Z${signer.signature()}`;\n\n  let username = `${process.env.AWS_ACCESS_KEY_ID}${\n    process.env.AWS_SESSION_TOKEN ? `%${process.env.AWS_SESSION_TOKEN}` : ''\n  }`;\n\n  // massaging username with the session token,\n  /* v8 ignore start */\n  if (username.includes('/')) {\n    username = username.replace(/\\//g, '%2F');\n  } /* v8 ignore stop */\n  return `https://${username}:${token}@git-codecommit.${\n    process.env.AWS_REGION ?? 'us-east-1'\n  }.amazonaws.com/v1/repos/${repoName}`;\n}\n"]}