{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/platform/codecommit/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from 'node:buffer';\nimport type {\n  GetCommentsForPullRequestOutput,\n  ListRepositoriesOutput,\n} from '@aws-sdk/client-codecommit';\nimport { PullRequestStatusEnum } from '@aws-sdk/client-codecommit';\nimport {\n  PLATFORM_BAD_CREDENTIALS,\n  REPOSITORY_EMPTY,\n  REPOSITORY_NOT_FOUND,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { BranchStatus, PrState } from '../../../types';\nimport { coerceArray } from '../../../util/array';\nimport { parseJson } from '../../../util/common';\nimport * as git from '../../../util/git';\nimport { regEx } from '../../../util/regex';\nimport { sanitize } from '../../../util/sanitize';\nimport type {\n  BranchStatusConfig,\n  CreatePRConfig,\n  EnsureCommentConfig,\n  EnsureCommentRemovalConfig,\n  EnsureIssueConfig,\n  EnsureIssueResult,\n  FindPRConfig,\n  Issue,\n  MergePRConfig,\n  PlatformParams,\n  PlatformResult,\n  Pr,\n  RepoParams,\n  RepoResult,\n  UpdatePrConfig,\n} from '../types';\nimport { getNewBranchName, repoFingerprint } from '../util';\nimport { smartTruncate } from '../utils/pr-body';\nimport * as client from './codecommit-client';\n\nexport interface CodeCommitPr extends Pr {\n  body: string;\n  destinationCommit: string;\n  sourceCommit: string;\n}\n\ninterface Config {\n  repository?: string;\n  defaultBranch?: string;\n  region?: string;\n  prList?: CodeCommitPr[];\n}\n\nexport const id = 'codecommit';\n\nexport const config: Config = {};\n\nexport async function initPlatform({\n  endpoint,\n  username,\n  password,\n  token: awsToken,\n}: PlatformParams): Promise<PlatformResult> {\n  const accessKeyId = username;\n  const secretAccessKey = password;\n  let region: string | undefined;\n\n  if (accessKeyId) {\n    process.env.AWS_ACCESS_KEY_ID = accessKeyId;\n  }\n  if (secretAccessKey) {\n    process.env.AWS_SECRET_ACCESS_KEY = secretAccessKey;\n  }\n  if (awsToken) {\n    process.env.AWS_SESSION_TOKEN = awsToken;\n  }\n\n  if (endpoint) {\n    const regionReg = regEx(/.*codecommit\\.(?<region>.+)\\.amazonaws\\.com/);\n    const codeCommitMatch = regionReg.exec(endpoint);\n    region = codeCommitMatch?.groups?.region;\n    if (region) {\n      process.env.AWS_REGION = region;\n    } else {\n      logger.warn(\"Can't parse region, make sure your endpoint is correct\");\n    }\n  }\n\n  // If any of the below fails, it will throw an exception stopping the program.\n  client.buildCodeCommitClient();\n  // To check if we have permission to codecommit, throws exception if failed.\n  await client.listRepositories();\n\n  const platformConfig: PlatformResult = {\n    endpoint:\n      endpoint ??\n      `https://git-codecommit.${\n        process.env.AWS_REGION ?? 'us-east-1'\n      }.amazonaws.com/`,\n  };\n  return Promise.resolve(platformConfig);\n}\n\nexport async function initRepo({\n  repository,\n  endpoint,\n}: RepoParams): Promise<RepoResult> {\n  logger.debug(`initRepo(\"${repository}\")`);\n\n  config.repository = repository;\n\n  let repo;\n  try {\n    repo = await client.getRepositoryInfo(repository);\n  } catch (err) {\n    logger.error({ err }, 'Could not find repository');\n    throw new Error(REPOSITORY_NOT_FOUND);\n  }\n\n  if (!repo?.repositoryMetadata) {\n    logger.error({ repository }, 'Could not find repository');\n    throw new Error(REPOSITORY_NOT_FOUND);\n  }\n  logger.debug({ repositoryDetails: repo }, 'Repository details');\n  const metadata = repo.repositoryMetadata;\n\n  const url = client.getCodeCommitUrl(metadata, repository);\n  try {\n    await git.initRepo({\n      url,\n    });\n  } catch (err) {\n    logger.debug({ err }, 'Failed to git init');\n    throw new Error(PLATFORM_BAD_CREDENTIALS);\n  }\n\n  if (!metadata.defaultBranch || !metadata.repositoryId) {\n    logger.debug('Repo is empty');\n    throw new Error(REPOSITORY_EMPTY);\n  }\n\n  const defaultBranch = metadata.defaultBranch;\n  config.defaultBranch = defaultBranch;\n  logger.debug(`${repository} default branch = ${defaultBranch}`);\n\n  return {\n    repoFingerprint: repoFingerprint(metadata.repositoryId, endpoint),\n    defaultBranch,\n    isFork: false,\n  };\n}\n\nexport async function getPrList(): Promise<CodeCommitPr[]> {\n  logger.debug('getPrList()');\n\n  if (config.prList) {\n    return config.prList;\n  }\n\n  const listPrsResponse = await client.listPullRequests(config.repository!);\n  const fetchedPrs: CodeCommitPr[] = [];\n\n  if (listPrsResponse && !listPrsResponse.pullRequestIds) {\n    return fetchedPrs;\n  }\n\n  const prIds = coerceArray(listPrsResponse.pullRequestIds);\n\n  for (const prId of prIds) {\n    const prRes = await client.getPr(prId);\n\n    if (!prRes?.pullRequest) {\n      continue;\n    }\n    const prInfo = prRes.pullRequest;\n    const pr: CodeCommitPr = {\n      targetBranch: prInfo.pullRequestTargets![0].destinationReference!,\n      sourceBranch: prInfo.pullRequestTargets![0].sourceReference!,\n      destinationCommit: prInfo.pullRequestTargets![0].destinationCommit!,\n      sourceCommit: prInfo.pullRequestTargets![0].sourceCommit!,\n      state:\n        prInfo.pullRequestStatus === PullRequestStatusEnum.OPEN\n          ? 'open'\n          : 'closed',\n      number: Number.parseInt(prId),\n      title: prInfo.title!,\n      body: prInfo.description!,\n    };\n    fetchedPrs.push(pr);\n  }\n\n  config.prList = fetchedPrs;\n\n  logger.debug(`Retrieved Pull Requests, count: ${fetchedPrs.length}`);\n  return fetchedPrs;\n}\n\nexport async function findPr({\n  branchName,\n  prTitle,\n  state = 'all',\n}: FindPRConfig): Promise<CodeCommitPr | null> {\n  let prsFiltered: CodeCommitPr[] = [];\n  try {\n    const prs = await getPrList();\n    const refsHeadBranchName = getNewBranchName(branchName);\n    prsFiltered = prs.filter(\n      (item) => item.sourceBranch === refsHeadBranchName,\n    );\n\n    if (prTitle) {\n      prsFiltered = prsFiltered.filter(\n        (item) => item.title.toUpperCase() === prTitle.toUpperCase(),\n      );\n    }\n\n    switch (state) {\n      case 'all':\n        break;\n      case '!open':\n        prsFiltered = prsFiltered.filter((item) => item.state !== 'open');\n        break;\n      default:\n        prsFiltered = prsFiltered.filter((item) => item.state === 'open');\n        break;\n    }\n  } catch (err) {\n    logger.error({ err }, 'findPr error');\n  }\n  if (prsFiltered.length === 0) {\n    return null;\n  }\n  return prsFiltered[0];\n}\n\nexport async function getBranchPr(\n  branchName: string,\n): Promise<CodeCommitPr | null> {\n  logger.debug(`getBranchPr(${branchName})`);\n  const existingPr = await findPr({\n    branchName,\n    state: 'open',\n  });\n  return existingPr ? getPr(existingPr.number) : null;\n}\n\nexport async function getPr(\n  pullRequestId: number,\n): Promise<CodeCommitPr | null> {\n  logger.debug(`getPr(${pullRequestId})`);\n  const prRes = await client.getPr(`${pullRequestId}`);\n\n  if (!prRes?.pullRequest) {\n    return null;\n  }\n\n  const prInfo = prRes.pullRequest;\n  let prState: PrState;\n  if (prInfo.pullRequestTargets![0].mergeMetadata?.isMerged) {\n    prState = 'merged';\n  } else {\n    prState =\n      prInfo.pullRequestStatus === PullRequestStatusEnum.OPEN\n        ? 'open'\n        : 'closed';\n  }\n\n  return {\n    sourceBranch: prInfo.pullRequestTargets![0].sourceReference!,\n    sourceCommit: prInfo.pullRequestTargets![0].sourceCommit!,\n    state: prState,\n    number: pullRequestId,\n    title: prInfo.title!,\n    targetBranch: prInfo.pullRequestTargets![0].destinationReference!,\n    destinationCommit: prInfo.pullRequestTargets![0].destinationCommit!,\n    body: prInfo.description!,\n  };\n}\n\nexport async function getRepos(): Promise<string[]> {\n  logger.debug('Autodiscovering AWS CodeCommit repositories');\n\n  let reposRes: ListRepositoriesOutput;\n  try {\n    reposRes = await client.listRepositories();\n    //todo do we need pagination? maximum number of repos is 1000 without pagination, also the same for free account\n  } catch (error) {\n    logger.error({ error }, 'Could not retrieve repositories');\n    return [];\n  }\n\n  const res: string[] = [];\n\n  const repoNames = coerceArray(reposRes?.repositories);\n\n  for (const repo of repoNames) {\n    if (repo.repositoryName) {\n      res.push(repo.repositoryName);\n    }\n  }\n\n  return res;\n}\n\nexport function massageMarkdown(input: string): string {\n  // Remove any HTML we use\n  return input\n    .replace(\n      'you tick the rebase/retry checkbox',\n      'PR is renamed to start with \"rebase!\"',\n    )\n    .replace(\n      'checking the rebase/retry box above',\n      'renaming the PR to start with \"rebase!\"',\n    )\n    .replace(regEx(/<\\/?summary>/g), '**')\n    .replace(regEx(/<\\/?details>/g), '')\n    .replace(regEx(`\\n---\\n\\n.*?<!-- rebase-check -->.*?\\n`), '')\n    .replace(regEx(/\\]\\(\\.\\.\\/pull\\//g), '](../../pull-requests/')\n    .replace(\n      regEx(/(?<hiddenComment><!--renovate-(?:debug|config-hash):.*?-->)/g),\n      '[//]: # ($<hiddenComment>)',\n    );\n}\n\n/**\n * Unsed, no Dashboard\n */\nexport function maxBodyLength(): number {\n  return Infinity;\n}\n\nexport async function getJsonFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string,\n): Promise<any> {\n  const raw = await getRawFile(fileName, repoName, branchOrTag);\n  return parseJson(raw, fileName);\n}\n\nexport async function getRawFile(\n  fileName: string,\n  repoName?: string,\n  branchOrTag?: string,\n): Promise<string | null> {\n  const fileRes = await client.getFile(\n    repoName ?? config.repository,\n    fileName,\n    branchOrTag,\n  );\n  if (!fileRes?.fileContent) {\n    return null;\n  }\n  const buf = Buffer.from(fileRes.fileContent);\n  return buf.toString();\n}\n\nconst AMAZON_MAX_BODY_LENGTH = 10239;\n\nexport async function createPr({\n  sourceBranch,\n  targetBranch,\n  prTitle: title,\n  prBody: body,\n}: CreatePRConfig): Promise<CodeCommitPr> {\n  const description = smartTruncate(sanitize(body), AMAZON_MAX_BODY_LENGTH);\n\n  const prCreateRes = await client.createPr(\n    title,\n    sanitize(description),\n    sourceBranch,\n    targetBranch,\n    config.repository,\n  );\n\n  if (\n    !prCreateRes.pullRequest?.title ||\n    !prCreateRes.pullRequest?.pullRequestId ||\n    !prCreateRes.pullRequest?.description ||\n    !prCreateRes.pullRequest?.pullRequestTargets?.length\n  ) {\n    throw new Error('Could not create pr, missing PR info');\n  }\n\n  return {\n    number: Number.parseInt(prCreateRes.pullRequest.pullRequestId),\n    state: 'open',\n    title: prCreateRes.pullRequest.title,\n    sourceBranch,\n    targetBranch,\n    sourceCommit: prCreateRes.pullRequest.pullRequestTargets[0].sourceCommit!,\n    destinationCommit:\n      prCreateRes.pullRequest.pullRequestTargets[0].destinationCommit!,\n    sourceRepo: config.repository,\n    body: prCreateRes.pullRequest.description,\n  };\n}\n\nexport async function updatePr({\n  number: prNo,\n  prTitle: title,\n  prBody: body,\n  state,\n}: UpdatePrConfig): Promise<void> {\n  logger.debug(`updatePr(${prNo}, ${title}, body)`);\n\n  let cachedPr: CodeCommitPr | undefined = undefined;\n  const cachedPrs = config.prList ?? [];\n  for (const p of cachedPrs) {\n    if (p.number === prNo) {\n      cachedPr = p;\n    }\n  }\n\n  if (body && cachedPr?.body !== body) {\n    await client.updatePrDescription(\n      `${prNo}`,\n      smartTruncate(sanitize(body), AMAZON_MAX_BODY_LENGTH),\n    );\n  }\n\n  if (title && cachedPr?.title !== title) {\n    await client.updatePrTitle(`${prNo}`, title);\n  }\n\n  const prStatusInput =\n    state === 'closed'\n      ? PullRequestStatusEnum.CLOSED\n      : PullRequestStatusEnum.OPEN;\n  if (cachedPr?.state !== prStatusInput) {\n    try {\n      await client.updatePrStatus(`${prNo}`, prStatusInput);\n    } catch {\n      // safety check\n      // do nothing, it's ok to fail sometimes when trying to update from open to open or from closed to closed.\n    }\n  }\n}\n\n// Auto-Merge not supported currently.\n/* v8 ignore start */\nexport async function mergePr({\n  branchName,\n  id: prNo,\n  strategy,\n}: MergePRConfig): Promise<boolean> {\n  logger.debug(`mergePr(${prNo}, ${branchName!})`);\n  await client.getPr(`${prNo}`);\n  return Promise.resolve(false);\n  //\n  // /* v8 ignore start */\n  // if (!prOut) {\n  //   return false;\n  // } /* v8 ignore stop */\n  // const pReq = prOut.pullRequest;\n  // const targets = pReq?.pullRequestTargets;\n  //\n  // /* v8 ignore start */\n  // if (!targets) {\n  //   return false;\n  // } /* v8 ignore stop */\n  //\n  // if (strategy === 'rebase') {\n  //   logger.warn('CodeCommit does not support a \"rebase\" strategy.');\n  //   return false;\n  // }\n  //\n  // try {\n  //   if (strategy === 'auto' || strategy === 'squash') {\n  //     await client.squashMerge(\n  //       targets[0].repositoryName!,\n  //       targets[0].sourceReference!,\n  //       targets[0].destinationReference!,\n  //       pReq?.title\n  //     );\n  //   } else if (strategy === 'fast-forward') {\n  //     await client.fastForwardMerge(\n  //       targets[0].repositoryName!,\n  //       targets[0].sourceReference!,\n  //       targets[0].destinationReference!\n  //     );\n  //   } else {\n  //     logger.debug(`unsupported strategy`);\n  //     return false;\n  //   }\n  // } catch (err) {\n  //   logger.debug({ err }, `PR merge error`);\n  //   logger.info({ pr: prNo }, 'PR automerge failed');\n  //   return false;\n  // }\n  //\n  // logger.trace(`Updating PR ${prNo} to status ${PullRequestStatusEnum.CLOSED}`);\n  //\n  // try {\n  //   const response = await client.updatePrStatus(\n  //     `${prNo}`,\n  //     PullRequestStatusEnum.CLOSED\n  //   );\n  //   const isClosed =\n  //     response.pullRequest?.pullRequestStatus === PullRequestStatusEnum.CLOSED;\n  //\n  //   if (!isClosed) {\n  //     logger.warn(\n  //       {\n  //         pullRequestId: prNo,\n  //         status: response.pullRequest?.pullRequestStatus,\n  //       },\n  //       `Expected PR to have status`\n  //     );\n  //   }\n  //   return true;\n  // } catch (err) {\n  //   logger.debug({ err }, 'Failed to set the PR as Closed.');\n  //   return false;\n  // }\n} /* v8 ignore stop */\n\nexport async function addReviewers(\n  prNo: number,\n  reviewers: string[],\n): Promise<void> {\n  const numberOfApprovers = reviewers.length;\n  const approvalRuleContents = `{\"Version\":\"2018-11-08\",\"Statements\": [{\"Type\": \"Approvers\",\"NumberOfApprovalsNeeded\":${numberOfApprovers},\"ApprovalPoolMembers\": ${JSON.stringify(\n    reviewers,\n  )}}]}`;\n  const res = await client.createPrApprovalRule(\n    `${prNo}`,\n    approvalRuleContents,\n  );\n  if (res) {\n    const approvalRule = res.approvalRule;\n    logger.debug({ approvalRule }, `Approval Rule Added to PR #${prNo}:`);\n  }\n}\n\n/* v8 ignore start */\nexport function addAssignees(iid: number, assignees: string[]): Promise<void> {\n  // CodeCommit does not support adding reviewers\n  return Promise.resolve();\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function findIssue(title: string): Promise<Issue | null> {\n  // CodeCommit does not have issues\n  return Promise.resolve(null);\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function ensureIssue({\n  title,\n}: EnsureIssueConfig): Promise<EnsureIssueResult | null> {\n  // CodeCommit does not have issues\n  return Promise.resolve(null);\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function getIssueList(): Promise<Issue[]> {\n  // CodeCommit does not have issues\n  return Promise.resolve([]);\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function ensureIssueClosing(title: string): Promise<void> {\n  // CodeCommit does not have issues\n  return Promise.resolve();\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function deleteLabel(prNumber: number, label: string): Promise<void> {\n  return Promise.resolve();\n} /* v8 ignore stop */\n\n// Returns the combined status for a branch.\n/* v8 ignore start */\nexport function getBranchStatus(branchName: string): Promise<BranchStatus> {\n  logger.debug(`getBranchStatus(${branchName})`);\n  logger.debug(\n    'returning branch status yellow, because getBranchStatus isnt supported on aws yet',\n  );\n  return Promise.resolve('yellow');\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function getBranchStatusCheck(\n  branchName: string,\n  context: string,\n): Promise<BranchStatus | null> {\n  logger.debug(`getBranchStatusCheck(${branchName}, context=${context})`);\n  logger.debug(\n    'returning null, because getBranchStatusCheck is not supported on aws yet',\n  );\n  return Promise.resolve(null);\n} /* v8 ignore stop */\n\n/* v8 ignore start */\nexport function setBranchStatus({\n  branchName,\n  context,\n  description,\n  state,\n  url: targetUrl,\n}: BranchStatusConfig): Promise<void> {\n  return Promise.resolve();\n} /* v8 ignore stop */\n\nexport async function ensureComment({\n  number,\n  topic,\n  content,\n}: EnsureCommentConfig): Promise<boolean> {\n  logger.debug(`ensureComment(${number}, ${topic!}, content)`);\n  const header = topic ? `### ${topic}\\n\\n` : '';\n  const body = `${header}${sanitize(content)}`;\n  let prCommentsResponse: GetCommentsForPullRequestOutput;\n  try {\n    prCommentsResponse = await client.getPrComments(`${number}`);\n  } catch (err) {\n    logger.debug({ err }, 'Unable to retrieve pr comments');\n    return false;\n  }\n\n  let commentId: string | undefined = undefined;\n  let commentNeedsUpdating = false;\n\n  if (!prCommentsResponse?.commentsForPullRequestData) {\n    return false;\n  }\n\n  for (const commentObj of prCommentsResponse.commentsForPullRequestData) {\n    if (!commentObj?.comments) {\n      continue;\n    }\n    const firstCommentContent = commentObj.comments[0].content;\n    if (\n      (topic && firstCommentContent?.startsWith(header)) === true ||\n      (!topic && firstCommentContent === body)\n    ) {\n      commentId = commentObj.comments[0].commentId;\n      commentNeedsUpdating = firstCommentContent !== body;\n      break;\n    }\n  }\n\n  if (!commentId) {\n    const prs = await getPrList();\n    const thisPr = prs.filter((item) => item.number === number);\n\n    if (!thisPr[0].sourceCommit || !thisPr[0].destinationCommit) {\n      return false;\n    }\n\n    await client.createPrComment(\n      `${number}`,\n      config.repository,\n      body,\n      thisPr[0].destinationCommit,\n      thisPr[0].sourceCommit,\n    );\n    logger.info(\n      { repository: config.repository, prNo: number, topic },\n      'Comment added',\n    );\n  } else if (commentNeedsUpdating && commentId) {\n    await client.updateComment(commentId, body);\n\n    logger.debug(\n      { repository: config.repository, prNo: number, topic },\n      'Comment updated',\n    );\n  } else {\n    logger.debug(\n      { repository: config.repository, prNo: number, topic },\n      'Comment is already update-to-date',\n    );\n  }\n\n  return true;\n}\n\nexport async function ensureCommentRemoval(\n  removeConfig: EnsureCommentRemovalConfig,\n): Promise<void> {\n  const { number: prNo } = removeConfig;\n  const key =\n    removeConfig.type === 'by-topic'\n      ? removeConfig.topic\n      : removeConfig.content;\n  logger.debug(`Ensuring comment \"${key}\" in #${prNo} is removed`);\n\n  let prCommentsResponse: GetCommentsForPullRequestOutput;\n  try {\n    prCommentsResponse = await client.getPrComments(`${prNo}`);\n  } catch (err) {\n    logger.debug({ err }, 'Unable to retrieve pr comments');\n    return;\n  }\n\n  if (!prCommentsResponse?.commentsForPullRequestData) {\n    logger.debug('commentsForPullRequestData not found');\n    return;\n  }\n\n  let commentIdToRemove: string | undefined;\n  for (const commentObj of prCommentsResponse.commentsForPullRequestData) {\n    if (!commentObj?.comments) {\n      logger.debug(\n        'comments object not found under commentsForPullRequestData',\n      );\n      continue;\n    }\n\n    for (const comment of commentObj.comments) {\n      if (\n        (removeConfig.type === 'by-topic' &&\n          comment.content?.startsWith(`### ${removeConfig.topic}\\n\\n`)) ===\n          true ||\n        (removeConfig.type === 'by-content' &&\n          removeConfig.content === comment.content?.trim())\n      ) {\n        commentIdToRemove = comment.commentId;\n        break;\n      }\n    }\n    if (commentIdToRemove) {\n      await client.deleteComment(commentIdToRemove);\n      logger.debug(`comment \"${key}\" in PR #${prNo} was removed`);\n      break;\n    }\n  }\n}\n"]}