{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/utils.ts"],"names":[],"mappings":";;;AAmBA,oDAaC;AAgBD,wBAYC;AA1DD,wCAA6C;AAS7C,MAAM,wBAAwB,GAAG,IAAI,GAAG,CACtC;IACE,CAAC,QAAQ,EAAE,QAAQ,CAAC;IACpB,CAAC,cAAc,EAAE,cAAc,CAAC;IAChC,CAAC,cAAc,EAAE,cAAc,CAAC;CACjC,CACF,CAAC;AAEF,SAAgB,oBAAoB,CAClC,aAAwC;IAExC,MAAM,IAAI,GAAqB;QAC7B,mBAAmB,EAAE,IAAI;KAC1B,CAAC;IAEF,yEAAyE;IACzE,IAAI,aAAa,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,wBAAwB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACpE,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAEY,QAAA,QAAQ,GAAG;IACtB,IAAI,EAAE,CAAC,MAAM,CAAC;IACd,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC;IAC7C,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClB,MAAM,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;IAClC,GAAG,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC;CAClD,CAAC;AAEW,QAAA,WAAW,GAA+C;IACrE,KAAK,EAAE,YAAY;IACnB,GAAG,EAAE,QAAQ;IACb,MAAM,EAAE,YAAY;CACrB,CAAC;AAEF,SAAgB,MAAM,CAAC,EAAc;IACnC,OAAO;QACL,MAAM,EAAE,EAAE,CAAC,EAAE;QACb,UAAU,EAAE,IAAA,yBAAe,EAAC,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC;QAC5C,YAAY,EAAE,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI;QACrC,YAAY,EAAE,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI;QAC1C,KAAK,EAAE,EAAE,CAAC,KAAK;QACf,KAAK,EAAE,qBAAqB,CAAC,gBAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;YAC9D,CAAC,CAAC,QAAQ;YACV,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC,oBAAoB;QAChD,SAAS,EAAE,EAAE,CAAC,UAAU;KACzB,CAAC;AACJ,CAAC;AAEY,QAAA,cAAc,GAAG;IAC5B,WAAW;IACX,cAAc;IACd,cAAc;IACd,2BAA2B;IAC3B,oBAAoB;IACpB,2BAA2B;IAC3B,gCAAgC;IAChC,+BAA+B;IAC/B,uBAAuB;IACvB,2BAA2B;IAC3B,iCAAiC;IACjC,mBAAmB;IACnB,mBAAmB;CACpB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import type { MergeStrategy } from '../../../config/types';\nimport type { BranchStatus } from '../../../types';\nimport { getPrBodyStruct } from '../pr-body';\nimport type { Pr } from '../types';\nimport type {\n  BitbucketBranchState,\n  BitbucketMergeStrategy,\n  MergeRequestBody,\n  PrResponse,\n} from './types';\n\nconst bitbucketMergeStrategies = new Map<MergeStrategy, BitbucketMergeStrategy>(\n  [\n    ['squash', 'squash'],\n    ['merge-commit', 'merge_commit'],\n    ['fast-forward', 'fast_forward'],\n  ],\n);\n\nexport function mergeBodyTransformer(\n  mergeStrategy: MergeStrategy | undefined,\n): MergeRequestBody {\n  const body: MergeRequestBody = {\n    close_source_branch: true,\n  };\n\n  // The `auto` strategy will use the strategy configured inside Bitbucket.\n  if (mergeStrategy && mergeStrategy !== 'auto') {\n    body.merge_strategy = bitbucketMergeStrategies.get(mergeStrategy);\n  }\n\n  return body;\n}\n\nexport const prStates = {\n  open: ['OPEN'],\n  notOpen: ['MERGED', 'DECLINED', 'SUPERSEDED'],\n  merged: ['MERGED'],\n  closed: ['DECLINED', 'SUPERSEDED'],\n  all: ['OPEN', 'MERGED', 'DECLINED', 'SUPERSEDED'],\n};\n\nexport const buildStates: Record<BranchStatus, BitbucketBranchState> = {\n  green: 'SUCCESSFUL',\n  red: 'FAILED',\n  yellow: 'INPROGRESS',\n};\n\nexport function prInfo(pr: PrResponse): Pr {\n  return {\n    number: pr.id,\n    bodyStruct: getPrBodyStruct(pr.summary?.raw),\n    sourceBranch: pr.source?.branch?.name,\n    targetBranch: pr.destination?.branch?.name,\n    title: pr.title,\n    state: /* v8 ignore start */ prStates.closed?.includes(pr.state)\n      ? 'closed'\n      : pr.state?.toLowerCase() /* v8 ignore stop */,\n    createdAt: pr.created_on,\n  };\n}\n\nexport const prFieldsFilter = [\n  'values.id',\n  'values.title',\n  'values.state',\n  'values.links.commits.href',\n  'values.summary.raw',\n  'values.source.branch.name',\n  'values.destination.branch.name',\n  'values.reviewers.display_name',\n  'values.reviewers.uuid',\n  'values.reviewers.nickname',\n  'values.reviewers.account_status',\n  'values.created_on',\n  'values.updated_on',\n].join(',');\n"]}