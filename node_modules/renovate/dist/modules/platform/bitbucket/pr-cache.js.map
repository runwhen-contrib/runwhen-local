{"version":3,"file":"pr-cache.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/pr-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { dequal } from 'dequal';\nimport { DateTime } from 'luxon';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport { getCache } from '../../../util/cache/repository';\nimport { clone } from '../../../util/clone';\nimport type { BitbucketHttp } from '../../../util/http/bitbucket';\nimport { repoCacheProvider } from '../../../util/http/cache/repository-http-cache-provider';\nimport type { Pr } from '../types';\nimport type { BitbucketPrCacheData, PagedResult, PrResponse } from './types';\nimport { prFieldsFilter, prInfo, prStates } from './utils';\n\nexport class BitbucketPrCache {\n  private items: Pr[] = [];\n  private cache: BitbucketPrCacheData;\n\n  private constructor(\n    private repo: string,\n    private author: string | null,\n  ) {\n    const repoCache = getCache();\n    repoCache.platform ??= {};\n    repoCache.platform.bitbucket ??= {};\n\n    let pullRequestCache = repoCache.platform.bitbucket.pullRequestsCache as\n      | BitbucketPrCacheData\n      | undefined;\n    if (!pullRequestCache) {\n      logger.debug('Initializing new PR cache at repository cache');\n      pullRequestCache = {\n        items: {},\n        updated_on: null,\n        author,\n      };\n    } else if (pullRequestCache.author !== author) {\n      logger.debug('Resetting PR cache because authors do not match');\n      pullRequestCache = {\n        items: {},\n        updated_on: null,\n        author,\n      };\n    }\n    repoCache.platform.bitbucket.pullRequestsCache = pullRequestCache;\n    this.cache = pullRequestCache;\n    this.updateItems();\n  }\n\n  private static async init(\n    http: BitbucketHttp,\n    repo: string,\n    author: string | null,\n  ): Promise<BitbucketPrCache> {\n    const res = new BitbucketPrCache(repo, author);\n    const isSynced = memCache.get<true | undefined>(\n      'bitbucket-pr-cache-synced',\n    );\n\n    if (!isSynced) {\n      await res.sync(http);\n      memCache.set('bitbucket-pr-cache-synced', true);\n    }\n\n    return res;\n  }\n\n  private getPrs(): Pr[] {\n    return this.items;\n  }\n\n  static async getPrs(\n    http: BitbucketHttp,\n    repo: string,\n    author: string | null,\n  ): Promise<Pr[]> {\n    const prCache = await BitbucketPrCache.init(http, repo, author);\n    return prCache.getPrs();\n  }\n\n  private setPr(pr: Pr): void {\n    logger.debug(`Adding PR #${pr.number} to the PR cache`);\n    this.cache.items[pr.number] = pr;\n    this.updateItems();\n  }\n\n  static async setPr(\n    http: BitbucketHttp,\n    repo: string,\n    author: string | null,\n    item: Pr,\n  ): Promise<void> {\n    const prCache = await BitbucketPrCache.init(http, repo, author);\n    prCache.setPr(item);\n  }\n\n  private reconcile(rawItems: PrResponse[]): void {\n    const { items: oldItems } = this.cache;\n    let { updated_on } = this.cache;\n\n    for (const rawItem of rawItems) {\n      const id = rawItem.id;\n\n      const oldItem = oldItems[id];\n      const newItem = prInfo(rawItem);\n\n      const itemNewTime = DateTime.fromISO(rawItem.updated_on);\n\n      if (!dequal(oldItem, newItem)) {\n        oldItems[id] = newItem;\n      }\n\n      const cacheOldTime = updated_on ? DateTime.fromISO(updated_on) : null;\n      if (!cacheOldTime || itemNewTime > cacheOldTime) {\n        updated_on = rawItem.updated_on;\n      }\n    }\n\n    this.cache.updated_on = updated_on;\n  }\n\n  private getUrl(): string {\n    const params = new URLSearchParams();\n\n    for (const state of prStates.all) {\n      params.append('state', state);\n    }\n\n    params.append('fields', prFieldsFilter);\n\n    const q: string[] = [];\n    if (this.author) {\n      q.push(`author.uuid = \"${this.author}\"`);\n    }\n    if (this.cache.updated_on) {\n      q.push(`updated_on > \"${this.cache.updated_on}\"`);\n    }\n    params.append('q', q.join(' AND '));\n\n    const query = params.toString();\n    return `/2.0/repositories/${this.repo}/pullrequests?${query}`;\n  }\n\n  private async sync(http: BitbucketHttp): Promise<BitbucketPrCache> {\n    logger.debug('Syncing PR list');\n    const url = this.getUrl();\n    const opts = {\n      paginate: true,\n      pagelen: 50,\n      cacheProvider: repoCacheProvider,\n    };\n    const res = await http.getJsonUnchecked<PagedResult<PrResponse>>(url, opts);\n\n    const items = res.body.values;\n    logger.debug(`Fetched ${items.length} PRs to sync with cache`);\n    const oldCache = clone(this.cache.items);\n\n    this.reconcile(items);\n\n    logger.debug(`Total PRs cached: ${Object.values(this.cache.items).length}`);\n    logger.trace(\n      {\n        items,\n        oldCache,\n        newCache: this.cache.items,\n      },\n      `PR cache sync finished`,\n    );\n\n    this.updateItems();\n    return this;\n  }\n\n  /**\n   * Ensure the pr cache starts with the most recent PRs.\n   * JavaScript ensures that the cache is sorted by PR number.\n   */\n  private updateItems(): void {\n    this.items = Object.values(this.cache.items).reverse();\n  }\n}\n"]}