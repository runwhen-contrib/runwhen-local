{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { logger } from '../../../logger';\nimport { LooseArray } from '../../../util/schema-utils';\n\nconst BitbucketSourceTypeSchema = z.enum(['commit_directory', 'commit_file']);\n\nconst SourceResultsSchema = z.object({\n  path: z.string(),\n  type: BitbucketSourceTypeSchema,\n  commit: z.object({\n    hash: z.string(),\n  }),\n});\n\nconst PagedSchema = z.object({\n  page: z.number().optional(),\n  pagelen: z.number(),\n  size: z.number().optional(),\n  next: z.string().optional(),\n});\n\nexport const PagedSourceResultsSchema = PagedSchema.extend({\n  values: z.array(SourceResultsSchema),\n});\n\nexport const RepoInfo = z\n  .object({\n    parent: z.unknown().optional().catch(undefined),\n    mainbranch: z.object({\n      name: z.string(),\n    }),\n    has_issues: z.boolean().catch(() => {\n      return false;\n    }),\n    uuid: z.string(),\n    full_name: z\n      .string()\n      .regex(\n        /^[^/]+\\/[^/]+$/,\n        'Expected repository full_name to be in the format \"owner/repo\"',\n      ),\n    is_private: z.boolean().catch(() => {\n      logger.once.warn('Bitbucket: \"is_private\" field missing from repo info');\n      return true;\n    }),\n    project: z\n      .object({\n        name: z.string(),\n      })\n      .nullable()\n      .catch(null),\n  })\n  .transform((repoInfoBody) => {\n    const isFork = !!repoInfoBody.parent;\n    const [owner, name] = repoInfoBody.full_name.split('/');\n\n    return {\n      isFork,\n      owner,\n      name,\n      mainbranch: repoInfoBody.mainbranch.name,\n      mergeMethod: 'merge',\n      has_issues: repoInfoBody.has_issues,\n      uuid: repoInfoBody.uuid,\n      is_private: repoInfoBody.is_private,\n      projectName: repoInfoBody.project?.name,\n    };\n  });\nexport type RepoInfo = z.infer<typeof RepoInfo>;\n\nexport const Repositories = z\n  .object({\n    values: LooseArray(RepoInfo),\n  })\n  .transform((body) => body.values);\n\nconst TaskState = z.union([z.literal('RESOLVED'), z.literal('UNRESOLVED')]);\n\nconst PrTask = z.object({\n  id: z.number(),\n  state: TaskState,\n  content: z.object({\n    raw: z.string(),\n  }),\n});\n\nexport type PrTask = z.infer<typeof PrTask>;\n\nexport const UnresolvedPrTasks = z\n  .object({\n    values: z.array(PrTask),\n  })\n  .transform((data) =>\n    data.values.filter((task) => task.state === 'UNRESOLVED'),\n  );\n"]}