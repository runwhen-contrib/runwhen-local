{"version":3,"file":"comments.js","sourceRoot":"","sources":["../../../../lib/modules/platform/bitbucket/comments.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { BitbucketHttp } from '../../../util/http/bitbucket';\nimport type { EnsureCommentConfig, EnsureCommentRemovalConfig } from '../types';\nimport type { Account, Config, PagedResult } from './types';\n\nexport const REOPEN_PR_COMMENT_KEYWORD = 'reopen!';\n\nconst bitbucketHttp = new BitbucketHttp();\n\ninterface Comment {\n  content: { raw: string };\n  id: number;\n  user: Account;\n}\n\nexport type CommentsConfig = Pick<Config, 'repository'>;\n\ninterface EnsureBitbucketCommentConfig extends EnsureCommentConfig {\n  config: CommentsConfig;\n}\n\nasync function getComments(\n  config: CommentsConfig,\n  prNo: number,\n): Promise<Comment[]> {\n  const comments = (\n    await bitbucketHttp.getJsonUnchecked<PagedResult<Comment>>(\n      `/2.0/repositories/${config.repository}/pullrequests/${prNo}/comments`,\n      {\n        paginate: true,\n      },\n    )\n  ).body.values;\n\n  logger.debug(`Found ${comments.length} comments`);\n  return comments;\n}\n\nasync function addComment(\n  config: CommentsConfig,\n  prNo: number,\n  raw: string,\n): Promise<void> {\n  await bitbucketHttp.postJson(\n    `/2.0/repositories/${config.repository}/pullrequests/${prNo}/comments`,\n    {\n      body: { content: { raw } },\n    },\n  );\n}\n\nasync function editComment(\n  config: CommentsConfig,\n  prNo: number,\n  commentId: number,\n  raw: string,\n): Promise<void> {\n  await bitbucketHttp.putJson(\n    `/2.0/repositories/${config.repository}/pullrequests/${prNo}/comments/${commentId}`,\n    {\n      body: { content: { raw } },\n    },\n  );\n}\n\nasync function deleteComment(\n  config: CommentsConfig,\n  prNo: number,\n  commentId: number,\n): Promise<void> {\n  await bitbucketHttp.deleteJson(\n    `/2.0/repositories/${config.repository}/pullrequests/${prNo}/comments/${commentId}`,\n  );\n}\n\nexport async function ensureComment({\n  config,\n  number: prNo,\n  topic,\n  content,\n}: EnsureBitbucketCommentConfig): Promise<boolean> {\n  try {\n    const comments = await getComments(config, prNo);\n    let body: string;\n    let commentId: number | undefined;\n    let commentNeedsUpdating: boolean | undefined;\n    if (topic) {\n      logger.debug(`Ensuring comment \"${topic}\" in #${prNo}`);\n      body = `### ${topic}\\n\\n${content}`;\n      comments.forEach((comment) => {\n        if (comment.content.raw.startsWith(`### ${topic}\\n\\n`)) {\n          commentId = comment.id;\n          commentNeedsUpdating = comment.content.raw !== body;\n        }\n      });\n    } else {\n      logger.debug(`Ensuring content-only comment in #${prNo}`);\n      body = `${content}`;\n      comments.forEach((comment) => {\n        if (comment.content.raw === body) {\n          commentId = comment.id;\n          commentNeedsUpdating = false;\n        }\n      });\n    }\n\n    // sanitize any language that isn't supported by Bitbucket Cloud\n    body = sanitizeCommentBody(body);\n\n    if (!commentId) {\n      await addComment(config, prNo, body);\n      logger.info(\n        { repository: config.repository, prNo, topic },\n        'Comment added',\n      );\n    } else if (commentNeedsUpdating) {\n      await editComment(config, prNo, commentId, body);\n      logger.debug({ repository: config.repository, prNo }, 'Comment updated');\n    } else {\n      logger.debug('Comment is already update-to-date');\n    }\n    return true;\n  } catch (err) /* v8 ignore start */ {\n    logger.warn({ err }, 'Error ensuring comment');\n    return false;\n  } /* v8 ignore stop */\n}\n\nexport async function reopenComments(\n  config: CommentsConfig,\n  prNo: number,\n): Promise<Comment[]> {\n  const comments = await getComments(config, prNo);\n\n  const reopenComments = comments.filter((comment) =>\n    comment.content.raw.startsWith(REOPEN_PR_COMMENT_KEYWORD),\n  );\n\n  return reopenComments;\n}\n\nexport async function ensureCommentRemoval(\n  config: CommentsConfig,\n  deleteConfig: EnsureCommentRemovalConfig,\n): Promise<void> {\n  try {\n    const { number: prNo } = deleteConfig;\n    const key =\n      deleteConfig.type === 'by-topic'\n        ? deleteConfig.topic\n        : deleteConfig.content;\n    logger.debug(`Ensuring comment \"${key}\" in #${prNo} is removed`);\n    const comments = await getComments(config, prNo);\n\n    let commentId: number | undefined = undefined;\n\n    if (deleteConfig.type === 'by-topic') {\n      const byTopic = (comment: Comment): boolean =>\n        comment.content.raw.startsWith(`### ${deleteConfig.topic}\\n\\n`);\n      commentId = comments.find(byTopic)?.id;\n    } else if (deleteConfig.type === 'by-content') {\n      const byContent = (comment: Comment): boolean =>\n        comment.content.raw.trim() === deleteConfig.content;\n      commentId = comments.find(byContent)?.id;\n    }\n\n    if (commentId) {\n      await deleteComment(config, prNo, commentId);\n    }\n  } catch (err) /* v8 ignore start */ {\n    logger.warn({ err }, 'Error ensuring comment removal');\n  } /* v8 ignore stop */\n}\n\nfunction sanitizeCommentBody(body: string): string {\n  return body\n    .replace(\n      'checking the rebase/retry box above',\n      'renaming this PR to start with \"rebase!\"',\n    )\n    .replace(\n      'rename this PR to get a fresh replacement',\n      'add a comment starting with \"reopen!\" to get a fresh replacement',\n    );\n}\n"]}