{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/packagist/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { z } from 'zod';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as hostRules from '../../../util/host-rules';\nimport type { HttpOptions } from '../../../util/http/types';\nimport * as p from '../../../util/promises';\nimport { replaceUrlPath, resolveBaseUrl } from '../../../util/url';\nimport * as composerVersioning from '../../versioning/composer';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { RegistryFile } from './schema';\nimport {\n  PackagesResponse,\n  PackagistFile,\n  RegistryMeta,\n  extractDepReleases,\n  parsePackagesResponses,\n} from './schema';\n\nexport class PackagistDatasource extends Datasource {\n  static readonly id = 'packagist';\n\n  constructor() {\n    super(PackagistDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://repo.packagist.org'];\n\n  override readonly defaultVersioning = composerVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `time` field in the results.';\n  // Note: this can be changed to 'release', as the source is present in each release but we remove it while processing\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from `source` field in the results.';\n\n  // We calculate auth at this datasource layer so that we can know whether it's safe to cache or not\n  private static getHostOpts(url: string): HttpOptions {\n    const { username, password } = hostRules.find({\n      hostType: PackagistDatasource.id,\n      url,\n    });\n    return username && password ? { username, password } : {};\n  }\n\n  private async getJson<Schema extends z.ZodType<any, any, any>>(\n    url: string,\n    schema: Schema,\n  ): Promise<z.infer<Schema>> {\n    const opts = PackagistDatasource.getHostOpts(url);\n    const { body } = await this.http.getJson(url, opts, schema);\n    return body;\n  }\n\n  @cache({\n    namespace: `datasource-${PackagistDatasource.id}`,\n    key: (regUrl: string) => `getRegistryMeta:${regUrl}`,\n  })\n  async getRegistryMeta(regUrl: string): Promise<RegistryMeta> {\n    const url = resolveBaseUrl(regUrl, 'packages.json');\n    const result = await this.getJson(url, RegistryMeta);\n    return result;\n  }\n\n  private static isPrivatePackage(regUrl: string): boolean {\n    const opts = PackagistDatasource.getHostOpts(regUrl);\n    return !!opts.password;\n  }\n\n  private static getPackagistFileUrl(\n    regUrl: string,\n    regFile: RegistryFile,\n  ): string {\n    const { key, hash } = regFile;\n    const fileName = hash\n      ? key.replace('%hash%', hash)\n      : /* istanbul ignore next: hard to test */ key;\n    const url = resolveBaseUrl(regUrl, fileName);\n    return url;\n  }\n\n  @cache({\n    namespace: `datasource-${PackagistDatasource.id}`,\n    key: (regUrl: string, regFile: RegistryFile) =>\n      `getPackagistFile:${PackagistDatasource.getPackagistFileUrl(regUrl, regFile)}`,\n    cacheable: (regUrl: string) =>\n      !PackagistDatasource.isPrivatePackage(regUrl),\n    ttlMinutes: 1440,\n  })\n  async getPackagistFile(\n    regUrl: string,\n    regFile: RegistryFile,\n  ): Promise<PackagistFile> {\n    const url = PackagistDatasource.getPackagistFileUrl(regUrl, regFile);\n    const packagistFile = await this.getJson(url, PackagistFile);\n    return packagistFile;\n  }\n\n  async fetchProviderPackages(\n    regUrl: string,\n    meta: RegistryMeta,\n  ): Promise<void> {\n    await p.map(meta.files, async (file) => {\n      const res = await this.getPackagistFile(regUrl, file);\n      Object.assign(meta.providerPackages, res.providers);\n    });\n  }\n\n  async fetchIncludesPackages(\n    regUrl: string,\n    meta: RegistryMeta,\n  ): Promise<void> {\n    await p.map(meta.includesFiles, async (file) => {\n      const res = await this.getPackagistFile(regUrl, file);\n      for (const [key, val] of Object.entries(res.packages)) {\n        meta.includesPackages[key] = extractDepReleases(val);\n      }\n    });\n  }\n\n  @cache({\n    namespace: `datasource-${PackagistDatasource.id}`,\n    key: (registryUrl: string, metadataUrl: string, packageName: string) =>\n      `packagistV2Lookup:${registryUrl}:${metadataUrl}:${packageName}`,\n    ttlMinutes: 10,\n  })\n  async packagistV2Lookup(\n    registryUrl: string,\n    metadataUrl: string,\n    packageName: string,\n  ): Promise<ReleaseResult | null> {\n    const pkgUrl = replaceUrlPath(\n      registryUrl,\n      metadataUrl.replace('%package%', packageName),\n    );\n    const pkgPromise = this.getJson(pkgUrl, z.unknown());\n\n    const devUrl = replaceUrlPath(\n      registryUrl,\n      metadataUrl.replace('%package%', `${packageName}~dev`),\n    );\n    const devPromise = this.getJson(devUrl, z.unknown()).then(\n      (x) => x,\n      () => null,\n    );\n\n    const responses: NonNullable<unknown>[] = await Promise.all([\n      pkgPromise,\n      devPromise,\n    ]).then((responses) => responses.filter(is.object));\n    return parsePackagesResponses(packageName, responses);\n  }\n\n  public getPkgUrl(\n    packageName: string,\n    registryUrl: string,\n    registryMeta: RegistryMeta,\n  ): string | null {\n    if (\n      registryMeta.providersUrl &&\n      packageName in registryMeta.providerPackages\n    ) {\n      let url = registryMeta.providersUrl.replace('%package%', packageName);\n      const hash = registryMeta.providerPackages[packageName];\n      if (hash) {\n        url = url.replace('%hash%', hash);\n      }\n      return replaceUrlPath(registryUrl, url);\n    }\n\n    if (registryMeta.providersLazyUrl) {\n      return replaceUrlPath(\n        registryUrl,\n        registryMeta.providersLazyUrl.replace('%package%', packageName),\n      );\n    }\n\n    return null;\n  }\n\n  public override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace(`getReleases(${packageName})`);\n\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    try {\n      const meta = await this.getRegistryMeta(registryUrl);\n\n      if (\n        meta.availablePackages &&\n        !meta.availablePackages.includes(packageName)\n      ) {\n        return null;\n      }\n\n      if (meta.metadataUrl) {\n        const packagistResult = await this.packagistV2Lookup(\n          registryUrl,\n          meta.metadataUrl,\n          packageName,\n        );\n        return packagistResult;\n      }\n\n      if (meta.packages[packageName]) {\n        const result = extractDepReleases(meta.packages[packageName]);\n        return result;\n      }\n\n      await this.fetchIncludesPackages(registryUrl, meta);\n      if (meta.includesPackages[packageName]) {\n        return meta.includesPackages[packageName];\n      }\n\n      await this.fetchProviderPackages(registryUrl, meta);\n      const pkgUrl = this.getPkgUrl(packageName, registryUrl, meta);\n      if (!pkgUrl) {\n        return null;\n      }\n\n      const pkgRes = await this.getJson(pkgUrl, PackagesResponse);\n      const dep = extractDepReleases(pkgRes.packages[packageName]);\n      logger.trace({ dep }, 'dep');\n      return dep;\n    } catch (err) /* istanbul ignore next */ {\n      if (err.host === 'packagist.org') {\n        if (err.code === 'ECONNRESET' || err.code === 'ETIMEDOUT') {\n          throw new ExternalHostError(err);\n        }\n        if (err.statusCode && err.statusCode >= 500 && err.statusCode < 600) {\n          throw new ExternalHostError(err);\n        }\n      }\n      throw err;\n    }\n  }\n}\n"]}