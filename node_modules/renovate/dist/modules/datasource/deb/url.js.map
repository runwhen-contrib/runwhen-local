{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/deb/url.ts"],"names":[],"mappings":";;AAaA,0CAGC;AASD,wDA+BC;AAxDD,4CAAyC;AACzC,2CAAiD;AAEjD;;;;;;;;;GASG;AACH,SAAgB,eAAe,CAAC,cAAsB;IACpD,MAAM,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,sBAAsB,CAAC,WAAmB;IACxD,MAAM,eAAe,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACrD,MAAM,eAAe,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAE7C,IAAI,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;QACjC,oBAAoB,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QAE3C,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACpD,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAElE,2DAA2D;QAC3D,CAAC,GAAG,eAAe,EAAE,GAAG,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CACzD,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAC/B,CAAC;QAEF,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAClC,IAAA,kBAAY,EACV,GAAG,CAAC,QAAQ,EAAE,EACd,OAAO,EACP,KAAK,EACL,SAAS,EACT,UAAU,UAAU,EAAE,CACvB,CACF,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAC7E,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;;;;;GAMG;AACH,SAAS,oBAAoB,CAAC,GAAQ,EAAE,cAAwB;IAC9D,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE,CAAC;QACnC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,qCAAqC,KAAK,GAAG,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;AACH,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,eAAe,CAAC,GAAQ,EAAE,cAAwB;IACzD,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE,CAAC;QACnC,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;YACxB,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;gBACxB,eAAM,CAAC,KAAK,CACV,wEAAwE,CACzE,CAAC;YACJ,CAAC;YACD,OAAO,UAAU,CAAC;QACpB,CAAC;IACH,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC1D,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { joinUrlParts } from '../../../util/url';\n\n/**\n * Extracts the base suite URL from a package URL by removing the last two path segments.\n *\n * @param basePackageUrl - The base URL of the package.\n * @returns The base suite URL.\n *\n * @example\n * // Returns 'https://deb.debian.org/debian/dists/bullseye'\n * getBaseReleaseUrl('https://deb.debian.org/debian/dists/bullseye/main/binary-amd64');\n */\nexport function getBaseSuiteUrl(basePackageUrl: string): string {\n  const urlParts = basePackageUrl.split('/');\n  return urlParts.slice(0, urlParts.length - 2).join('/');\n}\n\n/**\n * Constructs the component URLs from the given registry URL.\n *\n * @param registryUrl - The base URL of the registry.\n * @returns An array of component URLs.\n * @throws Will throw an error if required parameters are missing from the URL.\n */\nexport function constructComponentUrls(registryUrl: string): string[] {\n  const REQUIRED_PARAMS = ['components', 'binaryArch'];\n  const OPTIONAL_PARAMS = ['suite', 'release'];\n\n  try {\n    const url = new URL(registryUrl);\n    validateUrlAndParams(url, REQUIRED_PARAMS);\n\n    const suite = getReleaseParam(url, OPTIONAL_PARAMS);\n    const binaryArch = url.searchParams.get('binaryArch');\n    const components = url.searchParams.get('components')!.split(',');\n\n    // Clean up URL search parameters for constructing new URLs\n    [...REQUIRED_PARAMS, ...OPTIONAL_PARAMS].forEach((param) =>\n      url.searchParams.delete(param),\n    );\n\n    return components.map((component) =>\n      joinUrlParts(\n        url.toString(),\n        `dists`,\n        suite,\n        component,\n        `binary-${binaryArch}`,\n      ),\n    );\n  } catch (error) {\n    throw new Error(\n      `Invalid deb repo URL: ${registryUrl} - see documentation: ${error.message}`,\n    );\n  }\n}\n\n/**\n * Validates that the required parameters are present in the URL.\n *\n * @param url - The URL to validate.\n * @param requiredParams - The list of required query parameters.\n * @throws Will throw an error if a required parameter is missing.\n */\nfunction validateUrlAndParams(url: URL, requiredParams: string[]): void {\n  for (const param of requiredParams) {\n    if (!url.searchParams.has(param)) {\n      throw new Error(`Missing required query parameter '${param}'`);\n    }\n  }\n}\n\n/**\n * Retrieves the suite parameter from the URL.\n *\n * @param url - The URL to retrieve the suite parameter from.\n * @param optionalParams - The list of optional query parameters.\n * @returns The value of the suite parameter.\n * @throws Will throw an error if none of the optional parameters are found.\n */\nfunction getReleaseParam(url: URL, optionalParams: string[]): string {\n  for (const param of optionalParams) {\n    const paramValue = url.searchParams.get(param);\n    if (paramValue !== null) {\n      if (param === 'release') {\n        logger.debug(\n          'Deprecation notice. Use `suite` instead of `release` for deb repo URLs',\n        );\n      }\n      return paramValue;\n    }\n  }\n  throw new Error(`Missing one of suite query parameter`);\n}\n"]}