{"version":3,"file":"checksum.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/deb/checksum.ts"],"names":[],"mappings":";;AAWA,kEAiBC;AAQD,kDAGC;AAvCD,yCAAyD;AACzD,6CAAgD;AAChD,+CAAwE;AAExE;;;;;;GAMG;AACH,SAAgB,2BAA2B,CACzC,gBAAwB,EACxB,WAAmB;IAEnB,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,IAAA,aAAK,EACjB,6BAA6B,IAAA,oBAAY,EAAC,WAAW,CAAC,GAAG,CAC1D,CAAC;IAEF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,QAAgB;IAClD,MAAM,MAAM,GAAG,IAAA,0BAAqB,EAAC,QAAQ,CAAC,CAAC;IAC/C,OAAO,IAAA,iBAAU,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACtC,CAAC","sourcesContent":["import { createCacheReadStream } from '../../../util/fs';\nimport { hashStream } from '../../../util/hash';\nimport { escapeRegExp, newlineRegex, regEx } from '../../../util/regex';\n\n/**\n * Parses the SHA256 checksum for a specified package path from the InRelease content.\n *\n * @param inReleaseContent - content of the InRelease file\n * @param packagePath - path of the package file (e.g., 'contrib/binary-amd64/Packages.gz')\n * @returns The SHA256 checksum if found, otherwise undefined\n */\nexport function parseChecksumsFromInRelease(\n  inReleaseContent: string,\n  packagePath: string,\n): string | null {\n  const lines = inReleaseContent.split(newlineRegex);\n  const regex = regEx(\n    `([a-f0-9]{64})\\\\s+\\\\d+\\\\s+${escapeRegExp(packagePath)}$`,\n  );\n\n  for (const line of lines) {\n    const match = regex.exec(line);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\n/**\n * Computes the SHA256 checksum of a specified file.\n *\n * @param filePath - path of the file\n * @returns resolves to the SHA256 checksum\n */\nexport function computeFileChecksum(filePath: string): Promise<string> {\n  const stream = createCacheReadStream(filePath);\n  return hashStream(stream, 'sha256');\n}\n"]}