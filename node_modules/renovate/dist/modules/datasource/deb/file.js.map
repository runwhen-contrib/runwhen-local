{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/deb/file.ts"],"names":[],"mappings":";;AAWA,0BAYC;AAQD,kDAKC;;AApCD,+BAAmC;AACnC,6DAAuC;AAEvC;;;;;;;GAOG;AACI,KAAK,UAAU,OAAO,CAC3B,cAAsB,EACtB,WAAmB,EACnB,UAAkB;IAElB,IAAI,WAAW,KAAK,IAAI,EAAE,CAAC;QACzB,MAAM,MAAM,GAAG,EAAE,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACxD,MAAM,WAAW,GAAG,EAAE,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC1D,MAAM,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAA,kBAAW,GAAE,EAAE,WAAW,CAAC,CAAC;IACxD,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,qCAAqC,WAAW,GAAG,CAAC,CAAC;IACvE,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,mBAAmB,CACvC,QAAgB;IAEhB,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC/C,OAAO,KAAK,EAAE,KAAK,CAAC;AACtB,CAAC","sourcesContent":["import { createUnzip } from 'zlib';\nimport * as fs from '../../../util/fs';\n\n/**\n * Extracts the specified compressed file to the output file.\n *\n * @param compressedFile - The path to the compressed file.\n * @param compression - The compression method used (currently only 'gz' is supported).\n * @param outputFile - The path where the extracted content will be stored.\n * @throws Will throw an error if the compression method is unknown.\n */\nexport async function extract(\n  compressedFile: string,\n  compression: string,\n  outputFile: string,\n): Promise<void> {\n  if (compression === 'gz') {\n    const source = fs.createCacheReadStream(compressedFile);\n    const destination = fs.createCacheWriteStream(outputFile);\n    await fs.pipeline(source, createUnzip(), destination);\n  } else {\n    throw new Error(`Unsupported compression standard '${compression}'`);\n  }\n}\n\n/**\n * Checks if the file exists and retrieves its creation time.\n *\n * @param filePath - The path to the file.\n * @returns The creation time if the file exists, otherwise undefined.\n */\nexport async function getFileCreationTime(\n  filePath: string,\n): Promise<Date | undefined> {\n  const stats = await fs.statCacheFile(filePath);\n  return stats?.ctime;\n}\n"]}