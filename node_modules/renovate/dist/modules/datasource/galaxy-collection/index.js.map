{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/galaxy-collection/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,qEAA8D;AAC9D,kEAA4C;AAC5C,+CAA4C;AAC5C,2CAAsE;AACtE,kFAA4D;AAC5D,8CAA2C;AAE3C,qCAA+E;AAE/E,MAAM,eAAe,GAAG,IAAA,aAAK,EAC3B,kDAAkD,CACnD,CAAC;AAEF,MAAa,0BAA2B,SAAQ,uBAAU;IACxD,MAAM,CAAU,EAAE,GAAG,mBAAmB,CAAC;IAEzC;QACE,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAEiB,qBAAqB,GAAG,IAAI,CAAC;IAE7B,gBAAgB,GAAG,MAAM,CAAC;IAE1B,mBAAmB,GAAG,CAAC,iCAAiC,CAAC,CAAC;IAE1D,iBAAiB,GAAG,gBAAgB,CAAC,EAAE,CAAC;IAExC,uBAAuB,GAAG,IAAI,CAAC;IACxC,oBAAoB,GAC3B,iFAAiF,CAAC;IACpF,qEAAqE;IACrE,2EAA2E;IACzD,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,2EAA2E,CAAC;IAMxE,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAExD,MAAM,UAAU,GACd,eAAe,CAAC,IAAI,CAAC,WAAY,CAAC,EAAE,MAAM,EAAE,UAAU,IAAI,WAAW,CAAC;QAExE,MAAM,OAAO,GAAG,IAAA,yBAAmB,EACjC,IAAA,kBAAY,EACV,WAAY,EACZ,2BAA2B,EAC3B,UAAU,EACV,mBAAmB,EACnB,SAAS,EACT,WAAW,CACZ,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aACvD,WAAW,CAAC,OAAO,EAAE,iBAAQ,CAAC;aAC9B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE,EACvD,yBAAyB,CAC1B,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,EAAE,CAAC;QACZ,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;QAED,MAAM,WAAW,GAAG,IAAA,yBAAmB,EAAC,IAAA,kBAAY,EAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;QAE3E,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aAC3D,WAAW,CAAC,WAAW,EAAE,yBAAgB,CAAC;aAC1C,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE,EAC3D,yBAAyB,CAC1B,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,EAAE,CAAC;QACZ,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACzC,OAAO;gBACL,GAAG,KAAK;gBACR,YAAY,EAAE,WAAW,CAAC,UAAU;aACrC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,qCAAqC;QACrC,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC,GAAG,CAClC,QAAQ,EACR,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,EACtE,EAAE,WAAW,EAAE,CAAC,EAAE,CACnB,CAAC;QAEF,yBAAyB;QACzB,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;QAC5D,0FAA0F;QAE1F,qDAAqD;QACrD,MAAM,yBAAyB,GAAG,gBAAgB,CAAC,IAAI,CACrD,CAAC,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,CACrE,EAAE,SAAS,CAAC;QAEb,OAAO;YACL,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE,yBAAyB;SACrC,CAAC;IACJ,CAAC;IAQK,AAAN,KAAK,CAAC,iBAAiB,CACrB,WAAmB,EACnB,WAAmB,EACnB,YAAqB;QAErB,MAAM,kBAAkB,GAAG,IAAA,yBAAmB,EAC5C,IAAA,kBAAY,EAAC,WAAW,EAAE,YAAY,CAAC,OAAO,CAAC,CAChD,CAAC;QACF,MAAM,EAAE,GAAG,EAAE,kBAAkB,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aAClE,WAAW,CAAC,kBAAkB,EAAE,gCAAuB,CAAC;aACxD,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE,EAC3D,yBAAyB,CAC1B,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,EAAE,CAAC;QACZ,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;QAED,OAAO;YACL,GAAG,kBAAkB;YACrB,YAAY,EAAE,YAAY,CAAC,YAAY;SACxC,CAAC;IACJ,CAAC;;AAxIH,gEAyIC;AA7GO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,0BAA0B,CAAC,EAAE,EAAE;QACxD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,eAAe,WAAW,EAAE;KAC1E,CAAC;6DA4ED;AAQK;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,0BAA0B,CAAC,EAAE,EAAE;QACxD,GAAG,EAAE,CAAC,YAAoB,EAAE,WAAmB,EAAE,YAAqB,EAAE,EAAE,CACxE,qBAAqB,WAAW,IAAI,YAAY,CAAC,OAAO,EAAE;QAC5D,UAAU,EAAE,KAAK,EAAE,SAAS;KAC7B,CAAC;mEA0BD","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as p from '../../../util/promises';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport * as pep440Versioning from '../../versioning/pep440';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { GalaxyV3, GalaxyV3DetailedVersion, GalaxyV3Versions } from './schema';\n\nconst repositoryRegex = regEx(\n  /^\\S+\\/api\\/galaxy\\/content\\/(?<repository>[^/]+)/,\n);\n\nexport class GalaxyCollectionDatasource extends Datasource {\n  static readonly id = 'galaxy-collection';\n\n  constructor() {\n    super(GalaxyCollectionDatasource.id);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly registryStrategy = 'hunt';\n\n  override readonly defaultRegistryUrls = ['https://galaxy.ansible.com/api/'];\n\n  override readonly defaultVersioning = pep440Versioning.id;\n\n  override readonly releaseTimestampSupport = true;\n  override releaseTimestampNote =\n    'The release timestamp is determined from the `created_at` field in the results.';\n  // sourceUrl is returned in each release as well as the ReleaseResult\n  // the one present in release result is the sourceUrl of the latest release\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The `sourceUrl` is determined from the `repository` field in the results.';\n\n  @cache({\n    namespace: `datasource-${GalaxyCollectionDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `getReleases:${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const [namespace, projectName] = packageName.split('.');\n\n    const repository =\n      repositoryRegex.exec(registryUrl!)?.groups?.repository ?? 'published';\n\n    const baseUrl = ensureTrailingSlash(\n      joinUrlParts(\n        registryUrl!,\n        'v3/plugin/ansible/content',\n        repository,\n        'collections/index',\n        namespace,\n        projectName,\n      ),\n    );\n\n    const { val: baseProject, err: baseErr } = await this.http\n      .getJsonSafe(baseUrl, GalaxyV3)\n      .onError((err) => {\n        logger.warn(\n          { url: baseUrl, datasource: this.id, packageName, err },\n          'Error fetching from url',\n        );\n      })\n      .unwrap();\n    if (baseErr) {\n      this.handleGenericErrors(baseErr);\n    }\n\n    const versionsUrl = ensureTrailingSlash(joinUrlParts(baseUrl, 'versions'));\n\n    const { val: rawReleases, err: versionsErr } = await this.http\n      .getJsonSafe(versionsUrl, GalaxyV3Versions)\n      .onError((err) => {\n        logger.warn(\n          { url: versionsUrl, datasource: this.id, packageName, err },\n          'Error fetching from url',\n        );\n      })\n      .unwrap();\n    if (versionsErr) {\n      this.handleGenericErrors(versionsErr);\n    }\n\n    const releases = rawReleases.map((value) => {\n      return {\n        ...value,\n        isDeprecated: baseProject.deprecated,\n      };\n    });\n\n    // asynchronously get release details\n    const enrichedReleases = await p.map(\n      releases,\n      (release) => this.getVersionDetails(packageName, versionsUrl, release),\n      { concurrency: 4 },\n    );\n\n    // filter failed versions\n    const filteredReleases = enrichedReleases.filter(is.truthy);\n    // extract base information which are only provided on the release from the newest release\n\n    // Find the source URL of the highest version release\n    const sourceUrlOfHighestRelease = enrichedReleases.find(\n      (release) => baseProject.highest_version.version === release.version,\n    )?.sourceUrl;\n\n    return {\n      releases: filteredReleases,\n      sourceUrl: sourceUrlOfHighestRelease,\n    };\n  }\n\n  @cache({\n    namespace: `datasource-${GalaxyCollectionDatasource.id}`,\n    key: (_packageName: string, versionsUrl: string, basicRelease: Release) =>\n      `getVersionDetails:${versionsUrl}:${basicRelease.version}`,\n    ttlMinutes: 10080, // 1 week\n  })\n  async getVersionDetails(\n    packageName: string,\n    versionsUrl: string,\n    basicRelease: Release,\n  ): Promise<Release> {\n    const detailedVersionUrl = ensureTrailingSlash(\n      joinUrlParts(versionsUrl, basicRelease.version),\n    );\n    const { val: rawDetailedVersion, err: versionsErr } = await this.http\n      .getJsonSafe(detailedVersionUrl, GalaxyV3DetailedVersion)\n      .onError((err) => {\n        logger.warn(\n          { url: versionsUrl, datasource: this.id, packageName, err },\n          'Error fetching from url',\n        );\n      })\n      .unwrap();\n    if (versionsErr) {\n      this.handleGenericErrors(versionsErr);\n    }\n\n    return {\n      ...rawDetailedVersion,\n      isDeprecated: basicRelease.isDeprecated,\n    };\n  }\n}\n"]}