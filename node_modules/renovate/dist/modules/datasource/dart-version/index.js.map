{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/dart-version/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,+CAA4C;AAC5C,8CAA2C;AAI9B,QAAA,kBAAkB,GAAG,IAAA,aAAK,EAAC,iBAAiB,CAAC,CAAC;AAC3D;;;;GAIG;AACU,QAAA,eAAe,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;AAE9C,MAAa,qBAAsB,SAAQ,uBAAU;IACnD,MAAM,CAAU,EAAE,GAAG,cAAc,CAAC;IAEpC;QACE,KAAK,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAEiB,qBAAqB,GAAG,KAAK,CAAC;IAE9B,mBAAmB,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAEzD,OAAO,GAAG,IAAI,CAAC;IAEhB,QAAQ,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAEpC,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,mDAAmD,CAAC;IAEtD,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,kCAAkC;YAC7C,WAAW;YACX,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI,CAAC;YACH,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACpC,MAAM,IAAI,GAAG,CACX,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAC9B,GAAG,WAAW,gEAAgE,OAAO,wBAAwB,CAC9G,CACF,CAAC,IAAI,CAAC;gBACP,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;IAEO,uBAAuB,CAC7B,OAAe,EACf,QAAkB;QAElB,OAAO,QAAQ;aACZ,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;aAClD,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC;aACjB,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAClB,IACE,OAAO,KAAK,QAAQ;gBACpB,wBAAwB;gBACxB,uBAAe,CAAC,IAAI,CAAC,OAAO,CAAC;gBAC7B,4EAA4E;gBAC5E,iDAAiD;gBACjD,CAAC,OAAO,KAAK,QAAQ,IAAI,0BAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAC1D,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;aACD,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,KAAK,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,kEAAkE;IAC1D,oBAAoB,CAAC,MAAc;QACzC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACjC,CAAC;;AA5EH,sDA6EC","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport type { DartResponse } from './types';\n\nexport const stableVersionRegex = regEx(/^\\d+\\.\\d+\\.\\d+$/);\n/**\n * The server returns old svn versions which would need mapping to a version.\n * They are very old, so we skip them instead.\n * https://github.com/dart-lang/site-www/blob/7d4409c87bb6570b2d8870b20283f81f2b7e08fc/tool/get-dart/dart_sdk_archive/lib/src/svn_versions.dart#L2\n */\nexport const svnVersionRegex = regEx(/^\\d+$/);\n\nexport class DartVersionDatasource extends Datasource {\n  static readonly id = 'dart-version';\n\n  constructor() {\n    super(DartVersionDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://storage.googleapis.com'];\n\n  override readonly caching = true;\n\n  private readonly channels = ['stable', 'beta', 'dev'];\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'We use the URL: https://github.com/dart-lang/sdk.';\n\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    const result: ReleaseResult = {\n      homepage: 'https://dart.dev/',\n      sourceUrl: 'https://github.com/dart-lang/sdk',\n      registryUrl,\n      releases: [],\n    };\n    try {\n      for (const channel of this.channels) {\n        const resp = (\n          await this.http.getJsonUnchecked<DartResponse>(\n            `${registryUrl}/storage/v1/b/dart-archive/o?delimiter=%2F&prefix=channels%2F${channel}%2Frelease%2F&alt=json`,\n          )\n        ).body;\n        const releases = this.getReleasesFromResponse(channel, resp.prefixes);\n        result.releases.push(...releases);\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n\n  private getReleasesFromResponse(\n    channel: string,\n    prefixes: string[],\n  ): Release[] {\n    return prefixes\n      .map((prefix) => this.getVersionFromPrefix(prefix))\n      .filter(is.string)\n      .filter((version) => {\n        if (\n          version === 'latest' ||\n          // skip old svn versions\n          svnVersionRegex.test(version) ||\n          // The API response contains a stable version being released as a non-stable\n          // release. So we filter out these releases here.\n          (channel !== 'stable' && stableVersionRegex.test(version))\n        ) {\n          return false;\n        }\n        return true;\n      })\n      .map((version) => ({ version, isStable: channel === 'stable' }));\n  }\n\n  // Prefix should have a format of \"channels/stable/release/2.9.3/\"\n  private getVersionFromPrefix(prefix: string): string | undefined {\n    const parts = prefix.split('/');\n    return parts[parts.length - 2];\n  }\n}\n"]}