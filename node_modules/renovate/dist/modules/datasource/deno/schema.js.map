{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/deno/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,kDAA8E;AAC9E,6DAAwD;AACxD,uDAAyD;AAG5C,QAAA,UAAU,GAAG,OAAC,CAAC,MAAM,CAAC;IACjC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;CAClB,CAAC,CAAC;AAEU,QAAA,qBAAqB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC5C,IAAI,EAAE,IAAA,yBAAU,EAAC,kBAAU,CAAC;SACzB,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;QAClB,MAAM,MAAM,GAA2B,EAAE,CAAC;QAC1C,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QACvB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;SACD,KAAK,CAAC,EAAE,CAAC;IACZ,QAAQ,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;CAC9B,CAAC,CAAC;AAEU,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;IACf,IAAI,EAAE,OAAC,CAAC,KAAK,CAAC,CAAC,OAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE;IACtB,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC9B,CAAC,CAAC;AAEU,QAAA,4BAA4B,GAAG,OAAC;KAC1C,MAAM,CAAC;IACN,cAAc,EAAE,4BAAoB;IACpC,WAAW,EAAE,0BAAc;IAC3B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;CACpB,CAAC;KACD,SAAS,CACR,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,cAAc,EAAE,EAAW,EAAE;IACtE,IAAI,SAAS,GAAuB,SAAS,CAAC;IAC9C,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC;IACzD,IAAI,IAAI,KAAK,QAAQ,EAAE,CAAC;QACtB,SAAS,GAAG,IAAA,kBAAkB,EAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IACD,OAAO;QACL,OAAO;QACP,MAAM;QACN,gBAAgB;QAChB,SAAS;KACV,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import { z } from 'zod';\nimport { getSourceUrl as getGithubSourceUrl } from '../../../util/github/url';\nimport { LooseArray } from '../../../util/schema-utils';\nimport { MaybeTimestamp } from '../../../util/timestamp';\nimport type { Release } from '../types';\n\nexport const DenoApiTag = z.object({\n  kind: z.string(),\n  value: z.string(),\n});\n\nexport const DenoAPIModuleResponse = z.object({\n  tags: LooseArray(DenoApiTag)\n    .transform((tags) => {\n      const record: Record<string, string> = {};\n      for (const { kind, value } of tags) {\n        record[kind] = value;\n      }\n      return record;\n    })\n    .catch({}),\n  versions: z.array(z.string()),\n});\n\nexport const DenoAPIUploadOptions = z.object({\n  ref: z.string(),\n  type: z.union([z.literal('github'), z.unknown()]),\n  repository: z.string(),\n  subdir: z.string().optional(),\n});\n\nexport const DenoAPIModuleVersionResponse = z\n  .object({\n    upload_options: DenoAPIUploadOptions,\n    uploaded_at: MaybeTimestamp,\n    version: z.string(),\n  })\n  .transform(\n    ({ version, uploaded_at: releaseTimestamp, upload_options }): Release => {\n      let sourceUrl: string | undefined = undefined;\n      const { type, repository, ref: gitRef } = upload_options;\n      if (type === 'github') {\n        sourceUrl = getGithubSourceUrl(repository);\n      }\n      return {\n        version,\n        gitRef,\n        releaseTimestamp,\n        sourceUrl,\n      };\n    },\n  );\n"]}