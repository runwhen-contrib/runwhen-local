{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/deno/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport pMap from 'p-map';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { regEx } from '../../../util/regex';\nimport { joinUrlParts } from '../../../util/url';\nimport * as semanticVersioning from '../../versioning/semver';\nimport { Datasource } from '../datasource';\nimport type { Release } from '../index';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { DenoAPIModuleResponse, DenoAPIModuleVersionResponse } from './schema';\n\nexport class DenoDatasource extends Datasource {\n  static readonly id = 'deno';\n\n  override readonly customRegistrySupport = true;\n\n  override readonly registryStrategy = 'first';\n\n  override readonly defaultVersioning = semanticVersioning.id;\n\n  override readonly defaultRegistryUrls = ['https://apiland.deno.dev'];\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `uploaded_at` field in the results.';\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `repository` field in the results.';\n\n  constructor() {\n    super(DenoDatasource.id);\n  }\n\n  @cache({\n    namespace: `datasource-${DenoDatasource.id}`,\n    key: ({ packageName, registryUrl }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `getReleases:${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const massagedRegistryUrl = registryUrl!;\n\n    const extractResult = regEx(\n      /^(https:\\/\\/deno.land\\/)(?<rawPackageName>[^@\\s]+)/,\n    ).exec(packageName);\n    const rawPackageName = extractResult?.groups?.rawPackageName;\n    if (is.nullOrUndefined(rawPackageName)) {\n      logger.debug(\n        `Could not extract rawPackageName from packageName: \"${packageName}\"`,\n      );\n      return null;\n    }\n\n    // remove third-party prefix if defined. The only internal library is `std` and is available under the same API\n    const massagedPackageName = rawPackageName.replace('x/', '');\n\n    // https://apiland.deno.dev/v2/modules/postgres\n    const moduleAPIURL = joinUrlParts(\n      massagedRegistryUrl,\n      'v2/modules',\n      massagedPackageName,\n    );\n\n    return await this.getReleaseResult(moduleAPIURL);\n  }\n\n  @cache({\n    namespace: `datasource-${DenoDatasource.id}`,\n    key: (moduleAPIURL) => `getReleaseResult:${moduleAPIURL}`,\n  })\n  async getReleaseResult(moduleAPIURL: string): Promise<ReleaseResult> {\n    const detailsCacheKey = `details:${moduleAPIURL}`;\n    const releasesCache: Record<string, Release> =\n      (await packageCache.get(\n        `datasource-${DenoDatasource.id}`,\n        detailsCacheKey,\n      )) ?? {};\n    let cacheModified = false;\n\n    const {\n      body: { versions, tags },\n    } = await this.http.getJson(moduleAPIURL, DenoAPIModuleResponse);\n\n    // get details for the versions\n    const releases = await pMap(\n      versions,\n      async (version) => {\n        const cacheRelease = releasesCache[version];\n        /* v8 ignore next 3: hard to test */\n        if (cacheRelease) {\n          return cacheRelease;\n        }\n\n        // https://apiland.deno.dev/v2/modules/postgres/v0.17.0\n        const url = joinUrlParts(moduleAPIURL, version);\n        const { body: release } = await this.http.getJson(\n          url,\n          DenoAPIModuleVersionResponse.catch(({ error: err }) => {\n            logger.warn(\n              { err, version },\n              'Deno: failed to get version details',\n            );\n            return { version };\n          }),\n        );\n\n        releasesCache[release.version] = release;\n        cacheModified = true;\n\n        return release;\n      },\n      { concurrency: 5 },\n    );\n\n    if (cacheModified) {\n      // 1 week. Releases at Deno are immutable, therefore we can use a long term cache here.\n      await packageCache.set(\n        `datasource-${DenoDatasource.id}`,\n        detailsCacheKey,\n        releasesCache,\n        10080,\n      );\n    }\n\n    return { releases, tags };\n  }\n}\n"]}