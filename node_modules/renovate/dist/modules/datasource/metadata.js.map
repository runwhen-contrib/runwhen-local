{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../lib/modules/datasource/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport parse from 'github-url-from-git';\nimport { detectPlatform } from '../../util/common';\nimport { parseGitUrl } from '../../util/git/url';\nimport * as hostRules from '../../util/host-rules';\nimport { regEx } from '../../util/regex';\nimport { asTimestamp } from '../../util/timestamp';\nimport { isHttpUrl, parseUrl, trimTrailingSlash } from '../../util/url';\nimport { manualChangelogUrls, manualSourceUrls } from './metadata-manual';\nimport type { ReleaseResult } from './types';\n\nconst githubPages = regEx('^https://([^.]+).github.com/([^/]+)$');\nconst gitPrefix = regEx('^git:/?/?');\n\nexport function massageUrl(sourceUrl: string): string {\n  // Replace git@ sourceUrl with https so hostname can be parsed\n  const massagedUrl = massageGitAtUrl(sourceUrl);\n\n  // Check if URL is valid\n  const parsedUrl = parseUrl(massagedUrl);\n  if (!parsedUrl) {\n    return '';\n  }\n\n  if (detectPlatform(massagedUrl) === 'gitlab') {\n    return massageGitlabUrl(sourceUrl);\n  }\n  return massageGithubUrl(sourceUrl);\n}\n\nexport function massageGithubUrl(url: string): string {\n  const massagedUrl = massageGitAtUrl(url);\n\n  return massagedUrl\n    .replace('http:', 'https:')\n    .replace('http+git:', 'https:')\n    .replace('https+git:', 'https:')\n    .replace('ssh://git@', 'https://')\n    .replace(gitPrefix, 'https://')\n    .replace(githubPages, 'https://github.com/$1/$2')\n    .replace('www.github.com', 'github.com')\n    .split('/')\n    .slice(0, 5)\n    .join('/');\n}\n\nfunction massageGitlabUrl(url: string): string {\n  const massagedUrl = massageGitAtUrl(url);\n\n  return massagedUrl\n    .replace('http:', 'https:')\n    .replace(gitPrefix, 'https://')\n    .replace(regEx(/\\/tree\\/.*$/i), '')\n    .replace(regEx(/\\/$/i), '')\n    .replace('.git', '');\n}\n\nfunction massageGitAtUrl(url: string): string {\n  let massagedUrl = url;\n\n  if (url.startsWith('git@')) {\n    massagedUrl = url.replace(':', '/').replace('git@', 'https://');\n  }\n  return massagedUrl;\n}\n\nfunction massageTimestamps(dep: ReleaseResult): void {\n  for (const release of dep.releases || []) {\n    let { releaseTimestamp } = release;\n    delete release.releaseTimestamp;\n    releaseTimestamp = asTimestamp(releaseTimestamp);\n    if (releaseTimestamp) {\n      release.releaseTimestamp = releaseTimestamp;\n    }\n  }\n}\n\nexport function addMetaData(\n  dep: ReleaseResult,\n  datasource: string,\n  packageName: string,\n): void {\n  massageTimestamps(dep);\n\n  const packageNameLowercase = packageName.toLowerCase();\n  const manualChangelogUrl =\n    manualChangelogUrls[datasource]?.[packageNameLowercase];\n  if (manualChangelogUrl) {\n    dep.changelogUrl = manualChangelogUrl;\n  }\n\n  const manualSourceUrl = manualSourceUrls[datasource]?.[packageNameLowercase];\n  if (manualSourceUrl) {\n    dep.sourceUrl = manualSourceUrl;\n  }\n\n  if (dep.sourceUrl && !dep.sourceDirectory) {\n    try {\n      const parsed = parseGitUrl(dep.sourceUrl);\n      if (parsed.filepathtype === 'tree' && parsed.filepath !== '') {\n        dep.sourceUrl = parsed.toString();\n        dep.sourceDirectory = parsed.filepath;\n      }\n    } catch {\n      // ignore invalid urls\n    }\n  }\n\n  if (\n    !dep.sourceUrl &&\n    dep.changelogUrl &&\n    detectPlatform(dep.changelogUrl) === 'github'\n  ) {\n    dep.sourceUrl = dep.changelogUrl;\n  }\n\n  if (!dep.sourceUrl && dep.homepage) {\n    const platform = detectPlatform(dep.homepage);\n    if (platform === 'github' || platform === 'gitlab') {\n      dep.sourceUrl = dep.homepage;\n    }\n  }\n  const extraBaseUrls = [];\n  // istanbul ignore next\n  hostRules.hosts({ hostType: 'github' }).forEach((host) => {\n    extraBaseUrls.push(host, `gist.${host}`);\n  });\n  extraBaseUrls.push('gitlab.com');\n  if (dep.sourceUrl) {\n    // try massaging it\n    const massagedUrl = massageUrl(dep.sourceUrl);\n    if (is.emptyString(massagedUrl)) {\n      delete dep.sourceUrl;\n    } else {\n      // parse from github-url-from-git only supports Github URLs as its name implies\n      dep.sourceUrl =\n        parse(massagedUrl, {\n          extraBaseUrls,\n        }) || dep.sourceUrl;\n      // prefer massaged URL to source URL if the latter does not start with http:// or https://\n      // (e.g. git@somehost.com) and the detected platform is gitlab.\n      // this allows to retrieve changelogs from git hosts other than Github\n      if (\n        !isHttpUrl(dep.sourceUrl) &&\n        detectPlatform(massagedUrl) === 'gitlab'\n      ) {\n        dep.sourceUrl = massagedUrl;\n      }\n    }\n  }\n  if (shouldDeleteHomepage(dep.sourceUrl, dep.homepage)) {\n    delete dep.homepage;\n  }\n  // Clean up any empty urls\n  const urlKeys: (keyof ReleaseResult)[] = [\n    'homepage',\n    'sourceUrl',\n    'changelogUrl',\n    'dependencyUrl',\n  ];\n  for (const urlKey of urlKeys) {\n    const urlVal = dep[urlKey];\n    if (is.string(urlVal) && isHttpUrl(urlVal.trim())) {\n      dep[urlKey] = urlVal.trim() as never;\n    } else {\n      delete dep[urlKey];\n    }\n  }\n}\n\n/**\n * Returns true if\n * 1. it's a github or gitlab url and not a path within the repo.\n * 2. it's equal to sourceURl\n * @param sourceUrl\n * @param homepage\n */\nexport function shouldDeleteHomepage(\n  sourceUrl: string | null | undefined,\n  homepage: string | undefined,\n): boolean {\n  if (is.nullOrUndefined(sourceUrl) || is.undefined(homepage)) {\n    return false;\n  }\n  const massagedSourceUrl = massageUrl(sourceUrl);\n  const platform = detectPlatform(homepage);\n  if (platform === 'github' || platform === 'gitlab') {\n    const sourceUrlParsed = parseUrl(massagedSourceUrl);\n    if (is.nullOrUndefined(sourceUrlParsed)) {\n      return false;\n    }\n    const homepageParsed = parseUrl(homepage);\n    return (\n      homepageParsed !== null &&\n      trimTrailingSlash(homepageParsed.pathname) ===\n        trimTrailingSlash(sourceUrlParsed.pathname)\n    );\n  }\n  return massagedSourceUrl === homepage;\n}\n"]}