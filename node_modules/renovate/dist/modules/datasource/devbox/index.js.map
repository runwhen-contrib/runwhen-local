{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/devbox/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,mFAA8E;AAC9E,6CAA+C;AAC/C,2CAAiD;AACjD,kFAA4D;AAC5D,8CAA2C;AAE3C,qCAA0D;AAC1D,qCAA0C;AAE1C,MAAa,gBAAiB,SAAQ,uBAAU;IAC9C,MAAM,CAAU,EAAE,GAAG,mBAAU,CAAC;IAEhC;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;IACpB,CAAC;IAEiB,qBAAqB,GAAG,IAAI,CAAC;IAC7B,uBAAuB,GAAG,IAAI,CAAC;IAE/B,gBAAgB,GAAG,OAAO,CAAC;IAE3B,iBAAiB,GAAG,gBAAgB,CAAC,EAAE,CAAC;IAExC,mBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;IAE7D,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,GAAG,GAAkB;YACzB,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,yBAAyB,CAAC,CAAC;QAEtE,MAAM,YAAY,GAAG,IAAA,kBAAY,EAC/B,WAAY,EACZ,aAAa,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAC/C,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,uBAAc,CAAC,CAAC;YACvE,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;YACtC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QACxC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,GAAG,YAAY,gBAAS,EAAE,CAAC;gBAC7B,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE,CAAC;oBACrC,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;YACD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QACD,OAAO,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1C,CAAC;;AA5CH,4CA6CC","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { HttpError } from '../../../util/http';\nimport { joinUrlParts } from '../../../util/url';\nimport * as devboxVersioning from '../../versioning/devbox';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl } from './common';\nimport { DevboxResponse } from './schema';\n\nexport class DevboxDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = true;\n  override readonly releaseTimestampSupport = true;\n\n  override readonly registryStrategy = 'first';\n\n  override readonly defaultVersioning = devboxVersioning.id;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const res: ReleaseResult = {\n      releases: [],\n    };\n\n    logger.trace({ registryUrl, packageName }, 'fetching devbox release');\n\n    const devboxPkgUrl = joinUrlParts(\n      registryUrl!,\n      `/pkg?name=${encodeURIComponent(packageName)}`,\n    );\n\n    try {\n      const response = await this.http.getJson(devboxPkgUrl, DevboxResponse);\n      res.releases = response.body.releases;\n      res.homepage = response.body.homepage;\n    } catch (err) {\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode !== 404) {\n          throw new ExternalHostError(err);\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n    return res.releases.length ? res : null;\n  }\n}\n"]}