{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/dart/index.ts"],"names":[],"mappings":";;;AACA,uDAAsD;AACtD,2CAAwD;AACxD,8CAA2C;AAI3C,MAAa,cAAe,SAAQ,uBAAU;IAC5C,MAAM,CAAU,EAAE,GAAG,MAAM,CAAC;IAE5B;QACE,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAEiB,qBAAqB,GAAG,IAAI,CAAC;IAE7B,mBAAmB,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAEpD,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,gFAAgF,CAAC;IACjE,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,uGAAuG,CAAC;IAE1G,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,MAAM,GAAyB,IAAI,CAAC;QACxC,MAAM,MAAM,GAAG,GAAG,IAAA,yBAAmB,EACnC,WAAW,CACZ,gBAAgB,WAAW,EAAE,CAAC;QAE/B,IAAI,GAAG,GAAoC,IAAI,CAAC;QAChD,IAAI,CAAC;YACH,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAa,MAAM,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC;QACvB,IAAI,IAAI,EAAE,CAAC;YACT,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YAClC,MAAM,QAAQ,GAAG,QAAQ;gBACvB,EAAE,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC;gBACvC,EAAE,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;gBACjC,OAAO;gBACP,gBAAgB,EAAE,IAAA,uBAAW,EAAC,SAAS,CAAC;aACzC,CAAC,CAAC,CAAC;YACN,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC;gBACvB,MAAM,GAAG,EAAE,QAAQ,EAAE,CAAC;gBAEtB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC/B,IAAI,OAAO,EAAE,CAAC;oBACZ,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;wBACrB,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;oBACrC,CAAC;oBAED,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;wBACvB,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;oBACxC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;;AA/DH,wCAgEC","sourcesContent":["import type { HttpResponse } from '../../../util/http/types';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { DartResult } from './types';\n\nexport class DartDatasource extends Datasource {\n  static readonly id = 'dart';\n\n  constructor() {\n    super(DartDatasource.id);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly defaultRegistryUrls = ['https://pub.dartlang.org/'];\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `published` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `repository` field of the latest release object in the results.';\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    let result: ReleaseResult | null = null;\n    const pkgUrl = `${ensureTrailingSlash(\n      registryUrl,\n    )}api/packages/${packageName}`;\n\n    let raw: HttpResponse<DartResult> | null = null;\n    try {\n      raw = await this.http.getJsonUnchecked<DartResult>(pkgUrl);\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    const body = raw?.body;\n    if (body) {\n      const { versions, latest } = body;\n      const releases = versions\n        ?.filter(({ retracted }) => !retracted)\n        ?.map(({ version, published }) => ({\n          version,\n          releaseTimestamp: asTimestamp(published),\n        }));\n      if (releases && latest) {\n        result = { releases };\n\n        const pubspec = latest.pubspec;\n        if (pubspec) {\n          if (pubspec.homepage) {\n            result.homepage = pubspec.homepage;\n          }\n\n          if (pubspec.repository) {\n            result.sourceUrl = pubspec.repository;\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}