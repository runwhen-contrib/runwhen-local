{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/java-version/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { HttpError } from '../../../util/http';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport {\n  datasource,\n  defaultRegistryUrl,\n  getImageType,\n  pageSize,\n} from './common';\nimport type { AdoptiumJavaResponse } from './types';\n\nexport class JavaVersionDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  private async getPageReleases(\n    url: string,\n    page: number,\n  ): Promise<Release[] | null> {\n    const pgUrl = `${url}&page=${page}`;\n    try {\n      const pgRes =\n        await this.http.getJsonUnchecked<AdoptiumJavaResponse>(pgUrl);\n      return (\n        pgRes?.body?.versions?.map(({ semver }) => ({\n          version: semver,\n        })) ?? null\n      );\n    } catch (err) {\n      if (\n        page !== 0 &&\n        err instanceof HttpError &&\n        err.response?.statusCode === 404\n      ) {\n        // No more pages\n        return null;\n      }\n\n      throw err;\n    }\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl!}:${getImageType(packageName)}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const imageType = getImageType(packageName);\n    logger.trace(\n      { registryUrl, packageName, imageType },\n      'fetching java release',\n    );\n    // TODO: types (#22198)\n    const url = `${registryUrl!}v3/info/release_versions?page_size=${pageSize}&image_type=${imageType}&project=jdk&release_type=ga&sort_method=DATE&sort_order=DESC`;\n\n    const result: ReleaseResult = {\n      homepage: 'https://adoptium.net',\n      releases: [],\n    };\n    try {\n      let page = 0;\n      let releases = await this.getPageReleases(url, page);\n      while (releases) {\n        result.releases.push(...releases);\n        if (releases.length !== pageSize || page >= 50) {\n          break;\n        }\n        page += 1;\n        releases = await this.getPageReleases(url, page);\n      }\n    } catch (err) {\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode !== 404) {\n          throw new ExternalHostError(err);\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}