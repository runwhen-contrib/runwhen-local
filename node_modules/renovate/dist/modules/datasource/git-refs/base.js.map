{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/git-refs/base.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,2CAAuC;AACvC,4CAAyC;AACzC,qEAA8D;AAC9D,iDAAoE;AACpE,qDAA2D;AAC3D,+CAA8D;AAC9D,+CAA0D;AAC1D,8CAA2C;AAI3C,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,iDAAiD,CAAC,CAAC;AAC1E,MAAM,SAAS,GAAG,IAAA,aAAK,EAAC,qBAAqB,CAAC,CAAC;AAE/C,MAAM,KAAK,GAAG,KAAK,CAAC;AAEpB,2DAA2D;AAC3D,MAAsB,aAAc,SAAQ,uBAAU;IACpD,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;IAElB,YAAY,EAAU;QACpB,KAAK,CAAC,EAAE,CAAC,CAAC;IACZ,CAAC;IAMK,AAAN,KAAK,CAAC,UAAU,CAAC,EACf,WAAW,GACO;QAClB,MAAM,oCAAoC,GAAG,IAAA,iCAA0B,EAAC;YACtE,IAAI,CAAC,EAAE;SACR,CAAC,CAAC;QACH,MAAM,MAAM,GAAG;YACb,kCAAkC;YAClC,GAAG,OAAO,CAAC,GAAG;YACd,8BAA8B;YAC9B,GAAG,oCAAoC;SACxC,CAAC;QACF,MAAM,GAAG,GAAG,IAAA,sBAAS,EAAC,IAAA,wBAAe,GAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAErD,oBAAoB;QACpB,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC;YACpC,IAAA,2BAAqB,EAAC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC;SAC5C,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAG,QAAQ;aAClB,IAAI,EAAE;aACN,KAAK,CAAC,oBAAY,CAAC;aACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;gBAClB,OAAO;oBACL,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;oBACvB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;oBACzB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;iBACxB,CAAC;YACJ,CAAC;YACD,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;gBAClB,OAAO;oBACL,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;iBACxB,CAAC;YACJ,CAAC;YACD,eAAM,CAAC,KAAK,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;aACD,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC;aACjB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAEtE,OAAO,IAAI,CAAC;IACd,CAAC;;AA7DH,sCA8DC;AAnDO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,KAAK,EAAE;QAChC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;KACzD,CAAC;+CAmDD","sourcesContent":["import is from '@sindresorhus/is';\nimport { simpleGit } from 'simple-git';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { getGitEnvironmentVariables } from '../../../util/git/auth';\nimport { simpleGitConfig } from '../../../util/git/config';\nimport { getRemoteUrlWithToken } from '../../../util/git/url';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig } from '../types';\nimport type { RawRefs } from './types';\n\nconst refMatch = regEx(/(?<hash>.*?)\\s+refs\\/(?<type>.*?)\\/(?<value>.*)/);\nconst headMatch = regEx(/(?<hash>.*?)\\s+HEAD/);\n\nconst gitId = 'git';\n\n// TODO: extract to a separate directory structure (#10532)\nexport abstract class GitDatasource extends Datasource {\n  static id = gitId;\n\n  constructor(id: string) {\n    super(id);\n  }\n\n  @cache({\n    namespace: `datasource-${gitId}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getRawRefs({\n    packageName,\n  }: GetReleasesConfig): Promise<RawRefs[] | null> {\n    const gitSubmoduleAuthEnvironmentVariables = getGitEnvironmentVariables([\n      this.id,\n    ]);\n    const gitEnv = {\n      // pass all existing env variables\n      ...process.env,\n      // add all known git Variables\n      ...gitSubmoduleAuthEnvironmentVariables,\n    };\n    const git = simpleGit(simpleGitConfig()).env(gitEnv);\n\n    // fetch remote tags\n    const lsRemote = await git.listRemote([\n      getRemoteUrlWithToken(packageName, this.id),\n    ]);\n    if (!lsRemote) {\n      return null;\n    }\n\n    const refs = lsRemote\n      .trim()\n      .split(newlineRegex)\n      .map((line) => line.trim())\n      .map((line) => {\n        let match = refMatch.exec(line);\n        if (match?.groups) {\n          return {\n            type: match.groups.type,\n            value: match.groups.value,\n            hash: match.groups.hash,\n          };\n        }\n        match = headMatch.exec(line);\n        if (match?.groups) {\n          return {\n            type: '',\n            value: 'HEAD',\n            hash: match.groups.hash,\n          };\n        }\n        logger.trace(`malformed ref: ${line}`);\n        return null;\n      })\n      .filter(is.truthy)\n      .filter((ref) => ref.type !== 'pull' && !ref.value.endsWith('^{}'));\n\n    return refs;\n  }\n}\n"]}