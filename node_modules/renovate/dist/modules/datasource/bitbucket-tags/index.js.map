{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/bitbucket-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport type { PackageCacheNamespace } from '../../../util/cache/package/types';\nimport { BitbucketHttp } from '../../../util/http/bitbucket';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { RepoInfo } from '../../platform/bitbucket/schema';\nimport type { PagedResult } from '../../platform/bitbucket/types';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport type { BitbucketCommit, BitbucketTag } from './types';\n\nexport class BitbucketTagsDatasource extends Datasource {\n  static readonly id = 'bitbucket-tags';\n\n  bitbucketHttp = new BitbucketHttp(BitbucketTagsDatasource.id);\n\n  static readonly customRegistrySupport = true;\n\n  static readonly registryStrategy = 'first';\n\n  static readonly defaultRegistryUrls = ['https://bitbucket.org'];\n\n  static readonly releaseTimestampSupport = true;\n  static readonly releaseTimestampNote =\n    'The release timestamp is determined from the `date` field in the results.';\n  static readonly sourceUrlSupport = 'package';\n  static readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  static readonly cacheNamespace: PackageCacheNamespace = `datasource-${BitbucketTagsDatasource.id}`;\n\n  constructor() {\n    super(BitbucketTagsDatasource.id);\n  }\n\n  static getRegistryURL(registryUrl?: string): string {\n    // fallback to default API endpoint if custom not provided\n    return registryUrl ?? this.defaultRegistryUrls[0];\n  }\n\n  static getCacheKey(\n    registryUrl: string | undefined,\n    repo: string,\n    type: string,\n  ): string {\n    return `${BitbucketTagsDatasource.getRegistryURL(\n      registryUrl,\n    )}:${repo}:${type}`;\n  }\n\n  static getSourceUrl(packageName: string, registryUrl?: string): string {\n    const url = BitbucketTagsDatasource.getRegistryURL(registryUrl);\n    const normalizedUrl = ensureTrailingSlash(url);\n    return `${normalizedUrl}${packageName}`;\n  }\n\n  // getReleases fetches list of tags for the repository\n  @cache({\n    namespace: BitbucketTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      BitbucketTagsDatasource.getCacheKey(registryUrl, packageName, 'tags'),\n  })\n  async getReleases({\n    registryUrl,\n    packageName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const url = `/2.0/repositories/${repo}/refs/tags`;\n    const bitbucketTags = (\n      await this.bitbucketHttp.getJsonUnchecked<PagedResult<BitbucketTag>>(\n        url,\n        {\n          paginate: true,\n        },\n      )\n    ).body.values;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: BitbucketTagsDatasource.getSourceUrl(repo, registryUrl),\n      registryUrl: BitbucketTagsDatasource.getRegistryURL(registryUrl),\n      releases: bitbucketTags.map(({ name, target }) => ({\n        version: name,\n        gitRef: name,\n        releaseTimestamp: asTimestamp(target?.date),\n      })),\n    };\n\n    return dependency;\n  }\n\n  // getTagCommit fetched the commit has for specified tag\n  @cache({\n    namespace: BitbucketTagsDatasource.cacheNamespace,\n    key: (registryUrl: string | undefined, repo: string, tag: string): string =>\n      BitbucketTagsDatasource.getCacheKey(registryUrl, repo, `tag-${tag}`),\n  })\n  async getTagCommit(\n    _registryUrl: string | undefined,\n    repo: string,\n    tag: string,\n  ): Promise<string | null> {\n    const url = `/2.0/repositories/${repo}/refs/tags/${tag}`;\n\n    const bitbucketTag = (\n      await this.bitbucketHttp.getJsonUnchecked<BitbucketTag>(url)\n    ).body;\n\n    return bitbucketTag.target?.hash ?? null;\n  }\n\n  @cache({\n    namespace: BitbucketTagsDatasource.cacheNamespace,\n    key: (registryUrl: string, repo: string) =>\n      BitbucketTagsDatasource.getCacheKey(registryUrl, repo, 'mainbranch'),\n    ttlMinutes: 60,\n  })\n  async getMainBranch(_registryUrl: string, repo: string): Promise<string> {\n    return (\n      await this.bitbucketHttp.getJson(`/2.0/repositories/${repo}`, RepoInfo)\n    ).body.mainbranch;\n  }\n\n  // getDigest fetched the latest commit for repository main branch\n  // however, if newValue is provided, then getTagCommit is called\n  @cache({\n    namespace: BitbucketTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: DigestConfig) =>\n      BitbucketTagsDatasource.getCacheKey(registryUrl, packageName, 'digest'),\n  })\n  override async getDigest(\n    { packageName: repo, registryUrl }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    if (newValue?.length) {\n      return this.getTagCommit(registryUrl, repo, newValue);\n    }\n\n    const mainBranch = await this.getMainBranch(\n      BitbucketTagsDatasource.getRegistryURL(registryUrl),\n      repo,\n    );\n\n    const url = `/2.0/repositories/${repo}/commits/${mainBranch}`;\n    const bitbucketCommits = (\n      await this.bitbucketHttp.getJsonUnchecked<PagedResult<BitbucketCommit>>(\n        url,\n      )\n    ).body;\n\n    if (bitbucketCommits.values.length === 0) {\n      return null;\n    }\n\n    return bitbucketCommits.values[0].hash;\n  }\n}\n"]}