{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/bitrise/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,qEAA8D;AAC9D,iDAAsD;AACtD,+CAAoD;AACpD,sDAAuD;AACvD,iDAAkD;AAClD,2CAAiD;AACjD,yDAAqE;AACrE,6EAA6C;AAC7C,8CAA2C;AAE3C,qCAA2C;AAE3C,MAAa,iBAAkB,SAAQ,uBAAU;IAC/C,MAAM,CAAU,EAAE,GAAG,SAAS,CAAC;IAEb,IAAI,CAAa;IAEnC;QACE,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAE5B,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IAEiB,qBAAqB,GAAG,IAAI,CAAC;IAE7B,mBAAmB,GAAG;QACtC,mDAAmD;KACpD,CAAC;IAEgB,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,mFAAmF,CAAC;IACpE,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,qGAAqG,CAAC;IAOlG,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG,IAAA,iBAAW,EAAC,WAAW,CAAC,CAAC;QAC3C,IAAI,IAAA,uBAAc,EAAC,WAAW,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC7C,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,GAAG,SAAS,CAAC,MAAM,oDAAoD,CACxE,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC5D,MAAM,UAAU,GACd,SAAS,CAAC,QAAQ,KAAK,YAAY;YACjC,CAAC,CAAC,wBAAwB;YAC1B,CAAC,CAAC,WAAW,SAAS,CAAC,QAAQ,SAAS,CAAC;QAC7C,MAAM,UAAU,GAAG,IAAA,kBAAY,EAC7B,UAAU,EACV,OAAO,EACP,SAAS,CAAC,SAAS,EACnB,gBAAgB,EAChB,mBAAmB,CACpB,CAAC;QAEF,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAClD,UAAU,EACV,8BAAqB,CACtB,CAAC;QAEF,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;YAC1B,eAAM,CAAC,IAAI,CACT,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,EACrC,sDAAsD,CACvD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,KAAK,MAAM,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CACrD,gBAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAC7B,EAAE,CAAC;YACF,MAAM,OAAO,GAAG,IAAA,kBAAY,EAAC,UAAU,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACtE,wCAAwC;YACxC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,8BAAqB,CAAC,CAAC;YACzE,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,CAAC;gBACzB,eAAM,CAAC,IAAI,CACT,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,EAC5B,mDAAmD,CACpD,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;gBAC/B,eAAM,CAAC,IAAI,CACT,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,EACrD,mDAAmD,CACpD,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,OAAO,GAAG,IAAA,mBAAU,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,wBAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEzE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,UAAU,CAAC,IAAI;gBACxB,gBAAgB,EAAE,YAAY;gBAC9B,SAAS,EAAE,eAAe;aAC3B,CAAC,CAAC;QACL,CAAC;QAED,qCAAqC;QACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO;YACL,GAAG,MAAM;YACT,QAAQ,EAAE,yCAAyC,WAAW,EAAE;SACjE,CAAC;IACJ,CAAC;;AApHH,8CAqHC;AAxFO;IALL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,iBAAiB,CAAC,EAAE,EAAE;QAC/C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE,CACvD,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;oDAwFD","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { detectPlatform } from '../../../util/common';\nimport { parseGitUrl } from '../../../util/git/url';\nimport { GithubHttp } from '../../../util/http/github';\nimport { fromBase64 } from '../../../util/string';\nimport { joinUrlParts } from '../../../util/url';\nimport { GithubContentResponse } from '../../platform/github/schema';\nimport semver from '../../versioning/semver';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { BitriseStepFile } from './schema';\n\nexport class BitriseDatasource extends Datasource {\n  static readonly id = 'bitrise';\n\n  override readonly http: GithubHttp;\n\n  constructor() {\n    super(BitriseDatasource.id);\n\n    this.http = new GithubHttp(this.id);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly defaultRegistryUrls = [\n    'https://github.com/bitrise-io/bitrise-steplib.git',\n  ];\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `published_at` field in the results.';\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `source_code_url` field of the release object in the results.';\n\n  @cache({\n    namespace: `datasource-${BitriseDatasource.id}`,\n    key: ({ packageName, registryUrl }: GetReleasesConfig) =>\n      `${registryUrl}/${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const parsedUrl = parseGitUrl(registryUrl);\n    if (detectPlatform(registryUrl) !== 'github') {\n      logger.once.warn(\n        `${parsedUrl.source} is not a supported Git hoster for this datasource`,\n      );\n      return null;\n    }\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    const massagedPackageName = encodeURIComponent(packageName);\n    const baseApiURL =\n      parsedUrl.resource === 'github.com'\n        ? 'https://api.github.com'\n        : `https://${parsedUrl.resource}/api/v3`;\n    const packageUrl = joinUrlParts(\n      baseApiURL,\n      'repos',\n      parsedUrl.full_name,\n      'contents/steps',\n      massagedPackageName,\n    );\n\n    const { body: packageRaw } = await this.http.getJson(\n      packageUrl,\n      GithubContentResponse,\n    );\n\n    if (!is.array(packageRaw)) {\n      logger.warn(\n        { data: packageRaw, url: packageUrl },\n        'Got unexpected response for Bitrise package location',\n      );\n      return null;\n    }\n\n    for (const versionDir of packageRaw.filter((element) =>\n      semver.isValid(element.name),\n    )) {\n      const stepUrl = joinUrlParts(packageUrl, versionDir.name, 'step.yml');\n      // TODO use getRawFile when ready #30155\n      const { body } = await this.http.getJson(stepUrl, GithubContentResponse);\n      if (!('content' in body)) {\n        logger.warn(\n          { data: body, url: stepUrl },\n          'Got unexpected response for Bitrise step location',\n        );\n        return null;\n      }\n      if (body.encoding !== 'base64') {\n        logger.warn(\n          { encoding: body.encoding, data: body, url: stepUrl },\n          `Got unexpected encoding for Bitrise step location`,\n        );\n        return null;\n      }\n\n      const content = fromBase64(body.content);\n      const { published_at, source_code_url } = BitriseStepFile.parse(content);\n\n      result.releases.push({\n        version: versionDir.name,\n        releaseTimestamp: published_at,\n        sourceUrl: source_code_url,\n      });\n    }\n\n    // if we have no releases return null\n    if (!result.releases.length) {\n      return null;\n    }\n\n    return {\n      ...result,\n      homepage: `https://bitrise.io/integrations/steps/${packageName}`,\n    };\n  }\n}\n"]}