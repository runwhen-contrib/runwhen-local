{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/helm/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { detectPlatform } from '../../../util/common';\nimport { parseGitUrl } from '../../../util/git/url';\nimport { regEx } from '../../../util/regex';\nimport { LooseRecord } from '../../../util/schema-utils';\nimport { MaybeTimestamp } from '../../../util/timestamp';\nimport type { Release } from '../types';\n\nconst HelmReleaseSchema = z.object({\n  version: z.string(),\n  created: MaybeTimestamp,\n  digest: z.string().optional().catch(undefined),\n  home: z.string().optional().catch(undefined),\n  sources: z.array(z.string()).catch([]),\n  urls: z.array(z.string()).catch([]),\n});\ntype HelmRelease = z.infer<typeof HelmReleaseSchema>;\n\nconst chartRepo = regEx(/charts?|helm|helm-charts/i);\n\nfunction isPossibleChartRepo(url: string): boolean {\n  if (detectPlatform(url) === null) {\n    return false;\n  }\n\n  const parsed = parseGitUrl(url);\n  return chartRepo.test(parsed.name);\n}\n\nconst githubRelease = regEx(\n  /^(https:\\/\\/github\\.com\\/[^/]+\\/[^/]+)\\/releases\\//,\n);\n\nfunction getSourceUrl(release: HelmRelease): string | undefined {\n  // it's a github release :)\n  const [githubUrl] = release.urls;\n  const releaseMatch = githubRelease.exec(githubUrl);\n  if (releaseMatch) {\n    return releaseMatch[1];\n  }\n\n  if (release.home && isPossibleChartRepo(release.home)) {\n    return release.home;\n  }\n\n  for (const url of release.sources) {\n    if (isPossibleChartRepo(url)) {\n      return url;\n    }\n  }\n\n  // fallback\n  return release.sources[0];\n}\n\nexport const HelmRepositorySchema = z\n  .object({\n    entries: LooseRecord(\n      z.string(),\n      HelmReleaseSchema.array()\n        .min(1)\n        .transform((helmReleases) => {\n          const latestRelease = helmReleases[0];\n          const homepage = latestRelease.home;\n          const sourceUrl = getSourceUrl(latestRelease);\n          const releases = helmReleases.map(\n            ({\n              version,\n              created: releaseTimestamp,\n              digest: newDigest,\n            }): Release => ({\n              version,\n              releaseTimestamp,\n              newDigest,\n            }),\n          );\n          return { homepage, sourceUrl, releases };\n        }),\n    ),\n  })\n  .transform(({ entries }) => entries);\n\nexport type HelmRepositoryData = z.infer<typeof HelmRepositorySchema>;\n"]}