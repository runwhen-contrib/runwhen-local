{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/aws-rds/index.ts"],"names":[],"mappings":";;;;AAAA,oDAG6B;AAC7B,qEAA8D;AAC9D,6CAA0C;AAC1C,8CAA2C;AAG3C,MAAa,gBAAiB,SAAQ,uBAAU;IAC9C,MAAM,CAAU,EAAE,GAAG,SAAS,CAAC;IAEb,OAAO,GAAG,IAAI,CAAC;IAEhB,GAAG,CAAkB;IAEtC;QACE,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,WAAI,CAAC,GAAG,EAAE,CAAC,IAAI,sBAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,CAAC;IAMK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EAAE,gBAAgB,GACX;QAClB,MAAM,GAAG,GAAG,IAAI,4CAA+B,CAAC;YAC9C,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;SACtC,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,IAAI,EAAE,CAAC;QACjD,OAAO;YACL,QAAQ,EAAE,QAAQ;iBACf,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC;iBAC1C,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACjB,OAAO,EAAE,OAAO,CAAC,aAAc;gBAC/B,YAAY,EAAE,OAAO,CAAC,MAAM,KAAK,YAAY;aAC9C,CAAC,CAAC;SACN,CAAC;IACJ,CAAC;;AAhCH,4CAiCC;AAjBO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,gBAAgB,CAAC,EAAE,EAAE;QAC9C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,eAAe,WAAW,EAAE;KAC1E,CAAC;mDAiBD","sourcesContent":["import {\n  DescribeDBEngineVersionsCommand,\n  RDSClient,\n} from '@aws-sdk/client-rds';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Lazy } from '../../../util/lazy';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\n\nexport class AwsRdsDatasource extends Datasource {\n  static readonly id = 'aws-rds';\n\n  override readonly caching = true;\n\n  private readonly rds: Lazy<RDSClient>;\n\n  constructor() {\n    super(AwsRdsDatasource.id);\n    this.rds = new Lazy(() => new RDSClient({}));\n  }\n\n  @cache({\n    namespace: `datasource-${AwsRdsDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `getReleases:${packageName}`,\n  })\n  async getReleases({\n    packageName: serializedFilter,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const cmd = new DescribeDBEngineVersionsCommand({\n      Filters: JSON.parse(serializedFilter),\n    });\n    const response = await this.rds.getValue().send(cmd);\n    const versions = response.DBEngineVersions ?? [];\n    return {\n      releases: versions\n        .filter((version) => version.EngineVersion)\n        .map((version) => ({\n          version: version.EngineVersion!,\n          isDeprecated: version.Status === 'deprecated',\n        })),\n    };\n  }\n}\n"]}