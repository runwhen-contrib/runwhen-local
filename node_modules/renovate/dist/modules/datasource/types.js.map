{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/modules/datasource/types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  ConstraintsFilter,\n  CustomDatasourceConfig,\n} from '../../config/types';\nimport type { ModuleApi } from '../../types';\nimport type { Timestamp } from '../../util/timestamp';\n\nexport interface GetDigestInputConfig {\n  datasource: string;\n  packageName: string;\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[] | null;\n  registryUrl?: string;\n  lookupName?: string;\n  additionalRegistryUrls?: string[];\n  currentValue?: string;\n  currentDigest?: string;\n  replacementName?: string;\n}\n\nexport interface DigestConfig {\n  packageName: string;\n  lookupName?: string;\n  registryUrl?: string;\n  currentValue?: string;\n  currentDigest?: string;\n}\n\nexport interface GetReleasesConfig {\n  customDatasources?: Record<string, CustomDatasourceConfig>;\n  datasource?: string;\n  packageName: string;\n  registryUrl?: string;\n  currentValue?: string;\n}\n\nexport interface GetPkgReleasesConfig {\n  customDatasources?: Record<string, CustomDatasourceConfig>;\n  npmrc?: string;\n  defaultRegistryUrls?: string[];\n  registryUrls?: string[] | null;\n  additionalRegistryUrls?: string[];\n  datasource: string;\n  packageName: string;\n  currentValue?: string;\n  versioning?: string;\n  extractVersion?: string;\n  versionCompatibility?: string;\n  currentCompatibility?: string;\n  constraints?: Record<string, string>;\n  replacementName?: string;\n  replacementVersion?: string;\n  constraintsFiltering?: ConstraintsFilter;\n  registryStrategy?: RegistryStrategy;\n}\n\nexport interface Release {\n  changelogUrl?: string;\n  checksumUrl?: string;\n  downloadUrl?: string;\n  gitRef?: string;\n  isDeprecated?: boolean;\n  isStable?: boolean;\n  releaseTimestamp?: Timestamp | null;\n  version: string;\n  /** The original value to which `extractVersion` was applied */\n  versionOrig?: string;\n  newDigest?: string | undefined;\n  constraints?: Record<string, string[]>;\n  dependencies?: Record<string, string>;\n  devDependencies?: Record<string, string>;\n  registryUrl?: string;\n  sourceUrl?: string | undefined;\n  sourceDirectory?: string;\n  currentAge?: string;\n  isLatest?: boolean;\n}\n\nexport interface ReleaseResult {\n  deprecationMessage?: string;\n  isPrivate?: boolean;\n  releases: Release[];\n  tags?: Record<string, string> | undefined;\n  // URL metadata\n  changelogUrl?: string;\n  dependencyUrl?: string;\n  homepage?: string | undefined;\n  gitRef?: string;\n  sourceUrl?: string | null;\n  sourceDirectory?: string;\n  registryUrl?: string;\n  replacementName?: string;\n  replacementVersion?: string;\n  lookupName?: string;\n  packageScope?: string;\n  bumpedAt?: Timestamp;\n}\n\nexport interface PostprocessReleaseConfig {\n  packageName: string;\n  registryUrl: string | null;\n}\n\nexport type PostprocessReleaseResult = Release | 'reject';\n\nexport type RegistryStrategy = 'first' | 'hunt' | 'merge';\nexport type SourceUrlSupport = 'package' | 'release' | 'none';\nexport interface DatasourceApi extends ModuleApi {\n  id: string;\n  getDigest?(config: DigestConfig, newValue?: string): Promise<string | null>;\n  getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null>;\n  defaultRegistryUrls?: string[] | (() => string[]);\n  defaultVersioning?: string | undefined;\n  defaultConfig?: Record<string, unknown> | undefined;\n\n  /**\n   * Strategy to use when multiple registryUrls are available to the datasource.\n   * - `first`: only the first registryUrl will be tried and others ignored\n   * - `hunt`: registryUrls will be tried in order until one returns a result\n   * - `merge`: all registryUrls will be tried and the results merged if more than one returns a result\n   */\n  registryStrategy?: RegistryStrategy | undefined;\n\n  /**\n   * Whether custom registryUrls are allowed.\n   */\n  customRegistrySupport: boolean;\n\n  /**\n   * Whether release timestamp can be returned.\n   */\n  releaseTimestampSupport: boolean;\n  /**\n   * Notes on how release timestamp is determined.\n   */\n  releaseTimestampNote?: string;\n\n  /**\n   * Whether sourceURL can be returned.\n   */\n  sourceUrlSupport: SourceUrlSupport;\n  /**\n   * Notes on how sourceURL is determined.\n   */\n  sourceUrlNote?: string;\n\n  /**\n   * Whether to perform caching in the datasource index/wrapper or not.\n   * true: datasoure index wrapper should cache all results (based on registryUrl/packageName)\n   * false: caching is not performed, or performed within the datasource implementation\n   */\n  caching?: boolean | undefined;\n\n  /**\n   * When the candidate for update is formed, this method could be called\n   * to fetch additional information such as `releaseTimestamp`.\n   *\n   * Also, the release could be checked (and potentially rejected)\n   * via some datasource-specific external call.\n   *\n   * In case of reject, the next candidate release is selected,\n   * and `postprocessRelease` is called again.\n   *\n   * Rejection must happen only when the release will lead to downstream error,\n   * e.g. the release turned out to be yanked or doesn't exist for some reason.\n   *\n   * In other cases, the original `Release` parameter should be returned.\n   */\n  postprocessRelease(\n    config: PostprocessReleaseConfig,\n    release: Release,\n  ): Promise<PostprocessReleaseResult>;\n}\n"]}