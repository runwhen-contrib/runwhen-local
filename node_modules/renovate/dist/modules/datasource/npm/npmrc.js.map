{"version":3,"file":"npmrc.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/npm/npmrc.ts"],"names":[],"mappings":";;AAmCA,8DASC;AAED,kDA4EC;AAED,4BAyCC;AAED,gDAaC;AAED,8CAQC;;AA9LD,gEAA2B;AAC3B,kEAAkC;AAClC,sDAAsB;AACtB,mDAAsD;AAEtD,4CAAyC;AAEzC,4EAAsD;AACtD,+CAA4C;AAC5C,iDAAkD;AAClD,2CAAmE;AACnE,qCAA+C;AAG/C,IAAI,KAAK,GAAwB,EAAE,CAAC;AACpC,IAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,IAAI,YAAY,GAAkB,EAAE,CAAC;AAErC,SAAS,UAAU,CAAC,KAAU,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG;IAC/C,wCAAwC;IACxC,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,qBAAqB,CAAC,CAAC;IAE9C,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE;QACzD,IAAI,GAAG,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE,CAAC;YAClC,eAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,iCAAiC,CAAC,CAAC;YAC1D,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,yBAAyB,CAAC,KAAa;IACrD,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC1C,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5B,OAAO,UAAU,GAAG,SAAS,CAAC;QAChC,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,mBAAmB,CAAC,KAA0B;IAC5D,MAAM,KAAK,GAAe;QACxB,SAAS,EAAE,EAAE;QACb,YAAY,EAAE,EAAE;KACjB,CAAC;IACF,qBAAqB;IACrB,MAAM,QAAQ,GAAG,KAAK,CAAC;IACvB,MAAM,KAAK,GAA6B,EAAE,CAAC;IAC3C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACjD,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,SAAS;QACX,CAAC;QACD,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpB,SAAS,GAAG,yBAAyB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,IAAI,GAAa,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC9C,IAAI,OAAO,KAAK,YAAY,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;YACpD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;gBACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YAC1B,CAAC;QACH,CAAC;aAAM,IAAI,OAAO,KAAK,UAAU,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACxB,CAAC;aAAM,IAAI,OAAO,KAAK,WAAW,EAAE,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,IAAA,mBAAU,EAAC,KAAK,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,SAAS,CAAC,qBAAqB;QACjC,CAAC;QACD,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;IAC1B,CAAC;IACD,KAAK,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACtD,MAAM,QAAQ,GAAG,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC;QACvC,IAAI,SAAS,EAAE,CAAC;YACd,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACjC,CAAC;QACD,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IACD,wBAAwB;IACxB,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAC3B,mEAAmE;IACnE,IAAI,YAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC;QAChC,IAAI,IAAA,eAAS,EAAC,QAAQ,CAAC,EAAE,CAAC;YACxB,mBAAmB;YACnB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;gBACvB,gBAAgB;gBAChB,YAAY,EAAE,CAAC,QAAQ,CAAC;aACzB,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IACD,iCAAiC;IACjC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACjD,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,SAAS;QACX,CAAC;QACD,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAI,OAAO,KAAK,UAAU,IAAI,QAAQ,CAAC,MAAM,IAAI,YAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1E,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,IAAA,eAAS,EAAC,KAAK,CAAC,EAAE,CAAC;gBACrB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;oBACvB,gBAAgB;oBAChB,iBAAiB,EAAE,CAAC,GAAG,KAAK,KAAK,CAAC;oBAClC,YAAY,EAAE,CAAC,KAAK,CAAC;iBACtB,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,eAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,6BAA6B,CAAC,CAAC;YACzE,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,QAAQ,CAAC,KAAc;IACrC,IAAI,KAAK,EAAE,CAAC;QACV,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QACD,MAAM,aAAa,GAAG,KAAK,CAAC;QAC5B,QAAQ,GAAG,KAAK,CAAC;QACjB,eAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC9B,KAAK,GAAG,aAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QACtD,MAAM,YAAY,GAAG,qBAAY,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtD,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/C,IACE,CAAC,YAAY;gBACb,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACxB,YAAE,CAAC,MAAM,CAAC,GAAG,CAAC;gBACd,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,EACzB,CAAC;gBACD,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,GAAG,EAAE,EACZ,oDAAoD,CACrD,CAAC;gBACF,KAAK,GAAG,aAAa,CAAC;gBACtB,OAAO;YACT,CAAC;QACH,CAAC;QACD,IAAI,YAAY,EAAE,CAAC;YACjB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACrC,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;QACD,MAAM,UAAU,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,UAAU,CAAC,SAAS,EAAE,MAAM,EAAE,CAAC;YACjC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtE,CAAC;QACD,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;IACzC,CAAC;SAAM,IAAI,KAAK,EAAE,CAAC;QACjB,eAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAChC,KAAK,GAAG,EAAE,CAAC;QACX,QAAQ,GAAG,EAAE,CAAC;QACd,YAAY,GAAG,EAAE,CAAC;IACpB,CAAC;AACH,CAAC;AAED,SAAgB,kBAAkB,CAAC,WAAmB;IACpD,IAAI,WAAW,GAAG,4BAAmB,CAAC,CAAC,CAAC,CAAC;IACzC,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;QAChC,MAAM,EAAE,iBAAiB,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QACjD,IACE,CAAC,iBAAiB;YAClB,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EACxE,CAAC;YACD,yBAAyB;YACzB,WAAW,GAAG,YAAa,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAgB,iBAAiB,CAC/B,WAAmB,EACnB,WAAmB;IAEnB,OAAO,kBAAG,CAAC,OAAO,CAChB,IAAA,yBAAmB,EAAC,WAAW,CAAC,EAChC,kBAAkB,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAC5D,CAAC;AACJ,CAAC","sourcesContent":["import url from 'node:url';\nimport is from '@sindresorhus/is';\nimport ini from 'ini';\nimport { GlobalConfig } from '../../../config/global';\nimport type { PackageRule } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport * as hostRules from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { fromBase64 } from '../../../util/string';\nimport { ensureTrailingSlash, isHttpUrl } from '../../../util/url';\nimport { defaultRegistryUrls } from './common';\nimport type { NpmrcRules } from './types';\n\nlet npmrc: Record<string, any> = {};\nlet npmrcRaw = '';\nlet packageRules: PackageRule[] = [];\n\nfunction envReplace(value: any, env = process.env): any {\n  /* v8 ignore next 3 -- TODO: add test */\n  if (!is.string(value)) {\n    return value;\n  }\n\n  const ENV_EXPR = regEx(/(\\\\*)\\$\\{([^}]+)\\}/g);\n\n  return value.replace(ENV_EXPR, (match, _esc, envVarName) => {\n    if (env[envVarName] === undefined) {\n      logger.warn({ match }, 'Failed to replace env in config');\n      throw new Error('env-replace');\n    }\n    return env[envVarName];\n  });\n}\n\nexport function getMatchHostFromNpmrcHost(input: string): string {\n  if (input.startsWith('//')) {\n    const matchHost = input.replace('//', '');\n    if (matchHost.includes('/')) {\n      return 'https://' + matchHost;\n    }\n    return matchHost;\n  }\n  return input;\n}\n\nexport function convertNpmrcToRules(npmrc: Record<string, any>): NpmrcRules {\n  const rules: NpmrcRules = {\n    hostRules: [],\n    packageRules: [],\n  };\n  // Generate hostRules\n  const hostType = 'npm';\n  const hosts: Record<string, HostRule> = {};\n  for (const [key, value] of Object.entries(npmrc)) {\n    if (!is.nonEmptyString(value)) {\n      continue;\n    }\n    const keyParts = key.split(':');\n    const keyType = keyParts.pop();\n    let matchHost = '';\n    if (keyParts.length) {\n      matchHost = getMatchHostFromNpmrcHost(keyParts.join(':'));\n    }\n    const rule: HostRule = hosts[matchHost] || {};\n    if (keyType === '_authToken' || keyType === '_auth') {\n      rule.token = value;\n      if (keyType === '_auth') {\n        rule.authType = 'Basic';\n      }\n    } else if (keyType === 'username') {\n      rule.username = value;\n    } else if (keyType === '_password') {\n      rule.password = fromBase64(value);\n    } else {\n      continue; // don't add the rule\n    }\n    hosts[matchHost] = rule;\n  }\n  for (const [matchHost, rule] of Object.entries(hosts)) {\n    const hostRule = { ...rule, hostType };\n    if (matchHost) {\n      hostRule.matchHost = matchHost;\n    }\n    rules.hostRules?.push(hostRule);\n  }\n  // Generate packageRules\n  const matchDatasources = ['npm'];\n  const { registry } = npmrc;\n  // packageRules order matters, so look for a default registry first\n  if (is.nonEmptyString(registry)) {\n    if (isHttpUrl(registry)) {\n      // Default registry\n      rules.packageRules?.push({\n        matchDatasources,\n        registryUrls: [registry],\n      });\n    } else {\n      logger.warn({ registry }, 'Invalid npmrc registry= URL');\n    }\n  }\n  // Now look for scoped registries\n  for (const [key, value] of Object.entries(npmrc)) {\n    if (!is.nonEmptyString(value)) {\n      continue;\n    }\n    const keyParts = key.split(':');\n    const keyType = keyParts.pop();\n    if (keyType === 'registry' && keyParts.length && is.nonEmptyString(value)) {\n      const scope = keyParts.join(':');\n      if (isHttpUrl(value)) {\n        rules.packageRules?.push({\n          matchDatasources,\n          matchPackageNames: [`${scope}/**`],\n          registryUrls: [value],\n        });\n      } else {\n        logger.warn({ scope, registry: value }, 'Invalid npmrc registry= URL');\n      }\n    }\n  }\n  return rules;\n}\n\nexport function setNpmrc(input?: string): void {\n  if (input) {\n    if (input === npmrcRaw) {\n      return;\n    }\n    const existingNpmrc = npmrc;\n    npmrcRaw = input;\n    logger.debug('Setting npmrc');\n    npmrc = ini.parse(input.replace(regEx(/\\\\n/g), '\\n'));\n    const exposeAllEnv = GlobalConfig.get('exposeAllEnv');\n    for (const [key, val] of Object.entries(npmrc)) {\n      if (\n        !exposeAllEnv &&\n        key.endsWith('registry') &&\n        is.string(val) &&\n        val.includes('localhost')\n      ) {\n        logger.debug(\n          { key, val },\n          'Detected localhost registry - rejecting npmrc file',\n        );\n        npmrc = existingNpmrc;\n        return;\n      }\n    }\n    if (exposeAllEnv) {\n      for (const key of Object.keys(npmrc)) {\n        npmrc[key] = envReplace(npmrc[key]);\n      }\n    }\n    const npmrcRules = convertNpmrcToRules(npmrc);\n    if (npmrcRules.hostRules?.length) {\n      npmrcRules.hostRules.forEach((hostRule) => hostRules.add(hostRule));\n    }\n    packageRules = npmrcRules.packageRules;\n  } else if (npmrc) {\n    logger.debug('Resetting npmrc');\n    npmrc = {};\n    npmrcRaw = '';\n    packageRules = [];\n  }\n}\n\nexport function resolveRegistryUrl(packageName: string): string {\n  let registryUrl = defaultRegistryUrls[0];\n  for (const rule of packageRules) {\n    const { matchPackageNames, registryUrls } = rule;\n    if (\n      !matchPackageNames ||\n      packageName.startsWith(matchPackageNames[0].replace(regEx(/\\*\\*$/), ''))\n    ) {\n      // TODO: fix types #22198\n      registryUrl = registryUrls![0];\n    }\n  }\n  return registryUrl;\n}\n\nexport function resolvePackageUrl(\n  registryUrl: string,\n  packageName: string,\n): string {\n  return url.resolve(\n    ensureTrailingSlash(registryUrl),\n    encodeURIComponent(packageName).replace(regEx(/^%40/), '@'),\n  );\n}\n"]}