{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/npm/index.ts"],"names":[],"mappings":";;;;AAAA,4EAAsD;AACtD,8CAA2C;AAE3C,qCAAwE;AACxE,+BAAsC;AAEtC,iCAAmC;AAA1B,iGAAA,QAAQ,OAAA;AAEjB,MAAa,aAAc,SAAQ,uBAAU;IAC3C,MAAM,CAAU,EAAE,GAAG,KAAK,CAAC;IAET,qBAAqB,GAAG,IAAI,CAAC;IAE7B,gBAAgB,GAAG,OAAO,CAAC;IAE3B,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;IAErC,mBAAmB,GAAG,4BAAqB,CAAC;IAE5C,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,2EAA2E,CAAC;IAC5D,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,0EAA0E,CAAC;IAE7E;QACE,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAa,EAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QACrE,OAAO,GAAG,CAAC;IACb,CAAC;;AAjCH,sCAkCC","sourcesContent":["import * as npmVersioning from '../../versioning/npm';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { defaultRegistryUrls as npmDefaultRegistryUrl } from './common';\nimport { getDependency } from './get';\n\nexport { setNpmrc } from './npmrc';\n\nexport class NpmDatasource extends Datasource {\n  static readonly id = 'npm';\n\n  override readonly customRegistrySupport = true;\n\n  override readonly registryStrategy = 'first';\n\n  override readonly defaultVersioning = npmVersioning.id;\n\n  override readonly defaultRegistryUrls = npmDefaultRegistryUrl;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `time` field in the results.';\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `repository` field in the results.';\n\n  constructor() {\n    super(NpmDatasource.id);\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const res = await getDependency(this.http, registryUrl, packageName);\n    return res;\n  }\n}\n"]}