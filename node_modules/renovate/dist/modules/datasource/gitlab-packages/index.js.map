{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitlab-packages/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,sDAAuD;AACvD,uDAAsD;AACtD,2CAAiD;AACjD,8CAA2C;AAE3C,qCAAsC;AAGtC,oEAAoE;AAEpE,MAAa,wBAAyB,SAAQ,uBAAU;IACtD,MAAM,CAAU,EAAE,GAAG,mBAAU,CAAC;IAEb,IAAI,CAAa;IAE3B,OAAO,GAAG,IAAI,CAAC;IAEf,qBAAqB,GAAG,IAAI,CAAC;IAE7B,mBAAmB,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAEpC,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,iFAAiF,CAAC;IAEpF;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAU,CAAC,mBAAU,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,WAAmB,EACnB,WAAmB,EACnB,WAAmB;QAEnB,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC3D,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAE3D,OAAO,IAAA,kBAAY,EACjB,WAAW,EACX,iBAAiB,EACjB,kBAAkB,EAClB,yBAAyB,kBAAkB,eAAe,CAC3D,CAAC;IACJ,CAAC;IAQK,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAE7D,MAAM,MAAM,GAAG,wBAAwB,CAAC,sBAAsB,CAC5D,WAAW,EACX,WAAW,EACX,WAAW,CACZ,CAAC;QAEF,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,QAAyB,CAAC;QAC9B,IAAI,CAAC;YACH,QAAQ,GAAG,CACT,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAkB,MAAM,EAAE;gBACxD,QAAQ,EAAE,IAAI;aACf,CAAC,CACH,CAAC,IAAI,CAAC;YAEP,MAAM,CAAC,QAAQ,GAAG,QAAQ;gBACxB,sHAAsH;gBACtH,4FAA4F;iBAC3F,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC;iBACrC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;gBACjC,OAAO;gBACP,gBAAgB,EAAE,IAAA,uBAAW,EAAC,UAAU,CAAC;aAC1C,CAAC,CAAC,CAAC;QACR,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IACjD,CAAC;;AApFH,4DAqFC;AA3CO;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE;QACvD,uBAAuB;QACvB,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;2DA2CD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource } from './common';\nimport type { GitlabPackage } from './types';\n\n// Gitlab Packages API: https://docs.gitlab.com/ee/api/packages.html\n\nexport class GitlabPackagesDatasource extends Datasource {\n  static readonly id = datasource;\n\n  protected override http: GitlabHttp;\n\n  override caching = true;\n\n  override customRegistrySupport = true;\n\n  override defaultRegistryUrls = ['https://gitlab.com'];\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `created_at` field in the results.';\n\n  constructor() {\n    super(datasource);\n    this.http = new GitlabHttp(datasource);\n  }\n\n  static getGitlabPackageApiUrl(\n    registryUrl: string,\n    projectName: string,\n    packageName: string,\n  ): string {\n    const projectNameEncoded = encodeURIComponent(projectName);\n    const packageNameEncoded = encodeURIComponent(packageName);\n\n    return joinUrlParts(\n      registryUrl,\n      `api/v4/projects`,\n      projectNameEncoded,\n      `packages?package_name=${packageNameEncoded}&per_page=100`,\n    );\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}-${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const [projectPart, packagePart] = packageName.split(':', 2);\n\n    const apiUrl = GitlabPackagesDatasource.getGitlabPackageApiUrl(\n      registryUrl,\n      projectPart,\n      packagePart,\n    );\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    let response: GitlabPackage[];\n    try {\n      response = (\n        await this.http.getJsonUnchecked<GitlabPackage[]>(apiUrl, {\n          paginate: true,\n        })\n      ).body;\n\n      result.releases = response\n        // Setting the package_name option when calling the GitLab API isn't enough to filter information about other packages\n        // because this option is only implemented on GitLab > 12.9 and it only does a fuzzy search.\n        .filter((r) => r.name === packagePart)\n        .map(({ version, created_at }) => ({\n          version,\n          releaseTimestamp: asTimestamp(created_at),\n        }));\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases?.length ? result : null;\n  }\n}\n"]}