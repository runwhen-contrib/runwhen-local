{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/maven/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { XmlDocument } from 'xmldoc';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport mavenVersion from '../../versioning/maven';\nimport * as mavenVersioning from '../../versioning/maven';\nimport { compare } from '../../versioning/maven/compare';\nimport { Datasource } from '../datasource';\nimport type {\n  GetReleasesConfig,\n  PostprocessReleaseConfig,\n  PostprocessReleaseResult,\n  RegistryStrategy,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { MAVEN_REPO } from './common';\nimport type { MavenDependency } from './types';\nimport {\n  createUrlForDependencyPom,\n  downloadMaven,\n  downloadMavenXml,\n  getDependencyInfo,\n  getDependencyParts,\n  getMavenUrl,\n} from './util';\n\nfunction getLatestSuitableVersion(releases: Release[]): string | null {\n  /* v8 ignore next 3 -- TODO: add test */\n  if (!releases?.length) {\n    return null;\n  }\n  const allVersions = releases.map(({ version }) => version);\n  const stableVersions = allVersions.filter((x) => mavenVersion.isStable(x));\n  const versions = stableVersions.length ? stableVersions : allVersions;\n  return versions.reduce((latestVersion, version) =>\n    compare(version, latestVersion) === 1\n      ? version\n      : /* istanbul ignore next: hard to test */ latestVersion,\n  );\n}\n\nfunction extractVersions(metadata: XmlDocument): string[] {\n  const versions = metadata.descendantWithPath('versioning.versions');\n  const elements = versions?.childrenNamed('version');\n  if (!elements) {\n    return [];\n  }\n  return elements.map((el) => el.val);\n}\n\nexport const defaultRegistryUrls = [MAVEN_REPO];\n\nexport class MavenDatasource extends Datasource {\n  static id = 'maven';\n\n  override readonly caching = true;\n\n  override readonly defaultRegistryUrls = defaultRegistryUrls;\n\n  override readonly defaultVersioning: string = mavenVersioning.id;\n\n  override readonly registryStrategy: RegistryStrategy = 'merge';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `Last-Modified` header or the `lastModified` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `scm` tags in the results.';\n\n  constructor(id = MavenDatasource.id) {\n    super(id);\n  }\n\n  async fetchVersionsFromMetadata(\n    dependency: MavenDependency,\n    repoUrl: string,\n  ): Promise<string[]> {\n    const metadataUrl = getMavenUrl(dependency, repoUrl, 'maven-metadata.xml');\n\n    const cacheNamespace = 'datasource-maven:metadata-xml';\n    const cacheKey = `v2:${metadataUrl}`;\n    const cachedVersions = await packageCache.get<string[]>(\n      cacheNamespace,\n      cacheKey,\n    );\n    /* v8 ignore next 3 -- TODO: add test */\n    if (cachedVersions) {\n      return cachedVersions;\n    }\n\n    const metadataXmlResult = await downloadMavenXml(this.http, metadataUrl);\n    return metadataXmlResult\n      .transform(\n        async ({ isCacheable, data: mavenMetadata }): Promise<string[]> => {\n          const versions = extractVersions(mavenMetadata);\n          const cachePrivatePackages = GlobalConfig.get(\n            'cachePrivatePackages',\n            false,\n          );\n\n          if (cachePrivatePackages || isCacheable) {\n            await packageCache.set(cacheNamespace, cacheKey, versions, 30);\n          }\n\n          return versions;\n        },\n      )\n      .onError((err) => {\n        logger.debug(\n          `Maven: error fetching versions for \"${dependency.display}\": ${err.type}`,\n        );\n      })\n      .unwrapOr([]);\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const dependency = getDependencyParts(packageName);\n    const repoUrl = ensureTrailingSlash(registryUrl);\n\n    logger.debug(`Looking up ${dependency.display} in repository ${repoUrl}`);\n\n    const metadataVersions = await this.fetchVersionsFromMetadata(\n      dependency,\n      repoUrl,\n    );\n    if (!metadataVersions?.length) {\n      return null;\n    }\n    const releases = metadataVersions.map((version) => ({ version }));\n\n    logger.debug(\n      `Found ${releases.length} new releases for ${dependency.display} in repository ${repoUrl}`,\n    );\n\n    const latestSuitableVersion = getLatestSuitableVersion(releases);\n    const dependencyInfo =\n      latestSuitableVersion &&\n      (await getDependencyInfo(\n        this.http,\n        dependency,\n        repoUrl,\n        latestSuitableVersion,\n      ));\n\n    const result: ReleaseResult = {\n      ...dependency,\n      ...dependencyInfo,\n      releases,\n    };\n\n    if (!this.defaultRegistryUrls.includes(registryUrl)) {\n      result.isPrivate = true;\n    }\n\n    return result;\n  }\n\n  override async postprocessRelease(\n    { packageName, registryUrl }: PostprocessReleaseConfig,\n    release: Release,\n  ): Promise<PostprocessReleaseResult> {\n    const { version, versionOrig } = release;\n    const cacheKey = versionOrig\n      ? `postprocessRelease:${registryUrl}:${packageName}:${versionOrig}:${version}`\n      : `postprocessRelease:${registryUrl}:${packageName}:${version}`;\n    const cachedResult = await packageCache.get<PostprocessReleaseResult>(\n      'datasource-maven',\n      cacheKey,\n    );\n\n    /* v8 ignore start: hard to test */\n    if (cachedResult) {\n      return cachedResult;\n    } /* v8 ignore stop */\n\n    if (!packageName || !registryUrl) {\n      return release;\n    }\n\n    const dependency = getDependencyParts(packageName);\n\n    const pomUrl = await createUrlForDependencyPom(\n      this.http,\n      release.versionOrig ?? release.version,\n      dependency,\n      registryUrl,\n    );\n\n    const artifactUrl = getMavenUrl(dependency, registryUrl, pomUrl);\n    const fetchResult = await downloadMaven(this.http, artifactUrl);\n    const { val, err } = fetchResult.unwrap();\n\n    if (err) {\n      const result: PostprocessReleaseResult =\n        err.type === 'not-found' ? 'reject' : release;\n      await packageCache.set('datasource-maven', cacheKey, result, 24 * 60);\n      return result;\n    }\n\n    if (val.lastModified) {\n      release.releaseTimestamp = asTimestamp(val.lastModified);\n    }\n\n    await packageCache.set('datasource-maven', cacheKey, release, 7 * 24 * 60);\n    return release;\n  }\n}\n"]}