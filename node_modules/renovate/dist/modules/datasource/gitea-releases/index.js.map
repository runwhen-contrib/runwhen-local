{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitea-releases/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport type { PackageCacheNamespace } from '../../../util/cache/package/types';\nimport { GiteaHttp } from '../../../util/http/gitea';\nimport { Datasource } from '../datasource';\nimport { GiteaTagsDatasource } from '../gitea-tags';\nimport { CommitsSchema, TagSchema } from '../gitea-tags/schema';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { ReleasesSchema } from './schema';\n\nexport class GiteaReleasesDatasource extends Datasource {\n  static readonly id = 'gitea-releases';\n\n  override http = new GiteaHttp(GiteaReleasesDatasource.id);\n\n  static readonly defaultRegistryUrls = ['https://gitea.com'];\n\n  private static readonly cacheNamespace: PackageCacheNamespace = `datasource-${GiteaReleasesDatasource.id}`;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `published_at` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GiteaReleasesDatasource.id);\n  }\n\n  // getReleases fetches list of tags for the repository\n  @cache({\n    namespace: GiteaReleasesDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, packageName, 'releases'),\n  })\n  async getReleases({\n    registryUrl,\n    packageName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/releases?draft=false`;\n    const tags = (\n      await this.http.getJson(\n        url,\n        {\n          paginate: true,\n        },\n        ReleasesSchema,\n      )\n    ).body;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: GiteaTagsDatasource.getSourceUrl(repo, registryUrl),\n      registryUrl: GiteaTagsDatasource.getRegistryURL(registryUrl),\n      releases: tags.map(({ tag_name, published_at, prerelease }) => ({\n        version: tag_name,\n        gitRef: tag_name,\n        releaseTimestamp: published_at,\n        isStable: !prerelease,\n      })),\n    };\n\n    return dependency;\n  }\n\n  // getTagCommit fetched the commit has for specified tag\n  @cache({\n    namespace: GiteaReleasesDatasource.cacheNamespace,\n    key: (registryUrl: string | undefined, repo: string, tag: string): string =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, repo, `tag-${tag}`),\n  })\n  async getTagCommit(\n    registryUrl: string | undefined,\n    repo: string,\n    tag: string,\n  ): Promise<string | null> {\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/tags/${tag}`;\n\n    const { body } = await this.http.getJson(url, TagSchema);\n\n    return body.commit.sha;\n  }\n\n  // getDigest fetched the latest commit for repository main branch\n  // however, if newValue is provided, then getTagCommit is called\n  @cache({\n    namespace: GiteaReleasesDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: DigestConfig) =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, packageName, 'digest'),\n  })\n  override async getDigest(\n    { packageName: repo, registryUrl }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    if (newValue?.length) {\n      return this.getTagCommit(registryUrl, repo, newValue);\n    }\n\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/commits?stat=false&verification=false&files=false&page=1&limit=1`;\n    const { body } = await this.http.getJson(url, CommitsSchema);\n\n    if (body.length === 0) {\n      return null;\n    }\n\n    return body[0].sha;\n  }\n}\n"]}