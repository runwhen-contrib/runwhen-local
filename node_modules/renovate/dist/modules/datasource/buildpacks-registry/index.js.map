{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/buildpacks-registry/index.ts"],"names":[],"mappings":";;;;AAAA,gEAA+B;AAC/B,6BAA+B;AAC/B,4CAAyC;AACzC,qEAA8D;AAC9D,iDAA8C;AAC9C,8CAA2C;AAC3C,sCAA2C;AAE3C,qCAA4D;AAE5D,MAAa,4BAA6B,SAAQ,uBAAU;IAC1D,MAAM,CAAU,EAAE,GAAG,qBAAqB,CAAC;IAE3C;QACE,KAAK,CAAC,4BAA4B,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC;IAEiB,qBAAqB,GAAG,KAAK,CAAC;IAE9B,mBAAmB,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAEzD,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,mFAAmF,CAAC;IACpE,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,qGAAqG,CAAC;IAOlG,AAAN,KAAK,CAAC,WAAW,CAAC,MAAyB;QACzC,MAAM,MAAM,GAAG,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,uBAAc,CAAC;aAChD,SAAS,CAAC,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,EAAE;YAC1C,MAAM,GAAG,GAAG,IAAA,kBAAO,EACjB,WAAW,EACX,KAAK,EACL,IAAI,EACJ,YAAY,EACZ,WAAW,CACZ,CAAC;YAEF,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,yCAAgC,CAAC,CAAC;QACtE,CAAC,CAAC;aACD,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAiB,EAAE;YACjD,MAAM,QAAQ,GAAc,QAAQ,CAAC;YAErC,MAAM,GAAG,GAAkB,EAAE,QAAQ,EAAE,CAAC;YAExC,IAAI,MAAM,EAAE,QAAQ,EAAE,CAAC;gBACrB,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YACjC,CAAC;YAED,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;QAEL,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;QAE3C,IAAI,GAAG,YAAY,cAAQ,EAAE,CAAC;YAC5B,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;;AA5DH,oEA6DC;AAtCO;IALL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,4BAA4B,CAAC,EAAE,EAAE;QAC1D,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE,CACvD,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;+DAsCD","sourcesContent":["import urlJoin from 'url-join';\nimport { ZodError } from 'zod';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Result } from '../../../util/result';\nimport { Datasource } from '../datasource';\nimport { ReleasesConfig } from '../schema';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { BuildpacksRegistryResponseSchema } from './schema';\n\nexport class BuildpacksRegistryDatasource extends Datasource {\n  static readonly id = 'buildpacks-registry';\n\n  constructor() {\n    super(BuildpacksRegistryDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://registry.buildpacks.io'];\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `published_at` field in the results.';\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `source_code_url` field of the release object in the results.';\n\n  @cache({\n    namespace: `datasource-${BuildpacksRegistryDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const result = Result.parse(config, ReleasesConfig)\n      .transform(({ packageName, registryUrl }) => {\n        const url = urlJoin(\n          registryUrl,\n          'api',\n          'v1',\n          'buildpacks',\n          packageName,\n        );\n\n        return this.http.getJsonSafe(url, BuildpacksRegistryResponseSchema);\n      })\n      .transform(({ versions, latest }): ReleaseResult => {\n        const releases: Release[] = versions;\n\n        const res: ReleaseResult = { releases };\n\n        if (latest?.homepage) {\n          res.homepage = latest.homepage;\n        }\n\n        return res;\n      });\n\n    const { val, err } = await result.unwrap();\n\n    if (err instanceof ZodError) {\n      logger.debug({ err }, 'buildpacks: validation error');\n      return null;\n    }\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return val;\n  }\n}\n"]}