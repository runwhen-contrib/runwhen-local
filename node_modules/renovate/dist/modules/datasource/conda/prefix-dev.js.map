{"version":3,"file":"prefix-dev.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conda/prefix-dev.ts"],"names":[],"mappings":";;AA4BA,kCA6CC;AAzED,4CAAyC;AACzC,+CAA2D;AAE3D,uDAAyD;AAEzD,oDAAqE;AAErE,MAAM,2BAA2B,GAAG,GAAG,CAAC;AAExC,MAAM,KAAK,GAAG;;;;;;;;;;;;;;;;;CAiBb,CAAC;AAEK,KAAK,UAAU,WAAW,CAC/B,IAAU,EACV,OAAe,EACf,WAAmB;IAEnB,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,WAAW,EAAE,EACxB,4CAA4C,CAC7C,CAAC;IAEF,MAAM,KAAK,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE;QAChD,OAAO;QACP,OAAO,EAAE,WAAW;KACrB,CAAC,CAAC;IAEH,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,QAAQ,GAAuB,SAAS,CAAC;IAC7C,IAAI,SAAS,GAAuB,SAAS,CAAC;IAE9C,MAAM,QAAQ,GAA4B,EAAE,CAAC;IAC7C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE7B,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,SAAS,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;QAE5B,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;QAElC,+DAA+D;QAC/D,QAAQ,CAAC,OAAO,CAAC,CAAC,gBAAgB;YAChC,QAAQ,CAAC,OAAO,CAAC,CAAC,gBAAgB;gBAClC,0BAAc,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEvC,sGAAsG;QACtG,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,KAAK,IAAA,4BAAoB,EAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO;QACL,QAAQ;QACR,SAAS;QACT,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;KAClC,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,gBAAgB,CAC7B,IAAU,EACV,KAAa,EACb,IAAS;IAET,MAAM,MAAM,GAAW,EAAE,CAAC;IAE1B,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,IAAI,2BAA2B,EAAE,IAAI,EAAE,EAAE,CAAC;QAC/D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAC7B,gCAAgC,EAChC;YACE,IAAI,EAAE;gBACJ,aAAa,EAAE,QAAQ;gBACvB,KAAK;gBACL,SAAS,EAAE;oBACT,GAAG,IAAI;oBACP,IAAI;iBACL;aACF;SACF,EACD,gCAAmB,CACpB,CAAC;QAEF,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC;QACpD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM;QACR,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAEjC,IAAI,IAAI,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;YAClC,MAAM;QACR,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { isNotNullOrUndefined } from '../../../util/array';\nimport type { Http } from '../../../util/http';\nimport { MaybeTimestamp } from '../../../util/timestamp';\nimport type { Release, ReleaseResult } from '../types';\nimport { type File, PagedResponseSchema } from './schema/prefix-dev';\n\nconst MAX_PREFIX_DEV_GRAPHQL_PAGE = 100;\n\nconst query = `\nquery search($channel: String!, $package: String!, $page: Int = 0) {\n  package(channelName: $channel, name: $package) {\n    variants(limit: 500, page: $page) {\n      pages\n      page {\n        createdAt\n        version\n        yankedReason\n        urls {\n          url\n          kind\n        }\n      }\n    }\n  }\n}\n`;\n\nexport async function getReleases(\n  http: Http,\n  channel: string,\n  packageName: string,\n): Promise<ReleaseResult | null> {\n  logger.debug(\n    { channel, packageName },\n    'lookup package from prefix.dev graphql API',\n  );\n\n  const files = await getPagedResponse(http, query, {\n    channel,\n    package: packageName,\n  });\n\n  if (!files.length) {\n    return null;\n  }\n\n  let homepage: string | undefined = undefined;\n  let sourceUrl: string | undefined = undefined;\n\n  const releases: Record<string, Release> = {};\n  for (const file of files) {\n    const version = file.version;\n\n    homepage ??= file.urls.HOME;\n    sourceUrl ??= file.urls.DEV;\n\n    releases[version] ??= { version };\n\n    // we assume all packages are roughly released on the same time\n    releases[version].releaseTimestamp =\n      releases[version].releaseTimestamp ??\n      MaybeTimestamp.parse(file.createdAt);\n\n    // if the version has not been marked as deprecated, check other releases packages of the same version\n    releases[version].isDeprecated ??= isNotNullOrUndefined(file.yankedReason);\n  }\n\n  return {\n    homepage,\n    sourceUrl,\n    releases: Object.values(releases),\n  };\n}\n\nasync function getPagedResponse(\n  http: Http,\n  query: string,\n  data: any,\n): Promise<File[]> {\n  const result: File[] = [];\n\n  for (let page = 0; page <= MAX_PREFIX_DEV_GRAPHQL_PAGE; page++) {\n    const res = await http.postJson(\n      'https://prefix.dev/api/graphql',\n      {\n        body: {\n          operationName: 'search',\n          query,\n          variables: {\n            ...data,\n            page,\n          },\n        },\n      },\n      PagedResponseSchema,\n    );\n\n    const currentPage = res.body.data.package?.variants;\n    if (!currentPage) {\n      break;\n    }\n\n    result.push(...currentPage.page);\n\n    if (page >= currentPage.pages - 1) {\n      break;\n    }\n  }\n\n  return result;\n}\n"]}