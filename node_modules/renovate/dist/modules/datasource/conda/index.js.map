{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conda/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { coerceArray } from '../../../util/array';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { HttpError } from '../../../util/http';\nimport { Timestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl } from './common';\nimport * as prefixDev from './prefix-dev';\nimport type { CondaPackage } from './types';\n\nexport class CondaDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly registryStrategy = 'hunt';\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly caching = true;\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `dev_url` field in the results.';\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace({ registryUrl, packageName }, 'fetching conda package');\n\n    if (!registryUrl) {\n      return null;\n    }\n\n    // fast.prefix.dev is a alias, deprecated, but still running.\n    // We expect registryUrl to be `https://prefix.dev/${channel}` here.\n    if (\n      registryUrl.startsWith('https://prefix.dev/') ||\n      registryUrl.startsWith('https://fast.prefix.dev/')\n    ) {\n      // Since the registryUrl contains at least 3 `/` ,\n      // the channel varitable won't be undefined in any case.\n      const channel = ensureTrailingSlash(registryUrl).split('/').at(-2)!;\n\n      return prefixDev.getReleases(this.http, channel, packageName);\n    }\n\n    const url = joinUrlParts(registryUrl, packageName);\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n\n    let response: { body: CondaPackage };\n\n    try {\n      response = await this.http.getJsonUnchecked(url);\n\n      result.homepage = response.body.html_url;\n      result.sourceUrl = response.body.dev_url;\n\n      const releaseDate: Record<string, Timestamp> = {};\n      // we assume all packages are roughly released on the same time\n      for (const file of coerceArray(response.body.files)) {\n        releaseDate[file.version] ??= Timestamp.parse(file.upload_time);\n      }\n\n      response.body.versions.forEach((version: string) => {\n        const thisRelease: Release = {\n          version,\n          releaseTimestamp: releaseDate[version],\n        };\n        result.releases.push(thisRelease);\n      });\n    } catch (err) {\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode !== 404) {\n          throw new ExternalHostError(err);\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}