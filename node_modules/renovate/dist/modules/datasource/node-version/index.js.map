{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/node-version/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,uDAAsD;AACtD,2CAAiD;AACjD,gDAAyD;AACzD,8CAA2C;AAE3C,qCAA0D;AAG1D,MAAa,qBAAsB,SAAQ,uBAAU;IACnD,MAAM,CAAU,EAAE,GAAG,mBAAU,CAAC;IAEhC;QACE,KAAK,CAAC,mBAAU,CAAC,CAAC;IACpB,CAAC;IAEiB,mBAAmB,GAAG,CAAC,2BAAkB,CAAC,CAAC;IAE3C,iBAAiB,GAAG,SAAU,CAAC;IAE/B,OAAO,GAAG,IAAI,CAAC;IAEf,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,4DAA4D,CAAC;IAC7C,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,gDAAgD,CAAC;IAO7C,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,MAAM,GAAkB;YAC5B,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE,gCAAgC;YAC3C,WAAW;YACX,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,CACX,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAC9B,IAAA,kBAAY,EAAC,WAAW,EAAE,YAAY,CAAC,CACxC,CACF,CAAC,IAAI,CAAC;YACP,MAAM,CAAC,QAAQ,CAAC,IAAI,CAClB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;gBACvC,OAAO;gBACP,gBAAgB,EAAE,IAAA,uBAAW,EAAC,IAAI,CAAC;gBACnC,QAAQ,EAAE,GAAG,KAAK,KAAK;aACxB,CAAC,CAAC,CACJ,CAAC;QACJ,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;;AAxDH,sDAyDC;AAhCO;IALL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,mBAAU,EAAE;QACrC,uBAAuB;QACvB,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,GAAG,WAAW,EAAE;KAC9D,CAAC;wDAgCD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { joinUrlParts } from '../../../util/url';\nimport { id as versioning } from '../../versioning/node';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl } from './common';\nimport type { NodeRelease } from './types';\n\nexport class NodeVersionDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly defaultVersioning = versioning;\n\n  override readonly caching = true;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `date` field.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'We use the URL: https://github.com/nodejs/node';\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    // TODO: types (#22198)\n    key: ({ registryUrl }: GetReleasesConfig) => `${registryUrl}`,\n  })\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    const result: ReleaseResult = {\n      homepage: 'https://nodejs.org',\n      sourceUrl: 'https://github.com/nodejs/node',\n      registryUrl,\n      releases: [],\n    };\n    try {\n      const resp = (\n        await this.http.getJsonUnchecked<NodeRelease[]>(\n          joinUrlParts(registryUrl, 'index.json'),\n        )\n      ).body;\n      result.releases.push(\n        ...resp.map(({ version, date, lts }) => ({\n          version,\n          releaseTimestamp: asTimestamp(date),\n          isStable: lts !== false,\n        })),\n      );\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}