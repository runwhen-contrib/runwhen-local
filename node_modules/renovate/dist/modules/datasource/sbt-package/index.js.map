{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/sbt-package/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as upath from 'upath';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport type { Timestamp } from '../../../util/timestamp';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash, trimTrailingSlash } from '../../../util/url';\nimport * as ivyVersioning from '../../versioning/ivy';\nimport { compare } from '../../versioning/maven/compare';\nimport { MavenDatasource } from '../maven';\nimport { MAVEN_REPO } from '../maven/common';\nimport { downloadHttpContent, downloadHttpProtocol } from '../maven/util';\nimport type {\n  GetReleasesConfig,\n  PostprocessReleaseConfig,\n  PostprocessReleaseResult,\n  RegistryStrategy,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { extractPageLinks, getLatestVersion } from './util';\n\ninterface ScalaDepCoordinate {\n  groupId: string;\n  artifactId: string;\n  scalaVersion?: string;\n}\n\ninterface PomInfo {\n  homepage?: string;\n  sourceUrl?: string;\n  releaseTimestamp?: Timestamp;\n}\n\nexport class SbtPackageDatasource extends MavenDatasource {\n  static override readonly id = 'sbt-package';\n\n  override readonly defaultRegistryUrls = [MAVEN_REPO];\n\n  override readonly defaultVersioning = ivyVersioning.id;\n\n  override readonly registryStrategy: RegistryStrategy = 'hunt';\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `scm` tags in the results.';\n\n  constructor(id = SbtPackageDatasource.id) {\n    super(id);\n    this.http = new Http('sbt');\n  }\n\n  protected static parseDepCoordinate(packageName: string): ScalaDepCoordinate {\n    const [groupId, javaArtifactId] = packageName.split(':');\n    const [artifactId, scalaVersion] = javaArtifactId.split('_');\n    return { groupId, artifactId, scalaVersion };\n  }\n\n  async getSbtReleases(\n    registryUrl: string,\n    packageName: string,\n  ): Promise<ReleaseResult | null> {\n    const { groupId, artifactId, scalaVersion } =\n      SbtPackageDatasource.parseDepCoordinate(packageName);\n\n    const groupIdSplit = groupId.split('.');\n    const repoRootUrl = ensureTrailingSlash(registryUrl);\n\n    const validRootUrlKey = `valid-root-url:${registryUrl}:${packageName}`;\n    const validRootUrl = await packageCache.get<string>(\n      'datasource-sbt-package',\n      validRootUrlKey,\n    );\n\n    const packageRootUrls: string[] = [];\n    // istanbul ignore if: not easily testable\n    if (validRootUrl) {\n      packageRootUrls.push(validRootUrl);\n    } else {\n      const packageRootUrlWith = (sep: string): string =>\n        `${repoRootUrl}${groupIdSplit.join(sep)}`;\n      packageRootUrls.push(ensureTrailingSlash(packageRootUrlWith('/')));\n      packageRootUrls.push(ensureTrailingSlash(packageRootUrlWith('.')));\n    }\n\n    let dependencyUrl: string | undefined;\n    let packageUrls: string[] | undefined;\n    for (const packageRootUrl of packageRootUrls) {\n      const packageRootContent = await downloadHttpContent(\n        this.http,\n        packageRootUrl,\n      );\n      if (!packageRootContent) {\n        continue;\n      }\n\n      await packageCache.set(\n        'datasource-sbt-package',\n        validRootUrlKey,\n        packageRootUrl,\n        30 * 24 * 60,\n      );\n\n      dependencyUrl = trimTrailingSlash(packageRootUrl);\n\n      const rootPath = new URL(packageRootUrl).pathname;\n      const artifactSubdirs = extractPageLinks(packageRootContent, (href) => {\n        const path = href.replace(rootPath, '');\n\n        if (\n          path.startsWith(`${artifactId}_native`) ||\n          path.startsWith(`${artifactId}_sjs`)\n        ) {\n          return null;\n        }\n\n        if (path === artifactId || path.startsWith(`${artifactId}_`)) {\n          return ensureTrailingSlash(`${packageRootUrl}${path}`);\n        }\n\n        return null;\n      });\n\n      if (scalaVersion) {\n        const scalaSubdir = artifactSubdirs.find((x) =>\n          x.endsWith(`/${artifactId}_${scalaVersion}/`),\n        );\n        if (scalaSubdir) {\n          packageUrls = [scalaSubdir];\n          break;\n        }\n      }\n\n      packageUrls = artifactSubdirs;\n      break;\n    }\n\n    if (!packageUrls) {\n      return null;\n    }\n\n    const invalidPackageUrlsKey = `invalid-package-urls:${registryUrl}:${packageName}`;\n    const invalidPackageUrls = new Set(\n      await packageCache.get<string[]>(\n        'datasource-sbt-package',\n        invalidPackageUrlsKey,\n      ),\n    );\n    packageUrls = packageUrls.filter((url) => !invalidPackageUrls.has(url));\n\n    const allVersions = new Set<string>();\n    for (const pkgUrl of packageUrls) {\n      const packageContent = await downloadHttpContent(this.http, pkgUrl);\n      // istanbul ignore if\n      if (!packageContent) {\n        invalidPackageUrls.add(pkgUrl);\n        continue;\n      }\n\n      const rootPath = new URL(pkgUrl).pathname;\n      const versions = extractPageLinks(packageContent, (href) => {\n        const path = href.replace(rootPath, '');\n        if (path.startsWith('.')) {\n          return null;\n        }\n\n        return path;\n      });\n\n      for (const version of versions) {\n        allVersions.add(version);\n      }\n    }\n\n    if (invalidPackageUrls.size > 0) {\n      await packageCache.set(\n        'datasource-sbt-package',\n        invalidPackageUrlsKey,\n        [...invalidPackageUrls],\n        30 * 24 * 60,\n      );\n    }\n\n    if (packageUrls.length > 0) {\n      const packageUrlsKey = `package-urls:${registryUrl}:${packageName}`;\n      await packageCache.set(\n        'datasource-sbt-package',\n        packageUrlsKey,\n        packageUrls,\n        30 * 24 * 60,\n      );\n    }\n\n    const versions = [...allVersions];\n    if (!versions.length) {\n      return null;\n    }\n\n    const releases: Release[] = [...allVersions]\n      .sort(compare)\n      .map((version) => ({ version }));\n    const res: ReleaseResult = { releases, dependencyUrl };\n\n    const latestVersion = getLatestVersion(versions);\n    const pomInfo = await this.getPomInfo(\n      registryUrl,\n      packageName,\n      latestVersion,\n      packageUrls,\n    );\n\n    if (pomInfo?.homepage) {\n      res.homepage = pomInfo.homepage;\n    }\n\n    if (pomInfo?.sourceUrl) {\n      res.sourceUrl = pomInfo.sourceUrl;\n    }\n\n    return res;\n  }\n\n  async getPomInfo(\n    registryUrl: string,\n    packageName: string,\n    version: string | null,\n    pkgUrls?: string[],\n  ): Promise<PomInfo | null> {\n    const packageUrlsKey = `package-urls:${registryUrl}:${packageName}`;\n    // istanbul ignore next: will be covered later\n    const packageUrls =\n      pkgUrls ??\n      (await packageCache.get<string[]>(\n        'datasource-sbt-package',\n        packageUrlsKey,\n      ));\n\n    // istanbul ignore if\n    if (!packageUrls?.length) {\n      return null;\n    }\n\n    // istanbul ignore if\n    if (!version) {\n      return null;\n    }\n\n    const invalidPomFilesKey = `invalid-pom-files:${registryUrl}:${packageName}:${version}`;\n    const invalidPomFiles = new Set(\n      await packageCache.get<string[]>(\n        'datasource-sbt-package',\n        invalidPomFilesKey,\n      ),\n    );\n\n    const saveCache = async (): Promise<void> => {\n      if (invalidPomFiles.size > 0) {\n        await packageCache.set(\n          'datasource-sbt-package',\n          invalidPomFilesKey,\n          [...invalidPomFiles],\n          30 * 24 * 60,\n        );\n      }\n    };\n\n    for (const packageUrl of packageUrls) {\n      const artifactDir = upath.basename(packageUrl);\n      const [artifact] = artifactDir.split('_');\n\n      for (const pomFilePrefix of [artifactDir, artifact]) {\n        const pomFileName = `${pomFilePrefix}-${version}.pom`;\n        const pomUrl = `${packageUrl}${version}/${pomFileName}`;\n        if (invalidPomFiles.has(pomUrl)) {\n          continue;\n        }\n\n        const res = await downloadHttpProtocol(this.http, pomUrl);\n        const { val } = res.unwrap();\n        if (!val) {\n          invalidPomFiles.add(pomUrl);\n          continue;\n        }\n\n        const result: PomInfo = {};\n\n        const releaseTimestamp = asTimestamp(val.lastModified);\n        if (releaseTimestamp) {\n          result.releaseTimestamp = releaseTimestamp;\n        }\n\n        const pomXml = new XmlDocument(val.data);\n\n        const homepage = pomXml.valueWithPath('url');\n        if (homepage) {\n          result.homepage = homepage;\n        }\n\n        const sourceUrl = pomXml.valueWithPath('scm.url');\n        if (sourceUrl) {\n          result.sourceUrl = sourceUrl\n            .replace(regEx(/^scm:/), '')\n            .replace(regEx(/^git:/), '')\n            .replace(regEx(/^git@github.com:/), 'https://github.com/')\n            .replace(regEx(/\\.git$/), '');\n        }\n\n        await saveCache();\n        return result;\n      }\n    }\n\n    await saveCache();\n    return null;\n  }\n\n  override async getReleases(\n    config: GetReleasesConfig,\n  ): Promise<ReleaseResult | null> {\n    const { packageName, registryUrl } = config;\n    // istanbul ignore if\n    if (!registryUrl) {\n      return null;\n    }\n\n    const sbtReleases = await this.getSbtReleases(registryUrl, packageName);\n    if (sbtReleases) {\n      return sbtReleases;\n    }\n\n    logger.debug(\n      `Sbt: no versions discovered for ${packageName} listing organization root package folder, fallback to maven datasource for version discovery`,\n    );\n    const mavenReleaseResult = await super.getReleases(config);\n    if (mavenReleaseResult) {\n      return mavenReleaseResult;\n    }\n\n    logger.debug(`Sbt: no versions found for \"${packageName}\"`);\n    return null;\n  }\n\n  @cache({\n    namespace: 'datasource-sbt-package',\n    key: (\n      { registryUrl, packageName }: PostprocessReleaseConfig,\n      { version }: Release,\n    ) => `postprocessRelease:${registryUrl}:${packageName}:${version}`,\n    ttlMinutes: 30 * 24 * 60,\n  })\n  override async postprocessRelease(\n    config: PostprocessReleaseConfig,\n    release: Release,\n  ): Promise<PostprocessReleaseResult> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!config.registryUrl) {\n      return release;\n    }\n\n    const res = await this.getPomInfo(\n      config.registryUrl,\n      config.packageName,\n      release.version,\n    );\n\n    if (res?.releaseTimestamp) {\n      release.releaseTimestamp = res.releaseTimestamp;\n    }\n\n    return release;\n  }\n}\n"]}