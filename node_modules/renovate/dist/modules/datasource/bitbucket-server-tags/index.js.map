{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/bitbucket-server-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZodError } from 'zod';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { PackageCacheNamespace } from '../../../util/cache/package/types';\nimport { BitbucketServerHttp } from '../../../util/http/bitbucket-server';\nimport { regEx } from '../../../util/regex';\nimport { Result } from '../../../util/result';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport { DigestsConfig, ReleasesConfig } from '../schema';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport {\n  BitbucketServerCommits,\n  BitbucketServerTag,\n  BitbucketServerTags,\n} from './schema';\n\nexport class BitbucketServerTagsDatasource extends Datasource {\n  static readonly id = 'bitbucket-server-tags';\n\n  override http = new BitbucketServerHttp(BitbucketServerTagsDatasource.id);\n\n  static readonly sourceUrlSupport = 'package';\n  static readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  static readonly cacheNamespace: PackageCacheNamespace = `datasource-${BitbucketServerTagsDatasource.id}`;\n\n  constructor() {\n    super(BitbucketServerTagsDatasource.id);\n  }\n\n  static getRegistryURL(registryUrl: string): string {\n    return registryUrl?.replace(regEx(/\\/rest\\/api\\/1.0$/), '');\n  }\n\n  static getSourceUrl(\n    projectKey: string,\n    repositorySlug: string,\n    registryUrl: string,\n  ): string {\n    const url = BitbucketServerTagsDatasource.getRegistryURL(registryUrl);\n    return `${ensureTrailingSlash(url)}projects/${projectKey}/repos/${repositorySlug}`;\n  }\n\n  static getApiUrl(registryUrl: string): string {\n    const res = BitbucketServerTagsDatasource.getRegistryURL(registryUrl);\n    return `${ensureTrailingSlash(res)}rest/api/1.0/`;\n  }\n\n  static getCacheKey(\n    registryUrl: string | undefined,\n    repo: string,\n    type: string,\n  ): string {\n    return `${BitbucketServerTagsDatasource.getRegistryURL(registryUrl ?? '')}:${repo}:${type}`;\n  }\n\n  // getReleases fetches list of tags for the repository\n  @cache({\n    namespace: BitbucketServerTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      BitbucketServerTagsDatasource.getCacheKey(\n        registryUrl,\n        packageName,\n        'tags',\n      ),\n  })\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const { registryUrl, packageName } = config;\n    const [projectKey, repositorySlug] = packageName.split('/');\n    if (!registryUrl) {\n      logger.debug('Missing registryUrl');\n      return null;\n    }\n\n    const result = Result.parse(config, ReleasesConfig)\n      .transform(({ registryUrl }) => {\n        const url = `${BitbucketServerTagsDatasource.getApiUrl(registryUrl)}projects/${projectKey}/repos/${repositorySlug}/tags`;\n\n        return this.http.getJsonSafe(\n          url,\n          { paginate: true },\n          BitbucketServerTags,\n        );\n      })\n      .transform((tags) =>\n        tags.map(({ displayId, hash }) => ({\n          version: displayId,\n          gitRef: displayId,\n          newDigest: hash ?? undefined,\n        })),\n      )\n      .transform((versions): ReleaseResult => {\n        return {\n          sourceUrl: BitbucketServerTagsDatasource.getSourceUrl(\n            projectKey,\n            repositorySlug,\n            registryUrl,\n          ),\n          registryUrl:\n            BitbucketServerTagsDatasource.getRegistryURL(registryUrl),\n          releases: versions,\n        };\n      });\n    const { val, err } = await result.unwrap();\n\n    if (err instanceof ZodError) {\n      logger.debug({ err }, 'bitbucket-server-tags: validation error');\n      return null;\n    }\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return val;\n  }\n\n  // getTagCommit fetches the commit hash for the specified tag\n  @cache({\n    namespace: BitbucketServerTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: DigestConfig, tag: string) =>\n      BitbucketServerTagsDatasource.getCacheKey(\n        registryUrl,\n        packageName,\n        `tag-${tag}`,\n      ),\n  })\n  async getTagCommit(baseUrl: string, tag: string): Promise<string | null> {\n    const bitbucketServerTag = (\n      await this.http.getJson(`${baseUrl}/tags/${tag}`, BitbucketServerTag)\n    ).body;\n\n    return bitbucketServerTag.hash ?? null;\n  }\n\n  // getDigest fetches the latest commit for repository main branch.\n  // If newValue is provided, then getTagCommit is called\n  @cache({\n    namespace: BitbucketServerTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: DigestConfig) =>\n      BitbucketServerTagsDatasource.getCacheKey(\n        registryUrl,\n        packageName,\n        'digest',\n      ),\n  })\n  override async getDigest(\n    config: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    const { registryUrl, packageName } = config;\n    const [projectKey, repositorySlug] = packageName.split('/');\n    if (!registryUrl) {\n      logger.debug('Missing registryUrl');\n      return null;\n    }\n\n    const baseUrl = `${BitbucketServerTagsDatasource.getApiUrl(registryUrl)}projects/${projectKey}/repos/${repositorySlug}`;\n\n    if (newValue?.length) {\n      return this.getTagCommit(baseUrl, newValue);\n    }\n\n    const result = Result.parse(config, DigestsConfig)\n      .transform(() => {\n        const url = `${baseUrl}/commits?ignoreMissing=true`;\n\n        return this.http.getJsonSafe(\n          url,\n          {\n            paginate: true,\n            limit: 1,\n            maxPages: 1,\n          },\n          BitbucketServerCommits,\n        );\n      })\n      .transform((commits) => {\n        return commits[0]?.id;\n      });\n\n    const { val = null, err } = await result.unwrap();\n\n    if (err instanceof ZodError) {\n      logger.debug({ err }, 'bitbucket-server-tags: validation error');\n      return null;\n    }\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return val;\n  }\n}\n"]}