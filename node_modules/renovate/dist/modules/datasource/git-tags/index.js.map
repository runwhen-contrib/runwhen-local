{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/git-tags/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,+CAA4C;AAC5C,2CAAiD;AAGjD,MAAa,iBAAkB,SAAQ,oBAAa;IAClD,MAAM,CAAmB,EAAE,GAAG,UAAU,CAAC;IAEzC;QACE,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAEiB,qBAAqB,GAAG,KAAK,CAAC;IAC9B,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,4EAA4E,CAAC;IAMzE,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAEvD,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,QAAQ,GAAG,OAAO;aACrB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC;aACpC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACb,OAAO,EAAE,GAAG,CAAC,KAAK;YAClB,MAAM,EAAE,GAAG,CAAC,KAAK;YACjB,SAAS,EAAE,GAAG,CAAC,IAAI;SACpB,CAAC,CAAC,CAAC;QAEN,MAAM,SAAS,GAAG,WAAW;aAC1B,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;aAC5B,OAAO,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAkB;YAC5B,SAAS;YACT,QAAQ;SACT,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAEQ,KAAK,CAAC,SAAS,CACtB,EAAE,WAAW,EAAgB,EAC7B,QAAiB;QAEjB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,QAAQ,IAAI,MAAM,CAAC;QACrC,MAAM,GAAG,GAAG,OAAO,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;QAClE,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,IAAI,CAAC;QAClB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAvDH,8CAwDC;AAxCO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,iBAAiB,CAAC,EAAE,EAAE;QAC/C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;KACzD,CAAC;oDA2BD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { regEx } from '../../../util/regex';\nimport { GitDatasource } from '../git-refs/base';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\n\nexport class GitTagsDatasource extends GitDatasource {\n  static override readonly id = 'git-tags';\n\n  constructor() {\n    super(GitTagsDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  @cache({\n    namespace: `datasource-${GitTagsDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getReleases({\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const rawRefs = await this.getRawRefs({ packageName });\n\n    if (rawRefs === null) {\n      return null;\n    }\n    const releases = rawRefs\n      .filter((ref) => ref.type === 'tags')\n      .map((ref) => ({\n        version: ref.value,\n        gitRef: ref.value,\n        newDigest: ref.hash,\n      }));\n\n    const sourceUrl = packageName\n      .replace(regEx(/\\.git$/), '')\n      .replace(regEx(/\\/$/), '');\n\n    const result: ReleaseResult = {\n      sourceUrl,\n      releases,\n    };\n\n    return result;\n  }\n\n  override async getDigest(\n    { packageName }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    const rawRefs = await this.getRawRefs({ packageName });\n    const findValue = newValue ?? 'HEAD';\n    const ref = rawRefs?.find((rawRef) => rawRef.value === findValue);\n    if (ref) {\n      return ref.hash;\n    }\n    return null;\n  }\n}\n"]}