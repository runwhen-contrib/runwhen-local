{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/terraform-provider/index.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#22198)\nimport is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as p from '../../../util/promises';\nimport { regEx } from '../../../util/regex';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { joinUrlParts } from '../../../util/url';\nimport * as hashicorpVersioning from '../../versioning/hashicorp';\nimport { TerraformDatasource } from '../terraform-module/base';\nimport type { ServiceDiscoveryResult } from '../terraform-module/types';\nimport { createSDBackendURL } from '../terraform-module/utils';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type {\n  TerraformBuild,\n  TerraformProvider,\n  TerraformProviderReleaseBackend,\n  TerraformProviderVersions,\n  TerraformRegistryBuildResponse,\n  TerraformRegistryVersions,\n  VersionDetailResponse,\n} from './types';\n\nexport class TerraformProviderDatasource extends TerraformDatasource {\n  static override readonly id = 'terraform-provider';\n\n  static readonly defaultRegistryUrls = [\n    'https://registry.terraform.io',\n    'https://releases.hashicorp.com',\n  ];\n\n  static repositoryRegex = regEx(/^hashicorp\\/(?<packageName>\\S+)$/);\n\n  constructor() {\n    super(TerraformProviderDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls =\n    TerraformProviderDatasource.defaultRegistryUrls;\n\n  override readonly defaultVersioning = hashicorpVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is only supported for the latest version, and is determined from the `published_at` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the the `source` field in the results.';\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}`,\n    key: (getReleasesConfig: GetReleasesConfig) => {\n      const url = getReleasesConfig.registryUrl;\n      const repo = TerraformProviderDatasource.getRepository(getReleasesConfig);\n      return `getReleases:${url}/${repo}`;\n    },\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    logger.trace(\n      `terraform-provider.getDependencies() packageName: ${packageName}`,\n    );\n\n    if (registryUrl === this.defaultRegistryUrls[1]) {\n      return await this.queryReleaseBackend(packageName, registryUrl);\n    }\n    const repository = TerraformProviderDatasource.getRepository({\n      packageName,\n    });\n    const serviceDiscovery =\n      await this.getTerraformServiceDiscoveryResult(registryUrl);\n\n    if (registryUrl === this.defaultRegistryUrls[0]) {\n      return await this.queryRegistryExtendedApi(\n        serviceDiscovery,\n        registryUrl,\n        repository,\n      );\n    }\n\n    return await this.queryRegistryVersions(\n      serviceDiscovery,\n      registryUrl,\n      repository,\n    );\n  }\n\n  private static getRepository({ packageName }: GetReleasesConfig): string {\n    return packageName.includes('/') ? packageName : `hashicorp/${packageName}`;\n  }\n\n  /**\n   * this uses the api that terraform registry has in addition to the base api\n   * this endpoint provides more information, such as release date\n   * this api is undocumented.\n   */\n  private async queryRegistryExtendedApi(\n    serviceDiscovery: ServiceDiscoveryResult,\n    registryUrl: string,\n    repository: string,\n  ): Promise<ReleaseResult> {\n    const backendURL = createSDBackendURL(\n      registryUrl,\n      'providers.v1',\n      serviceDiscovery,\n      repository,\n    );\n    const res = (\n      await this.http.getJsonUnchecked<TerraformProvider>(backendURL)\n    ).body;\n    const dep: ReleaseResult = {\n      releases: res.versions.map((version) => ({\n        version,\n      })),\n    };\n    if (res.source) {\n      dep.sourceUrl = res.source;\n    }\n    // set published date for latest release\n    const latestVersion = dep.releases.find(\n      (release) => res.version === release.version,\n    );\n    if (latestVersion) {\n      latestVersion.releaseTimestamp = asTimestamp(res.published_at);\n    }\n    dep.homepage = `${registryUrl}/providers/${repository}`;\n    return dep;\n  }\n\n  /**\n   * this version uses the Provider Registry Protocol that all registries are required to implement\n   * https://www.terraform.io/internals/provider-registry-protocol\n   */\n  private async queryRegistryVersions(\n    serviceDiscovery: ServiceDiscoveryResult,\n    registryUrl: string,\n    repository: string,\n  ): Promise<ReleaseResult> {\n    const backendURL = createSDBackendURL(\n      registryUrl,\n      'providers.v1',\n      serviceDiscovery,\n      `${repository}/versions`,\n    );\n    const res = (\n      await this.http.getJsonUnchecked<TerraformProviderVersions>(backendURL)\n    ).body;\n    const dep: ReleaseResult = {\n      releases: res.versions.map(({ version }) => ({\n        version,\n      })),\n    };\n    return dep;\n  }\n\n  private async queryReleaseBackend(\n    packageName: string,\n    registryURL: string,\n  ): Promise<ReleaseResult | null> {\n    const hashicorpPackage = packageName.replace('hashicorp/', '');\n    const backendLookUpName = `terraform-provider-${hashicorpPackage}`;\n    const backendURL = joinUrlParts(\n      registryURL,\n      backendLookUpName,\n      `index.json`,\n    );\n    const res = (\n      await this.http.getJsonUnchecked<TerraformProviderReleaseBackend>(\n        backendURL,\n      )\n    ).body;\n\n    const dep: ReleaseResult = {\n      releases: Object.keys(res.versions).map((version) => ({\n        version,\n      })),\n      sourceUrl: joinUrlParts(\n        'https://github.com/terraform-providers',\n        backendLookUpName,\n      ),\n    };\n    return dep;\n  }\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}`,\n    key: (registryURL: string, repository: string, version: string) =>\n      `getBuilds:${registryURL}/${repository}/${version}`,\n  })\n  async getBuilds(\n    registryURL: string,\n    repository: string,\n    version: string,\n  ): Promise<TerraformBuild[] | null> {\n    if (registryURL === TerraformProviderDatasource.defaultRegistryUrls[1]) {\n      // check if registryURL === secondary backend\n      const repositoryRegexResult =\n        TerraformProviderDatasource.repositoryRegex.exec(repository)?.groups;\n      if (!repositoryRegexResult) {\n        // non hashicorp builds are not supported with releases.hashicorp.com\n        return null;\n      }\n      const packageName = repositoryRegexResult.packageName;\n      const backendLookUpName = `terraform-provider-${packageName}`;\n      let versionReleaseBackend: VersionDetailResponse;\n      try {\n        versionReleaseBackend = await this.getReleaseBackendIndex(\n          backendLookUpName,\n          version,\n        );\n      } catch (err) {\n        /* istanbul ignore next */\n        if (err instanceof ExternalHostError) {\n          throw err;\n        }\n        logger.debug(\n          { err, backendLookUpName, version },\n          `Failed to retrieve builds for ${backendLookUpName} ${version}`,\n        );\n        return null;\n      }\n      return versionReleaseBackend.builds;\n    }\n\n    // check public or private Terraform registry\n    const serviceDiscovery =\n      await this.getTerraformServiceDiscoveryResult(registryURL);\n    if (!serviceDiscovery) {\n      logger.trace(`Failed to retrieve service discovery from ${registryURL}`);\n      return null;\n    }\n    const backendURL = createSDBackendURL(\n      registryURL,\n      'providers.v1',\n      serviceDiscovery,\n      repository,\n    );\n    const versionsResponse = (\n      await this.http.getJsonUnchecked<TerraformRegistryVersions>(\n        `${backendURL}/versions`,\n      )\n    ).body;\n    if (!versionsResponse.versions) {\n      logger.trace(`Failed to retrieve version list for ${backendURL}`);\n      return null;\n    }\n    const builds = versionsResponse.versions.find(\n      (value) => value.version === version,\n    );\n    if (!builds) {\n      logger.trace(\n        `No builds found for ${repository}:${version} on ${registryURL}`,\n      );\n      return null;\n    }\n    const result = await p.map(\n      builds.platforms,\n      async (platform) => {\n        const buildURL = `${backendURL}/${version}/download/${platform.os}/${platform.arch}`;\n        try {\n          const res = (\n            await this.http.getJsonUnchecked<TerraformRegistryBuildResponse>(\n              buildURL,\n            )\n          ).body;\n          const newBuild: TerraformBuild = {\n            name: repository,\n            url: res.download_url,\n            version,\n            ...res,\n          };\n          return newBuild;\n        } catch (err) {\n          /* istanbul ignore next */\n          if (err instanceof ExternalHostError) {\n            throw err;\n          }\n          logger.debug({ err, url: buildURL }, 'Failed to retrieve build');\n          return null;\n        }\n      },\n      { concurrency: 4 },\n    );\n\n    const filteredResult = result.filter(is.truthy);\n    return filteredResult.length === result.length ? filteredResult : null;\n  }\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}`,\n    key: (zipHashUrl: string) => `getZipHashes:${zipHashUrl}`,\n  })\n  async getZipHashes(zipHashUrl: string): Promise<string[] | undefined> {\n    // The hashes are formatted as the result of sha256sum in plain text, each line: <hash>\\t<filename>\n    let rawHashData: string;\n    try {\n      rawHashData = (await this.http.getText(zipHashUrl)).body;\n    } catch (err) {\n      /* istanbul ignore next */\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      logger.debug(\n        { err, zipHashUrl },\n        `Failed to retrieve zip hashes from ${zipHashUrl}`,\n      );\n      return undefined;\n    }\n\n    return rawHashData\n      .trimEnd()\n      .split('\\n')\n      .map((line) => line.split(/\\s/)[0]);\n  }\n\n  @cache({\n    namespace: `datasource-${TerraformProviderDatasource.id}`,\n    key: (backendLookUpName: string, version: string) =>\n      `getReleaseBackendIndex:${backendLookUpName}/${version}`,\n  })\n  async getReleaseBackendIndex(\n    backendLookUpName: string,\n    version: string,\n  ): Promise<VersionDetailResponse> {\n    return (\n      await this.http.getJsonUnchecked<VersionDetailResponse>(\n        `${TerraformProviderDatasource.defaultRegistryUrls[1]}/${backendLookUpName}/${version}/index.json`,\n      )\n    ).body;\n  }\n}\n"]}