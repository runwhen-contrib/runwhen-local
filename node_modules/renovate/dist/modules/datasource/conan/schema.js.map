{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/conan/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAwD;AAExD,qCAAgD;AAEnC,QAAA,mBAAmB,GAAG,OAAC;KACjC,MAAM,CAAC;IACN,QAAQ,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC;CAC5C,CAAC;KACD,SAAS,CACR,CAAC,EAAE,QAAQ,EAAE,EAAiB,EAAE,CAAC,CAAC;IAChC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;CAChE,CAAC,CACH;KACA,QAAQ,EAAE;KACV,KAAK,CAAC,IAAI,CAAC,CAAC;AAEF,QAAA,SAAS,GAAG,OAAC;KACvB,MAAM,CAAC;IACN,OAAO,EAAE,OAAC;SACP,MAAM,EAAE;SACR,KAAK,EAAE;SACP,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CACnB,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,6BAAoB,CAAC,EAAE,MAAM,CAAC,CAC5D;SACA,IAAI,CACH,IAAA,yBAAU,EACR,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;QAChB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;QACnB,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE;KACxB,CAAC,CACH,CACF;CACJ,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC;KACnC,QAAQ,EAAE;KACV,KAAK,CAAC,IAAI,CAAC,CAAC;AAEF,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,CAAC;IACxC,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;IACpB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;CACjB,CAAC,CAAC;AAEU,QAAA,mBAAmB,GAAG,OAAC;KACjC,MAAM,CAAC,EAAE,SAAS,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC;KAC1C,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1C,IAAI,CAAC,yBAAiB,CAAC;KACvB,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC;KACrC,QAAQ,EAAE;KACV,KAAK,CAAC,IAAI,CAAC,CAAC;AAEF,QAAA,eAAe,GAAG,OAAC;KAC7B,MAAM,CAAC;IACN,UAAU,EAAE,OAAC,CAAC,MAAM,CAAC;QACnB,mBAAmB,EAAE,OAAC,CAAC,KAAK,CAAC;YAC3B,OAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;YACpC,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;SACnB,CAAC;KACH,CAAC;CACH,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE;IAC5B,MAAM,SAAS,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAO,EAAE,SAAS,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray } from '../../../util/schema-utils';\nimport type { ReleaseResult } from '../types';\nimport { conanDatasourceRegex } from './common';\n\nexport const ConanCenterReleases = z\n  .object({\n    versions: z.record(z.string(), z.unknown()),\n  })\n  .transform(\n    ({ versions }): ReleaseResult => ({\n      releases: Object.keys(versions).map((version) => ({ version })),\n    }),\n  )\n  .nullable()\n  .catch(null);\n\nexport const ConanJSON = z\n  .object({\n    results: z\n      .string()\n      .array()\n      .transform((array) =>\n        array.map((val) => val.match(conanDatasourceRegex)?.groups),\n      )\n      .pipe(\n        LooseArray(\n          z.object({\n            name: z.string(),\n            version: z.string(),\n            userChannel: z.string(),\n          }),\n        ),\n      ),\n  })\n  .transform(({ results }) => results)\n  .nullable()\n  .catch(null);\n\nexport const ConanRevisionJSON = z.object({\n  revision: z.string(),\n  time: z.string(),\n});\n\nexport const ConanLatestRevision = z\n  .object({ revisions: z.unknown().array() })\n  .transform(({ revisions }) => revisions[0])\n  .pipe(ConanRevisionJSON)\n  .transform(({ revision }) => revision)\n  .nullable()\n  .catch(null);\n\nexport const ConanProperties = z\n  .object({\n    properties: z.object({\n      'conan.package.url': z.union([\n        z.string().transform((url) => [url]),\n        z.string().array(),\n      ]),\n    }),\n  })\n  .transform(({ properties }) => {\n    const sourceUrl = properties['conan.package.url'][0];\n    return { sourceUrl };\n  });\n"]}