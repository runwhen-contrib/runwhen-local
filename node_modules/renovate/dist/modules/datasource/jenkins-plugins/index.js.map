{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/jenkins-plugins/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { clone } from '../../../util/clone';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport type {\n  JenkinsPluginsInfoResponse,\n  JenkinsPluginsVersionsResponse,\n} from './types';\n\nexport class JenkinsPluginsDatasource extends Datasource {\n  static readonly id = 'jenkins-plugins';\n\n  constructor() {\n    super(JenkinsPluginsDatasource.id);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly defaultRegistryUrls = ['https://updates.jenkins.io'];\n\n  override readonly registryStrategy = 'hunt';\n\n  private static readonly packageInfoPath = 'current/update-center.actual.json';\n  private static readonly packageVersionsPath = 'current/plugin-versions.json';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The releaseTimestamp is determined from the `releaseTimestamp` or `buildDate` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `scm` field in the results.';\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    const updateSiteUrl = ensureTrailingSlash(registryUrl);\n\n    const plugins = await this.getJenkinsPluginInfo(updateSiteUrl);\n    const plugin = plugins[packageName];\n    if (!plugin) {\n      return null;\n    }\n\n    const result = clone(plugin);\n    const versions = await this.getJenkinsPluginVersions(updateSiteUrl);\n    const releases = versions[packageName];\n    result.releases = releases ? clone(releases) : [];\n    return result;\n  }\n\n  @cache({\n    namespace: `datasource-${JenkinsPluginsDatasource.id}`,\n    key: 'info',\n    ttlMinutes: 1440,\n  })\n  async getJenkinsPluginInfo(\n    updateSiteUrl: string,\n  ): Promise<Record<string, ReleaseResult>> {\n    const { plugins } =\n      await this.getJenkinsUpdateCenterResponse<JenkinsPluginsInfoResponse>(\n        `${updateSiteUrl}${JenkinsPluginsDatasource.packageInfoPath}`,\n      );\n\n    const info: Record<string, ReleaseResult> = {};\n    for (const name of Object.keys(plugins ?? [])) {\n      info[name] = {\n        releases: [], // releases\n        sourceUrl: plugins[name]?.scm,\n      };\n    }\n    return info;\n  }\n\n  @cache({\n    namespace: `datasource-${JenkinsPluginsDatasource.id}`,\n    key: 'versions',\n  })\n  async getJenkinsPluginVersions(\n    updateSiteUrl: string,\n  ): Promise<Record<string, Release[]>> {\n    const { plugins } =\n      await this.getJenkinsUpdateCenterResponse<JenkinsPluginsVersionsResponse>(\n        `${updateSiteUrl}${JenkinsPluginsDatasource.packageVersionsPath}`,\n      );\n\n    const versions: Record<string, Release[]> = {};\n    for (const name of Object.keys(plugins ?? [])) {\n      versions[name] = Object.keys(plugins[name]).map((version) => {\n        const downloadUrl = plugins[name][version]?.url;\n        const buildDate = plugins[name][version]?.buildDate;\n        const releaseTimestamp =\n          plugins[name][version]?.releaseTimestamp ?? asTimestamp(buildDate);\n        const jenkins = plugins[name][version]?.requiredCore;\n        const constraints = jenkins ? { jenkins: [`>=${jenkins}`] } : undefined;\n        return {\n          version,\n          downloadUrl,\n          releaseTimestamp,\n          ...(constraints && { constraints }),\n        };\n      });\n    }\n    return versions;\n  }\n\n  private async getJenkinsUpdateCenterResponse<T>(url: string): Promise<T> {\n    let response: T;\n\n    try {\n      logger.debug(`jenkins-plugins: Fetching Jenkins plugins from ${url}`);\n      const startTime = Date.now();\n      response = (await this.http.getJsonUnchecked<T>(url)).body;\n      const durationMs = Math.round(Date.now() - startTime);\n      logger.debug(\n        { durationMs },\n        `jenkins-plugins: Fetched Jenkins plugins from ${url}`,\n      );\n    } catch (err) /* istanbul ignore next */ {\n      this.handleGenericErrors(err);\n    }\n\n    return response;\n  }\n}\n"]}