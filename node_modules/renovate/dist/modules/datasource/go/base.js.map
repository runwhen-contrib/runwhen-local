{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/go/base.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: types (#22198)\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { detectPlatform } from '../../../util/common';\nimport * as hostRules from '../../../util/host-rules';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport {\n  parseUrl,\n  trimLeadingSlash,\n  trimTrailingSlash,\n} from '../../../util/url';\nimport { BitbucketTagsDatasource } from '../bitbucket-tags';\nimport { GitTagsDatasource } from '../git-tags';\nimport { GiteaTagsDatasource } from '../gitea-tags';\nimport { GithubTagsDatasource } from '../github-tags';\nimport { GitlabTagsDatasource } from '../gitlab-tags';\nimport type { DataSource } from './types';\n\n// TODO: figure out class hierarchy (#10532)\nexport class BaseGoDatasource {\n  private static readonly gitlabHttpsRegExp = regEx(\n    /^(?<httpsRegExpUrl>https:\\/\\/[^/]*gitlab\\.[^/]*)\\/(?<httpsRegExpName>.+?)(?:\\/v\\d+)?[/]?$/,\n  );\n  private static readonly gitlabRegExp = regEx(\n    /^(?<regExpUrl>gitlab\\.[^/]*)\\/(?<regExpPath>.+?)(?:\\/v\\d+)?[/]?$/,\n  );\n  private static readonly gitVcsRegexp = regEx(\n    /^(?:[^/]+)\\/(?<module>.*)\\.git(?:$|\\/)/,\n  );\n\n  private static readonly id = 'go';\n  private static readonly http = new Http(BaseGoDatasource.id);\n\n  static async getDatasource(goModule: string): Promise<DataSource | null> {\n    if (goModule.startsWith('gopkg.in/')) {\n      const [pkg] = goModule.replace('gopkg.in/', '').split('.');\n      const packageName = pkg.includes('/') ? pkg : `go-${pkg}/${pkg}`;\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    if (goModule.startsWith('github.com/')) {\n      const split = goModule.split('/');\n      const packageName = split[1] + '/' + split[2];\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    if (goModule.startsWith('bitbucket.org/')) {\n      const split = goModule.split('/');\n      const packageName = split[1] + '/' + split[2];\n      return {\n        datasource: BitbucketTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://bitbucket.org',\n      };\n    }\n\n    if (goModule.startsWith('code.cloudfoundry.org/')) {\n      const packageName = goModule.replace(\n        'code.cloudfoundry.org',\n        'cloudfoundry',\n      );\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    if (goModule.startsWith('dev.azure.com/')) {\n      const split = goModule.split('/');\n      if ((split.length > 4 && split[3] === '_git') || split.length > 3) {\n        const packageName =\n          'https://dev.azure.com/' +\n          split[1] +\n          '/' +\n          split[2] +\n          '/_git/' +\n          (split[3] === '_git' ? split[4] : split[3]).replace(\n            regEx(/\\.git$/),\n            '',\n          );\n        return {\n          datasource: GitTagsDatasource.id,\n          packageName,\n        };\n      }\n    }\n\n    //#region known gitea compatible hosts\n    if (goModule.startsWith('gitea.com/')) {\n      const split = goModule.split('/');\n      const packageName = `${split[1]}/${split[2]}`;\n      return {\n        datasource: GiteaTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://gitea.com',\n      };\n    }\n\n    if (goModule.startsWith('code.forgejo.org/')) {\n      const split = goModule.split('/');\n      const packageName = `${split[1]}/${split[2]}`;\n      return {\n        datasource: GiteaTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://code.forgejo.org',\n      };\n    }\n\n    if (goModule.startsWith('codeberg.org/')) {\n      const split = goModule.split('/');\n      const packageName = `${split[1]}/${split[2]}`;\n      return {\n        datasource: GiteaTagsDatasource.id,\n        packageName,\n        registryUrl: 'https://codeberg.org',\n      };\n    }\n    //#endregion\n\n    return await BaseGoDatasource.goGetDatasource(goModule);\n  }\n\n  private static async goGetDatasource(\n    goModule: string,\n  ): Promise<DataSource | null> {\n    const goModuleUrl = goModule.replace(/\\.git(\\/[a-z0-9/]*)?$/, '');\n    const pkgUrl = `https://${goModuleUrl}?go-get=1`;\n    const { body: html } = await BaseGoDatasource.http.getText(pkgUrl);\n\n    const goSourceHeader = BaseGoDatasource.goSourceHeader(html, goModule);\n    if (goSourceHeader) {\n      return goSourceHeader;\n    }\n\n    // GitHub Enterprise only returns a go-import meta\n    const goImport = BaseGoDatasource.goImportHeader(html, goModule);\n    if (goImport) {\n      return goImport;\n    }\n\n    logger.trace({ goModule }, 'No go-source or go-import header found');\n    return null;\n  }\n\n  private static goSourceHeader(\n    html: string,\n    goModule: string,\n  ): DataSource | null {\n    const sourceMatchGroups = regEx(\n      /<meta\\s+name=\"?go-source\"?\\s+content=\"(?<prefix>[^\"\\s]+)\\s+(?<goSourceUrl>[^\"\\s]+)/,\n    ).exec(html)?.groups;\n    if (!sourceMatchGroups) {\n      return null;\n    }\n    const { prefix, goSourceUrl } = sourceMatchGroups;\n\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-source header prefix not match');\n      return null;\n    }\n\n    logger.debug(`Go lookup source url ${goSourceUrl} for module ${goModule}`);\n    return this.detectDatasource(goSourceUrl, goModule);\n  }\n\n  private static detectDatasource(\n    metadataUrl: string,\n    goModule: string,\n  ): DataSource | null {\n    if (metadataUrl.startsWith('https://github.com/')) {\n      return {\n        datasource: GithubTagsDatasource.id,\n        packageName: metadataUrl\n          .replace('https://github.com/', '')\n          .replace(regEx(/\\/$/), ''),\n        registryUrl: 'https://github.com',\n      };\n    }\n\n    const gitlabModuleName =\n      BaseGoDatasource.gitlabRegExp.exec(goModule)?.groups?.regExpPath;\n    const vcsIndicatedModule =\n      BaseGoDatasource.gitVcsRegexp.exec(goModule)?.groups?.module;\n\n    const metadataUrlMatchGroups =\n      BaseGoDatasource.gitlabHttpsRegExp.exec(metadataUrl)?.groups;\n    if (metadataUrlMatchGroups) {\n      const { httpsRegExpUrl, httpsRegExpName } = metadataUrlMatchGroups;\n      const packageName =\n        vcsIndicatedModule ?? gitlabModuleName ?? httpsRegExpName;\n      return {\n        datasource: GitlabTagsDatasource.id,\n        registryUrl: httpsRegExpUrl,\n        packageName,\n      };\n    }\n\n    if (hostRules.hostType({ url: metadataUrl }) === 'gitlab') {\n      const parsedUrl = parseUrl(metadataUrl);\n      if (!parsedUrl) {\n        logger.trace({ goModule }, 'Could not parse go-source URL');\n        return null;\n      }\n\n      const endpoint = GlobalConfig.get('endpoint', '');\n      const endpointPrefix = regEx(\n        /https:\\/\\/[^/]+\\/(?<prefix>.*?\\/)(?:api\\/v4\\/?)?/,\n      ).exec(endpoint)?.groups?.prefix;\n\n      let packageName =\n        // a .git path indicates a concrete git repository, which can be different from metadata returned by gitlab\n        vcsIndicatedModule ?? trimLeadingSlash(parsedUrl.pathname);\n      if (endpointPrefix && endpointPrefix !== 'api/') {\n        packageName = packageName.replace(endpointPrefix, '');\n      }\n\n      const registryUrl = endpointPrefix\n        ? endpoint.replace(regEx(/\\/api\\/v4\\/?$/), '/')\n        : `${parsedUrl.protocol}//${parsedUrl.host}`;\n\n      return {\n        datasource: GitlabTagsDatasource.id,\n        registryUrl,\n        packageName,\n      };\n    }\n    /* istanbul ignore next */\n    return null;\n  }\n\n  private static goImportHeader(\n    html: string,\n    goModule: string,\n  ): DataSource | null {\n    const importMatchGroups = regEx(\n      /<meta\\s+name=\"?go-import\"?\\s+content=\"(?<prefix>[^\"\\s]+)\\s+(?<proto>[^\"\\s]+)\\s+(?<goImportURL>[^\"\\s]+)/,\n    ).exec(html)?.groups;\n    if (!importMatchGroups) {\n      logger.trace({ goModule }, 'No go-source or go-import header found');\n      return null;\n    }\n    const { prefix, proto, goImportURL } = importMatchGroups;\n\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-import header prefix not match');\n      return null;\n    }\n\n    if (proto !== 'git') {\n      logger.trace({ goModule }, 'go-import header proto not git');\n      return null;\n    }\n\n    // get server base url from import url\n    const parsedUrl = parseUrl(goImportURL);\n    if (!parsedUrl) {\n      logger.trace({ goModule }, 'Could not parse go-import URL');\n      return null;\n    }\n\n    logger.debug(`Go module: ${goModule} lookup import url ${goImportURL}`);\n\n    const datasource = this.detectDatasource(\n      goImportURL.replace(regEx(/\\.git$/), ''),\n      goModule,\n    );\n    if (datasource !== null) {\n      return datasource;\n    }\n    // fall back to old behavior if detection did not work\n\n    switch (detectPlatform(goImportURL)) {\n      case 'github': {\n        // split the go module from the URL: host/go/module -> go/module\n        // TODO: `parsedUrl.pathname` can be undefined\n        const packageName = trimTrailingSlash(`${parsedUrl.pathname}`)\n          .replace(regEx(/\\.git$/), '')\n          .split('/')\n          .slice(-2)\n          .join('/');\n\n        return {\n          datasource: GithubTagsDatasource.id,\n          registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,\n          packageName,\n        };\n      }\n      case 'azure': {\n        return {\n          datasource: GitTagsDatasource.id,\n          packageName: goImportURL.replace(regEx(/\\.git$/), ''),\n        };\n      }\n      default: {\n        return {\n          datasource: GitTagsDatasource.id,\n          packageName: goImportURL,\n        };\n      }\n    }\n  }\n}\n"]}