{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitea-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport type { PackageCacheNamespace } from '../../../util/cache/package/types';\nimport { GiteaHttp } from '../../../util/http/gitea';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { CommitsSchema, TagSchema, TagsSchema } from './schema';\n\nexport class GiteaTagsDatasource extends Datasource {\n  static readonly id = 'gitea-tags';\n\n  override http = new GiteaHttp(GiteaTagsDatasource.id);\n\n  static readonly defaultRegistryUrls = ['https://gitea.com'];\n\n  private static readonly cacheNamespace: PackageCacheNamespace = `datasource-${GiteaTagsDatasource.id}`;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `created` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GiteaTagsDatasource.id);\n  }\n\n  static getRegistryURL(registryUrl?: string): string {\n    // fallback to default API endpoint if custom not provided\n    return registryUrl ?? this.defaultRegistryUrls[0];\n  }\n\n  static getApiUrl(registryUrl?: string): string {\n    const res = GiteaTagsDatasource.getRegistryURL(registryUrl).replace(\n      regEx(/\\/api\\/v1$/),\n      '',\n    );\n    return `${ensureTrailingSlash(res)}api/v1/`;\n  }\n\n  static getCacheKey(\n    registryUrl: string | undefined,\n    repo: string,\n    type: string,\n  ): string {\n    return `${GiteaTagsDatasource.getRegistryURL(registryUrl)}:${repo}:${type}`;\n  }\n\n  static getSourceUrl(packageName: string, registryUrl?: string): string {\n    const url = GiteaTagsDatasource.getRegistryURL(registryUrl);\n    const normalizedUrl = ensureTrailingSlash(url);\n    return `${normalizedUrl}${packageName}`;\n  }\n\n  // getReleases fetches list of tags for the repository\n  @cache({\n    namespace: GiteaTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, packageName, 'tags'),\n  })\n  async getReleases({\n    registryUrl,\n    packageName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/tags`;\n    const tags = (\n      await this.http.getJson(\n        url,\n        {\n          paginate: true,\n        },\n        TagsSchema,\n      )\n    ).body;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: GiteaTagsDatasource.getSourceUrl(repo, registryUrl),\n      registryUrl: GiteaTagsDatasource.getRegistryURL(registryUrl),\n      releases: tags.map(({ name, commit }) => ({\n        version: name,\n        gitRef: name,\n        newDigest: commit.sha,\n        releaseTimestamp: commit.created,\n      })),\n    };\n\n    return dependency;\n  }\n\n  // getTagCommit fetched the commit has for specified tag\n  @cache({\n    namespace: GiteaTagsDatasource.cacheNamespace,\n    key: (registryUrl: string | undefined, repo: string, tag: string): string =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, repo, `tag-${tag}`),\n  })\n  async getTagCommit(\n    registryUrl: string | undefined,\n    repo: string,\n    tag: string,\n  ): Promise<string | null> {\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/tags/${tag}`;\n\n    const { body } = await this.http.getJson(url, TagSchema);\n\n    return body.commit.sha;\n  }\n\n  // getDigest fetched the latest commit for repository main branch\n  // however, if newValue is provided, then getTagCommit is called\n  @cache({\n    namespace: GiteaTagsDatasource.cacheNamespace,\n    key: ({ registryUrl, packageName }: DigestConfig) =>\n      GiteaTagsDatasource.getCacheKey(registryUrl, packageName, 'digest'),\n  })\n  override async getDigest(\n    { packageName: repo, registryUrl }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    if (newValue?.length) {\n      return this.getTagCommit(registryUrl, repo, newValue);\n    }\n\n    const url = `${GiteaTagsDatasource.getApiUrl(\n      registryUrl,\n    )}repos/${repo}/commits?stat=false&verification=false&files=false&page=1&limit=1`;\n    const { body } = await this.http.getJson(url, CommitsSchema);\n\n    if (body.length === 0) {\n      return null;\n    }\n\n    return body[0].sha;\n  }\n}\n"]}