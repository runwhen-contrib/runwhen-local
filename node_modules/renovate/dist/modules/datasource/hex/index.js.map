{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/hex/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,qEAA8D;AAC9D,2CAAiD;AACjD,4EAAsD;AACtD,8CAA2C;AAE3C,qCAAsC;AAEtC,MAAa,aAAc,SAAQ,uBAAU;IAC3C,MAAM,CAAU,EAAE,GAAG,KAAK,CAAC;IAE3B;QACE,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAEiB,mBAAmB,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAEzC,iBAAiB,GAAG,aAAa,CAAC,EAAE,CAAC;IAErC,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,6EAA6E,CAAC;IAC9D,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,sEAAsE,CAAC;IAMnE,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,wCAAwC;QACxC,oFAAoF;QACpF,kCAAkC;QAClC,mDAAmD;QACnD,yDAAyD;QACzD,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClE,MAAM,qBAAqB,GAAG,gBAAgB;YAC5C,CAAC,CAAC,SAAS,gBAAgB,GAAG;YAC9B,CAAC,CAAC,EAAE,CAAC;QAEP,MAAM,MAAM,GAAG,IAAA,kBAAY,EACzB,WAAW,EACX,QAAQ,qBAAqB,YAAY,cAAc,EAAE,CAC1D,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aACzC,WAAW,CAAC,MAAM,EAAE,mBAAU,CAAC;aAC/B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,EACpD,yBAAyB,CAC1B,CAAC;QACJ,CAAC,CAAC;aACD,MAAM,EAAE,CAAC;QAEZ,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;AA7DH,sCA8DC;AAxCO;IAJL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,aAAa,CAAC,EAAE,EAAE;QAC3C,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;KACzD,CAAC;gDAwCD","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport * as hexVersioning from '../../versioning/hex';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { HexRelease } from './schema';\n\nexport class HexDatasource extends Datasource {\n  static readonly id = 'hex';\n\n  constructor() {\n    super(HexDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://hex.pm'];\n\n  override readonly defaultVersioning = hexVersioning.id;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined the `inserted_at` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `Github` field in the results.';\n\n  @cache({\n    namespace: `datasource-${HexDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    // Get dependency name from packageName.\n    // If the dependency is private packageName contains organization name as following:\n    // hexPackageName:organizationName\n    // hexPackageName is used to pass it in hex dep url\n    // organizationName is used for accessing to private deps\n    const [hexPackageName, organizationName] = packageName.split(':');\n    const organizationUrlPrefix = organizationName\n      ? `repos/${organizationName}/`\n      : '';\n\n    const hexUrl = joinUrlParts(\n      registryUrl,\n      `/api/${organizationUrlPrefix}packages/${hexPackageName}`,\n    );\n\n    const { val: result, err } = await this.http\n      .getJsonSafe(hexUrl, HexRelease)\n      .onError((err) => {\n        logger.warn(\n          { url: hexUrl, datasource: 'hex', packageName, err },\n          'Error fetching from url',\n        );\n      })\n      .unwrap();\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return result;\n  }\n}\n"]}