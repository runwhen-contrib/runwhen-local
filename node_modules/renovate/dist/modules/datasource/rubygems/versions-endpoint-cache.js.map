{"version":3,"file":"versions-endpoint-cache.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/versions-endpoint-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { logger } from '../../../logger';\nimport { getElapsedMinutes } from '../../../util/date';\nimport type { Http } from '../../../util/http';\nimport { HttpError } from '../../../util/http';\nimport type { HttpOptions } from '../../../util/http/types';\nimport { newlineRegex } from '../../../util/regex';\nimport { Result } from '../../../util/result';\nimport { LooseArray } from '../../../util/schema-utils';\nimport { copystr } from '../../../util/string';\nimport { parseUrl } from '../../../util/url';\n\ntype PackageVersions = Map<string, string[]>;\n\ninterface VersionsEndpointData {\n  packageVersions: PackageVersions;\n  syncedAt: Date;\n  contentLength: number;\n\n  /**\n   * Last 33 characters of the response (32 hex digits + newline)\n   */\n  contentTail: string;\n}\n\nfunction getContentTail(content: string): string {\n  return content.slice(-33);\n}\n\nfunction getContentHead(content: string): string {\n  return content.slice(0, 33);\n}\n\nfunction stripContentHead(content: string): string {\n  return content.slice(33);\n}\n\nfunction reconcilePackageVersions(\n  packageVersions: PackageVersions,\n  versionLines: VersionLines,\n): PackageVersions {\n  for (const line of versionLines) {\n    const packageName = copystr(line.packageName);\n    let versions = packageVersions.get(packageName) ?? [];\n\n    const { deletedVersions, addedVersions } = line;\n\n    if (deletedVersions.size > 0) {\n      versions = versions.filter((v) => !deletedVersions.has(v));\n    }\n\n    if (addedVersions.length > 0) {\n      const existingVersions = new Set(versions);\n      for (const addedVersion of addedVersions) {\n        if (!existingVersions.has(addedVersion)) {\n          const version = copystr(addedVersion);\n          versions.push(version);\n        }\n      }\n    }\n\n    packageVersions.set(packageName, versions);\n  }\n\n  return packageVersions;\n}\n\nfunction parseFullBody(body: string): VersionsEndpointResult {\n  const packageVersions = reconcilePackageVersions(\n    new Map<string, string[]>(),\n    VersionLines.parse(body),\n  );\n  const syncedAt = new Date();\n  const contentLength = body.length;\n  const contentTail = getContentTail(body);\n\n  return Result.ok({\n    packageVersions,\n    syncedAt,\n    contentLength,\n    contentTail,\n  });\n}\n\ntype VersionsEndpointResult = Result<VersionsEndpointData, 'unsupported-api'>;\n\nexport const memCache = new Map<string, VersionsEndpointResult>();\n\nfunction cacheResult(\n  registryUrl: string,\n  result: VersionsEndpointResult,\n): void {\n  const registryHostname = parseUrl(registryUrl)?.hostname;\n  if (registryHostname === 'rubygems.org') {\n    memCache.set(registryUrl, result);\n  }\n}\n\nconst VersionLines = z\n  .string()\n  .transform((x) => x.split(newlineRegex))\n  .pipe(\n    LooseArray(\n      z\n        .string()\n        .transform((line) => line.trim())\n        .refine((line) => line.length > 0)\n        .refine((line) => !line.startsWith('created_at:'))\n        .refine((line) => line !== '---')\n        .transform((line) => line.split(' '))\n        .pipe(z.tuple([z.string(), z.string()]).rest(z.string()))\n        .transform(([packageName, versions]) => {\n          const deletedVersions = new Set<string>();\n          const addedVersions: string[] = [];\n          for (const version of versions.split(',')) {\n            if (version.startsWith('-')) {\n              deletedVersions.add(version.slice(1));\n            } else {\n              addedVersions.push(version);\n            }\n          }\n          return { packageName, deletedVersions, addedVersions };\n        }),\n    ),\n  );\ntype VersionLines = z.infer<typeof VersionLines>;\n\nfunction isStale(regCache: VersionsEndpointData): boolean {\n  return getElapsedMinutes(regCache.syncedAt) >= 15;\n}\n\nexport type VersionsResult = Result<\n  string[],\n  'unsupported-api' | 'package-not-found'\n>;\n\nexport class VersionsEndpointCache {\n  constructor(private readonly http: Http) {}\n\n  private cacheRequests = new Map<string, Promise<VersionsEndpointResult>>();\n\n  /**\n   * At any given time, there should only be one request for a given registryUrl.\n   */\n  private async getCache(registryUrl: string): Promise<VersionsEndpointResult> {\n    const oldResult = memCache.get(registryUrl);\n    if (!oldResult) {\n      const newResult = await this.fullSync(registryUrl);\n      cacheResult(registryUrl, newResult);\n      return newResult;\n    }\n\n    const { val: data } = oldResult.unwrap();\n    if (!data) {\n      return oldResult;\n    }\n\n    if (isStale(data)) {\n      memCache.delete(registryUrl); // If no error is thrown, we'll re-set the cache\n      const newResult = await this.deltaSync(data, registryUrl);\n      cacheResult(registryUrl, newResult);\n      return newResult;\n    }\n\n    return oldResult;\n  }\n\n  async getVersions(\n    registryUrl: string,\n    packageName: string,\n  ): Promise<VersionsResult> {\n    /**\n     * Ensure that only one request for a given registryUrl is in flight at a time.\n     */\n    let cacheRequest = this.cacheRequests.get(registryUrl);\n    if (!cacheRequest) {\n      cacheRequest = this.getCache(registryUrl);\n      this.cacheRequests.set(registryUrl, cacheRequest);\n    }\n    let cachedResult: VersionsEndpointResult;\n    try {\n      cachedResult = await cacheRequest;\n    } finally {\n      this.cacheRequests.delete(registryUrl);\n    }\n\n    const { val: cachedData } = cachedResult.unwrap();\n    if (!cachedData) {\n      logger.debug(\n        { packageName, registryUrl },\n        'Rubygems: endpoint not supported',\n      );\n      return Result.err('unsupported-api');\n    }\n\n    const versions = cachedData.packageVersions.get(packageName);\n    if (!versions?.length) {\n      logger.debug(\n        { packageName, registryUrl },\n        'Rubygems: versions not found',\n      );\n      return Result.err('package-not-found');\n    }\n\n    return Result.ok(versions);\n  }\n\n  private async fullSync(registryUrl: string): Promise<VersionsEndpointResult> {\n    try {\n      const url = `${registryUrl}/versions`;\n      const opts: HttpOptions = { headers: { 'Accept-Encoding': 'gzip' } };\n      const { body } = await this.http.getText(url, opts);\n      return parseFullBody(body);\n    } catch (err) {\n      if (err instanceof HttpError && err.response?.statusCode === 404) {\n        return Result.err('unsupported-api');\n      }\n\n      throw err;\n    }\n  }\n\n  private async deltaSync(\n    oldCache: VersionsEndpointData,\n    registryUrl: string,\n  ): Promise<VersionsEndpointResult> {\n    try {\n      const url = `${registryUrl}/versions`;\n      const startByte = oldCache.contentLength - oldCache.contentTail.length;\n      const opts: HttpOptions = {\n        headers: {\n          ['Accept-Encoding']: 'deflate, compress, br', // Note: `gzip` usage breaks http client, when used with `Range` header\n          ['Range']: `bytes=${startByte}-`,\n        },\n      };\n      const { statusCode, body } = await this.http.getText(url, opts);\n\n      /**\n       * Rubygems will return the full body instead of `416 Range Not Satisfiable`.\n       * In this case, status code will be 200 instead of 206.\n       */\n      if (statusCode === 200) {\n        return parseFullBody(body);\n      }\n\n      /**\n       * We request data in range that overlaps previously fetched data.\n       * If the head of the response doesn't match the tail of the previous response,\n       * it means that the data we have is no longer valid.\n       * In this case we start over with a full sync.\n       */\n      const contentHead = getContentHead(body);\n      if (contentHead !== oldCache.contentTail) {\n        return this.fullSync(registryUrl);\n      }\n\n      /**\n       * Update the cache with the new data.\n       */\n      const delta = stripContentHead(body);\n      const packageVersions = reconcilePackageVersions(\n        oldCache.packageVersions,\n        VersionLines.parse(delta),\n      );\n      const syncedAt = new Date();\n      const contentLength = oldCache.contentLength + delta.length;\n      const contentTail = getContentTail(body);\n\n      return Result.ok({\n        packageVersions,\n        syncedAt,\n        contentLength,\n        contentTail,\n      });\n    } catch (err) {\n      if (err instanceof HttpError) {\n        const responseStatus = err.response?.statusCode;\n\n        /**\n         * In case of `416 Range Not Satisfiable` we do a full sync.\n         * This is unlikely to happen in real life, but anyway.\n         */\n        if (responseStatus === 416) {\n          return this.fullSync(registryUrl);\n        }\n\n        /**\n         * If the endpoint is not supported, we stop trying.\n         * This is unlikely to happen in real life, but still.\n         */\n        if (responseStatus === 404) {\n          return Result.err('unsupported-api');\n        }\n      }\n\n      throw err;\n    }\n  }\n}\n"]}