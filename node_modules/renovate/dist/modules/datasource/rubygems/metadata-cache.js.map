{"version":3,"file":"metadata-cache.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/metadata-cache.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,kFAA4D;AAC5D,6CAA8C;AAG9C,iDAA8C;AAC9C,2CAA6C;AAE7C,qCAAyC;AAQzC,SAAS,YAAY,CAAC,QAAkB;IACtC,OAAO,IAAA,eAAQ,EAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,YAAY,CAAC,QAAuB;IAC3C,OAAO,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3E,CAAC;AAeD,MAAa,aAAa;IACK;IAA7B,YAA6B,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAE3C,KAAK,CAAC,UAAU,CACd,WAAmB,EACnB,WAAmB,EACnB,QAAkB;QAElB,MAAM,OAAO,GAAG,qBAAqB,CAAC;QACtC,MAAM,QAAQ,GAAG,kBAAkB,WAAW,IAAI,WAAW,EAAE,CAAC;QAChE,MAAM,YAAY,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE5C,MAAM,SAAS,GAAG,GAA+C,EAAE,CACjE,eAAM,CAAC,YAAY,CACjB,YAAY,CAAC,GAAG,CAAc,OAAO,EAAE,QAAQ,CAAC,EAChD,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAC5B,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,OAAO,YAAY,KAAK,KAAK,CAAC,IAAI;gBAChC,CAAC,CAAC,eAAM,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;gBACvB,CAAC,CAAC,eAAM,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEL,MAAM,SAAS,GAAG,KAAK,EACrB,KAAkB,EAClB,UAAU,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAC1B,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EACR,EAAE;YACjB,MAAM,gBAAgB,GAAG,IAAA,cAAQ,EAAC,WAAW,CAAC,EAAE,QAAQ,CAAC;YACzD,IAAI,gBAAgB,KAAK,cAAc,EAAE,CAAC;gBACxC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC;gBAC5D,MAAM,GAAG,GAAG,UAAU,GAAG,cAAc,CAAC;gBACxC,MAAM,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC;QAEF,OAAO,MAAM,SAAS,EAAE;aACrB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CACb,IAAA,sBAAa,EAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,SAAS,CAC1D,KAAK,EACH,IAAmB,EACyB,EAAE;YAC9C,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,QAAQ,KAAK,YAAY,EAAE,CAAC;gBAC9B,MAAM,SAAS,CAAC;oBACd,IAAI,EAAE,QAAQ;oBACd,IAAI;iBACL,CAAC,CAAC;gBACH,OAAO,eAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;YAED;;;eAGG;YACH,IAAI,GAAG,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;gBAC/B,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC;gBAC7B,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;oBAC3B,MAAM,SAAS,CACb,EAAE,GAAG,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,EACnC,EAAE,GAAG,EAAE,EACP,CAAC,CACF,CAAC;gBACJ,CAAC;gBACD,OAAO,eAAM,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;YAED,OAAO,eAAM,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;QAC/C,CAAC,CACF,CACF;aACA,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,8EAA8E,CAC/E,CAAC;YACF,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAC1D,OAAO,eAAM,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAmB,CAAC,CAAC;QAClD,CAAC,CAAC;aACD,aAAa,EAAE,CAAC;IACrB,CAAC;CACF;AAhFD,sCAgFC","sourcesContent":["import { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { toSha256 } from '../../../util/hash';\nimport type { Http } from '../../../util/http';\nimport type { AsyncResult } from '../../../util/result';\nimport { Result } from '../../../util/result';\nimport { parseUrl } from '../../../util/url';\nimport type { ReleaseResult } from '../types';\nimport { getV1Releases } from './common';\n\ninterface CacheRecord {\n  hash: string;\n  data: ReleaseResult;\n  isFallback?: true;\n}\n\nfunction hashVersions(versions: string[]): string {\n  return toSha256(versions.sort().join(','));\n}\n\nfunction hashReleases(releases: ReleaseResult): string {\n  return hashVersions(releases.releases.map((release) => release.version));\n}\n\ninterface CacheNotFoundError {\n  type: 'cache-not-found';\n}\ninterface CacheStaleError {\n  type: 'cache-stale';\n  cache: CacheRecord;\n}\ninterface CacheInvalidError {\n  type: 'cache-invalid';\n}\ntype CacheLoadError = CacheNotFoundError | CacheStaleError;\ntype CacheError = CacheNotFoundError | CacheStaleError | CacheInvalidError;\n\nexport class MetadataCache {\n  constructor(private readonly http: Http) {}\n\n  async getRelease(\n    registryUrl: string,\n    packageName: string,\n    versions: string[],\n  ): Promise<ReleaseResult> {\n    const cacheNs = `datasource-rubygems`;\n    const cacheKey = `metadata-cache:${registryUrl}:${packageName}`;\n    const versionsHash = hashVersions(versions);\n\n    const loadCache = (): AsyncResult<ReleaseResult, CacheLoadError> =>\n      Result.wrapNullable<CacheRecord, CacheLoadError, CacheLoadError>(\n        packageCache.get<CacheRecord>(cacheNs, cacheKey),\n        { type: 'cache-not-found' },\n      ).transform((cache) => {\n        return versionsHash === cache.hash\n          ? Result.ok(cache.data)\n          : Result.err({ type: 'cache-stale', cache });\n      });\n\n    const saveCache = async (\n      cache: CacheRecord,\n      ttlMinutes = 100 * 24 * 60,\n      ttlDelta = 10 * 24 * 60,\n    ): Promise<void> => {\n      const registryHostname = parseUrl(registryUrl)?.hostname;\n      if (registryHostname === 'rubygems.org') {\n        const ttlRandomDelta = Math.floor(Math.random() * ttlDelta);\n        const ttl = ttlMinutes + ttlRandomDelta;\n        await packageCache.set(cacheNs, cacheKey, cache, ttl);\n      }\n    };\n\n    return await loadCache()\n      .catch((err) =>\n        getV1Releases(this.http, registryUrl, packageName).transform(\n          async (\n            data: ReleaseResult,\n          ): Promise<Result<ReleaseResult, CacheError>> => {\n            const dataHash = hashReleases(data);\n            if (dataHash === versionsHash) {\n              await saveCache({\n                hash: dataHash,\n                data,\n              });\n              return Result.ok(data);\n            }\n\n            /**\n             * Return stale cache for 24 hours,\n             * if metadata is inconsistent with versions list.\n             */\n            if (err.type === 'cache-stale') {\n              const staleCache = err.cache;\n              if (!staleCache.isFallback) {\n                await saveCache(\n                  { ...staleCache, isFallback: true },\n                  24 * 60,\n                  0,\n                );\n              }\n              return Result.ok(staleCache.data);\n            }\n\n            return Result.err({ type: 'cache-invalid' });\n          },\n        ),\n      )\n      .catch((err) => {\n        logger.debug(\n          { err },\n          'Rubygems: error fetching rubygems data, falling back to versions-only result',\n        );\n        const releases = versions.map((version) => ({ version }));\n        return Result.ok({ releases } as ReleaseResult);\n      })\n      .unwrapOrThrow();\n  }\n}\n"]}