{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Marshal } from '@qnighy/marshal';\nimport type { ZodError } from 'zod';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { Http, HttpError } from '../../../util/http';\nimport { AsyncResult, Result } from '../../../util/result';\nimport { getQueryString, joinUrlParts, parseUrl } from '../../../util/url';\nimport * as rubyVersioning from '../../versioning/ruby';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { getV1Releases } from './common';\nimport { MetadataCache } from './metadata-cache';\nimport { GemInfo, MarshalledVersionInfo } from './schema';\nimport { VersionsEndpointCache } from './versions-endpoint-cache';\n\nfunction unlessServerSide<\n  T extends NonNullable<unknown>,\n  E extends NonNullable<unknown>,\n>(err: E, cb: () => AsyncResult<T, E>): AsyncResult<T, E> {\n  if (err instanceof HttpError && err.response?.statusCode) {\n    const code = err.response.statusCode;\n    if (code >= 500 && code <= 599) {\n      return AsyncResult.err(err);\n    }\n  }\n  return cb();\n}\n\nexport class RubygemsDatasource extends Datasource {\n  static readonly id = 'rubygems';\n\n  private metadataCache: MetadataCache;\n\n  constructor() {\n    super(RubygemsDatasource.id);\n    this.http = new Http(RubygemsDatasource.id);\n    this.versionsEndpointCache = new VersionsEndpointCache(this.http);\n    this.metadataCache = new MetadataCache(this.http);\n  }\n\n  override readonly defaultRegistryUrls = ['https://rubygems.org'];\n\n  override readonly defaultVersioning = rubyVersioning.id;\n\n  override readonly registryStrategy = 'hunt';\n\n  private readonly versionsEndpointCache: VersionsEndpointCache;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `created_at` field in the results.';\n  override readonly sourceUrlSupport = 'release';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `source_code_uri` field in the results.';\n\n  @cache({\n    namespace: `datasource-${RubygemsDatasource.id}`,\n    key: ({ packageName, registryUrl }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `releases:${registryUrl!}:${packageName}`,\n    cacheable: ({ registryUrl }: GetReleasesConfig) => {\n      const registryHostname = parseUrl(registryUrl)?.hostname;\n      return registryHostname === 'rubygems.org';\n    },\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const registryHostname = parseUrl(registryUrl)?.hostname;\n\n    let result: AsyncResult<ReleaseResult, Error | string>;\n    if (registryHostname === 'rubygems.org') {\n      result = Result.wrap(\n        this.versionsEndpointCache.getVersions(registryUrl, packageName),\n      ).transform((versions) =>\n        this.metadataCache.getRelease(registryUrl, packageName, versions),\n      );\n    } else if (\n      registryHostname === 'rubygems.pkg.github.com' ||\n      registryHostname === 'gitlab.com'\n    ) {\n      result = this.getReleasesViaDeprecatedAPI(registryUrl, packageName);\n    } else {\n      result = getV1Releases(this.http, registryUrl, packageName)\n        .catch((err) =>\n          unlessServerSide(err, () =>\n            this.getReleasesViaInfoEndpoint(registryUrl, packageName),\n          ),\n        )\n        .catch((err) =>\n          unlessServerSide(err, () =>\n            this.getReleasesViaDeprecatedAPI(registryUrl, packageName),\n          ),\n        );\n    }\n\n    const { val, err } = await result.unwrap();\n    if (val) {\n      return val;\n    }\n\n    if (err instanceof Error) {\n      this.handleGenericErrors(err);\n    }\n\n    logger.debug({ packageName, registryUrl }, `Rubygems fetch error: ${err}`);\n    return null;\n  }\n\n  private getReleasesViaInfoEndpoint(\n    registryUrl: string,\n    packageName: string,\n  ): AsyncResult<ReleaseResult, Error | ZodError> {\n    const url = joinUrlParts(registryUrl, '/info', packageName);\n    return Result.wrap(this.http.getText(url))\n      .transform(({ body }) => body)\n      .parse(GemInfo);\n  }\n\n  private getReleasesViaDeprecatedAPI(\n    registryUrl: string,\n    packageName: string,\n  ): AsyncResult<ReleaseResult, Error | ZodError> {\n    const path = joinUrlParts(registryUrl, `/api/v1/dependencies`);\n    const query = getQueryString({ gems: packageName });\n    const url = `${path}?${query}`;\n    const bufPromise = this.http.getBuffer(url);\n    return Result.wrap(bufPromise).transform(({ body }) =>\n      MarshalledVersionInfo.safeParse(Marshal.parse(body)),\n    );\n  }\n}\n"]}