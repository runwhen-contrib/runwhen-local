{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/common.ts"],"names":[],"mappings":";;AAOA,wCASC;AAED,sCAOC;AAED,sCAgBC;AA3CD,2DAAuD;AAGvD,2CAAyD;AAEzD,qCAAoD;AAEpD,SAAgB,cAAc,CAC5B,QAAuB,EACvB,QAAqB;IAErB,OAAO,IAAA,wBAAU,EAAC,QAAQ,EAAE,QAAQ,EAAE;QACpC,cAAc;QACd,WAAW;QACX,UAAU;KACX,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,aAAa,CAC3B,IAAU,EACV,WAAmB,EACnB,WAAmB;IAEnB,MAAM,WAAW,GAAG,IAAA,kBAAI,EAAC,WAAW,EAAE,cAAc,EAAE,GAAG,WAAW,OAAO,CAAC,CAAC;IAC7E,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,oBAAW,CAAC,CAAC;AACpD,CAAC;AAED,SAAgB,aAAa,CAC3B,IAAU,EACV,WAAmB,EACnB,WAAmB;IAEnB,MAAM,WAAW,GAAG,IAAA,kBAAI,EACtB,WAAW,EACX,kBAAkB,EAClB,GAAG,WAAW,OAAO,CACtB,CAAC;IAEF,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,oBAAW,CAAC,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE,CAC5E,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC;SAC1C,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,cAAc,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;SAChE,QAAQ,CAAC,aAAa,CAAC,CAC3B,CAAC;AACJ,CAAC","sourcesContent":["import { assignKeys } from '../../../util/assign-keys';\nimport type { Http, SafeJsonError } from '../../../util/http';\nimport type { AsyncResult } from '../../../util/result';\nimport { joinUrlParts as join } from '../../../util/url';\nimport type { ReleaseResult } from '../types';\nimport { GemMetadata, GemVersions } from './schema';\n\nexport function assignMetadata(\n  releases: ReleaseResult,\n  metadata: GemMetadata,\n): ReleaseResult {\n  return assignKeys(releases, metadata, [\n    'changelogUrl',\n    'sourceUrl',\n    'homepage',\n  ]);\n}\n\nexport function getV1Metadata(\n  http: Http,\n  registryUrl: string,\n  packageName: string,\n): AsyncResult<GemMetadata, SafeJsonError> {\n  const metadataUrl = join(registryUrl, '/api/v1/gems', `${packageName}.json`);\n  return http.getJsonSafe(metadataUrl, GemMetadata);\n}\n\nexport function getV1Releases(\n  http: Http,\n  registryUrl: string,\n  packageName: string,\n): AsyncResult<ReleaseResult, SafeJsonError | 'unsupported-api'> {\n  const versionsUrl = join(\n    registryUrl,\n    '/api/v1/versions',\n    `${packageName}.json`,\n  );\n\n  return http.getJsonSafe(versionsUrl, GemVersions).transform((releaseResult) =>\n    getV1Metadata(http, registryUrl, packageName)\n      .transform((metadata) => assignMetadata(releaseResult, metadata))\n      .unwrapOr(releaseResult),\n  );\n}\n"]}