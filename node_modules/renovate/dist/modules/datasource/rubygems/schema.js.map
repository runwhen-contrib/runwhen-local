{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/rubygems/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { z } from 'zod';\nimport { filterMap } from '../../../util/filter-map';\nimport { newlineRegex } from '../../../util/regex';\nimport { LooseArray } from '../../../util/schema-utils';\nimport { MaybeTimestamp } from '../../../util/timestamp';\nimport type { Release } from '../types';\n\nexport const MarshalledVersionInfo = LooseArray(\n  z\n    .object({ number: z.string() })\n    .transform(({ number: version }): Release => ({ version })),\n)\n  .refine(\n    (value) => !is.emptyArray(value),\n    'Empty response from `/v1/dependencies` endpoint',\n  )\n  .transform((releases) => ({ releases }));\ntype MarshalledVersionInfo = z.infer<typeof MarshalledVersionInfo>;\n\nexport const GemMetadata = z\n  .object({\n    changelog_uri: z.string().optional().catch(undefined),\n    homepage_uri: z.string().optional().catch(undefined),\n    source_code_uri: z.string().optional().catch(undefined),\n  })\n  .transform(\n    ({\n      changelog_uri: changelogUrl,\n      homepage_uri: homepage,\n      source_code_uri: sourceUrl,\n    }) => ({ changelogUrl, homepage, sourceUrl }),\n  );\nexport type GemMetadata = z.infer<typeof GemMetadata>;\n\nexport const GemVersions = LooseArray(\n  z\n    .object({\n      number: z.string(),\n      created_at: MaybeTimestamp,\n      platform: z.string().optional().catch(undefined),\n      ruby_version: z.string().optional().catch(undefined),\n      rubygems_version: z.string().optional().catch(undefined),\n      metadata: z\n        .object({\n          changelog_uri: z.string().optional().catch(undefined),\n          source_code_uri: z.string().optional().catch(undefined),\n        })\n        .catch({}),\n    })\n    .transform(\n      ({\n        number: version,\n        created_at: releaseTimestamp,\n        platform,\n        ruby_version: rubyVersion,\n        rubygems_version: rubygemsVersion,\n        metadata,\n      }): Release => {\n        const result: Release = { version, releaseTimestamp };\n        const constraints: Record<string, string[]> = {};\n\n        if (platform) {\n          constraints.platform = [platform];\n        }\n\n        if (rubyVersion) {\n          constraints.ruby = [rubyVersion];\n        }\n\n        if (rubygemsVersion) {\n          constraints.rubygems = [rubygemsVersion];\n        }\n\n        if (!is.emptyObject(constraints)) {\n          result.constraints = constraints;\n        }\n\n        if (metadata.changelog_uri) {\n          result.changelogUrl = metadata.changelog_uri;\n        }\n\n        if (metadata.source_code_uri) {\n          result.sourceUrl = metadata.source_code_uri;\n        }\n\n        return result;\n      },\n    ),\n)\n  .refine(\n    (value) => !is.emptyArray(value),\n    'Empty response from `/v1/gems` endpoint',\n  )\n  .transform((releases) => ({ releases }));\nexport type GemVersions = z.infer<typeof GemVersions>;\n\nexport const GemInfo = z\n  .string()\n  .transform((body) =>\n    filterMap(body.split(newlineRegex), (line) => {\n      const spaceIdx = line.indexOf(' ');\n      return spaceIdx > 0 ? line.slice(0, spaceIdx) : null;\n    }).map((version): Release => ({ version })),\n  )\n  .refine(\n    (value) => !is.emptyArray(value),\n    'Empty response from `/info` endpoint',\n  )\n  .transform((releases) => ({ releases }));\nexport type GemInfo = z.infer<typeof GemInfo>;\n"]}