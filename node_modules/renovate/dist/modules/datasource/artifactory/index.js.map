{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/artifactory/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { parse } from '../../../util/html';\nimport { HttpError } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { datasource } from './common';\n\nexport class ArtifactoryDatasource extends Datasource {\n  static readonly id = datasource;\n\n  constructor() {\n    super(datasource);\n  }\n\n  override readonly customRegistrySupport = true;\n\n  override readonly caching = true;\n\n  override readonly registryStrategy = 'merge';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the date-like text, next to the version hyperlink tag in the results.';\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}:${packageName}`,\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    if (!registryUrl) {\n      logger.warn(\n        { packageName },\n        'artifactory datasource requires custom registryUrl. Skipping datasource',\n      );\n      return null;\n    }\n\n    const url = joinUrlParts(registryUrl, packageName);\n\n    const result: ReleaseResult = {\n      releases: [],\n    };\n    try {\n      const response = await this.http.getText(url);\n      const body = parse(response.body, {\n        blockTextElements: {\n          script: true,\n          noscript: true,\n          style: true,\n        },\n      });\n      const nodes = body.querySelectorAll('a');\n\n      nodes\n        .filter(\n          // filter out hyperlink to navigate to parent folder\n          (node) => node.innerHTML !== '../' && node.innerHTML !== '..',\n        )\n        .forEach(\n          // extract version and published time for each node\n          (node) => {\n            const version: string = node.innerHTML.endsWith('/')\n              ? node.innerHTML.slice(0, -1)\n              : node.innerHTML;\n\n            const releaseTimestamp = asTimestamp(\n              node.nextSibling?.text?.trimStart()?.split(regEx(/\\s{2,}/))?.[0],\n            );\n\n            const thisRelease: Release = {\n              version,\n              releaseTimestamp,\n            };\n\n            result.releases.push(thisRelease);\n          },\n        );\n\n      if (result.releases.length) {\n        logger.trace(\n          { registryUrl, packageName, versions: result.releases.length },\n          'artifactory: Found versions',\n        );\n      } else {\n        logger.trace(\n          { registryUrl, packageName },\n          'artifactory: No versions found',\n        );\n      }\n    } catch (err) {\n      if (err instanceof HttpError) {\n        if (err.response?.statusCode === 404) {\n          logger.warn(\n            { registryUrl, packageName },\n            'artifactory: `Not Found` error',\n          );\n          return null;\n        }\n      }\n      this.handleGenericErrors(err);\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}