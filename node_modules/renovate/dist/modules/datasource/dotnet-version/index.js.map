{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/dotnet-version/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,kEAA4C;AAC5C,8CAA2C;AAE3C,qCAIkB;AAElB,MAAa,uBAAwB,SAAQ,uBAAU;IACrD,MAAM,CAAU,EAAE,GAAG,gBAAgB,CAAC;IAEtC;QACE,KAAK,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAEiB,OAAO,GAAG,IAAI,CAAC;IAEf,qBAAqB,GAAG,KAAK,CAAC;IAE9B,mBAAmB,GAAG;QACtC,qFAAqF;KACtF,CAAC;IAEO,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GAC3B,mFAAmF,CAAC;IACpE,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,4JAA4J,CAAC;IAOzJ,AAAN,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,GACO;QAClB,IAAI,CAAC,CAAC,WAAW,KAAK,YAAY,IAAI,WAAW,KAAK,gBAAgB,CAAC,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAC5C,WAAW,EACX,sBAAa,CACd,CAAC;YAEF,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,GAAG,CACjC,IAAI,EACJ,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,WAAW,CAAC,EAClD,EAAE,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CACtC,CAAC;YACF,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC;YAExC,MAAM,SAAS,GACb,WAAW,KAAK,YAAY;gBAC1B,CAAC,CAAC,+BAA+B;gBACjC,CAAC,CAAC,mCAAmC,CAAC;YAE1C,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;QACjC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAQK,AAAN,KAAK,CAAC,kBAAkB,CACtB,UAAkB,EAClB,WAAmB;QAEnB,MAAM,MAAM,GACV,WAAW,KAAK,YAAY,CAAC,CAAC,CAAC,0BAAiB,CAAC,CAAC,CAAC,8BAAqB,CAAC;QAC3E,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;;AA7EH,0DA8EC;AAnDO;IALL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,uBAAuB,CAAC,EAAE,EAAE;QACrD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAqB,EAAE,EAAE,CAAC,WAAW;QACxD,UAAU,EAAE,IAAI;KACjB,CAAC;0DA+BD;AAQK;IANL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,uBAAuB,CAAC,EAAE,EAAE;QACrD,GAAG,EAAE,CAAC,UAAkB,EAAE,WAAmB,EAAE,EAAE,CAC/C,GAAG,UAAU,IAAI,WAAW,EAAE;QAChC,UAAU,EAAE,IAAI;KACjB,CAAC;iEAaD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport * as p from '../../../util/promises';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport {\n  DotnetRuntimeReleases,\n  DotnetSdkReleases,\n  ReleasesIndex,\n} from './schema';\n\nexport class DotnetVersionDatasource extends Datasource {\n  static readonly id = 'dotnet-version';\n\n  constructor() {\n    super(DotnetVersionDatasource.id);\n  }\n\n  override readonly caching = true;\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [\n    'https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json',\n  ];\n\n  override releaseTimestampSupport = true;\n  override releaseTimestampNote =\n    'The release timestamp is determined from the `release-date` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'We use the URL https://github.com/dotnet/sdk for the `dotnet-sdk` package and, the https://github.com/dotnet/runtime URL for the `dotnet-runtime` package.';\n\n  @cache({\n    namespace: `datasource-${DotnetVersionDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => packageName,\n    ttlMinutes: 1440,\n  })\n  async getReleases({\n    packageName,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    if (!(packageName === 'dotnet-sdk' || packageName === 'dotnet-runtime')) {\n      return null;\n    }\n\n    try {\n      const registryUrl = this.defaultRegistryUrls[0];\n      const { body: urls } = await this.http.getJson(\n        registryUrl,\n        ReleasesIndex,\n      );\n\n      const channelReleases = await p.map(\n        urls,\n        (url) => this.getChannelReleases(url, packageName),\n        { concurrency: 1, stopOnError: true },\n      );\n      const releases = channelReleases.flat();\n\n      const sourceUrl =\n        packageName === 'dotnet-sdk'\n          ? 'https://github.com/dotnet/sdk'\n          : 'https://github.com/dotnet/runtime';\n\n      return { releases, sourceUrl };\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n  }\n\n  @cache({\n    namespace: `datasource-${DotnetVersionDatasource.id}`,\n    key: (releaseUrl: string, packageName: string) =>\n      `${releaseUrl}:${packageName}`,\n    ttlMinutes: 1440,\n  })\n  async getChannelReleases(\n    releaseUrl: string,\n    packageName: string,\n  ): Promise<Release[]> {\n    const schema =\n      packageName === 'dotnet-sdk' ? DotnetSdkReleases : DotnetRuntimeReleases;\n    try {\n      const { body } = await this.http.getJson(releaseUrl, schema);\n      return body;\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n  }\n}\n"]}