{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/cdnjs/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZodError } from 'zod';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { cache } from '../../../util/cache/package/decorator';\nimport type { HttpError } from '../../../util/http';\nimport { Result } from '../../../util/result';\nimport { Datasource } from '../datasource';\nimport { DigestsConfig, ReleasesConfig } from '../schema';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport {\n  CdnjsAPISriResponseSchema,\n  CdnjsAPIVersionResponseSchema,\n} from './schema';\n\nexport class CdnjsDatasource extends Datasource {\n  static readonly id = 'cdnjs';\n\n  constructor() {\n    super(CdnjsDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://api.cdnjs.com/'];\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `repository` field in the results.';\n\n  @cache({\n    namespace: `datasource-${CdnjsDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => {\n      const library = packageName.split('/')[0];\n      return `getReleases:${library}`;\n    },\n  })\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const result = Result.parse(config, ReleasesConfig)\n      .transform(({ packageName, registryUrl }) => {\n        const [library] = packageName.split('/');\n\n        const url = `${registryUrl}libraries/${library}?fields=homepage,repository,versions`;\n\n        return this.http.getJsonSafe(url, CdnjsAPIVersionResponseSchema);\n      })\n      .transform(({ versions, homepage, repository }): ReleaseResult => {\n        const releases: Release[] = versions;\n\n        const res: ReleaseResult = { releases };\n\n        if (homepage) {\n          res.homepage = homepage;\n        }\n\n        if (repository) {\n          res.sourceUrl = repository;\n        }\n\n        return res;\n      });\n\n    const { val, err } = await result.unwrap();\n\n    if (err instanceof ZodError) {\n      logger.debug({ err }, 'cdnjs: validation error');\n      return null;\n    }\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return val;\n  }\n\n  @cache({\n    namespace: `datasource-${CdnjsDatasource.id}`,\n    key: ({ registryUrl, packageName }: DigestConfig, newValue: string) =>\n      `getDigest:${registryUrl}:${packageName}:${newValue}}`,\n  })\n  override async getDigest(\n    config: DigestConfig,\n    newValue: string,\n  ): Promise<string | null> {\n    const { packageName } = config;\n    const [library] = packageName.split('/');\n    const assetName = packageName.replace(`${library}/`, '');\n\n    const result = Result.parse(config, DigestsConfig)\n      .transform(({ registryUrl }) => {\n        const url = `${registryUrl}libraries/${library}/${newValue}?fields=sri`;\n\n        return this.http.getJsonSafe(url, CdnjsAPISriResponseSchema);\n      })\n      .transform(({ sri }): string => {\n        return sri?.[assetName];\n      });\n\n    const { val = null, err } = await result.unwrap();\n\n    if (err instanceof ZodError) {\n      logger.debug({ err }, 'cdnjs: validation error');\n      return null;\n    }\n\n    if (err) {\n      this.handleGenericErrors(err);\n    }\n\n    return val;\n  }\n\n  override handleHttpErrors(err: HttpError): void {\n    if (err.response?.statusCode !== 404) {\n      throw new ExternalHostError(err);\n    }\n  }\n}\n"]}