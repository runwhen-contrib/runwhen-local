{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/crate/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Git from 'simple-git';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { privateCacheDir, readCacheFile } from '../../../util/fs';\nimport { simpleGitConfig } from '../../../util/git/config';\nimport { toSha256 } from '../../../util/hash';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { joinUrlParts, parseUrl } from '../../../util/url';\nimport * as cargoVersioning from '../../versioning/cargo';\nimport { Datasource } from '../datasource';\nimport type {\n  GetReleasesConfig,\n  PostprocessReleaseConfig,\n  PostprocessReleaseResult,\n  Release,\n  ReleaseResult,\n} from '../types';\nimport { ReleaseTimestampSchema } from './schema';\nimport type {\n  CrateMetadata,\n  CrateRecord,\n  RegistryFlavor,\n  RegistryInfo,\n} from './types';\n\nexport class CrateDatasource extends Datasource {\n  static readonly id = 'crate';\n\n  constructor() {\n    super(CrateDatasource.id);\n  }\n\n  override defaultRegistryUrls = ['https://crates.io'];\n\n  override defaultVersioning = cargoVersioning.id;\n\n  static readonly CRATES_IO_BASE_URL =\n    'https://raw.githubusercontent.com/rust-lang/crates.io-index/master/';\n\n  static readonly CRATES_IO_API_BASE_URL = 'https://crates.io/api/v1/';\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `repository` field in the results.';\n\n  @cache({\n    namespace: `datasource-${CrateDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      // TODO: types (#22198)\n      `${registryUrl}/${packageName}`,\n    cacheable: ({ registryUrl }: GetReleasesConfig) =>\n      CrateDatasource.areReleasesCacheable(registryUrl),\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 6 -- should never happen */\n    if (!registryUrl) {\n      logger.warn(\n        'crate datasource: No registryUrl specified, cannot perform getReleases',\n      );\n      return null;\n    }\n\n    const registryInfo = await CrateDatasource.fetchRegistryInfo({\n      packageName,\n      registryUrl,\n    });\n    if (!registryInfo) {\n      logger.debug(`Could not fetch registry info from ${registryUrl}`);\n      return null;\n    }\n\n    const dependencyUrl = CrateDatasource.getDependencyUrl(\n      registryInfo,\n      packageName,\n    );\n\n    const payload = await this.fetchCrateRecordsPayload(\n      registryInfo,\n      packageName,\n    );\n    const lines = payload\n      .split(newlineRegex) // break into lines\n      .map((line) => line.trim()) // remove whitespace\n      .filter((line) => line.length !== 0) // remove empty lines\n      .map((line) => JSON.parse(line) as CrateRecord); // parse\n\n    const metadata = await this.getCrateMetadata(registryInfo, packageName);\n\n    const result: ReleaseResult = {\n      dependencyUrl,\n      releases: [],\n    };\n\n    if (metadata?.homepage) {\n      result.homepage = metadata.homepage;\n    }\n\n    if (metadata?.repository) {\n      result.sourceUrl = metadata.repository;\n    }\n\n    result.releases = lines\n      .map((version) => {\n        const release: Release = {\n          version: version.vers.replace(/\\+.*$/, ''),\n        };\n        if (version.yanked) {\n          release.isDeprecated = true;\n        }\n        if (version.rust_version) {\n          release.constraints = {\n            rust: [version.rust_version],\n          };\n        }\n        return release;\n      })\n      .filter((release) => release.version);\n    if (!result.releases.length) {\n      return null;\n    }\n\n    return result;\n  }\n\n  @cache({\n    namespace: `datasource-${CrateDatasource.id}-metadata`,\n    key: (info: RegistryInfo, packageName: string) =>\n      `${info.rawUrl}/${packageName}`,\n    cacheable: (info: RegistryInfo) =>\n      CrateDatasource.areReleasesCacheable(info.rawUrl),\n    ttlMinutes: 24 * 60, // 24 hours\n  })\n  public async getCrateMetadata(\n    info: RegistryInfo,\n    packageName: string,\n  ): Promise<CrateMetadata | null> {\n    if (info.flavor !== 'crates.io') {\n      return null;\n    }\n\n    // The `?include=` suffix is required to avoid unnecessary database queries\n    // on the crates.io server. This lets us work around the regular request\n    // throttling of one request per second.\n    const crateUrl = `${CrateDatasource.CRATES_IO_API_BASE_URL}crates/${packageName}?include=`;\n\n    logger.debug(\n      { crateUrl, packageName, registryUrl: info.rawUrl },\n      'downloading crate metadata',\n    );\n\n    try {\n      interface Response {\n        crate: CrateMetadata;\n      }\n      const response = await this.http.getJsonUnchecked<Response>(crateUrl);\n      return response.body.crate;\n    } catch (err) {\n      logger.warn(\n        { err, packageName, registryUrl: info.rawUrl },\n        'failed to download crate metadata',\n      );\n    }\n\n    return null;\n  }\n\n  public async fetchCrateRecordsPayload(\n    info: RegistryInfo,\n    packageName: string,\n  ): Promise<string> {\n    if (info.clonePath) {\n      const path = upath.join(\n        info.clonePath,\n        ...CrateDatasource.getIndexSuffix(packageName),\n      );\n      return readCacheFile(path, 'utf8');\n    }\n\n    const baseUrl =\n      info.flavor === 'crates.io'\n        ? CrateDatasource.CRATES_IO_BASE_URL\n        : info.rawUrl;\n\n    if (info.flavor === 'crates.io' || info.isSparse) {\n      const packageSuffix = CrateDatasource.getIndexSuffix(\n        packageName.toLowerCase(),\n      );\n      const crateUrl = joinUrlParts(baseUrl, ...packageSuffix);\n      try {\n        return (await this.http.getText(crateUrl)).body;\n      } catch (err) {\n        this.handleGenericErrors(err);\n      }\n    }\n    throw new Error(`unsupported crate registry flavor: ${info.flavor}`);\n  }\n\n  /**\n   * Computes the dependency URL for a crate, given\n   * registry information\n   */\n  private static getDependencyUrl(\n    info: RegistryInfo,\n    packageName: string,\n  ): string {\n    switch (info.flavor) {\n      case 'crates.io':\n        return `https://crates.io/crates/${packageName}`;\n      case 'cloudsmith': {\n        // input: https://dl.cloudsmith.io/basic/$org/$repo/cargo/index.git\n        const tokens = info.url.pathname.split('/');\n        const org = tokens[2];\n        const repo = tokens[3];\n        return `https://cloudsmith.io/~${org}/repos/${repo}/packages/detail/cargo/${packageName}`;\n      }\n      default:\n        return `${info.rawUrl}/${packageName}`;\n    }\n  }\n\n  /**\n   * Given a Git URL, computes a semi-human-readable name for a folder in which to\n   * clone the repository.\n   */\n  private static cacheDirFromUrl(url: URL): string {\n    const proto = url.protocol.replace(regEx(/:$/), '');\n    const host = url.hostname;\n    const hash = toSha256(url.pathname).substring(0, 7);\n\n    return `crate-registry-${proto}-${host}-${hash}`;\n  }\n\n  private static isSparseRegistry(url: string): boolean {\n    const parsed = parseUrl(url);\n    if (!parsed) {\n      return false;\n    }\n    return parsed.protocol.startsWith('sparse+');\n  }\n\n  /**\n   * Fetches information about a registry, by url.\n   * If no url is given, assumes crates.io.\n   * If an url is given, assumes it's a valid Git repository\n   * url and clones it to cache.\n   */\n  private static async fetchRegistryInfo({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<RegistryInfo | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const isSparseRegistry = CrateDatasource.isSparseRegistry(registryUrl);\n    const registryFetchUrl = isSparseRegistry\n      ? registryUrl.replace(/^sparse\\+/, '')\n      : registryUrl;\n\n    const url = parseUrl(registryFetchUrl);\n    if (!url) {\n      logger.debug(`Could not parse registry URL ${registryFetchUrl}`);\n      return null;\n    }\n\n    let flavor: RegistryFlavor;\n    if (url.hostname === 'crates.io') {\n      flavor = 'crates.io';\n    } else if (url.hostname === 'dl.cloudsmith.io') {\n      flavor = 'cloudsmith';\n    } else {\n      flavor = 'other';\n    }\n\n    const registry: RegistryInfo = {\n      flavor,\n      rawUrl: registryFetchUrl,\n      url,\n      isSparse: isSparseRegistry,\n    };\n\n    if (\n      registry.flavor !== 'crates.io' &&\n      !GlobalConfig.get('allowCustomCrateRegistries')\n    ) {\n      logger.warn(\n        'crate datasource: allowCustomCrateRegistries=true is required for registries other than crates.io, bailing out',\n      );\n      return null;\n    }\n    if (registry.flavor !== 'crates.io' && !registry.isSparse) {\n      const cacheKey = `crate-datasource/registry-clone-path/${registryFetchUrl}`;\n      const cacheKeyForError = `crate-datasource/registry-clone-path/${registryFetchUrl}/error`;\n\n      // We need to ensure we don't run `git clone` in parallel. Therefore we store\n      // a promise of the running operation in the mem cache, which in the end resolves\n      // to the file path of the cloned repository.\n\n      const clonePathPromise: Promise<string> | null = memCache.get(cacheKey);\n      let clonePath: string;\n\n      if (clonePathPromise) {\n        clonePath = await clonePathPromise;\n      } else {\n        clonePath = upath.join(\n          privateCacheDir(),\n          CrateDatasource.cacheDirFromUrl(url),\n        );\n        logger.info(\n          { clonePath, registryFetchUrl },\n          `Cloning private cargo registry`,\n        );\n\n        const git = Git({ ...simpleGitConfig(), maxConcurrentProcesses: 1 });\n        const clonePromise = git.clone(registryFetchUrl, clonePath, {\n          '--depth': 1,\n        });\n\n        memCache.set(\n          cacheKey,\n          clonePromise.then(() => clonePath).catch(() => null),\n        );\n\n        try {\n          await clonePromise;\n        } catch (err) {\n          logger.warn(\n            { err, packageName, registryFetchUrl },\n            'failed cloning git registry',\n          );\n          memCache.set(cacheKeyForError, err);\n\n          return null;\n        }\n      }\n\n      if (!clonePath) {\n        const err = memCache.get(cacheKeyForError);\n        logger.warn(\n          { err, packageName, registryFetchUrl },\n          'Previous git clone failed, bailing out.',\n        );\n\n        return null;\n      }\n\n      registry.clonePath = clonePath;\n    }\n\n    return registry;\n  }\n\n  private static areReleasesCacheable(\n    registryUrl: string | undefined,\n  ): boolean {\n    // We only cache public releases, we don't want to cache private\n    // cloned data between runs.\n    return registryUrl === 'https://crates.io';\n  }\n\n  public static getIndexSuffix(packageName: string): string[] {\n    const len = packageName.length;\n\n    if (len === 1) {\n      return ['1', packageName];\n    }\n    if (len === 2) {\n      return ['2', packageName];\n    }\n    if (len === 3) {\n      return ['3', packageName[0], packageName];\n    }\n\n    return [packageName.slice(0, 2), packageName.slice(2, 4), packageName];\n  }\n\n  @cache({\n    namespace: `datasource-crate`,\n    key: (\n      { registryUrl, packageName }: PostprocessReleaseConfig,\n      { version }: Release,\n    ) => `postprocessRelease:${registryUrl}:${packageName}:${version}`,\n    ttlMinutes: 7 * 24 * 60,\n    cacheable: ({ registryUrl }: PostprocessReleaseConfig, _: Release) =>\n      registryUrl === 'https://crates.io',\n  })\n  override async postprocessRelease(\n    { packageName, registryUrl }: PostprocessReleaseConfig,\n    release: Release,\n  ): Promise<PostprocessReleaseResult> {\n    if (registryUrl !== 'https://crates.io') {\n      return release;\n    }\n\n    const url = `https://crates.io/api/v1/crates/${packageName}/${release.version}`;\n    const { body: releaseTimestamp } = await this.http.getJson(\n      url,\n      ReleaseTimestampSchema,\n    );\n    release.releaseTimestamp = releaseTimestamp;\n    return release;\n  }\n}\n"]}