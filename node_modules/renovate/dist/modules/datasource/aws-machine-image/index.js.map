{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/aws-machine-image/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Filter, Image } from '@aws-sdk/client-ec2';\nimport { DescribeImagesCommand, EC2Client } from '@aws-sdk/client-ec2';\nimport { fromNodeProviderChain } from '@aws-sdk/credential-providers';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { asTimestamp } from '../../../util/timestamp';\nimport * as amazonMachineImageVersioning from '../../versioning/aws-machine-image';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport type { AwsClientConfig, ParsedConfig } from './types';\n\nexport class AwsMachineImageDatasource extends Datasource {\n  static readonly id = 'aws-machine-image';\n\n  override readonly defaultVersioning = amazonMachineImageVersioning.id;\n\n  override readonly caching = true;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `CreationDate` field in the results.';\n\n  override readonly defaultConfig = {\n    // Because AMIs don't follow any versioning scheme, we override commitMessageExtra to remove the 'v'\n    commitMessageExtra: 'to {{{newVersion}}}',\n    prBodyColumns: ['Change', 'Image'],\n    prBodyDefinitions: {\n      Image: '```{{{newDigest}}}```',\n    },\n    digest: {\n      // Because newDigestShort will allways be 'amazon-' we override to print the name of the AMI\n      commitMessageExtra: 'to {{{newDigest}}}',\n      prBodyColumns: ['Image'],\n      prBodyDefinitions: {\n        Image: '```{{{newDigest}}}```',\n      },\n    },\n  };\n\n  private readonly now: number;\n\n  constructor() {\n    super(AwsMachineImageDatasource.id);\n    this.now = Date.now();\n  }\n\n  private isAmiFilter(config: Filter | AwsClientConfig): config is Filter {\n    return 'Name' in config && 'Values' in config;\n  }\n\n  private getEC2Client(config: AwsClientConfig): EC2Client {\n    const { profile, region } = config;\n    return new EC2Client({\n      region,\n      credentials: fromNodeProviderChain({ profile }),\n    });\n  }\n\n  private getAmiFilterCommand(filter: Filter[]): DescribeImagesCommand {\n    return new DescribeImagesCommand({\n      Filters: filter,\n    });\n  }\n\n  loadConfig(serializedAmiFilter: string): [Filter[], AwsClientConfig] {\n    const parsedConfig: ParsedConfig = JSON.parse(serializedAmiFilter);\n    const filters = [];\n    let config = {};\n    for (const elem of parsedConfig) {\n      if (this.isAmiFilter(elem)) {\n        // Separate actual AMI filters from aws client config\n        filters.push(elem);\n      } else {\n        // merge  config objects if there are multiple\n        config = Object.assign(config, elem);\n      }\n    }\n    return [filters, config];\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDatasource.id}`,\n    key: (serializedAmiFilter: string) =>\n      `getSortedAwsMachineImages:${serializedAmiFilter}`,\n  })\n  async getSortedAwsMachineImages(\n    serializedAmiFilter: string,\n  ): Promise<Image[]> {\n    const [amiFilter, clientConfig] = this.loadConfig(serializedAmiFilter);\n    const amiFilterCmd = this.getAmiFilterCommand(amiFilter);\n    const ec2Client = this.getEC2Client(clientConfig);\n    const matchingImages = await ec2Client.send(amiFilterCmd);\n    matchingImages.Images = matchingImages.Images ?? [];\n    return matchingImages.Images.sort((image1, image2) => {\n      const ts1 = image1.CreationDate\n        ? Date.parse(image1.CreationDate)\n        : /* v8 ignore next */ 0; // TODO: add date coersion util\n\n      const ts2 = image2.CreationDate\n        ? Date.parse(image2.CreationDate)\n        : /* v8 ignore next */ 0; // TODO: add date coersion util\n      return ts1 - ts2;\n    });\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig, newValue: string) =>\n      `getDigest:${packageName}:${newValue ?? ''}`,\n  })\n  override async getDigest(\n    { packageName: serializedAmiFilter }: GetReleasesConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    const images = await this.getSortedAwsMachineImages(serializedAmiFilter);\n    if (images.length < 1) {\n      return null;\n    }\n\n    if (newValue) {\n      const newValueMatchingImages = images.filter(\n        (image) => image.ImageId === newValue,\n      );\n      if (\n        newValueMatchingImages.length === 1 &&\n        newValueMatchingImages[0].Name\n      ) {\n        return newValueMatchingImages[0].Name;\n      }\n      return null;\n    }\n\n    const res = await this.getReleases({ packageName: serializedAmiFilter });\n    return res?.releases?.[0]?.newDigest ?? /* v8 ignore next */ null; // TODO: needs test\n  }\n\n  @cache({\n    namespace: `datasource-${AwsMachineImageDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `getReleases:${packageName}`,\n  })\n  async getReleases({\n    packageName: serializedAmiFilter,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const images = await this.getSortedAwsMachineImages(serializedAmiFilter);\n    const latestImage = images[images.length - 1];\n    if (!latestImage?.ImageId) {\n      return null;\n    }\n    return {\n      releases: [\n        {\n          version: latestImage.ImageId,\n          releaseTimestamp: asTimestamp(latestImage.CreationDate),\n          isDeprecated:\n            Date.parse(latestImage.DeprecationTime ?? this.now.toString()) <\n            this.now,\n          newDigest: latestImage.Name,\n        },\n      ],\n    };\n  }\n}\n"]}