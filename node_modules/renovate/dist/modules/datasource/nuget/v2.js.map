{"version":3,"file":"v2.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/nuget/v2.ts"],"names":[],"mappings":";;;AACA,mCAAqC;AACrC,4CAAyC;AAEzC,+CAA4C;AAC5C,uDAAsD;AAEtD,qCAAuD;AAEvD,MAAa,UAAU;IACrB,UAAU,CAAC,OAAmB,EAAE,QAAgB;QAC9C,OAAO,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,KAAK,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC;IAC9E,CAAC;IAED,KAAK,CAAC,WAAW,CACf,IAAU,EACV,OAAe,EACf,OAAe;QAEf,MAAM,GAAG,GAAkB;YACzB,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,IAAI,UAAU,GAAkB,GAAG,OAAO,CAAC,OAAO,CAChD,IAAA,aAAK,EAAC,MAAM,CAAC,EACb,EAAE,CACH,6BAA6B,OAAO,0DAA0D,CAAC;QAChG,OAAO,UAAU,KAAK,IAAI,EAAE,CAAC;YAC3B,mBAAmB;YACnB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,kBAAkB,GAAG,IAAI,oBAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,kBAAkB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE9D,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE,CAAC;gBAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBACpD,MAAM,gBAAgB,GAAG,IAAA,uBAAW,EAClC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,CACtC,CAAC;gBACF,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAChB,uBAAuB;oBACvB,OAAO,EAAE,IAAA,wBAAe,EAAC,GAAG,OAAO,EAAE,CAAC;oBACtC,gBAAgB;iBACjB,CAAC,CAAC;gBACH,IAAI,CAAC;oBACH,MAAM,kBAAkB,GAAG,IAAI,CAAC,UAAU,CACxC,OAAO,EACP,iBAAiB,CAClB,CAAC;oBACF,IAAI,kBAAkB,KAAK,MAAM,EAAE,CAAC;wBAClC,GAAG,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,IAAA,wBAAe,EAAC,GAAG,OAAO,EAAE,CAAC,EAAE,CAAC;wBACrD,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;wBAC1D,IAAI,UAAU,EAAE,CAAC;4BACf,GAAG,CAAC,SAAS,GAAG,IAAA,mBAAU,EAAC,UAAU,CAAC,CAAC;wBACzC,CAAC;oBACH,CAAC;gBACH,CAAC;gBAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;oBACxC,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,EACzB,8DAA8D,CAC/D,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,MAAM,kBAAkB,GAAG,kBAAkB;iBAC1C,aAAa,CAAC,MAAM,CAAC;iBACrB,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC;YAE5C,UAAU,GAAG,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACxE,CAAC;QAED,2DAA2D;QAC3D,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AApED,gCAoEC","sourcesContent":["import type { XmlElement } from 'xmldoc';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport type { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { asTimestamp } from '../../../util/timestamp';\nimport type { ReleaseResult } from '../types';\nimport { massageUrl, removeBuildMeta } from './common';\n\nexport class NugetV2Api {\n  getPkgProp(pkgInfo: XmlElement, propName: string): string | undefined {\n    return pkgInfo.childNamed('m:properties')?.childNamed(`d:${propName}`)?.val;\n  }\n\n  async getReleases(\n    http: Http,\n    feedUrl: string,\n    pkgName: string,\n  ): Promise<ReleaseResult | null> {\n    const dep: ReleaseResult = {\n      releases: [],\n    };\n    let pkgUrlList: string | null = `${feedUrl.replace(\n      regEx(/\\/+$/),\n      '',\n    )}/FindPackagesById()?id=%27${pkgName}%27&$select=Version,IsLatestVersion,ProjectUrl,Published`;\n    while (pkgUrlList !== null) {\n      // typescript issue\n      const pkgVersionsListRaw = await http.getText(pkgUrlList);\n      const pkgVersionsListDoc = new XmlDocument(pkgVersionsListRaw.body);\n\n      const pkgInfoList = pkgVersionsListDoc.childrenNamed('entry');\n\n      for (const pkgInfo of pkgInfoList) {\n        const version = this.getPkgProp(pkgInfo, 'Version');\n        const releaseTimestamp = asTimestamp(\n          this.getPkgProp(pkgInfo, 'Published'),\n        );\n        dep.releases.push({\n          // TODO: types (#22198)\n          version: removeBuildMeta(`${version}`),\n          releaseTimestamp,\n        });\n        try {\n          const pkgIsLatestVersion = this.getPkgProp(\n            pkgInfo,\n            'IsLatestVersion',\n          );\n          if (pkgIsLatestVersion === 'true') {\n            dep.tags = { latest: removeBuildMeta(`${version}`) };\n            const projectUrl = this.getPkgProp(pkgInfo, 'ProjectUrl');\n            if (projectUrl) {\n              dep.sourceUrl = massageUrl(projectUrl);\n            }\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.debug(\n            { err, pkgName, feedUrl },\n            `nuget registry failure: can't parse pkg info for project url`,\n          );\n        }\n      }\n\n      const nextPkgUrlListLink = pkgVersionsListDoc\n        .childrenNamed('link')\n        .find((node) => node.attr.rel === 'next');\n\n      pkgUrlList = nextPkgUrlListLink ? nextPkgUrlListLink.attr.href : null;\n    }\n\n    // dep not found if no release, so we can try next registry\n    if (dep.releases.length === 0) {\n      return null;\n    }\n\n    return dep;\n  }\n}\n"]}