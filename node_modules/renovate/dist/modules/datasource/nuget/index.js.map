{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/nuget/index.ts"],"names":[],"mappings":";;;;AAAA,4CAAyC;AACzC,gFAA0D;AAC1D,8CAA2C;AAE3C,qCAA4C;AAC5C,6BAAkC;AAClC,6BAAkC;AAElC,uEAAuE;AAC1D,QAAA,QAAQ,GAAG,qCAAqC,CAAC;AAE9D,MAAa,eAAgB,SAAQ,uBAAU;IAC7C,MAAM,CAAU,EAAE,GAAG,OAAO,CAAC;IAEX,mBAAmB,GAAG,CAAC,gBAAQ,CAAC,CAAC;IAEjC,iBAAiB,GAAG,eAAe,CAAC,EAAE,CAAC;IAEvC,gBAAgB,GAAG,OAAO,CAAC;IAE3B,uBAAuB,GAAG,IAAI,CAAC;IAC/B,oBAAoB,GACpC,mLAAmL,CAAC;IACpK,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,oLAAoL,CAAC;IAE9K,KAAK,GAAG,IAAI,eAAU,EAAE,CAAC;IAEzB,KAAK,GAAG,IAAI,eAAU,EAAE,CAAC;IAElC;QACE,KAAK,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAChB,WAAW,EACX,WAAW,GACO;QAClB,eAAM,CAAC,KAAK,CAAC,qBAAqB,WAAW,GAAG,CAAC,CAAC;QAClD,6CAA6C;QAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,IAAA,yBAAgB,EAAC,WAAW,CAAC,CAAC;QACnE,IAAI,eAAe,KAAK,CAAC,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QACjE,CAAC;QACD,IAAI,eAAe,KAAK,CAAC,EAAE,CAAC;YAC1B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACrE,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAC3B,IAAI,CAAC,IAAI,EACT,OAAO,EACP,QAAQ,EACR,WAAW,CACZ,CAAC;YACJ,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAjDH,0CAkDC","sourcesContent":["import { logger } from '../../../logger';\nimport * as nugetVersioning from '../../versioning/nuget';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { parseRegistryUrl } from './common';\nimport { NugetV2Api } from './v2';\nimport { NugetV3Api } from './v3';\n\n// https://api.nuget.org/v3/index.json is a default official nuget feed\nexport const nugetOrg = 'https://api.nuget.org/v3/index.json';\n\nexport class NugetDatasource extends Datasource {\n  static readonly id = 'nuget';\n\n  override readonly defaultRegistryUrls = [nugetOrg];\n\n  override readonly defaultVersioning = nugetVersioning.id;\n\n  override readonly registryStrategy = 'merge';\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'For the v2 API, the release timestamp is determined from the `Published` tag. And, for the v3 API, the release timestamp is determined from the `published` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'For the v2 API, the source URL is determined from the `ProjectUrl` tag. And, for the v3 API, the source URL is determined from the `metadata.repository@url` field in the results.';\n\n  readonly v2Api = new NugetV2Api();\n\n  readonly v3Api = new NugetV3Api();\n\n  constructor() {\n    super(NugetDatasource.id);\n  }\n\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    logger.trace(`nuget.getReleases(${packageName})`);\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    const { feedUrl, protocolVersion } = parseRegistryUrl(registryUrl);\n    if (protocolVersion === 2) {\n      return this.v2Api.getReleases(this.http, feedUrl, packageName);\n    }\n    if (protocolVersion === 3) {\n      const queryUrl = await this.v3Api.getResourceUrl(this.http, feedUrl);\n      if (queryUrl) {\n        return this.v3Api.getReleases(\n          this.http,\n          feedUrl,\n          queryUrl,\n          packageName,\n        );\n      }\n    }\n    return null;\n  }\n}\n"]}