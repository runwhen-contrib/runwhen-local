{"version":3,"file":"v3.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/nuget/v3.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,sEAAkC;AAClC,4DAA4B;AAC5B,0DAA0B;AAC1B,mCAAqC;AACrC,4CAAyC;AACzC,mFAA8E;AAC9E,kFAA4D;AAC5D,qEAA8D;AAC9D,6DAAuC;AACvC,yCAAkD;AAElD,6CAA+C;AAC/C,oGAAuF;AACvF,kEAA4C;AAC5C,+CAA4C;AAC5C,uDAAsD;AACtD,2CAAwD;AACxD,kDAA2D;AAE3D,qCAA0E;AAQ1E,MAAa,UAAU;IACrB,MAAM,CAAU,cAAc,GAAG,qBAAqB,CAAC;IAEvD,KAAK,CAAC,cAAc,CAClB,IAAU,EACV,GAAW,EACX,YAAY,GAAG,sBAAsB;QAErC,2DAA2D;QAC3D,MAAM,cAAc,GAAG,GAAG,GAAG,IAAI,YAAY,EAAE,CAAC;QAChD,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,UAAU,CAAC,cAAc,EACzB,cAAc,CACf,CAAC;QAEF,wCAAwC;QACxC,IAAI,YAAY,EAAE,CAAC;YACjB,OAAO,YAAY,CAAC;QACtB,CAAC;QACD,IAAI,gBAA8C,CAAC;QACnD,IAAI,CAAC;YACH,MAAM,gBAAgB,GAAG,GAAG,CAAC;YAC7B,gBAAgB,GAAG,MAAM,YAAY,CAAC,GAAG,CACvC,UAAU,CAAC,cAAc,EACzB,gBAAgB,CACjB,CAAC;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,gBAAgB,GAAG,CACjB,MAAM,IAAI,CAAC,gBAAgB,CAAmB,GAAG,EAAE;oBACjD,aAAa,EAAE,6CAAgB;iBAChC,CAAC,CACH,CAAC,IAAI,CAAC;gBACP,MAAM,YAAY,CAAC,GAAG,CACpB,UAAU,CAAC,cAAc,EACzB,gBAAgB,EAChB,gBAAgB,EAChB,CAAC,GAAG,EAAE,GAAG,EAAE,CACZ,CAAC;YACJ,CAAC;YAED,MAAM,QAAQ,GAAG,gBAAgB,CAAC,SAAS;iBACxC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC1C,SAAS;gBACT,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE;gBAC5B,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE;aAC9B,CAAC,CAAC;iBACF,MAAM,CACL,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,YAAY,IAAI,gBAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CACtE;iBACA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACb,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO;gBACpB,CAAC,CAAC,gBAAM,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC;gBACtC,CAAC,CAAC,wCAAwC,CAAC,CAAC,CAC/C,CAAC;YAEJ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC1B,MAAM,YAAY,CAAC,GAAG,CACpB,UAAU,CAAC,cAAc,EACzB,cAAc,EACd,IAAI,EACJ,EAAE,CACH,CAAC;gBACF,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,gBAAgB,EAAE,EACzB,MAAM,YAAY,iBAAiB,CACpC,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC,GAAG,EAAG,CAAC;YAE/C,qBAAqB;YACrB,IACE,YAAY,KAAK,sBAAsB;gBACvC,OAAO;gBACP,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAC7B,CAAC,gBAAM,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,EACpC,CAAC;gBACD,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,OAAO,EAAE,EAChB,uDAAuD,CACxD,CAAC;YACJ,CAAC;YAED,MAAM,YAAY,CAAC,GAAG,CACpB,UAAU,CAAC,cAAc,EACzB,cAAc,EACd,SAAS,EACT,EAAE,CACH,CAAC;YACF,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,kDAAkD;YAClD,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;YACD,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,GAAG,EAAE,gBAAgB,EAAE,EAC9B,qCAAqC,YAAY,EAAE,CACpD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,IAAU,EACV,WAAwB;QAExB,IAAI,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAc,GAAG,CAAC,CAAC;YACtE,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC;QACrC,CAAC;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,WAAW,CACf,IAAU,EACV,WAAmB,EACnB,OAAe,EACf,OAAe;QAEf,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,GAAG,GAAG,GAAG,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC;QAC7D,MAAM,mBAAmB,GACvB,MAAM,IAAI,CAAC,gBAAgB,CAAsB,GAAG,CAAC,CAAC;QACxD,MAAM,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC1D,MAAM,iBAAiB,GAAG,YAAY,CAAC,GAAG,CACxC,CAAC,IAAI,EAAE,EAAE,CAAC,GAA4B,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAC1E,CAAC;QACF,MAAM,cAAc,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;aACpD,IAAI,EAAE;aACN,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAA,0BAAiB,EAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3D,IAAI,QAAQ,GAAkB,IAAI,CAAC;QACnC,IAAI,YAAY,GAAkB,IAAI,CAAC;QACvC,IAAI,QAAQ,GAAkB,IAAI,CAAC;QACnC,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CACjC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,EAAE;YAC7D,MAAM,OAAO,GAAY,EAAE,OAAO,EAAE,IAAA,wBAAe,EAAC,OAAO,CAAC,EAAE,CAAC;YAC/D,MAAM,gBAAgB,GAAG,IAAA,uBAAW,EAAC,SAAS,CAAC,CAAC;YAChD,IAAI,gBAAgB,EAAE,CAAC;gBACrB,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAC9C,CAAC;YACD,IAAI,WAAU,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,WAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gBAChE,YAAY,GAAG,IAAA,wBAAe,EAAC,OAAO,CAAC,CAAC;gBACxC,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,IAAA,mBAAU,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;gBAC1D,QAAQ,GAAG,IAAA,mBAAU,EAAC,cAAc,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;gBACrB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;YAC9B,CAAC;YACD,OAAO,OAAO,CAAC;QACjB,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mEAAmE;QACnE,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;YACjD,MAAM,IAAI,GAAG,cAAc,CAAC,GAAG,EAAG,CAAC;YACnC,YAAY,GAAG,IAAA,wBAAe,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7C,QAAQ,KAAK,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;YACrC,QAAQ,KAAK,IAAA,mBAAU,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,GAAG,GAAkB;YACzB,QAAQ;SACT,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,cAAc,CAClD,IAAI,EACJ,WAAW,EACX,oBAAoB,CACrB,CAAC;YACF,IAAI,YAAE,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBAC1C,MAAM,SAAS,GAAG,GAAG,IAAA,yBAAmB,EACtC,kBAAkB,CACnB,GAAG,OAAO,CAAC,WAAW,EAAE,IAAI;gBAC3B,uBAAuB;gBACvB,YACF,IAAI,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC;gBACnC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC/C,aAAa,EAAE,6CAAgB;iBAChC,CAAC,CAAC;gBACH,MAAM,MAAM,GAAG,IAAI,oBAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAChD,MAAM,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;gBAClE,IAAI,SAAS,EAAE,CAAC;oBACd,GAAG,CAAC,SAAS,GAAG,IAAA,mBAAU,EAAC,SAAS,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC;iBAAM,IAAI,QAAQ,EAAE,CAAC;gBACpB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAChD,IAAI,EACJ,WAAW,EACX,OAAO,EACP,YAAY,EACZ,QAAQ,CACT,CAAC;gBACF,IAAI,SAAS,EAAE,CAAC;oBACd,GAAG,CAAC,SAAS,GAAG,IAAA,mBAAU,EAAC,SAAS,CAAC,CAAC;oBACtC,eAAM,CAAC,KAAK,CAAC,wBAAwB,SAAS,SAAS,QAAQ,EAAE,CAAC,CAAC;gBACrE,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,kDAAkD;YAClD,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;YACD,kGAAkG;YAClG,IAAI,GAAG,YAAY,gBAAS,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK,GAAG,EAAE,CAAC;gBACjE,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,EAClD,sCAAsC,CACvC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,EACvD,yBAAyB,CAC1B,CAAC;YACJ,CAAC;QACH,CAAC;QAED,IAAI,QAAQ,EAAE,CAAC;YACb,8BAA8B;YAC9B,GAAG,CAAC,SAAS,KAAK,QAAQ,CAAC;YAC3B,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;QAC5B,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAaK,AAAN,KAAK,CAAC,qBAAqB,CACzB,IAAU,EACV,YAAoB,EACpB,WAAmB,EACnB,cAA6B,EAC7B,QAAgB;QAEhB,2CAA2C;QAC3C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,CAAC;YAClD,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAc,EAAC,OAAO,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,eAAK,CAAC,IAAI,CAC1B,QAAQ,EACR,GAAG,WAAW,IAAI,cAAc,QAAQ,CACzC,CAAC;QACF,MAAM,gBAAgB,GAAG,eAAK,CAAC,IAAI,CACjC,QAAQ,EACR,GAAG,WAAW,IAAI,cAAc,EAAE,CACnC,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,EAAE,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;YACzD,MAAM,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAC3C,MAAM,IAAA,qBAAO,EAAC,SAAS,EAAE,EAAE,GAAG,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACpD,MAAM,UAAU,GAAG,eAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,WAAW,SAAS,CAAC,CAAC;YACzE,MAAM,MAAM,GAAG,IAAI,oBAAW,CAC5B,MAAM,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAC3C,CAAC;YACF,OAAO,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,IAAI,CAAC;QACjE,CAAC;gBAAS,CAAC;YACT,MAAM,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC5B,MAAM,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;;AAzRH,gCA0RC;AApCO;IAXL,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,UAAU,CAAC,cAAc;QACpC,GAAG,EAAE,CACH,KAAW,EACX,WAAmB,EACnB,WAAmB,EACnB,eAA8B,EAC9B,SAAiB,EACjB,EAAE,CAAC,cAAc,WAAW,IAAI,WAAW,EAAE;QAC/C,UAAU,EAAE,KAAK,EAAE,SAAS;KAC7B,CAAC;uDAoCD","sourcesContent":["import is from '@sindresorhus/is';\nimport extract from 'extract-zip';\nimport semver from 'semver';\nimport upath from 'upath';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport * as packageCache from '../../../util/cache/package';\nimport { cache } from '../../../util/cache/package/decorator';\nimport * as fs from '../../../util/fs';\nimport { ensureCacheDir } from '../../../util/fs';\nimport type { Http } from '../../../util/http';\nimport { HttpError } from '../../../util/http';\nimport { memCacheProvider } from '../../../util/http/cache/memory-http-cache-provider';\nimport * as p from '../../../util/promises';\nimport { regEx } from '../../../util/regex';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport { api as versioning } from '../../versioning/nuget';\nimport type { Release, ReleaseResult } from '../types';\nimport { massageUrl, removeBuildMeta, sortNugetVersions } from './common';\nimport type {\n  CatalogEntry,\n  CatalogPage,\n  PackageRegistration,\n  ServicesIndexRaw,\n} from './types';\n\nexport class NugetV3Api {\n  static readonly cacheNamespace = 'datasource-nuget-v3';\n\n  async getResourceUrl(\n    http: Http,\n    url: string,\n    resourceType = 'RegistrationsBaseUrl',\n  ): Promise<string | null> {\n    // https://docs.microsoft.com/en-us/nuget/api/service-index\n    const resultCacheKey = `${url}:${resourceType}`;\n    const cachedResult = await packageCache.get<string>(\n      NugetV3Api.cacheNamespace,\n      resultCacheKey,\n    );\n\n    /* v8 ignore next 3 -- TODO: add test */\n    if (cachedResult) {\n      return cachedResult;\n    }\n    let servicesIndexRaw: ServicesIndexRaw | undefined;\n    try {\n      const responseCacheKey = url;\n      servicesIndexRaw = await packageCache.get<ServicesIndexRaw>(\n        NugetV3Api.cacheNamespace,\n        responseCacheKey,\n      );\n      if (!servicesIndexRaw) {\n        servicesIndexRaw = (\n          await http.getJsonUnchecked<ServicesIndexRaw>(url, {\n            cacheProvider: memCacheProvider,\n          })\n        ).body;\n        await packageCache.set(\n          NugetV3Api.cacheNamespace,\n          responseCacheKey,\n          servicesIndexRaw,\n          3 * 24 * 60,\n        );\n      }\n\n      const services = servicesIndexRaw.resources\n        .map(({ '@id': serviceId, '@type': t }) => ({\n          serviceId,\n          type: t?.split('/')?.shift(),\n          version: t?.split('/')?.pop(),\n        }))\n        .filter(\n          ({ type, version }) => type === resourceType && semver.valid(version),\n        )\n        .sort((x, y) =>\n          x.version && y.version\n            ? semver.compare(x.version, y.version)\n            : /* istanbul ignore next: hard to test */ 0,\n        );\n\n      if (services.length === 0) {\n        await packageCache.set(\n          NugetV3Api.cacheNamespace,\n          resultCacheKey,\n          null,\n          60,\n        );\n        logger.debug(\n          { url, servicesIndexRaw },\n          `no ${resourceType} services found`,\n        );\n        return null;\n      }\n\n      const { serviceId, version } = services.pop()!;\n\n      // istanbul ignore if\n      if (\n        resourceType === 'RegistrationsBaseUrl' &&\n        version &&\n        !version.startsWith('3.0.0-') &&\n        !semver.satisfies(version, '^3.0.0')\n      ) {\n        logger.warn(\n          { url, version },\n          `Nuget: Unknown version returned. Only v3 is supported`,\n        );\n      }\n\n      await packageCache.set(\n        NugetV3Api.cacheNamespace,\n        resultCacheKey,\n        serviceId,\n        60,\n      );\n      return serviceId;\n    } catch (err) {\n      // istanbul ignore if: not easy testable with nock\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      logger.debug(\n        { err, url, servicesIndexRaw },\n        `nuget registry failure: can't get ${resourceType}`,\n      );\n      return null;\n    }\n  }\n\n  async getCatalogEntry(\n    http: Http,\n    catalogPage: CatalogPage,\n  ): Promise<CatalogEntry[]> {\n    let items = catalogPage.items;\n    if (!items) {\n      const url = catalogPage['@id'];\n      const catalogPageFull = await http.getJsonUnchecked<CatalogPage>(url);\n      items = catalogPageFull.body.items;\n    }\n    return items.map(({ catalogEntry }) => catalogEntry);\n  }\n\n  async getReleases(\n    http: Http,\n    registryUrl: string,\n    feedUrl: string,\n    pkgName: string,\n  ): Promise<ReleaseResult | null> {\n    const baseUrl = feedUrl.replace(regEx(/\\/*$/), '');\n    const url = `${baseUrl}/${pkgName.toLowerCase()}/index.json`;\n    const packageRegistration =\n      await http.getJsonUnchecked<PackageRegistration>(url);\n    const catalogPages = packageRegistration.body.items || [];\n    const catalogPagesQueue = catalogPages.map(\n      (page) => (): Promise<CatalogEntry[]> => this.getCatalogEntry(http, page),\n    );\n    const catalogEntries = (await p.all(catalogPagesQueue))\n      .flat()\n      .sort((a, b) => sortNugetVersions(a.version, b.version));\n\n    let homepage: string | null = null;\n    let latestStable: string | null = null;\n    let nupkgUrl: string | null = null;\n    const releases = catalogEntries.map(\n      ({ version, published, projectUrl, listed, packageContent }) => {\n        const release: Release = { version: removeBuildMeta(version) };\n        const releaseTimestamp = asTimestamp(published);\n        if (releaseTimestamp) {\n          release.releaseTimestamp = releaseTimestamp;\n        }\n        if (versioning.isValid(version) && versioning.isStable(version)) {\n          latestStable = removeBuildMeta(version);\n          homepage = projectUrl ? massageUrl(projectUrl) : homepage;\n          nupkgUrl = massageUrl(packageContent);\n        }\n        if (listed === false) {\n          release.isDeprecated = true;\n        }\n        return release;\n      },\n    );\n\n    if (!releases.length) {\n      return null;\n    }\n\n    // istanbul ignore next: only happens when no stable version exists\n    if (latestStable === null && catalogPages.length) {\n      const last = catalogEntries.pop()!;\n      latestStable = removeBuildMeta(last.version);\n      homepage ??= last.projectUrl ?? null;\n      nupkgUrl ??= massageUrl(last.packageContent);\n    }\n\n    const dep: ReleaseResult = {\n      releases,\n    };\n\n    try {\n      const packageBaseAddress = await this.getResourceUrl(\n        http,\n        registryUrl,\n        'PackageBaseAddress',\n      );\n      if (is.nonEmptyString(packageBaseAddress)) {\n        const nuspecUrl = `${ensureTrailingSlash(\n          packageBaseAddress,\n        )}${pkgName.toLowerCase()}/${\n          // TODO: types (#22198)\n          latestStable\n        }/${pkgName.toLowerCase()}.nuspec`;\n        const metaresult = await http.getText(nuspecUrl, {\n          cacheProvider: memCacheProvider,\n        });\n        const nuspec = new XmlDocument(metaresult.body);\n        const sourceUrl = nuspec.valueWithPath('metadata.repository@url');\n        if (sourceUrl) {\n          dep.sourceUrl = massageUrl(sourceUrl);\n        }\n      } else if (nupkgUrl) {\n        const sourceUrl = await this.getSourceUrlFromNupkg(\n          http,\n          registryUrl,\n          pkgName,\n          latestStable,\n          nupkgUrl,\n        );\n        if (sourceUrl) {\n          dep.sourceUrl = massageUrl(sourceUrl);\n          logger.debug(`Determined sourceUrl ${sourceUrl} from ${nupkgUrl}`);\n        }\n      }\n    } catch (err) {\n      // istanbul ignore if: not easy testable with nock\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // ignore / silence 404. Seen on proget, if remote connector is used and package is not yet cached\n      if (err instanceof HttpError && err.response?.statusCode === 404) {\n        logger.debug(\n          { registryUrl, pkgName, pkgVersion: latestStable },\n          `package manifest (.nuspec) not found`,\n        );\n      } else {\n        logger.debug(\n          { err, registryUrl, pkgName, pkgVersion: latestStable },\n          `Cannot obtain sourceUrl`,\n        );\n      }\n    }\n\n    if (homepage) {\n      // only assign if not assigned\n      dep.sourceUrl ??= homepage;\n      dep.homepage ??= homepage;\n    }\n\n    return dep;\n  }\n\n  @cache({\n    namespace: NugetV3Api.cacheNamespace,\n    key: (\n      _http: Http,\n      registryUrl: string,\n      packageName: string,\n      _packageVersion: string | null,\n      _nupkgUrl: string,\n    ) => `source-url:${registryUrl}:${packageName}`,\n    ttlMinutes: 10080, // 1 week\n  })\n  async getSourceUrlFromNupkg(\n    http: Http,\n    _registryUrl: string,\n    packageName: string,\n    packageVersion: string | null,\n    nupkgUrl: string,\n  ): Promise<string | null> {\n    // istanbul ignore if: experimental feature\n    if (!process.env.RENOVATE_X_NUGET_DOWNLOAD_NUPKGS) {\n      logger.once.debug('RENOVATE_X_NUGET_DOWNLOAD_NUPKGS is not set');\n      return null;\n    }\n    const cacheDir = await ensureCacheDir('nuget');\n    const nupkgFile = upath.join(\n      cacheDir,\n      `${packageName}.${packageVersion}.nupkg`,\n    );\n    const nupkgContentsDir = upath.join(\n      cacheDir,\n      `${packageName}.${packageVersion}`,\n    );\n    const readStream = http.stream(nupkgUrl);\n    try {\n      const writeStream = fs.createCacheWriteStream(nupkgFile);\n      await fs.pipeline(readStream, writeStream);\n      await extract(nupkgFile, { dir: nupkgContentsDir });\n      const nuspecFile = upath.join(nupkgContentsDir, `${packageName}.nuspec`);\n      const nuspec = new XmlDocument(\n        await fs.readCacheFile(nuspecFile, 'utf8'),\n      );\n      return nuspec.valueWithPath('metadata.repository@url') ?? null;\n    } finally {\n      await fs.rmCache(nupkgFile);\n      await fs.rmCache(nupkgContentsDir);\n    }\n  }\n}\n"]}