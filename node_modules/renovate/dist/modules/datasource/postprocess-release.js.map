{"version":3,"file":"postprocess-release.js","sourceRoot":"","sources":["../../../lib/modules/datasource/postprocess-release.ts"],"names":[],"mappings":";;AAWA,gDA0DC;AArED,yCAAsC;AAKtC,qCAA4C;AAC5C,6CAA0C;AAKnC,KAAK,UAAU,kBAAkB,CACtC,MAAc,EACd,OAAgB;IAEhB,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IAE9B,MAAM,EAAE,GAAG,UAAU,IAAI,IAAA,yBAAgB,EAAC,UAAU,CAAC,CAAC;IACtD,IAAI,CAAC,EAAE,EAAE,CAAC;QACR,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,EAAE,UAAU,EAAE,EACd,4DAA4D,CAC7D,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IACE,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,kBAAkB;QAC3C,uBAAU,CAAC,SAAS,CAAC,kBAAkB,EACvC,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAC/B,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,eAAM,CAAC,IAAI,CAAC,IAAI,CACd,EAAE,UAAU,EAAE,EACd,uEAAuE,CACxE,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAE7E,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,kBAAkB,CACxC,EAAE,WAAW,EAAE,WAAW,EAAE,EAC5B,OAAO,CACR,CAAC;QAEF,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;YACxB,eAAM,CAAC,KAAK,CACV;gBACE,UAAU;gBACV,WAAW;gBACX,WAAW;gBACX,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,WAAW,EAAE,OAAO,CAAC,WAAW;aACjC,EACD,kBAAkB,CACnB,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,mCAAmC,UAAU,GAAG,CAAC,CAAC;QAC5E,OAAO,OAAO,CAAC;IACjB,CAAC;AACH,CAAC","sourcesContent":["import { logger } from '../../logger';\nimport type {\n  LookupUpdateConfig,\n  UpdateResult,\n} from '../../workers/repository/process/lookup/types';\nimport { getDatasourceFor } from './common';\nimport { Datasource } from './datasource';\nimport type { Release } from './types';\n\ntype Config = Partial<LookupUpdateConfig & UpdateResult>;\n\nexport async function postprocessRelease(\n  config: Config,\n  release: Release,\n): Promise<Release | null> {\n  const { datasource } = config;\n\n  const ds = datasource && getDatasourceFor(datasource);\n  if (!ds) {\n    logger.once.warn(\n      { datasource },\n      'Failed to resolve datasource during release postprocessing',\n    );\n    return release;\n  }\n\n  if (\n    ds.constructor.prototype.postprocessRelease ===\n    Datasource.prototype.postprocessRelease\n  ) {\n    return release;\n  }\n\n  const { packageName } = config;\n  if (!packageName) {\n    logger.once.warn(\n      { datasource },\n      'Release postprocessing is not supported for empty `packageName` field',\n    );\n    return release;\n  }\n\n  const registryUrl = config.registryUrl ?? config.registryUrls?.at(0) ?? null;\n\n  try {\n    const result = await ds.postprocessRelease(\n      { packageName, registryUrl },\n      release,\n    );\n\n    if (result === 'reject') {\n      logger.debug(\n        {\n          datasource,\n          packageName,\n          registryUrl,\n          version: release.version,\n          versionOrig: release.versionOrig,\n        },\n        'Rejected release',\n      );\n      return null;\n    }\n\n    return result;\n  } catch (err) {\n    logger.once.warn({ err }, `Release interceptor failed for \"${datasource}\"`);\n    return release;\n  }\n}\n"]}