{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/sbt-plugin/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { Http } from '../../../util/http';\nimport { regEx } from '../../../util/regex';\nimport { ensureTrailingSlash } from '../../../util/url';\nimport * as ivyVersioning from '../../versioning/ivy';\nimport { compare } from '../../versioning/maven/compare';\nimport { Datasource } from '../datasource';\nimport { MAVEN_REPO } from '../maven/common';\nimport { downloadHttpContent } from '../maven/util';\nimport { extractPageLinks, getLatestVersion } from '../sbt-package/util';\nimport type {\n  GetReleasesConfig,\n  RegistryStrategy,\n  ReleaseResult,\n} from '../types';\n\nexport const SBT_PLUGINS_REPO =\n  'https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases';\n\nexport class SbtPluginDatasource extends Datasource {\n  static readonly id = 'sbt-plugin';\n\n  override readonly defaultRegistryUrls = [SBT_PLUGINS_REPO, MAVEN_REPO];\n\n  override readonly defaultVersioning = ivyVersioning.id;\n\n  override readonly registryStrategy: RegistryStrategy = 'merge';\n\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the `scm` tags in the results.';\n\n  constructor() {\n    super(SbtPluginDatasource.id);\n    this.http = new Http('sbt');\n  }\n\n  // istanbul ignore next: to be rewritten\n  async getArtifactSubdirs(\n    searchRoot: string,\n    artifact: string,\n    scalaVersion: string,\n  ): Promise<string[] | null> {\n    const pkgUrl = ensureTrailingSlash(searchRoot);\n    const indexContent = await downloadHttpContent(this.http, pkgUrl);\n    if (indexContent) {\n      const rootPath = new URL(pkgUrl).pathname;\n      let artifactSubdirs = extractPageLinks(indexContent, (href) => {\n        const path = href.replace(rootPath, '');\n        if (\n          path.startsWith(`${artifact}_native`) ||\n          path.startsWith(`${artifact}_sjs`)\n        ) {\n          return null;\n        }\n\n        if (path === artifact || path.startsWith(`${artifact}_`)) {\n          return path;\n        }\n\n        return null;\n      });\n\n      if (\n        scalaVersion &&\n        artifactSubdirs.includes(`${artifact}_${scalaVersion}`)\n      ) {\n        artifactSubdirs = [`${artifact}_${scalaVersion}`];\n      }\n      return artifactSubdirs;\n    }\n\n    return null;\n  }\n\n  // istanbul ignore next: to be rewritten\n  async getPackageReleases(\n    searchRoot: string,\n    artifactSubdirs: string[] | null,\n  ): Promise<string[] | null> {\n    if (artifactSubdirs) {\n      const releases: string[] = [];\n      for (const searchSubdir of artifactSubdirs) {\n        const pkgUrl = ensureTrailingSlash(`${searchRoot}/${searchSubdir}`);\n        const content = await downloadHttpContent(this.http, pkgUrl);\n        if (content) {\n          const rootPath = new URL(pkgUrl).pathname;\n          const subdirReleases = extractPageLinks(content, (href) => {\n            const path = href.replace(rootPath, '');\n            if (path.startsWith('.')) {\n              return null;\n            }\n\n            return path;\n          });\n\n          subdirReleases.forEach((x) => releases.push(x));\n        }\n      }\n      if (releases.length) {\n        return [...new Set(releases)].sort(compare);\n      }\n    }\n\n    return null;\n  }\n\n  // istanbul ignore next: to be rewritten\n  async getUrls(\n    searchRoot: string,\n    artifactDirs: string[] | null,\n    version: string | null,\n  ): Promise<Partial<ReleaseResult>> {\n    const result: Partial<ReleaseResult> = {};\n\n    if (!artifactDirs?.length) {\n      return result;\n    }\n\n    if (!version) {\n      return result;\n    }\n\n    for (const artifactDir of artifactDirs) {\n      const [artifact] = artifactDir.split('_');\n      const pomFileNames = [\n        `${artifactDir}-${version}.pom`,\n        `${artifact}-${version}.pom`,\n      ];\n\n      for (const pomFileName of pomFileNames) {\n        const pomUrl = `${searchRoot}/${artifactDir}/${version}/${pomFileName}`;\n        const content = await downloadHttpContent(this.http, pomUrl);\n        if (content) {\n          const pomXml = new XmlDocument(content);\n\n          const homepage = pomXml.valueWithPath('url');\n          if (homepage) {\n            result.homepage = homepage;\n          }\n\n          const sourceUrl = pomXml.valueWithPath('scm.url');\n          if (sourceUrl) {\n            result.sourceUrl = sourceUrl\n              .replace(regEx(/^scm:/), '')\n              .replace(regEx(/^git:/), '')\n              .replace(regEx(/^git@github.com:/), 'https://github.com/')\n              .replace(regEx(/\\.git$/), '');\n          }\n\n          return result;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  async resolvePluginReleases(\n    rootUrl: string,\n    artifact: string,\n    scalaVersion: string,\n  ): Promise<string[] | null> {\n    const searchRoot = `${rootUrl}/${artifact}`;\n    const hrefFilterMap = (href: string): string | null => {\n      if (href.startsWith('.')) {\n        return null;\n      }\n\n      return href;\n    };\n    const searchRootContent = await downloadHttpContent(\n      this.http,\n      ensureTrailingSlash(searchRoot),\n    );\n    if (searchRootContent) {\n      const releases: string[] = [];\n      const scalaVersionItems = extractPageLinks(\n        searchRootContent,\n        hrefFilterMap,\n      );\n      const scalaVersions = scalaVersionItems.map((x) =>\n        x.replace(regEx(/^scala_/), ''),\n      );\n      const searchVersions = scalaVersions.includes(scalaVersion)\n        ? [scalaVersion]\n        : scalaVersions;\n      for (const searchVersion of searchVersions) {\n        const searchSubRoot = `${searchRoot}/scala_${searchVersion}`;\n        const subRootContent = await downloadHttpContent(\n          this.http,\n          ensureTrailingSlash(searchSubRoot),\n        );\n        if (subRootContent) {\n          const sbtVersionItems = extractPageLinks(\n            subRootContent,\n            hrefFilterMap,\n          );\n          for (const sbtItem of sbtVersionItems) {\n            const releasesRoot = `${searchSubRoot}/${sbtItem}`;\n            const releasesIndexContent = await downloadHttpContent(\n              this.http,\n              ensureTrailingSlash(releasesRoot),\n            );\n            if (releasesIndexContent) {\n              const releasesParsed = extractPageLinks(\n                releasesIndexContent,\n                hrefFilterMap,\n              );\n              releasesParsed.forEach((x) => releases.push(x));\n            }\n          }\n        }\n      }\n      if (releases.length) {\n        return [...new Set(releases)].sort(compare);\n      }\n    }\n    return null;\n  }\n\n  override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const [groupId, artifactId] = packageName.split(':');\n    const groupIdSplit = groupId.split('.');\n    const artifactIdSplit = artifactId.split('_');\n    const [artifact, scalaVersion] = artifactIdSplit;\n\n    const repoRoot = ensureTrailingSlash(registryUrl);\n    const searchRoots: string[] = [];\n    // Optimize lookup order\n    if (!registryUrl.startsWith(MAVEN_REPO)) {\n      searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);\n    }\n    searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);\n\n    for (const searchRoot of searchRoots) {\n      let versions = await this.resolvePluginReleases(\n        searchRoot,\n        artifact,\n        scalaVersion,\n      );\n      let urls = {};\n\n      if (!versions?.length) {\n        const artifactSubdirs = await this.getArtifactSubdirs(\n          searchRoot,\n          artifact,\n          scalaVersion,\n        );\n        versions = await this.getPackageReleases(searchRoot, artifactSubdirs);\n        const latestVersion = getLatestVersion(versions);\n        urls = await this.getUrls(searchRoot, artifactSubdirs, latestVersion);\n      }\n\n      const dependencyUrl = `${searchRoot}/${artifact}`;\n\n      logger.trace({ dependency: packageName, versions }, `Package versions`);\n      if (versions) {\n        return {\n          ...urls,\n          dependencyUrl,\n          releases: versions.map((v) => ({ version: v })),\n        };\n      }\n    }\n\n    logger.debug(\n      `No versions found for ${packageName} in ${searchRoots.length} repositories`,\n    );\n    return null;\n  }\n}\n"]}