{"version":3,"file":"dockerhub-cache.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/docker/dockerhub-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { dequal } from 'dequal';\nimport { DateTime } from 'luxon';\nimport * as packageCache from '../../../util/cache/package';\nimport type { DockerHubTag } from './schema';\n\nexport interface DockerHubCacheData {\n  items: Record<number, DockerHubTag>;\n  updatedAt: string | null;\n}\n\nconst cacheNamespace = 'datasource-docker-hub-cache';\n\nexport class DockerHubCache {\n  private isChanged = false;\n  private reconciledIds = new Set<number>();\n\n  private constructor(\n    private dockerRepository: string,\n    private cache: DockerHubCacheData,\n  ) {}\n\n  static async init(dockerRepository: string): Promise<DockerHubCache> {\n    let repoCache = await packageCache.get<DockerHubCacheData>(\n      cacheNamespace,\n      dockerRepository,\n    );\n\n    repoCache ??= {\n      items: {},\n      updatedAt: null,\n    };\n\n    return new DockerHubCache(dockerRepository, repoCache);\n  }\n\n  reconcile(items: DockerHubTag[], expectedCount: number): boolean {\n    let needNextPage = true;\n\n    let earliestDate = null;\n\n    let { updatedAt } = this.cache;\n    let latestDate = updatedAt ? DateTime.fromISO(updatedAt) : null;\n\n    for (const newItem of items) {\n      const id = newItem.id;\n      this.reconciledIds.add(id);\n\n      const oldItem = this.cache.items[id];\n\n      const itemDate = DateTime.fromISO(newItem.last_updated);\n\n      if (!earliestDate || earliestDate > itemDate) {\n        earliestDate = itemDate;\n      }\n\n      if (!latestDate || latestDate < itemDate) {\n        latestDate = itemDate;\n        updatedAt = newItem.last_updated;\n      }\n\n      if (dequal(oldItem, newItem)) {\n        needNextPage = false;\n        continue;\n      }\n\n      this.cache.items[newItem.id] = newItem;\n      this.isChanged = true;\n    }\n\n    this.cache.updatedAt = updatedAt;\n\n    if (earliestDate && latestDate) {\n      for (const [key, item] of Object.entries(this.cache.items)) {\n        const id = parseInt(key, 10);\n\n        const itemDate = DateTime.fromISO(item.last_updated);\n\n        if (\n          itemDate < earliestDate ||\n          itemDate > latestDate ||\n          this.reconciledIds.has(id)\n        ) {\n          continue;\n        }\n\n        delete this.cache.items[id];\n        this.isChanged = true;\n      }\n\n      if (Object.keys(this.cache.items).length > expectedCount) {\n        return true;\n      }\n    }\n\n    return needNextPage;\n  }\n\n  async save(): Promise<void> {\n    if (this.isChanged) {\n      await packageCache.set(\n        cacheNamespace,\n        this.dockerRepository,\n        this.cache,\n        3 * 60 * 24 * 30,\n      );\n    }\n  }\n\n  getItems(): DockerHubTag[] {\n    return Object.values(this.cache.items);\n  }\n}\n"]}