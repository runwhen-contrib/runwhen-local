{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/modules/datasource/index.ts"],"names":[],"mappings":";;;AA0WA,8CA0BC;AAED,wDAeC;AAED,wCAYC;AAED,0CAGC;AAoBD,8BAWC;AAED,4CAOC;;AAhdD,kEAAkC;AAClC,mCAAgC;AAChC,gDAAmD;AACnD,mEAA+D;AAC/D,yCAAsC;AACtC,gFAA2E;AAC3E,4CAA+C;AAC/C,0EAAoD;AACpD,+EAAyD;AACzD,4CAAyC;AACzC,sDAAkD;AAClD,8CAAwD;AACxD,4CAAwD;AACxD,wCAAmD;AACnD,wDAAgC;AAChC,qCAOkB;AAClB,yCAAyC;AACzC,+BAAiC;AACjC,uCAAiD;AAUjD,kDAAwB;AACxB,mCAAkD;AAAzC,gHAAA,sBAAsB,OAAA;AAExB,MAAM,cAAc,GAAG,GAA+B,EAAE,CAAC,aAAW,CAAC;AAA/D,QAAA,cAAc,kBAAiD;AACrE,MAAM,iBAAiB,GAAG,GAAa,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,aAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAAnE,QAAA,iBAAiB,qBAAkD;AAEhF,MAAM,cAAc,GAAG,qBAAqB,CAAC;AAI7C,uBAAuB;AACvB,SAAS,QAAQ,CAAC,UAAkB,EAAE,WAAmB,EAAE,GAAQ;IACjE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC/C,IAAI,UAAU,KAAK,GAAG,EAAE,CAAC;QACvB,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACnE,CAAC;SAAM,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,EAAE,CAAC;QACpD,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,EAAE,yBAAyB,CAAC,CAAC;IAC5E,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,EACzC,6BAA6B,CAC9B,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,EAAE,0BAA0B,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC;AAED,KAAK,UAAU,mBAAmB,CAChC,UAAyB,EACzB,MAAyB,EACzB,WAAmB;IAEnB,MAAM,QAAQ,GAAG,GAAG,UAAU,CAAC,EAAE,IAAI,WAAW,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;IACzE,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC;QACvB,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,GAAG,CACzC,cAAc,EACd,QAAQ,CACT,CAAC;QAEF,qBAAqB;QACrB,IAAI,YAAY,EAAE,CAAC;YACjB,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,sCAAsC,CAAC,CAAC;YACnE,4BAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;YACzE,OAAO,YAAY,CAAC;QACtB,CAAC;QAED,4BAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,EAAE,GAAG,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IACrE,IAAI,GAAG,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;QACzB,GAAG,CAAC,WAAW,KAAK,WAAW,CAAC;IAClC,CAAC;IAED,oDAAoD;IACpD,IAAI,UAAU,CAAC,OAAO,IAAI,GAAG,EAAE,CAAC;QAC9B,MAAM,oBAAoB,GAAG,qBAAY,CAAC,GAAG,CAC3C,sBAAsB,EACtB,KAAK,CACN,CAAC;QACF,IAAI,oBAAoB,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,6BAA6B,CAAC,CAAC;YAC1D,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;YACpE,4BAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3E,CAAC;aAAM,CAAC;YACN,4BAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,aAAa,CACpB,MAAiC,EACjC,UAAyB,EACzB,YAAsB;IAEtB,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC5B,eAAM,CAAC,IAAI,CACT;YACE,UAAU,EAAE,UAAU,CAAC,EAAE;YACzB,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,YAAY;SACb,EACD,+EAA+E,CAChF,CAAC;IACJ,CAAC;IACD,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAC9D,CAAC;AAED,KAAK,UAAU,cAAc,CAC3B,MAAiC,EACjC,UAAyB,EACzB,YAAsB;IAEtB,IAAI,GAAG,GAAyB,IAAI,CAAC;IACrC,IAAI,WAA8B,CAAC;IACnC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,IAAI,CAAC;YACH,GAAG,GAAG,MAAM,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YACjE,IAAI,GAAG,EAAE,CAAC;gBACR,MAAM;YACR,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;YACD,0CAA0C;YAC1C,WAAW,GAAG,GAAG,CAAC;YAClB,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,yBAAyB,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACD,IAAI,GAAG,EAAE,CAAC;QACR,OAAO,GAAG,CAAC;IACb,CAAC;IACD,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,WAAW,CAAC;IACpB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,KAAK,UAAU,eAAe,CAC5B,MAAiC,EACjC,UAAyB,EACzB,YAAsB;IAEtB,IAAI,WAAsC,CAAC;IAC3C,IAAI,OAA0B,CAAC;IAC/B,IAAI,iBAAiB,GAAG,IAAI,CAAC;IAC7B,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,mBAAmB,CAAC,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;YACvE,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,SAAS;YACX,CAAC;YAED,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,WAAW,GAAG,GAAG,CAAC;gBAClB,SAAS;YACX,CAAC;YAED,IAAI,iBAAiB,EAAE,CAAC;gBACtB,KAAK,MAAM,OAAO,IAAI,IAAA,mBAAW,EAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACxD,OAAO,CAAC,WAAW,KAAK,WAAW,CAAC,WAAW,CAAC;gBAClD,CAAC;gBACD,iBAAiB,GAAG,KAAK,CAAC;YAC5B,CAAC;YAED,MAAM,QAAQ,GAAG,IAAA,mBAAW,EAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC3C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,OAAO,CAAC,WAAW,KAAK,GAAG,CAAC,WAAW,CAAC;YAC1C,CAAC;YAED,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;YACvC,WAAW,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,WAAW,EAAE,CAAC;YACzC,OAAO,WAAW,CAAC,WAAW,CAAC;QACjC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;YAED,OAAO,GAAG,GAAG,CAAC;YACd,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,0BAA0B,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,OAAO,CAAC;QAChB,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,WAAW,CAAC,QAAQ,GAAG,IAAA,sBAAS,EAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;QACjE,IAAI,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,mBAAmB,CAAC,YAAsB;IACjD,OAAO,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,uBAAiB,CAAC,CAAC;AAC7D,CAAC;AAED,SAAS,mBAAmB,CAC1B,UAAyB,EACzB,mBAAyC,EACzC,YAAyC,EACzC,sBAA4C;IAE5C,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;QACtC,IACE,YAAE,CAAC,aAAa,CAAC,YAAY,CAAC;YAC9B,YAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC;YACrC,YAAE,CAAC,aAAa,CAAC,sBAAsB,CAAC,EACxC,CAAC;YACD,eAAM,CAAC,IAAI,CACT;gBACE,UAAU,EAAE,UAAU,CAAC,EAAE;gBACzB,YAAY;gBACZ,mBAAmB;gBACnB,sBAAsB;aACvB,EACD,2EAA2E,CAC5E,CAAC;QACJ,CAAC;QACD,OAAO,YAAE,CAAC,SAAS,CAAC,UAAU,CAAC,mBAAmB,CAAC;YACjD,CAAC,CAAC,UAAU,CAAC,mBAAmB,EAAE;YAClC,CAAC,CAAC,CAAC,UAAU,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM,UAAU,GAAG,YAAY,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,IAAI,YAAY,GAAa,EAAE,CAAC;IAChC,IAAI,YAAE,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC;QACjC,YAAY,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC;IACjC,CAAC;SAAM,IAAI,YAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE,CAAC;QACjD,YAAY,GAAG,CAAC,GAAG,mBAAmB,CAAC,CAAC;QACxC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;SAAM,IAAI,YAAE,CAAC,SAAS,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC;QACxD,YAAY,GAAG,CAAC,GAAG,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACrD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;SAAM,IAAI,YAAE,CAAC,aAAa,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAC5D,YAAY,GAAG,CAAC,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACnD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;IACnE,CAAC;IACD,OAAO,mBAAmB,CAAC,YAAY,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,iBAAiB,CACxB,MAAiC;IAEjC,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,kBAAkB,EAAE,CAAC;QACxD,OAAO;YACL,eAAe,EAAE,MAAM,CAAC,eAAe;YACvC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB;SAC9C,CAAC;IACJ,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,KAAK,UAAU,aAAa,CAC1B,MAAiC;IAEjC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;IAC9C,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAC9B,gCAAgC;IAChC,IAAI,CAAC,cAAc,IAAI,IAAA,yBAAgB,EAAC,cAAc,CAAC,KAAK,SAAS,EAAE,CAAC;QACtE,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,oBAAoB,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,cAAc,KAAK,KAAK,EAAE,CAAC;QAC7B,IAAI,YAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5B,IAAA,cAAQ,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,YAAE,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;YACpC,YAAY,GAAG,CAAC,IAAA,0BAAkB,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IACD,MAAM,UAAU,GAAG,IAAA,yBAAgB,EAAC,cAAc,CAAC,CAAC;IACpD,iCAAiC;IACjC,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,eAAM,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE,oBAAoB,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,YAAY,GAAG,mBAAmB,CAChC,UAAU,EACV,MAAM,CAAC,mBAAmB,EAC1B,YAAY,EACZ,MAAM,CAAC,sBAAsB,CAC9B,CAAC;IACF,IAAI,GAAG,GAAyB,IAAI,CAAC;IACrC,MAAM,gBAAgB,GACpB,MAAM,CAAC,gBAAgB,IAAI,UAAU,CAAC,gBAAgB,IAAI,MAAM,CAAC;IACnE,IAAI,CAAC;QACH,IAAI,YAAE,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;YACnC,IAAI,gBAAgB,KAAK,OAAO,EAAE,CAAC;gBACjC,GAAG,GAAG,MAAM,aAAa,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;YAC9D,CAAC;iBAAM,IAAI,gBAAgB,KAAK,MAAM,EAAE,CAAC;gBACvC,GAAG,GAAG,MAAM,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;YAC/D,CAAC;iBAAM,IAAI,gBAAgB,KAAK,OAAO,EAAE,CAAC;gBACxC,GAAG,GAAG,MAAM,eAAe,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;YAChE,CAAC;QACH,CAAC;aAAM,CAAC;YACN,GAAG,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,IAAI,GAAG,CAAC,OAAO,KAAK,8BAAa,IAAI,GAAG,CAAC,GAAG,EAAE,OAAO,KAAK,8BAAa,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;YACrC,MAAM,GAAG,CAAC;QACZ,CAAC;QACD,QAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IACD,IAAI,CAAC,GAAG,IAAI,IAAA,eAAM,EAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAA,sBAAW,EAAC,GAAG,EAAE,cAAc,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;IACrD,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;IAC/C,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,mBAAmB,CAC1B,MAAiC;IAEjC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IACzD,MAAM,QAAQ,GAAG,GAAG,cAAc,GAAG,UAAU,GAAG,WAAW,GAAG,MAAM,CAAC,gBAAgB,GAAG,MAAM,CAC9F,YAAY,CACb,EAAE,CAAC;IACJ,wFAAwF;IACxF,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAgC,QAAQ,CAAC,CAAC;IAC3E,qBAAqB;IACrB,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;QAC/B,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAC1C,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACpC,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAgB,iBAAiB,CAC/B,MAA4B;IAK5B,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QACvB,eAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnC,OAAO,oBAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IACvC,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,4CAA4C,CAAC,CAAC;QACvE,OAAO,oBAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO,eAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,WAAoB,CAAC;SAC1E,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;QACX,IAAI,CAAC,YAAY,uCAAiB,EAAE,CAAC;YACnC,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC;YAC/B,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;QAC9B,CAAC;QACD,OAAO,eAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;SACD,SAAS,CAAC,aAAK,CAAC,CAAC;AACtB,CAAC;AAED,SAAgB,sBAAsB,CACpC,aAA4B,EAC5B,MAA4B;IAE5B,IAAI,GAAG,GAAG,aAAa,CAAC;IACxB,GAAG,GAAG,IAAA,4BAAmB,EAAC,GAAG,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;IACtD,GAAG,GAAG,IAAA,kCAAyB,EAC7B,GAAG,EACH,MAAM,CAAC,oBAAoB,EAC3B,MAAM,CAAC,oBAAoB,CAC5B,CAAC;IACF,GAAG,GAAG,IAAA,4BAAmB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACvC,GAAG,GAAG,IAAA,gCAAuB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC3C,GAAG,GAAG,IAAA,kCAAyB,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC7C,OAAO,GAAG,CAAC;AACb,CAAC;AAEM,KAAK,UAAU,cAAc,CAClC,MAA4B;IAE5B,MAAM,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,iBAAiB,CAAC,MAAM,CAAC;SACxD,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,sBAAsB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACvD,MAAM,EAAE,CAAC;IAEZ,IAAI,GAAG,YAAY,KAAK,EAAE,CAAC;QACzB,MAAM,GAAG,CAAC;IACZ,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,eAAe,CAAC,UAA8B;IAC5D,MAAM,EAAE,GAAG,CAAC,CAAC,UAAU,IAAI,IAAA,yBAAgB,EAAC,UAAU,CAAC,CAAC;IACxD,OAAO,CAAC,CAAC,EAAE,IAAI,WAAW,IAAI,EAAE,CAAC;AACnC,CAAC;AAED,SAAS,eAAe,CACtB,UAAyB,EACzB,MAA4B;IAE5B,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IAC3D,MAAM,WAAW,GAAG,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,WAAW,CAAC;IACjE,qEAAqE;IACrE,MAAM,WAAW,GACf,MAAM,CAAC,WAAW;QAClB,mBAAmB,CACjB,UAAU,EACV,MAAM,CAAC,mBAAmB,EAC1B,MAAM,CAAC,YAAY,EACnB,MAAM,CAAC,sBAAsB,CAC9B,CAAC,CAAC,CAAC,CAAC;IACP,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC;AAC/E,CAAC;AAED,SAAgB,SAAS,CACvB,MAA4B,EAC5B,KAAc;IAEd,MAAM,UAAU,GAAG,IAAA,yBAAgB,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACvD,gCAAgC;IAChC,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,WAAW,IAAI,UAAU,CAAC,EAAE,CAAC;QAChD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,MAAM,YAAY,GAAG,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzD,OAAO,UAAU,CAAC,SAAU,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AACpD,CAAC;AAED,SAAgB,gBAAgB,CAC9B,UAAkB;IAElB,MAAM,gBAAgB,GAAG,IAAA,yBAAgB,EAAC,UAAU,CAAC,CAAC;IACtD,OAAO,OAAO,CAAC,OAAO,CACpB,gBAAgB,EAAE,aAAa,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CACrD,CAAC;AACJ,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { dequal } from 'dequal';\nimport { GlobalConfig } from '../../config/global';\nimport { HOST_DISABLED } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport { coerceArray } from '../../util/array';\nimport * as memCache from '../../util/cache/memory';\nimport * as packageCache from '../../util/cache/package';\nimport { clone } from '../../util/clone';\nimport { filterMap } from '../../util/filter-map';\nimport { AsyncResult, Result } from '../../util/result';\nimport { DatasourceCacheStats } from '../../util/stats';\nimport { trimTrailingSlash } from '../../util/url';\nimport datasources from './api';\nimport {\n  applyConstraintsFiltering,\n  applyExtractVersion,\n  applyVersionCompatibility,\n  filterValidVersions,\n  getDatasourceFor,\n  sortAndRemoveDuplicates,\n} from './common';\nimport { addMetaData } from './metadata';\nimport { setNpmrc } from './npm';\nimport { resolveRegistryUrl } from './npm/npmrc';\nimport type {\n  DatasourceApi,\n  DigestConfig,\n  GetDigestInputConfig,\n  GetPkgReleasesConfig,\n  GetReleasesConfig,\n  ReleaseResult,\n} from './types';\n\nexport * from './types';\nexport { isGetPkgReleasesConfig } from './common';\n\nexport const getDatasources = (): Map<string, DatasourceApi> => datasources;\nexport const getDatasourceList = (): string[] => Array.from(datasources.keys());\n\nconst cacheNamespace = 'datasource-releases';\n\ntype GetReleasesInternalConfig = GetReleasesConfig & GetPkgReleasesConfig;\n\n// TODO: fix error Type\nfunction logError(datasource: string, packageName: string, err: any): void {\n  const { statusCode, code: errCode, url } = err;\n  if (statusCode === 404) {\n    logger.debug({ datasource, packageName, url }, 'Datasource 404');\n  } else if (statusCode === 401 || statusCode === 403) {\n    logger.debug({ datasource, packageName, url }, 'Datasource unauthorized');\n  } else if (errCode) {\n    logger.debug(\n      { datasource, packageName, url, errCode },\n      'Datasource connection error',\n    );\n  } else {\n    logger.debug({ datasource, packageName, err }, 'Datasource unknown error');\n  }\n}\n\nasync function getRegistryReleases(\n  datasource: DatasourceApi,\n  config: GetReleasesConfig,\n  registryUrl: string,\n): Promise<ReleaseResult | null> {\n  const cacheKey = `${datasource.id} ${registryUrl} ${config.packageName}`;\n  if (datasource.caching) {\n    const cachedResult = await packageCache.get<ReleaseResult>(\n      cacheNamespace,\n      cacheKey,\n    );\n\n    // istanbul ignore if\n    if (cachedResult) {\n      logger.trace({ cacheKey }, 'Returning cached datasource response');\n      DatasourceCacheStats.hit(datasource.id, registryUrl, config.packageName);\n      return cachedResult;\n    }\n\n    DatasourceCacheStats.miss(datasource.id, registryUrl, config.packageName);\n  }\n\n  const res = await datasource.getReleases({ ...config, registryUrl });\n  if (res?.releases.length) {\n    res.registryUrl ??= registryUrl;\n  }\n\n  // cache non-null responses unless marked as private\n  if (datasource.caching && res) {\n    const cachePrivatePackages = GlobalConfig.get(\n      'cachePrivatePackages',\n      false,\n    );\n    if (cachePrivatePackages || !res.isPrivate) {\n      logger.trace({ cacheKey }, 'Caching datasource response');\n      const cacheMinutes = 15;\n      await packageCache.set(cacheNamespace, cacheKey, res, cacheMinutes);\n      DatasourceCacheStats.set(datasource.id, registryUrl, config.packageName);\n    } else {\n      DatasourceCacheStats.skip(datasource.id, registryUrl, config.packageName);\n    }\n  }\n\n  return res;\n}\n\nfunction firstRegistry(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[],\n): Promise<ReleaseResult | null> {\n  if (registryUrls.length > 1) {\n    logger.warn(\n      {\n        datasource: datasource.id,\n        packageName: config.packageName,\n        registryUrls,\n      },\n      'Excess registryUrls found for datasource lookup - using first configured only',\n    );\n  }\n  const registryUrl = registryUrls[0];\n  return getRegistryReleases(datasource, config, registryUrl);\n}\n\nasync function huntRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[],\n): Promise<ReleaseResult | null> {\n  let res: ReleaseResult | null = null;\n  let caughtError: Error | undefined;\n  for (const registryUrl of registryUrls) {\n    try {\n      res = await getRegistryReleases(datasource, config, registryUrl);\n      if (res) {\n        break;\n      }\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      // We'll always save the last-thrown error\n      caughtError = err;\n      logger.trace({ err }, 'datasource hunt failure');\n    }\n  }\n  if (res) {\n    return res;\n  }\n  if (caughtError) {\n    throw caughtError;\n  }\n  return null;\n}\n\nasync function mergeRegistries(\n  config: GetReleasesInternalConfig,\n  datasource: DatasourceApi,\n  registryUrls: string[],\n): Promise<ReleaseResult | null> {\n  let combinedRes: ReleaseResult | undefined;\n  let lastErr: Error | undefined;\n  let commonRegistryUrl = true;\n  for (const registryUrl of registryUrls) {\n    try {\n      const res = await getRegistryReleases(datasource, config, registryUrl);\n      if (!res) {\n        continue;\n      }\n\n      if (!combinedRes) {\n        combinedRes = res;\n        continue;\n      }\n\n      if (commonRegistryUrl) {\n        for (const release of coerceArray(combinedRes.releases)) {\n          release.registryUrl ??= combinedRes.registryUrl;\n        }\n        commonRegistryUrl = false;\n      }\n\n      const releases = coerceArray(res.releases);\n      for (const release of releases) {\n        release.registryUrl ??= res.registryUrl;\n      }\n\n      combinedRes.releases.push(...releases);\n      combinedRes = { ...res, ...combinedRes };\n      delete combinedRes.registryUrl;\n    } catch (err) {\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n\n      lastErr = err;\n      logger.trace({ err }, 'datasource merge failure');\n    }\n  }\n\n  if (!combinedRes) {\n    if (lastErr) {\n      throw lastErr;\n    }\n\n    return null;\n  }\n\n  const seenVersions = new Set<string>();\n  combinedRes.releases = filterMap(combinedRes.releases, (release) => {\n    if (seenVersions.has(release.version)) {\n      return null;\n    }\n    seenVersions.add(release.version);\n    return release;\n  });\n\n  return combinedRes;\n}\n\nfunction massageRegistryUrls(registryUrls: string[]): string[] {\n  return registryUrls.filter(Boolean).map(trimTrailingSlash);\n}\n\nfunction resolveRegistryUrls(\n  datasource: DatasourceApi,\n  defaultRegistryUrls: string[] | undefined,\n  registryUrls: string[] | undefined | null,\n  additionalRegistryUrls: string[] | undefined,\n): string[] {\n  if (!datasource.customRegistrySupport) {\n    if (\n      is.nonEmptyArray(registryUrls) ||\n      is.nonEmptyArray(defaultRegistryUrls) ||\n      is.nonEmptyArray(additionalRegistryUrls)\n    ) {\n      logger.warn(\n        {\n          datasource: datasource.id,\n          registryUrls,\n          defaultRegistryUrls,\n          additionalRegistryUrls,\n        },\n        'Custom registries are not allowed for this datasource and will be ignored',\n      );\n    }\n    return is.function_(datasource.defaultRegistryUrls)\n      ? datasource.defaultRegistryUrls()\n      : (datasource.defaultRegistryUrls ?? []);\n  }\n  const customUrls = registryUrls?.filter(Boolean);\n  let resolvedUrls: string[] = [];\n  if (is.nonEmptyArray(customUrls)) {\n    resolvedUrls = [...customUrls];\n  } else if (is.nonEmptyArray(defaultRegistryUrls)) {\n    resolvedUrls = [...defaultRegistryUrls];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  } else if (is.function_(datasource.defaultRegistryUrls)) {\n    resolvedUrls = [...datasource.defaultRegistryUrls()];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  } else if (is.nonEmptyArray(datasource.defaultRegistryUrls)) {\n    resolvedUrls = [...datasource.defaultRegistryUrls];\n    resolvedUrls = resolvedUrls.concat(additionalRegistryUrls ?? []);\n  }\n  return massageRegistryUrls(resolvedUrls);\n}\n\nfunction applyReplacements(\n  config: GetReleasesInternalConfig,\n): Pick<ReleaseResult, 'replacementName' | 'replacementVersion'> | undefined {\n  if (config.replacementName && config.replacementVersion) {\n    return {\n      replacementName: config.replacementName,\n      replacementVersion: config.replacementVersion,\n    };\n  }\n  return undefined;\n}\n\nasync function fetchReleases(\n  config: GetReleasesInternalConfig,\n): Promise<ReleaseResult | null> {\n  const { datasource: datasourceName } = config;\n  let { registryUrls } = config;\n  // istanbul ignore if: need test\n  if (!datasourceName || getDatasourceFor(datasourceName) === undefined) {\n    logger.warn({ datasource: datasourceName }, 'Unknown datasource');\n    return null;\n  }\n  if (datasourceName === 'npm') {\n    if (is.string(config.npmrc)) {\n      setNpmrc(config.npmrc);\n    }\n    if (!is.nonEmptyArray(registryUrls)) {\n      registryUrls = [resolveRegistryUrl(config.packageName)];\n    }\n  }\n  const datasource = getDatasourceFor(datasourceName);\n  // istanbul ignore if: needs test\n  if (!datasource) {\n    logger.warn({ datasource: datasourceName }, 'Unknown datasource');\n    return null;\n  }\n  registryUrls = resolveRegistryUrls(\n    datasource,\n    config.defaultRegistryUrls,\n    registryUrls,\n    config.additionalRegistryUrls,\n  );\n  let dep: ReleaseResult | null = null;\n  const registryStrategy =\n    config.registryStrategy ?? datasource.registryStrategy ?? 'hunt';\n  try {\n    if (is.nonEmptyArray(registryUrls)) {\n      if (registryStrategy === 'first') {\n        dep = await firstRegistry(config, datasource, registryUrls);\n      } else if (registryStrategy === 'hunt') {\n        dep = await huntRegistries(config, datasource, registryUrls);\n      } else if (registryStrategy === 'merge') {\n        dep = await mergeRegistries(config, datasource, registryUrls);\n      }\n    } else {\n      dep = await datasource.getReleases(config);\n    }\n  } catch (err) {\n    if (err.message === HOST_DISABLED || err.err?.message === HOST_DISABLED) {\n      return null;\n    }\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logError(datasource.id, config.packageName, err);\n  }\n  if (!dep || dequal(dep, { releases: [] })) {\n    return null;\n  }\n  addMetaData(dep, datasourceName, config.packageName);\n  dep = { ...dep, ...applyReplacements(config) };\n  return dep;\n}\n\nfunction fetchCachedReleases(\n  config: GetReleasesInternalConfig,\n): Promise<ReleaseResult | null> {\n  const { datasource, packageName, registryUrls } = config;\n  const cacheKey = `${cacheNamespace}${datasource}${packageName}${config.registryStrategy}${String(\n    registryUrls,\n  )}`;\n  // By returning a Promise and reusing it, we should only fetch each package at most once\n  const cachedResult = memCache.get<Promise<ReleaseResult | null>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = fetchReleases(config);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport function getRawPkgReleases(\n  config: GetPkgReleasesConfig,\n): AsyncResult<\n  ReleaseResult,\n  Error | 'no-datasource' | 'no-package-name' | 'no-result'\n> {\n  if (!config.datasource) {\n    logger.warn('No datasource found');\n    return AsyncResult.err('no-datasource');\n  }\n\n  const packageName = config.packageName;\n  if (!packageName) {\n    logger.error({ config }, 'Datasource getReleases without packageName');\n    return AsyncResult.err('no-package-name');\n  }\n\n  return Result.wrapNullable(fetchCachedReleases(config), 'no-result' as const)\n    .catch((e) => {\n      if (e instanceof ExternalHostError) {\n        e.hostType = config.datasource;\n        e.packageName = packageName;\n      }\n      return Result.err(e);\n    })\n    .transform(clone);\n}\n\nexport function applyDatasourceFilters(\n  releaseResult: ReleaseResult,\n  config: GetPkgReleasesConfig,\n): ReleaseResult {\n  let res = releaseResult;\n  res = applyExtractVersion(res, config.extractVersion);\n  res = applyVersionCompatibility(\n    res,\n    config.versionCompatibility,\n    config.currentCompatibility,\n  );\n  res = filterValidVersions(res, config);\n  res = sortAndRemoveDuplicates(res, config);\n  res = applyConstraintsFiltering(res, config);\n  return res;\n}\n\nexport async function getPkgReleases(\n  config: GetPkgReleasesConfig,\n): Promise<ReleaseResult | null> {\n  const { val = null, err } = await getRawPkgReleases(config)\n    .transform((res) => applyDatasourceFilters(res, config))\n    .unwrap();\n\n  if (err instanceof Error) {\n    throw err;\n  }\n\n  return val;\n}\n\nexport function supportsDigests(datasource: string | undefined): boolean {\n  const ds = !!datasource && getDatasourceFor(datasource);\n  return !!ds && 'getDigest' in ds;\n}\n\nfunction getDigestConfig(\n  datasource: DatasourceApi,\n  config: GetDigestInputConfig,\n): DigestConfig {\n  const { lookupName, currentValue, currentDigest } = config;\n  const packageName = config.replacementName ?? config.packageName;\n  // Prefer registryUrl from getReleases() lookup if it has been passed\n  const registryUrl =\n    config.registryUrl ??\n    resolveRegistryUrls(\n      datasource,\n      config.defaultRegistryUrls,\n      config.registryUrls,\n      config.additionalRegistryUrls,\n    )[0];\n  return { lookupName, packageName, registryUrl, currentValue, currentDigest };\n}\n\nexport function getDigest(\n  config: GetDigestInputConfig,\n  value?: string,\n): Promise<string | null> {\n  const datasource = getDatasourceFor(config.datasource);\n  // istanbul ignore if: need test\n  if (!datasource || !('getDigest' in datasource)) {\n    return Promise.resolve(null);\n  }\n  const digestConfig = getDigestConfig(datasource, config);\n  return datasource.getDigest!(digestConfig, value);\n}\n\nexport function getDefaultConfig(\n  datasource: string,\n): Promise<Record<string, unknown>> {\n  const loadedDatasource = getDatasourceFor(datasource);\n  return Promise.resolve<Record<string, unknown>>(\n    loadedDatasource?.defaultConfig ?? Object.create({}),\n  );\n}\n"]}