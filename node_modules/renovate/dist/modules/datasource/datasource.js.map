{"version":3,"file":"datasource.js","sourceRoot":"","sources":["../../../lib/modules/datasource/datasource.ts"],"names":[],"mappings":";;;AAAA,gFAA2E;AAC3E,0CAAkD;AAalD,MAAsB,UAAU;IACQ;IAAtC,YAAsC,EAAU;QAAV,OAAE,GAAF,EAAE,CAAQ;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,WAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED,OAAO,CAAsB;IAE7B,qBAAqB,GAAG,IAAI,CAAC;IAE7B,aAAa,CAAsC;IAEnD,mBAAmB,CAA+B;IAElD,iBAAiB,CAAsB;IAEvC,gBAAgB,GAAiC,OAAO,CAAC;IAEzD,uBAAuB,GAAG,KAAK,CAAC;IAChC,oBAAoB,CAAsB;IAE1C,gBAAgB,GAAqB,MAAM,CAAC;IAC5C,aAAa,CAAsB;IAEzB,IAAI,CAAO;IAQrB,gBAAgB,CAAC,IAAe;QAC9B,sBAAsB;IACxB,CAAC;IAES,mBAAmB,CAAC,GAAU;QACtC,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;YACrC,MAAM,GAAG,CAAC;QACZ,CAAC;QAED,IAAI,GAAG,YAAY,gBAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAE3B,MAAM,UAAU,GAAG,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;YAC5C,IAAI,UAAU,EAAE,CAAC;gBACf,IAAI,UAAU,KAAK,GAAG,IAAI,CAAC,UAAU,IAAI,GAAG,IAAI,UAAU,GAAG,GAAG,CAAC,EAAE,CAAC;oBAClE,MAAM,IAAI,uCAAiB,CAAC,GAAG,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,GAAG,CAAC;IACZ,CAAC;IAED,2DAA2D;IAC3D,kBAAkB,CAChB,OAAiC,EACjC,OAAgB;QAEhB,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;CACF;AA7DD,gCA6DC","sourcesContent":["import { ExternalHostError } from '../../types/errors/external-host-error';\nimport { Http, HttpError } from '../../util/http';\nimport type {\n  DatasourceApi,\n  DigestConfig,\n  GetReleasesConfig,\n  PostprocessReleaseConfig,\n  PostprocessReleaseResult,\n  RegistryStrategy,\n  Release,\n  ReleaseResult,\n  SourceUrlSupport,\n} from './types';\n\nexport abstract class Datasource implements DatasourceApi {\n  protected constructor(public readonly id: string) {\n    this.http = new Http(id);\n  }\n\n  caching: boolean | undefined;\n\n  customRegistrySupport = true;\n\n  defaultConfig: Record<string, unknown> | undefined;\n\n  defaultRegistryUrls?: string[] | (() => string[]);\n\n  defaultVersioning?: string | undefined;\n\n  registryStrategy: RegistryStrategy | undefined = 'first';\n\n  releaseTimestampSupport = false;\n  releaseTimestampNote?: string | undefined;\n\n  sourceUrlSupport: SourceUrlSupport = 'none';\n  sourceUrlNote?: string | undefined;\n\n  protected http: Http;\n\n  abstract getReleases(\n    getReleasesConfig: GetReleasesConfig,\n  ): Promise<ReleaseResult | null>;\n\n  getDigest?(config: DigestConfig, newValue?: string): Promise<string | null>;\n\n  handleHttpErrors(_err: HttpError): void {\n    // intentionally empty\n  }\n\n  protected handleGenericErrors(err: Error): never {\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n\n    if (err instanceof HttpError) {\n      this.handleHttpErrors(err);\n\n      const statusCode = err.response?.statusCode;\n      if (statusCode) {\n        if (statusCode === 429 || (statusCode >= 500 && statusCode < 600)) {\n          throw new ExternalHostError(err);\n        }\n      }\n    }\n\n    throw err;\n  }\n\n  // istanbul ignore next: no-op implementation, never called\n  postprocessRelease(\n    _config: PostprocessReleaseConfig,\n    release: Release,\n  ): Promise<PostprocessReleaseResult> {\n    return Promise.resolve(release);\n  }\n}\n"]}