{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/github-release-attachments/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { queryReleases } from '../../../util/github/graphql';\nimport type {\n  GithubDigestFile,\n  GithubRestAsset,\n  GithubRestRelease,\n} from '../../../util/github/types';\nimport { getApiBaseUrl, getSourceUrl } from '../../../util/github/url';\nimport { hashStream } from '../../../util/hash';\nimport { GithubHttp } from '../../../util/http/github';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { Datasource } from '../datasource';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\n\nexport const cacheNamespace = 'datasource-github-releases';\n\nfunction inferHashAlg(digest: string): string {\n  switch (digest.length) {\n    case 64:\n      return 'sha256';\n    default:\n    case 96:\n      return 'sha512';\n  }\n}\n\nexport class GithubReleaseAttachmentsDatasource extends Datasource {\n  static readonly id = 'github-release-attachments';\n\n  override readonly defaultRegistryUrls = ['https://github.com'];\n\n  override http: GithubHttp;\n\n  override readonly releaseTimestampSupport = true;\n  // Note: not sure\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `releaseTimestamp` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GithubReleaseAttachmentsDatasource.id);\n    this.http = new GithubHttp(GithubReleaseAttachmentsDatasource.id);\n  }\n\n  @cache({\n    ttlMinutes: 1440,\n    namespace: `datasource-${GithubReleaseAttachmentsDatasource.id}`,\n    key: (release: GithubRestRelease, digest: string) =>\n      `findDigestFile:${release.html_url}:${digest}`,\n  })\n  async findDigestFile(\n    release: GithubRestRelease,\n    digest: string,\n  ): Promise<GithubDigestFile | null> {\n    const smallAssets = release.assets.filter(\n      (a: GithubRestAsset) => a.size < 5 * 1024,\n    );\n    for (const asset of smallAssets) {\n      const res = await this.http.getText(asset.browser_download_url);\n      for (const line of res.body.split(newlineRegex)) {\n        const [lineDigest, lineFilename] = line.split(regEx(/\\s+/), 2);\n        if (lineDigest === digest) {\n          return {\n            assetName: asset.name,\n            digestedFileName: lineFilename,\n            currentVersion: release.tag_name,\n            currentDigest: lineDigest,\n          };\n        }\n      }\n    }\n    return null;\n  }\n\n  @cache({\n    ttlMinutes: 1440,\n    namespace: `datasource-${GithubReleaseAttachmentsDatasource.id}`,\n    key: (asset: GithubRestAsset, algorithm: string) =>\n      `downloadAndDigest:${asset.browser_download_url}:${algorithm}`,\n  })\n  async downloadAndDigest(\n    asset: GithubRestAsset,\n    algorithm: string,\n  ): Promise<string> {\n    const res = this.http.stream(asset.browser_download_url);\n    const digest = await hashStream(res, algorithm);\n    return digest;\n  }\n\n  async findAssetWithDigest(\n    release: GithubRestRelease,\n    digest: string,\n  ): Promise<GithubDigestFile | null> {\n    const algorithm = inferHashAlg(digest);\n    const assetsBySize = release.assets.sort(\n      (a: GithubRestAsset, b: GithubRestAsset) => {\n        if (a.size < b.size) {\n          return -1;\n        }\n        if (a.size > b.size) {\n          return 1;\n        }\n        return 0;\n      },\n    );\n\n    for (const asset of assetsBySize) {\n      const assetDigest = await this.downloadAndDigest(asset, algorithm);\n      if (assetDigest === digest) {\n        return {\n          assetName: asset.name,\n          currentVersion: release.tag_name,\n          currentDigest: assetDigest,\n        };\n      }\n    }\n    return null;\n  }\n\n  /** Identify the asset associated with a known digest. */\n  async findDigestAsset(\n    release: GithubRestRelease,\n    digest: string,\n  ): Promise<GithubDigestFile | null> {\n    const digestFile = await this.findDigestFile(release, digest);\n    if (digestFile) {\n      return digestFile;\n    }\n\n    const asset = await this.findAssetWithDigest(release, digest);\n    return asset;\n  }\n\n  /** Given a digest asset, find the equivalent digest in a different release. */\n  async mapDigestAssetToRelease(\n    digestAsset: GithubDigestFile,\n    release: GithubRestRelease,\n  ): Promise<string | null> {\n    const current = digestAsset.currentVersion.replace(regEx(/^v/), '');\n    const next = release.tag_name.replace(regEx(/^v/), '');\n    const releaseChecksumAssetName = digestAsset.assetName.replace(\n      current,\n      next,\n    );\n    const releaseAsset = release.assets.find(\n      (a: GithubRestAsset) => a.name === releaseChecksumAssetName,\n    );\n    if (!releaseAsset) {\n      return null;\n    }\n    if (digestAsset.digestedFileName) {\n      const releaseFilename = digestAsset.digestedFileName.replace(\n        current,\n        next,\n      );\n      const res = await this.http.getText(releaseAsset.browser_download_url);\n      for (const line of res.body.split(newlineRegex)) {\n        const [lineDigest, lineFn] = line.split(regEx(/\\s+/), 2);\n        if (lineFn === releaseFilename) {\n          return lineDigest;\n        }\n      }\n    } else {\n      const algorithm = inferHashAlg(digestAsset.currentDigest);\n      const newDigest = await this.downloadAndDigest(releaseAsset, algorithm);\n      return newDigest;\n    }\n    return null;\n  }\n\n  /**\n   * Attempts to resolve the digest for the specified package.\n   *\n   * The `newValue` supplied here should be a valid tag for the GitHub release.\n   * Requires `currentValue` and `currentDigest`.\n   *\n   * There may be many assets attached to the release. This function will:\n   *  - Identify the asset pinned by `currentDigest` in the `currentValue` release\n   *     - Download small release assets, parse as checksum manifests (e.g. `SHASUMS.txt`).\n   *     - Download individual assets until `currentDigest` is encountered. This is limited to sha256 and sha512.\n   *  - Map the hashed asset to `newValue` and return the updated digest as a string\n   */\n  override async getDigest(\n    {\n      packageName: repo,\n      currentValue,\n      currentDigest,\n      registryUrl,\n    }: DigestConfig,\n    newValue: string,\n  ): Promise<string | null> {\n    logger.debug(\n      { repo, currentValue, currentDigest, registryUrl, newValue },\n      'getDigest',\n    );\n    if (!currentDigest) {\n      return null;\n    }\n    if (!currentValue) {\n      return currentDigest;\n    }\n\n    const apiBaseUrl = getApiBaseUrl(registryUrl);\n    const { body: currentRelease } =\n      await this.http.getJsonUnchecked<GithubRestRelease>(\n        `${apiBaseUrl}repos/${repo}/releases/tags/${currentValue}`,\n      );\n    const digestAsset = await this.findDigestAsset(\n      currentRelease,\n      currentDigest,\n    );\n    let newDigest: string | null;\n    if (!digestAsset || newValue === currentValue) {\n      newDigest = currentDigest;\n    } else {\n      const { body: newRelease } =\n        await this.http.getJsonUnchecked<GithubRestRelease>(\n          `${apiBaseUrl}repos/${repo}/releases/tags/${newValue}`,\n        );\n      newDigest = await this.mapDigestAssetToRelease(digestAsset, newRelease);\n    }\n    return newDigest;\n  }\n\n  /**\n   * This function can be used to fetch releases with a customizable versioning\n   * (e.g. semver) and with releases.\n   *\n   * This function will:\n   *  - Fetch all releases\n   *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n   *  - Return a dependency object containing sourceUrl string and releases array\n   */\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult> {\n    const releasesResult = await queryReleases(config, this.http);\n    const releases = releasesResult.map((item) => {\n      const { version, releaseTimestamp, isStable } = item;\n      const result: Release = {\n        version,\n        gitRef: version,\n        releaseTimestamp,\n      };\n      if (is.boolean(isStable)) {\n        result.isStable = isStable;\n      }\n      return result;\n    });\n    const sourceUrl = getSourceUrl(config.packageName, config.registryUrl);\n    return { sourceUrl, releases };\n  }\n}\n"]}