{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/glasskube-packages/index.ts"],"names":[],"mappings":";;;;AAAA,qEAA8D;AAC9D,2CAAiD;AACjD,wFAAkE;AAClE,8CAA2C;AAE3C,qCAA8E;AAE9E,MAAa,2BAA4B,SAAQ,uBAAU;IACzD,MAAM,CAAU,EAAE,GAAG,oBAAoB,CAAC;IAC1C,MAAM,CAAU,kBAAkB,GAChC,4CAA4C,CAAC;IAC7B,qBAAqB,GAAG,IAAI,CAAC;IACtC,iBAAiB,GAAG,mBAAmB,CAAC,EAAE,CAAC;IAE3C,mBAAmB,GAAG;QAC7B,2BAA2B,CAAC,kBAAkB;KAC/C,CAAC;IAEF;QACE,KAAK,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAOc,AAAN,KAAK,CAAC,WAAW,CAAC,EACzB,WAAW,EACX,WAAW,GACO;QAClB,MAAM,MAAM,GAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;QAE/C,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aACxD,WAAW,CACV,IAAA,kBAAY,EAAC,WAAY,EAAE,WAAW,EAAE,eAAe,CAAC,EACxD,iCAAwB,CACzB;aACA,MAAM,EAAE,CAAC;QAEZ,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/C,OAAO,EAAE,EAAE,CAAC,OAAO;SACpB,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,aAAa,EAAE,CAAC;QAEjD,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;aACpE,WAAW,CACV,IAAA,kBAAY,EACV,WAAY,EACZ,WAAW,EACX,QAAQ,CAAC,aAAa,EACtB,cAAc,CACf,EACD,iCAAwB,CACzB;aACA,MAAM,EAAE,CAAC;QAEZ,IAAI,iBAAiB,EAAE,CAAC;YACtB,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QAC9C,CAAC;QAED,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE,UAAU,IAAI,EAAE,EAAE,CAAC;YACnD,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAE,CAAC;gBACzC,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC;YAC7B,CAAC;iBAAM,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,SAAS,EAAE,CAAC;gBACjD,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;AAnEH,kEAoEC;AAhDgB;IALd,IAAA,iBAAK,EAAC;QACL,SAAS,EAAE,cAAc,2BAA2B,CAAC,EAAE,EAAE;QACzD,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAqB,EAAE,EAAE,CACvD,GAAG,WAAW,IAAI,WAAW,EAAE;KAClC,CAAC;8DAgDD","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport * as glasskubeVersioning from '../../versioning/glasskube';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { GlasskubePackageManifest, GlasskubePackageVersions } from './schema';\n\nexport class GlasskubePackagesDatasource extends Datasource {\n  static readonly id = 'glasskube-packages';\n  static readonly defaultRegistryUrl =\n    'https://packages.dl.glasskube.dev/packages';\n  override readonly customRegistrySupport = true;\n  override defaultVersioning = glasskubeVersioning.id;\n\n  override defaultRegistryUrls = [\n    GlasskubePackagesDatasource.defaultRegistryUrl,\n  ];\n\n  constructor() {\n    super(GlasskubePackagesDatasource.id);\n  }\n\n  @cache({\n    namespace: `datasource-${GlasskubePackagesDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `${registryUrl}:${packageName}`,\n  })\n  override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const result: ReleaseResult = { releases: [] };\n\n    const { val: versions, err: versionsErr } = await this.http\n      .getYamlSafe(\n        joinUrlParts(registryUrl!, packageName, 'versions.yaml'),\n        GlasskubePackageVersions,\n      )\n      .unwrap();\n\n    if (versionsErr) {\n      this.handleGenericErrors(versionsErr);\n    }\n\n    result.releases = versions.versions.map((it) => ({\n      version: it.version,\n    }));\n    result.tags = { latest: versions.latestVersion };\n\n    const { val: latestManifest, err: latestManifestErr } = await this.http\n      .getYamlSafe(\n        joinUrlParts(\n          registryUrl!,\n          packageName,\n          versions.latestVersion,\n          'package.yaml',\n        ),\n        GlasskubePackageManifest,\n      )\n      .unwrap();\n\n    if (latestManifestErr) {\n      this.handleGenericErrors(latestManifestErr);\n    }\n\n    for (const ref of latestManifest?.references ?? []) {\n      if (ref.label.toLowerCase() === 'github') {\n        result.sourceUrl = ref.url;\n      } else if (ref.label.toLowerCase() === 'website') {\n        result.homepage = ref.url;\n      }\n    }\n\n    return result;\n  }\n}\n"]}