{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/python-version/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { id as versioning } from '../../versioning/python';\nimport { Datasource } from '../datasource';\nimport { EndoflifeDateDatasource } from '../endoflife-date';\nimport { registryUrl as eolRegistryUrl } from '../endoflife-date/common';\nimport { GithubReleasesDatasource } from '../github-releases';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { datasource, defaultRegistryUrl, githubBaseUrl } from './common';\nimport { PythonRelease } from './schema';\n\nexport class PythonVersionDatasource extends Datasource {\n  static readonly id = datasource;\n  pythonPrebuildDatasource: GithubReleasesDatasource;\n  pythonEolDatasource: EndoflifeDateDatasource;\n\n  constructor() {\n    super(datasource);\n    this.pythonPrebuildDatasource = new GithubReleasesDatasource();\n    this.pythonEolDatasource = new EndoflifeDateDatasource();\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  override readonly defaultVersioning = versioning;\n\n  override readonly caching = true;\n\n  async getPrebuildReleases(): Promise<ReleaseResult | null> {\n    return await this.pythonPrebuildDatasource.getReleases({\n      registryUrl: githubBaseUrl,\n      packageName: 'containerbase/python-prebuild',\n    });\n  }\n\n  async getEolReleases(): Promise<ReleaseResult | null> {\n    return await this.pythonEolDatasource.getReleases({\n      registryUrl: eolRegistryUrl,\n      packageName: 'python',\n    });\n  }\n\n  @cache({\n    namespace: `datasource-${datasource}`,\n    key: ({ registryUrl }: GetReleasesConfig) => `${registryUrl}`,\n  })\n  async getReleases({\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n    const pythonPrebuildReleases = await this.getPrebuildReleases();\n    const pythonPrebuildVersions = new Set<string>(\n      pythonPrebuildReleases?.releases.map((release) => release.version),\n    );\n    const pythonEolReleases = await this.getEolReleases();\n    const pythonEolVersions = new Map(\n      pythonEolReleases?.releases\n        .filter((release) => release.isDeprecated !== undefined)\n        .map((release) => [\n          release.version.split('.').slice(0, 2).join('.'),\n          release.isDeprecated,\n        ]),\n    );\n    const result: ReleaseResult = {\n      homepage: 'https://python.org',\n      sourceUrl: 'https://github.com/python/cpython',\n      registryUrl,\n      releases: [],\n    };\n    try {\n      const response = await this.http.getJson(registryUrl, PythonRelease);\n      result.releases.push(\n        ...response.body\n          .filter((release) => release.isStable)\n          .filter((release) => pythonPrebuildVersions.has(release.version)),\n      );\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n    for (const release of result.releases) {\n      release.isDeprecated = pythonEolVersions.get(\n        release.version.split('.').slice(0, 2).join('.'),\n      );\n    }\n\n    return result.releases.length ? result : null;\n  }\n}\n"]}