{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/gitlab-tags/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { GitlabHttp } from '../../../util/http/gitlab';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { joinUrlParts } from '../../../util/url';\nimport { Datasource } from '../datasource';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport type { GitlabCommit, GitlabTag } from './types';\nimport { defaultRegistryUrl, getDepHost, getSourceUrl } from './util';\n\nexport class GitlabTagsDatasource extends Datasource {\n  static readonly id = 'gitlab-tags';\n\n  protected override http: GitlabHttp;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'To get release timestamp we use the `created_at` field from the response.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GitlabTagsDatasource.id);\n    this.http = new GitlabHttp(GitlabTagsDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = [defaultRegistryUrl];\n\n  @cache({\n    namespace: `datasource-${GitlabTagsDatasource.id}`,\n    key: ({ registryUrl, packageName }: GetReleasesConfig) =>\n      `getReleases:${getDepHost(registryUrl)}:${packageName}`,\n  })\n  async getReleases({\n    registryUrl,\n    packageName: repo,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    const depHost = getDepHost(registryUrl);\n\n    const urlEncodedRepo = encodeURIComponent(repo);\n\n    // tag\n    const url = joinUrlParts(\n      depHost,\n      `api/v4/projects`,\n      urlEncodedRepo,\n      `repository/tags?per_page=100`,\n    );\n\n    const gitlabTags = (\n      await this.http.getJsonUnchecked<GitlabTag[]>(url, {\n        paginate: true,\n      })\n    ).body;\n\n    const dependency: ReleaseResult = {\n      sourceUrl: getSourceUrl(repo, registryUrl),\n      releases: [],\n    };\n    dependency.releases = gitlabTags.map(({ name, commit }) => ({\n      version: name,\n      gitRef: name,\n      releaseTimestamp: asTimestamp(commit?.created_at),\n    }));\n\n    return dependency;\n  }\n\n  /**\n   * gitlab.getDigest\n   *\n   * Returs the latest commit hash of the repository.\n   */\n  @cache({\n    namespace: `datasource-${GitlabTagsDatasource.id}`,\n    key: ({ registryUrl, packageName }: DigestConfig) =>\n      `getDigest:${getDepHost(registryUrl)}:${packageName}`,\n  })\n  override async getDigest(\n    { packageName: repo, registryUrl }: DigestConfig,\n    newValue?: string,\n  ): Promise<string | null> {\n    const depHost = getDepHost(registryUrl);\n\n    const urlEncodedRepo = encodeURIComponent(repo);\n    let digest: string | null = null;\n\n    try {\n      if (newValue) {\n        const url = joinUrlParts(\n          depHost,\n          `api/v4/projects`,\n          urlEncodedRepo,\n          `repository/commits/`,\n          newValue,\n        );\n        const gitlabCommits =\n          await this.http.getJsonUnchecked<GitlabCommit>(url);\n        digest = gitlabCommits.body.id;\n      } else {\n        const url = joinUrlParts(\n          depHost,\n          `api/v4/projects`,\n          urlEncodedRepo,\n          `repository/commits?per_page=1`,\n        );\n        const gitlabCommits =\n          await this.http.getJsonUnchecked<GitlabCommit[]>(url);\n        digest = gitlabCommits.body[0].id;\n      }\n    } catch (err) {\n      logger.debug(\n        { gitlabRepo: repo, err, registryUrl },\n        'Error getting latest commit from Gitlab repo',\n      );\n    }\n\n    if (!digest) {\n      return null;\n    }\n\n    return digest;\n  }\n}\n"]}