{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/terraform-module/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { cache } from '../../../util/cache/package/decorator';\nimport { regEx } from '../../../util/regex';\nimport { coerceString } from '../../../util/string';\nimport { asTimestamp } from '../../../util/timestamp';\nimport { isHttpUrl } from '../../../util/url';\nimport * as hashicorpVersioning from '../../versioning/hashicorp';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { TerraformDatasource } from './base';\nimport type {\n  RegistryRepository,\n  ServiceDiscoveryResult,\n  TerraformModuleVersions,\n  TerraformRelease,\n} from './types';\nimport { createSDBackendURL } from './utils';\n\nexport class TerraformModuleDatasource extends TerraformDatasource {\n  static override readonly id = 'terraform-module';\n\n  constructor() {\n    super(TerraformModuleDatasource.id);\n  }\n\n  override readonly defaultRegistryUrls = ['https://registry.terraform.io'];\n\n  override readonly defaultVersioning = hashicorpVersioning.id;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is only supported for the latest version, and is determined from the `published_at` field in the results.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined from the the `source` field in the results.';\n\n  readonly extendedApiRegistryUrls = [\n    'https://registry.terraform.io',\n    'https://app.terraform.io',\n  ];\n\n  /**\n   * This function will fetch a package from the specified Terraform registry and return all semver versions.\n   *  - `sourceUrl` is supported if \"source\" field is set\n   *  - `homepage` is set to the Terraform registry's page if it's on the official main registry\n   */\n  @cache({\n    namespace: `datasource-${TerraformModuleDatasource.id}`,\n    key: (getReleasesConfig: GetReleasesConfig) =>\n      TerraformModuleDatasource.getCacheKey(getReleasesConfig),\n  })\n  async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    const { registry: registryUrlNormalized, repository } =\n      TerraformModuleDatasource.getRegistryRepository(packageName, registryUrl);\n    logger.trace(\n      { registryUrlNormalized, terraformRepository: repository },\n      'terraform-module.getReleases()',\n    );\n\n    const serviceDiscovery = await this.getTerraformServiceDiscoveryResult(\n      registryUrlNormalized,\n    );\n    if (this.extendedApiRegistryUrls.includes(registryUrlNormalized)) {\n      return await this.queryRegistryExtendedApi(\n        serviceDiscovery,\n        registryUrlNormalized,\n        repository,\n      );\n    }\n\n    return await this.queryRegistryVersions(\n      serviceDiscovery,\n      registryUrlNormalized,\n      repository,\n    );\n  }\n\n  /**\n   * this uses the api that terraform registry has in addition to the base api\n   * this endpoint provides more information, such as release date\n   * https://www.terraform.io/registry/api-docs#latest-version-for-a-specific-module-provider\n   */\n  private async queryRegistryExtendedApi(\n    serviceDiscovery: ServiceDiscoveryResult,\n    registryUrl: string,\n    repository: string,\n  ): Promise<ReleaseResult | null> {\n    let res: TerraformRelease;\n    let pkgUrl: string;\n\n    try {\n      // TODO: types (#22198)\n\n      pkgUrl = createSDBackendURL(\n        registryUrl,\n        'modules.v1',\n        serviceDiscovery,\n        repository,\n      );\n      res = (await this.http.getJsonUnchecked<TerraformRelease>(pkgUrl)).body;\n      const returnedName = res.namespace + '/' + res.name + '/' + res.provider;\n      if (returnedName !== repository) {\n        logger.warn({ pkgUrl }, 'Terraform registry result mismatch');\n        return null;\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    // Simplify response before caching and returning\n    const dep: ReleaseResult = {\n      releases: res.versions.map((version) => ({\n        version,\n      })),\n    };\n    if (res.source) {\n      dep.sourceUrl = res.source;\n    }\n    dep.homepage = `${registryUrl}/modules/${repository}`;\n    // set published date for latest release\n    const latestVersion = dep.releases.find(\n      (release) => res.version === release.version,\n    );\n    if (latestVersion) {\n      latestVersion.releaseTimestamp = asTimestamp(res.published_at);\n    }\n    return dep;\n  }\n\n  /**\n   * this version uses the Module Registry Protocol that all registries are required to implement\n   * https://www.terraform.io/internals/module-registry-protocol\n   */\n  private async queryRegistryVersions(\n    serviceDiscovery: ServiceDiscoveryResult,\n    registryUrl: string,\n    repository: string,\n  ): Promise<ReleaseResult | null> {\n    let res: TerraformModuleVersions;\n    let pkgUrl: string;\n    try {\n      // TODO: types (#22198)\n      pkgUrl = createSDBackendURL(\n        registryUrl,\n        'modules.v1',\n        serviceDiscovery,\n        `${repository}/versions`,\n      );\n      res = (await this.http.getJsonUnchecked<TerraformModuleVersions>(pkgUrl))\n        .body;\n      if (res.modules.length < 1) {\n        logger.warn({ pkgUrl }, 'Terraform registry result mismatch');\n        return null;\n      }\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    // Simplify response before caching and returning\n    const dep: ReleaseResult = {\n      releases: res.modules[0].versions.map(({ version }) => ({\n        version,\n      })),\n    };\n\n    // Add the source URL if given\n    if (isHttpUrl(res.modules[0].source)) {\n      dep.sourceUrl = res.modules[0].source;\n    }\n\n    return dep;\n  }\n\n  private static getRegistryRepository(\n    packageName: string,\n    registryUrl: string | undefined,\n  ): RegistryRepository {\n    let registry: string;\n    const split = packageName.split('/');\n    if (split.length > 3 && split[0].includes('.')) {\n      [registry] = split;\n      split.shift();\n    } else {\n      registry = coerceString(registryUrl);\n    }\n    if (!regEx(/^https?:\\/\\//).test(registry)) {\n      registry = `https://${registry}`;\n    }\n    const repository = split.join('/');\n    return {\n      registry,\n      repository,\n    };\n  }\n\n  private static getCacheKey({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): string {\n    const { registry, repository } =\n      TerraformModuleDatasource.getRegistryRepository(packageName, registryUrl);\n    return `${registry}/${repository}`;\n  }\n}\n"]}