{"version":3,"file":"html.js","sourceRoot":"","sources":["../../../../../lib/modules/datasource/custom/formats/html.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAoD;AACpD,gDAA8C;AAK9C,SAAS,YAAY,CAAC,OAAe;IACnC,MAAM,IAAI,GAAG,IAAA,YAAK,EAAC,OAAO,CAAC,CAAC;IAE5B,uDAAuD;IACvD,4DAA4D;IAC5D,MAAM,IAAI,GAAG,IAAI;SACd,oBAAoB,CAAC,KAAK,CAAC;SAC3B,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,YAAK,EAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;IAExC,MAAM,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1E,MAAM,KAAK,GAAG,KAAK;SAChB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SACxC,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;IAErB,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QAClC,OAAO;YACL,OAAO,EAAE,IAAI;SACd,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,QAAQ,EAAE,CAAC;AACtB,CAAC;AAED,MAAa,WAAW;IACtB,KAAK,CAAC,KAAK,CAAC,IAAU,EAAE,WAAmB;QACzC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC/C,OAAO,EAAE;gBACP,MAAM,EAAE,WAAW;aACpB;SACF,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,WAAmB;QAChC,MAAM,WAAW,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE7D,OAAO,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACxD,CAAC;CACF;AAhBD,kCAgBC","sourcesContent":["import is from '@sindresorhus/is';\nimport { readLocalFile } from '../../../../util/fs';\nimport { parse } from '../../../../util/html';\nimport type { Http } from '../../../../util/http';\nimport type { ReleaseResult } from '../../types';\nimport type { CustomDatasourceFetcher } from './types';\n\nfunction extractLinks(content: string): ReleaseResult {\n  const body = parse(content);\n\n  // node-html-parser doesn't parse anything inside <pre>\n  // but, for example, nginx wraps directory listings in <pre>\n  const pres = body\n    .getElementsByTagName('pre')\n    .map((pre) => parse(pre.textContent));\n\n  const links = [body, ...pres].flatMap((e) => e.getElementsByTagName('a'));\n  const hrefs = links\n    .map((node) => node.getAttribute('href'))\n    .filter(is.truthy);\n\n  const releases = hrefs.map((href) => {\n    return {\n      version: href,\n    };\n  });\n\n  return { releases };\n}\n\nexport class HtmlFetcher implements CustomDatasourceFetcher {\n  async fetch(http: Http, registryURL: string): Promise<unknown> {\n    const response = await http.getText(registryURL, {\n      headers: {\n        Accept: 'text/html',\n      },\n    });\n\n    return extractLinks(response.body);\n  }\n\n  async readFile(registryURL: string): Promise<unknown> {\n    const fileContent = await readLocalFile(registryURL, 'utf8');\n\n    return fileContent ? extractLinks(fileContent) : null;\n  }\n}\n"]}