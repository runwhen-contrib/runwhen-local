{"version":3,"file":"yaml.js","sourceRoot":"","sources":["../../../../../lib/modules/datasource/custom/formats/yaml.ts"],"names":[],"mappings":";;;AAAA,4CAAoD;AAEpD,gDAAwD;AAGxD,MAAa,WAAW;IACtB,KAAK,CAAC,KAAK,CAAC,IAAU,EAAE,WAAmB;QACzC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAEjD,OAAO,IAAA,sBAAe,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,WAAmB;QAChC,MAAM,WAAW,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE7D,OAAO,IAAA,sBAAe,EAAC,WAAY,CAAC,CAAC;IACvC,CAAC;CACF;AAZD,kCAYC","sourcesContent":["import { readLocalFile } from '../../../../util/fs';\nimport type { Http } from '../../../../util/http';\nimport { parseSingleYaml } from '../../../../util/yaml';\nimport type { CustomDatasourceFetcher } from './types';\n\nexport class YamlFetcher implements CustomDatasourceFetcher {\n  async fetch(http: Http, registryURL: string): Promise<unknown> {\n    const response = await http.getText(registryURL);\n\n    return parseSingleYaml(response.body);\n  }\n\n  async readFile(registryURL: string): Promise<unknown> {\n    const fileContent = await readLocalFile(registryURL, 'utf8');\n\n    return parseSingleYaml(fileContent!);\n  }\n}\n"]}