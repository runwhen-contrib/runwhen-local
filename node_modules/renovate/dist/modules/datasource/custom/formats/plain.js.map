{"version":3,"file":"plain.js","sourceRoot":"","sources":["../../../../../lib/modules/datasource/custom/formats/plain.ts"],"names":[],"mappings":";;;AAAA,4CAAoD;AAEpD,kDAAsD;AAItD,SAAS,sBAAsB,CAAC,OAAe;IAC7C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAErE,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACnC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,OAAO;QACL,QAAQ,EAAE,QAAQ;KACnB,CAAC;AACJ,CAAC;AAED,MAAa,YAAY;IACvB,KAAK,CAAC,KAAK,CAAC,IAAU,EAAE,WAAmB;QACzC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAElD,OAAO,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,WAAmB;QAChC,MAAM,WAAW,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE7D,OAAO,WAAW,CAAC,CAAC,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAClE,CAAC;CACF;AAZD,oCAYC","sourcesContent":["import { readLocalFile } from '../../../../util/fs';\nimport type { Http } from '../../../../util/http';\nimport { newlineRegex } from '../../../../util/regex';\nimport type { ReleaseResult } from '../../types';\nimport type { CustomDatasourceFetcher } from './types';\n\nfunction convertLinesToVersions(content: string): ReleaseResult {\n  const lines = content.split(newlineRegex).map((line) => line.trim());\n\n  const versions = lines.map((value) => {\n    return { version: value };\n  });\n\n  return {\n    releases: versions,\n  };\n}\n\nexport class PlainFetcher implements CustomDatasourceFetcher {\n  async fetch(http: Http, registryURL: string): Promise<unknown> {\n    const response = await http.getPlain(registryURL);\n\n    return convertLinesToVersions(response.body);\n  }\n\n  async readFile(registryURL: string): Promise<unknown> {\n    const fileContent = await readLocalFile(registryURL, 'utf8');\n\n    return fileContent ? convertLinesToVersions(fileContent) : null;\n  }\n}\n"]}