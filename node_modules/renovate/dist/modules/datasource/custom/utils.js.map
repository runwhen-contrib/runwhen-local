{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/custom/utils.ts"],"names":[],"mappings":";;AAMA,sEA0CC;AAED,0CAgBC;;AAlED,kEAAkC;AAElC,4CAAyC;AACzC,yEAAmD;AAGnD,SAAgB,6BAA6B,CAC3C,oBAA4B,EAC5B,EACE,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EAAE,kBAAkB,GACb;IAEpB,MAAM,gBAAgB,GAAG,iBAAiB,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACnE,IAAI,YAAE,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE,CAAC;QACzC,eAAM,CAAC,KAAK,CACV,8CAA8C,WAAW,qBAAqB,CAC/E,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,aAAa,GAAG,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;IAEpD,MAAM,mBAAmB,GACvB,kBAAkB,IAAI,gBAAgB,CAAC,0BAA0B,CAAC;IACpE,IAAI,YAAE,CAAC,eAAe,CAAC,mBAAmB,CAAC,EAAE,CAAC;QAC5C,eAAM,CAAC,KAAK,CACV,qEAAqE,CACtE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAEzE,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,kBAAkB,IAAI,EAAE,CAAC;IACrE,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,EAAE,CAAC;QACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QACrE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IAED,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,EAAE,kCAAkC,CAAC,CAAC;IAEhE,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,MAAM,IAAI,MAAM;QACzC,0BAA0B,EAAE,WAAW;QACvC,kBAAkB,EAAE,SAAS;KAC9B,CAAC;AACJ,CAAC;AAED,SAAgB,eAAe,CAC7B,iBAAoC;IAEpC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC,UAAU,EAAE,OAAO,CAChE,SAAS,EACT,EAAE,CACH,CAAC;IAEF,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC7C,eAAM,CAAC,KAAK,CACV,oDAAoD,iBAAiB,CAAC,WAAW,EAAE,CACpF,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,6BAA6B,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;AAChF,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { CustomDatasourceConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport * as template from '../../../util/template';\nimport type { GetReleasesConfig } from '../types';\n\nexport function massageCustomDatasourceConfig(\n  customDatasourceName: string,\n  {\n    customDatasources,\n    packageName,\n    currentValue,\n    registryUrl: defaultRegistryUrl,\n  }: GetReleasesConfig,\n): Required<CustomDatasourceConfig> | null {\n  const customDatasource = customDatasources?.[customDatasourceName];\n  if (is.nullOrUndefined(customDatasource)) {\n    logger.debug(\n      `No custom datasource config provided while ${packageName} has been requested`,\n    );\n    return null;\n  }\n  const templateInput = { packageName, currentValue };\n\n  const registryUrlTemplate =\n    defaultRegistryUrl ?? customDatasource.defaultRegistryUrlTemplate;\n  if (is.nullOrUndefined(registryUrlTemplate)) {\n    logger.debug(\n      'No registry url provided by extraction nor datasource configuration',\n    );\n    return null;\n  }\n  const registryUrl = template.compile(registryUrlTemplate, templateInput);\n\n  const transformTemplates = customDatasource.transformTemplates ?? [];\n  const transform: string[] = [];\n  for (const transformTemplate of transformTemplates) {\n    const templated = template.compile(transformTemplate, templateInput);\n    transform.push(templated);\n  }\n\n  logger.trace({ transform }, `Custom datasource compiled data.`);\n\n  return {\n    format: customDatasource.format ?? 'json',\n    defaultRegistryUrlTemplate: registryUrl,\n    transformTemplates: transform,\n  };\n}\n\nexport function getCustomConfig(\n  getReleasesConfig: GetReleasesConfig,\n): Required<CustomDatasourceConfig> | null {\n  const customDatasourceName = getReleasesConfig.datasource?.replace(\n    'custom.',\n    '',\n  );\n\n  if (!is.nonEmptyString(customDatasourceName)) {\n    logger.debug(\n      `No datasource has been supplied while looking up ${getReleasesConfig.packageName}`,\n    );\n    return null;\n  }\n\n  return massageCustomDatasourceConfig(customDatasourceName, getReleasesConfig);\n}\n"]}