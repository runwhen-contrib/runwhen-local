{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/github-releases/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,4CAAyC;AACzC,0DAA6D;AAC7D,oDAA4D;AAC5D,kDAAwD;AACxD,sDAAuD;AACvD,8CAA2C;AAQ9B,QAAA,cAAc,GAAG,4BAA4B,CAAC;AAE3D,MAAa,wBAAyB,SAAQ,uBAAU;IACtD,MAAM,CAAU,EAAE,GAAG,iBAAiB,CAAC;IAErB,mBAAmB,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAEtD,IAAI,CAAa;IAER,uBAAuB,GAAG,IAAI,CAAC;IACjD,iBAAiB;IACC,oBAAoB,GACpC,0FAA0F,CAAC;IAC3E,gBAAgB,GAAG,SAAS,CAAC;IAC7B,aAAa,GAC7B,4EAA4E,CAAC;IAE/E;QACE,KAAK,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;OASG;IACM,SAAS,CAChB,EACE,WAAW,EAAE,IAAI,EACjB,YAAY,EACZ,aAAa,EACb,WAAW,GACE,EACf,QAAgB;QAEhB,eAAM,CAAC,KAAK,CACV,EAAE,IAAI,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,EAC5D,WAAW,CACZ,CAAC;QAEF,OAAO,IAAA,sBAAe,EAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,WAAW,CAAC,MAAyB;QACzC,MAAM,cAAc,GAAG,MAAM,IAAA,uBAAa,EAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3C,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACrD,MAAM,MAAM,GAAY;gBACtB,OAAO;gBACP,MAAM,EAAE,OAAO;gBACf,gBAAgB;aACjB,CAAC;YACF,IAAI,YAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACzB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC7B,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,IAAA,kBAAY,EAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QACvE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;IACjC,CAAC;;AAxEH,4DAyEC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { queryReleases } from '../../../util/github/graphql';\nimport { findCommitOfTag } from '../../../util/github/tags';\nimport { getSourceUrl } from '../../../util/github/url';\nimport { GithubHttp } from '../../../util/http/github';\nimport { Datasource } from '../datasource';\nimport type {\n  DigestConfig,\n  GetReleasesConfig,\n  Release,\n  ReleaseResult,\n} from '../types';\n\nexport const cacheNamespace = 'datasource-github-releases';\n\nexport class GithubReleasesDatasource extends Datasource {\n  static readonly id = 'github-releases';\n\n  override readonly defaultRegistryUrls = ['https://github.com'];\n\n  override http: GithubHttp;\n\n  override readonly releaseTimestampSupport = true;\n  // Note: not sure\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `releaseTimestamp` field from the response.';\n  override readonly sourceUrlSupport = 'package';\n  override readonly sourceUrlNote =\n    'The source URL is determined by using the `packageName` and `registryUrl`.';\n\n  constructor() {\n    super(GithubReleasesDatasource.id);\n    this.http = new GithubHttp(GithubReleasesDatasource.id);\n  }\n\n  /**\n   * Attempts to resolve the digest for the specified package.\n   *\n   * The `newValue` supplied here should be a valid tag for the GitHub release. The digest\n   * of a GitHub release will be the underlying SHA of the release tag.\n   *\n   * Some managers like Bazel will deal with individual artifacts from releases and handle\n   * the artifact checksum computation separately. This data-source does not know about\n   * specific artifacts being used, as that could vary per manager\n   */\n  override getDigest(\n    {\n      packageName: repo,\n      currentValue,\n      currentDigest,\n      registryUrl,\n    }: DigestConfig,\n    newValue: string,\n  ): Promise<string | null> {\n    logger.debug(\n      { repo, currentValue, currentDigest, registryUrl, newValue },\n      'getDigest',\n    );\n\n    return findCommitOfTag(registryUrl, repo, newValue, this.http);\n  }\n\n  /**\n   * This function can be used to fetch releases with a customizable versioning\n   * (e.g. semver) and with releases.\n   *\n   * This function will:\n   *  - Fetch all releases\n   *  - Sanitize the versions if desired (e.g. strip out leading 'v')\n   *  - Return a dependency object containing sourceUrl string and releases array\n   */\n  async getReleases(config: GetReleasesConfig): Promise<ReleaseResult> {\n    const releasesResult = await queryReleases(config, this.http);\n    const releases = releasesResult.map((item) => {\n      const { version, releaseTimestamp, isStable } = item;\n      const result: Release = {\n        version,\n        gitRef: version,\n        releaseTimestamp,\n      };\n      if (is.boolean(isStable)) {\n        result.isStable = isStable;\n      }\n      return result;\n    });\n    const sourceUrl = getSourceUrl(config.packageName, config.registryUrl);\n    return { sourceUrl, releases };\n  }\n}\n"]}