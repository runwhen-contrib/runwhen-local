{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/cpan/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAwD;AACxD,uDAAyD;AAGzD;;GAEG;AACH,MAAM,qBAAqB,GAAG,OAAC;KAC5B,MAAM,CAAC;IACN,MAAM,EAAE,IAAA,yBAAU,EAChB,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;QAChB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;KACpB,CAAC,CACH;IACD,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE;IACxB,IAAI,EAAE,0BAAc;IACpB,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE;IACvB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;IACpB,MAAM,EAAE,OAAC,CAAC,KAAK,CAAC;QACd,OAAC,CAAC,OAAO,CAAC,SAAS,CAAC;QACpB,OAAC,CAAC,OAAO,CAAC,MAAM,CAAC;QACjB,OAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;KACpB,CAAC;CACH,CAAC;KACD,SAAS,CACR,CAAC,EACC,MAAM,EACN,YAAY,EACZ,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,MAAM,GACP,EAA2B,EAAE;IAC5B,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO;QAC1B,YAAY;QACZ,YAAY,EAAE,UAAU;QACxB,QAAQ,EAAE,QAAQ,KAAK,UAAU;QACjC,gBAAgB,EAAE,IAAI;QACtB,QAAQ,EAAE,MAAM,KAAK,QAAQ;KAC9B,CAAC;AACJ,CAAC,CACF;KACA,KAAK,CAAC,SAAS,CAAC,CAAC;AACpB;;GAEG;AACU,QAAA,6BAA6B,GAAG,OAAC;KAC3C,MAAM,CAAC;IACN,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,IAAI,EAAE,IAAA,yBAAU,EACd,OAAC,CAAC,MAAM,CAAC;YACP,OAAO,EAAE,qBAAqB;SAC/B,CAAC,CACH;KACF,CAAC;CACH,CAAC;KACD,SAAS,CAAC,CAAC,IAAI,EAAiB,EAAE;IACjC,8EAA8E;IAC9E,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI;SAClB,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;SACzB,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray } from '../../../util/schema-utils';\nimport { MaybeTimestamp } from '../../../util/timestamp';\nimport type { CpanRelease } from './types';\n\n/**\n * https://fastapi.metacpan.org/v1/file/_mapping\n */\nconst MetaCpanApiFileSchema = z\n  .object({\n    module: LooseArray(\n      z.object({\n        name: z.string(),\n        version: z.string(),\n      }),\n    ),\n    distribution: z.string(),\n    date: MaybeTimestamp,\n    deprecated: z.boolean(),\n    maturity: z.string(),\n    status: z.union([\n      z.literal('backpan'),\n      z.literal('cpan'),\n      z.literal('latest'),\n    ]),\n  })\n  .transform(\n    ({\n      module,\n      distribution,\n      date,\n      deprecated,\n      maturity,\n      status,\n    }): CpanRelease | undefined => {\n      return {\n        version: module[0].version,\n        distribution,\n        isDeprecated: deprecated,\n        isStable: maturity === 'released',\n        releaseTimestamp: date,\n        isLatest: status === 'latest',\n      };\n    },\n  )\n  .catch(undefined);\n/**\n * https://github.com/metacpan/metacpan-api/blob/master/docs/API-docs.md#available-fields\n */\nexport const MetaCpanApiFileSearchResponse = z\n  .object({\n    hits: z.object({\n      hits: LooseArray(\n        z.object({\n          _source: MetaCpanApiFileSchema,\n        }),\n      ),\n    }),\n  })\n  .transform((data): CpanRelease[] => {\n    // Extract all hits and filter out ones where _source transformed to undefined\n    return data.hits.hits\n      .map((hit) => hit._source)\n      .filter((source) => source !== undefined);\n  });\n"]}