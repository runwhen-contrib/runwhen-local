{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/datasource/cpan/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { cache } from '../../../util/cache/package/decorator';\nimport { joinUrlParts } from '../../../util/url';\nimport * as perlVersioning from '../../versioning/perl';\nimport { Datasource } from '../datasource';\nimport type { GetReleasesConfig, ReleaseResult } from '../types';\nimport { MetaCpanApiFileSearchResponse } from './schema';\nimport type { CpanRelease } from './types';\n\nexport class CpanDatasource extends Datasource {\n  static readonly id = 'cpan';\n\n  constructor() {\n    super(CpanDatasource.id);\n  }\n\n  override readonly customRegistrySupport = false;\n\n  override readonly defaultRegistryUrls = ['https://fastapi.metacpan.org/'];\n\n  override readonly defaultVersioning = perlVersioning.id;\n\n  override readonly releaseTimestampSupport = true;\n  override readonly releaseTimestampNote =\n    'The release timestamp is determined from the `date` field in the results.';\n\n  @cache({\n    namespace: `datasource-${CpanDatasource.id}`,\n    key: ({ packageName }: GetReleasesConfig) => `${packageName}`,\n  })\n  override async getReleases({\n    packageName,\n    registryUrl,\n  }: GetReleasesConfig): Promise<ReleaseResult | null> {\n    /* v8 ignore next 3 -- should never happen */\n    if (!registryUrl) {\n      return null;\n    }\n\n    let result: ReleaseResult | null = null;\n    const searchUrl = joinUrlParts(registryUrl, 'v1/file/_search');\n\n    let releases: CpanRelease[] | null = null;\n    try {\n      const body = {\n        query: {\n          filtered: {\n            query: { match_all: {} },\n            filter: {\n              and: [\n                { term: { 'module.name': packageName } },\n                { term: { 'module.authorized': true } },\n                { exists: { field: 'module.associated_pod' } },\n              ],\n            },\n          },\n        },\n        _source: [\n          'module.name',\n          'module.version',\n          'distribution',\n          'date',\n          'deprecated',\n          'maturity',\n          'status',\n        ],\n        sort: [{ date: 'desc' }],\n      };\n\n      releases = (\n        await this.http.postJson(\n          searchUrl,\n          { body },\n          MetaCpanApiFileSearchResponse,\n        )\n      ).body;\n    } catch (err) {\n      this.handleGenericErrors(err);\n    }\n\n    let latestDistribution: string | null = null;\n    let latestVersion: string | null = null;\n    if (releases) {\n      for (const release of releases) {\n        latestDistribution ??= release.distribution;\n        if (!latestVersion && release.isLatest) {\n          latestVersion = release.version;\n        }\n      }\n    }\n    if (releases.length > 0 && latestDistribution) {\n      result = {\n        releases,\n        changelogUrl: `https://metacpan.org/dist/${latestDistribution}/changes`,\n        homepage: `https://metacpan.org/pod/${packageName}`,\n      };\n\n      if (latestVersion) {\n        result.tags ??= {};\n        result.tags.latest = latestVersion;\n      }\n    }\n\n    return result;\n  }\n}\n"]}