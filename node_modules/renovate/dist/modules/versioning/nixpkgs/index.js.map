{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/nixpkgs/index.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,oCAA+C;AAGlC,QAAA,EAAE,GAAG,SAAS,CAAC;AACf,QAAA,WAAW,GAAG,SAAS,CAAC;AACxB,QAAA,IAAI,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAC5C,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAa,iBAAkB,SAAQ,2BAAmB;IAChD,MAAM,CAAU,YAAY,GAClC,0HAA0H,CAAC;IAE7H;QACE,KAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IAEkB,MAAM,CAAC,OAAe;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC;QAEnD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;QAChD,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;QAED,MAAM,aAAa,GAAG,YAAE,CAAC,8BAA8B,CAAC,MAAM,CAAC;YAC7D,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,EAAE;YACvB,CAAC,CAAC,MAAM,CAAC;QAEX,OAAO;YACL,OAAO;YACP,aAAa;SACd,CAAC;IACJ,CAAC;IAEQ,QAAQ,CAAC,OAAe;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,OAAO,YAAE,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAEkB,QAAQ,CAAC,OAAe,EAAE,KAAa;QACxD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEjC,uCAAuC;QACvC,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,YAAE,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;YAClE,OAAO,CAAC,CAAC;QACX,CAAC;QACD,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC;YACjC,OAAO,CAAC,CAAC;QACX,CAAC;QACD,IAAI,YAAE,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;YAClC,OAAO,CAAC,CAAC,CAAC;QACZ,CAAC;QACD,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;;AAxDH,8CAyDC;AAEY,QAAA,GAAG,GAA6B,iBAAiB,CAAC;AAE/D,kBAAe,WAAG,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { RegExpVersion } from '../regex';\nimport { RegExpVersioningApi } from '../regex';\nimport type { VersioningApiConstructor } from '../types';\n\nexport const id = 'nixpkgs';\nexport const displayName = 'Nixpkgs';\nexport const urls = ['https://github.com/NixOS/nixpkgs'];\nexport const supportsRanges = false;\n\nexport class NixPkgsVersioning extends RegExpVersioningApi {\n  private static readonly versionRegex =\n    '^(?<prefix>(nixos|nixpkgs|release))-((?<major>\\\\d{2})\\\\.(?<minor>\\\\d{2})|unstable)(-(?<suffix>(small|aarch64|darwin)))?$';\n\n  constructor() {\n    super(NixPkgsVersioning.versionRegex);\n  }\n\n  protected override _parse(version: string): RegExpVersion | null {\n    const groups = this._config?.exec(version)?.groups;\n\n    if (!groups) {\n      return null;\n    }\n\n    const { prefix, major, minor, suffix } = groups;\n    const release = [];\n\n    if (major) {\n      release.push(Number.parseInt(major, 10));\n    }\n\n    if (minor) {\n      release.push(Number.parseInt(minor, 10));\n    }\n\n    const compatibility = is.nonEmptyStringAndNotWhitespace(suffix)\n      ? `${prefix}-${suffix}`\n      : prefix;\n\n    return {\n      release,\n      compatibility,\n    };\n  }\n\n  override isStable(version: string): boolean {\n    const parsed = this._parse(version);\n    return is.nonEmptyArray(parsed?.release);\n  }\n\n  protected override _compare(version: string, other: string): number {\n    const left = this._parse(version);\n    const right = this._parse(other);\n\n    // empty version is equal to 'unstable'\n    if (is.emptyArray(left?.release) && is.emptyArray(right?.release)) {\n      return 0;\n    }\n    if (is.emptyArray(left?.release)) {\n      return 1;\n    }\n    if (is.emptyArray(right?.release)) {\n      return -1;\n    }\n    return super._compare(version, other);\n  }\n}\n\nexport const api: VersioningApiConstructor = NixPkgsVersioning;\n\nexport default api;\n"]}