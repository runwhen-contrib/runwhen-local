{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/pvp/util.ts"],"names":[],"mappings":";;AAEA,0CAUC;AAED,4BAUC;AAED,0BAEC;AAED,0CAuBC;AAnDD,SAAgB,eAAe,CAAC,OAAe;IAC7C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7D,MAAM,GAAG,GAAa,EAAE,CAAC;IACzB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACd,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,QAAQ,CAAC,QAAgB;IACvC,MAAM,CAAC,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;IACpC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO;QACL,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACpB,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QACpB,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;KAClB,CAAC;AACJ,CAAC;AAED,SAAgB,OAAO,CAAC,QAAkB;IACxC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;AAC7C,CAAC;AAED,SAAgB,eAAe,CAC7B,eAAyB,EACzB,aAAuB;IAEvB,KACE,IAAI,CAAC,GAAG,CAAC,EACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,EAC1D,CAAC,EAAE,EACH,CAAC;QACD,IAAI,eAAe,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,eAAe,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,IAAI,eAAe,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,eAAe,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { Parts } from './types';\n\nexport function extractAllParts(version: string): number[] | null {\n  const parts = version.split('.').map((x) => parseInt(x, 10));\n  const ret: number[] = [];\n  for (const l of parts) {\n    if (l < 0 || !isFinite(l)) {\n      return null;\n    }\n    ret.push(l);\n  }\n  return ret;\n}\n\nexport function getParts(splitOne: string): Parts | null {\n  const c = extractAllParts(splitOne);\n  if (c === null) {\n    return null;\n  }\n  return {\n    major: c.slice(0, 2),\n    minor: c.slice(2, 3),\n    patch: c.slice(3),\n  };\n}\n\nexport function plusOne(majorOne: number[]): string {\n  return `${majorOne[0]}.${majorOne[1] + 1}`;\n}\n\nexport function compareIntArray(\n  versionPartsInt: number[],\n  otherPartsInt: number[],\n): 'lt' | 'eq' | 'gt' {\n  for (\n    let i = 0;\n    i < Math.min(versionPartsInt.length, otherPartsInt.length);\n    i++\n  ) {\n    if (versionPartsInt[i] > otherPartsInt[i]) {\n      return 'gt';\n    }\n    if (versionPartsInt[i] < otherPartsInt[i]) {\n      return 'lt';\n    }\n  }\n  if (versionPartsInt.length === otherPartsInt.length) {\n    return 'eq';\n  }\n  if (versionPartsInt.length > otherPartsInt.length) {\n    return 'gt';\n  }\n  return 'lt';\n}\n"]}