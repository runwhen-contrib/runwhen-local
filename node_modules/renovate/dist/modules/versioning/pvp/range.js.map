{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/pvp/range.ts"],"names":[],"mappings":";;AAOA,gCAaC;AApBD,+CAA4C;AAG5C,qEAAqE;AACrE,MAAM,aAAa,GAAG,IAAA,aAAK,EAAC,uCAAuC,CAAC,CAAC;AACrE,MAAM,aAAa,GAAG,IAAA,aAAK,EAAC,uCAAuC,CAAC,CAAC;AAErE,SAAgB,UAAU,CAAC,KAAa;IACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC3C,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC;QACf,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO;QACL,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK;QACrB,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK;KACtB,CAAC;AACJ,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { Range } from './types';\n\n// This range format was chosen because it is common in the ecosystem\nconst gteAndLtRange = regEx(/>=(?<lower>[\\d.]+)&&<(?<upper>[\\d.]+)/);\nconst ltAndGteRange = regEx(/<(?<upper>[\\d.]+)&&>=(?<lower>[\\d.]+)/);\n\nexport function parseRange(input: string): Range | null {\n  const noSpaces = input.replaceAll(' ', '');\n  let m = gteAndLtRange.exec(noSpaces);\n  if (!m?.groups) {\n    m = ltAndGteRange.exec(noSpaces);\n    if (!m?.groups) {\n      return null;\n    }\n  }\n  return {\n    lower: m.groups.lower,\n    upper: m.groups.upper,\n  };\n}\n"]}