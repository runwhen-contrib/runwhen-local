{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/pvp/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport type { RangeStrategy } from '../../../types/versioning';\nimport { regEx } from '../../../util/regex';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport { parseRange } from './range';\nimport { compareIntArray, extractAllParts, getParts, plusOne } from './util';\n\nexport const id = 'pvp';\nexport const displayName = 'Package Versioning Policy (Haskell)';\nexport const urls = ['https://pvp.haskell.org'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = ['widen'];\n\nconst digitsAndDots = regEx(/^[\\d.]+$/);\n\nfunction isGreaterThan(version: string, other: string): boolean {\n  const versionIntMajor = extractAllParts(version);\n  const otherIntMajor = extractAllParts(other);\n  if (versionIntMajor === null || otherIntMajor === null) {\n    return false;\n  }\n  return compareIntArray(versionIntMajor, otherIntMajor) === 'gt';\n}\n\nfunction getMajor(version: string): number | null {\n  // This basically can't be implemented correctly, since\n  // 1.1 and 1.10 become equal when converted to float.\n  // Consumers should use isSame instead.\n  const parts = getParts(version);\n  if (parts === null) {\n    return null;\n  }\n  return Number(parts.major.join('.'));\n}\n\nfunction getMinor(version: string): number | null {\n  const parts = getParts(version);\n  if (parts === null || parts.minor.length === 0) {\n    return null;\n  }\n  return Number(parts.minor.join('.'));\n}\n\nfunction getPatch(version: string): number | null {\n  const parts = getParts(version);\n  if (parts === null || parts.patch.length === 0) {\n    return null;\n  }\n  return Number(parts.patch[0] + '.' + parts.patch.slice(1).join(''));\n}\n\nfunction matches(version: string, range: string): boolean {\n  const parsed = parseRange(range);\n  if (parsed === null) {\n    return false;\n  }\n  const ver = extractAllParts(version);\n  const lower = extractAllParts(parsed.lower);\n  const upper = extractAllParts(parsed.upper);\n  if (ver === null || lower === null || upper === null) {\n    return false;\n  }\n  return (\n    'gt' === compareIntArray(upper, ver) &&\n    ['eq', 'lt'].includes(compareIntArray(lower, ver))\n  );\n}\n\nfunction satisfyingVersion(\n  versions: string[],\n  range: string,\n  reverse: boolean,\n): string | null {\n  const copy = versions.slice(0);\n  copy.sort((a, b) => {\n    const multiplier = reverse ? 1 : -1;\n    return sortVersions(a, b) * multiplier;\n  });\n  const result = copy.find((v) => matches(v, range));\n  return result ?? null;\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return satisfyingVersion(versions, range, false);\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return satisfyingVersion(versions, range, true);\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  const parsed = parseRange(range);\n  if (parsed === null) {\n    return false;\n  }\n  const compos = extractAllParts(version);\n  const lower = extractAllParts(parsed.lower);\n  if (compos === null || lower === null) {\n    return false;\n  }\n  return 'lt' === compareIntArray(compos, lower);\n}\n\nfunction getNewValue({\n  currentValue,\n  newVersion,\n  rangeStrategy,\n}: NewValueConfig): string | null {\n  if (rangeStrategy !== 'widen') {\n    logger.info(\n      { rangeStrategy, currentValue, newVersion },\n      `PVP can't handle this range strategy.`,\n    );\n    return null;\n  }\n  const parsed = parseRange(currentValue);\n  if (parsed === null) {\n    logger.info(\n      { currentValue, newVersion },\n      'could not parse PVP version range',\n    );\n    return null;\n  }\n  if (isLessThanRange(newVersion, currentValue)) {\n    // ignore new releases in old release series\n    return null;\n  }\n  if (matches(newVersion, currentValue)) {\n    // the upper bound is already high enough\n    return null;\n  }\n  const compos = getParts(newVersion);\n  if (compos === null) {\n    return null;\n  }\n  const majorPlusOne = plusOne(compos.major);\n  // istanbul ignore next: since all versions that can be parsed, can also be bumped, this can never happen\n  if (!matches(newVersion, `>=${parsed.lower} && <${majorPlusOne}`)) {\n    logger.warn(\n      { newVersion },\n      \"Even though the major bound was bumped, the newVersion still isn't accepted.\",\n    );\n    return null;\n  }\n  return `>=${parsed.lower} && <${majorPlusOne}`;\n}\n\nfunction isSame(\n  type: 'major' | 'minor' | 'patch',\n  a: string,\n  b: string,\n): boolean {\n  const aParts = getParts(a);\n  const bParts = getParts(b);\n  if (aParts === null || bParts === null) {\n    return false;\n  }\n  if (type === 'major') {\n    return 'eq' === compareIntArray(aParts.major, bParts.major);\n  } else if (type === 'minor') {\n    return 'eq' === compareIntArray(aParts.minor, bParts.minor);\n  } else {\n    return 'eq' === compareIntArray(aParts.patch, bParts.patch);\n  }\n}\n\nfunction subset(subRange: string, superRange: string): boolean | undefined {\n  const sub = parseRange(subRange);\n  const sup = parseRange(superRange);\n  if (sub === null || sup === null) {\n    return undefined;\n  }\n  const subLower = extractAllParts(sub.lower);\n  const subUpper = extractAllParts(sub.upper);\n  const supLower = extractAllParts(sup.lower);\n  const supUpper = extractAllParts(sup.upper);\n  if (\n    subLower === null ||\n    subUpper === null ||\n    supLower === null ||\n    supUpper === null\n  ) {\n    return undefined;\n  }\n  if ('lt' === compareIntArray(subLower, supLower)) {\n    return false;\n  }\n  if ('gt' === compareIntArray(subUpper, supUpper)) {\n    return false;\n  }\n  return true;\n}\n\nfunction isVersion(maybeRange: string | undefined | null): boolean {\n  return typeof maybeRange === 'string' && parseRange(maybeRange) === null;\n}\n\nfunction isValid(ver: string): boolean {\n  return extractAllParts(ver) !== null || parseRange(ver) !== null;\n}\n\nfunction isSingleVersion(range: string): boolean {\n  const noSpaces = range.trim();\n  return noSpaces.startsWith('==') && digitsAndDots.test(noSpaces.slice(2));\n}\n\nfunction equals(a: string, b: string): boolean {\n  const aParts = extractAllParts(a);\n  const bParts = extractAllParts(b);\n  if (aParts === null || bParts === null) {\n    return false;\n  }\n  return 'eq' === compareIntArray(aParts, bParts);\n}\n\nfunction sortVersions(a: string, b: string): number {\n  if (equals(a, b)) {\n    return 0;\n  }\n  return isGreaterThan(a, b) ? 1 : -1;\n}\n\nfunction isStable(version: string): boolean {\n  return true;\n}\n\nfunction isCompatible(version: string): boolean {\n  return true;\n}\n\nexport const api: VersioningApi = {\n  isValid,\n  isVersion,\n  isStable,\n  isCompatible,\n  getMajor,\n  getMinor,\n  getPatch,\n  isSingleVersion,\n  sortVersions,\n  equals,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  isLessThanRange,\n  isGreaterThan,\n  getNewValue,\n  isSame,\n  subset,\n};\nexport default api;\n"]}