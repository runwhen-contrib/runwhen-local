{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/redhat/index.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,wCAAkD;AAGrC,QAAA,EAAE,GAAG,QAAQ,CAAC;AACd,QAAA,WAAW,GAAG,SAAS,CAAC;AACxB,QAAA,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAM,OAAO,GAAG,IAAA,aAAK,EACnB,8GAA8G,CAC/G,CAAC;AAEF,MAAM,mBAAoB,SAAQ,8BAAoB;IAC1C,MAAM,CAAC,OAAe;QAC9B,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC;QAC9C,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,OAAO,CAAC;QACpE,MAAM,OAAO,GAAG;YACd,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC1B,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC7D,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YAC7D,OAAO,YAAY,KAAK,WAAW;gBACjC,CAAC,CAAC,CAAC;gBACH,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC;YACrC,OAAO,YAAY,KAAK,WAAW;gBACjC,CAAC,CAAC,CAAC;gBACH,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC;SACtC,CAAC;QAEF,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;IACrC,CAAC;CACF;AAEY,QAAA,GAAG,GAAkB,IAAI,mBAAmB,EAAE,CAAC;AAE5D,kBAAe,WAAG,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { GenericVersion } from '../generic';\nimport { GenericVersioningApi } from '../generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'redhat';\nexport const displayName = 'Red Hat';\nexport const urls = [];\nexport const supportsRanges = false;\n\nconst pattern = regEx(\n  /^(?<major>\\d+)(?:\\.(?<minor>\\d+))?(?:\\.(?<patch>\\d+))?(?:-(?<releaseMajor>\\d+)(?:\\.(?<releaseMinor>\\d+))?)?$/,\n);\n\nclass RedhatVersioningApi extends GenericVersioningApi {\n  protected _parse(version: string): GenericVersion | null {\n    const matches = pattern.exec(version)?.groups;\n    if (!matches) {\n      return null;\n    }\n\n    const { major, minor, patch, releaseMajor, releaseMinor } = matches;\n    const release = [\n      Number.parseInt(major, 10),\n      typeof minor === 'undefined' ? 0 : Number.parseInt(minor, 10),\n      typeof patch === 'undefined' ? 0 : Number.parseInt(patch, 10),\n      typeof releaseMajor === 'undefined'\n        ? 0\n        : Number.parseInt(releaseMajor, 10),\n      typeof releaseMinor === 'undefined'\n        ? 0\n        : Number.parseInt(releaseMinor, 10),\n    ];\n\n    return { release, prerelease: '' };\n  }\n}\n\nexport const api: VersioningApi = new RedhatVersioningApi();\n\nexport default api;\n"]}