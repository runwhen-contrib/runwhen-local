{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/go-mod-directive/index.ts"],"names":[],"mappings":";;;AACA,+CAA4C;AAC5C,gCAAoC;AAGvB,QAAA,EAAE,GAAG,kBAAkB,CAAC;AACxB,QAAA,WAAW,GAAG,sBAAsB,CAAC;AACrC,QAAA,IAAI,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAClC,QAAA,cAAc,GAAG,IAAI,CAAC;AACtB,QAAA,wBAAwB,GAAoB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAE7E,MAAM,UAAU,GAAG,IAAA,aAAK,EAAC,oBAAoB,CAAC,CAAC;AAE/C,SAAS,UAAU,CAAC,KAAa;IAC/B,OAAO,IAAI,KAAK,EAAE,CAAC;AACrB,CAAC;AAED,SAAS,OAAO,CAAC,OAAe;IAC9B,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,CAAC;AAED,SAAS,WAAW,CAAC,EACnB,YAAY,EACZ,aAAa,EACb,UAAU,GACK;IACf,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC7B,IAAI,SAAG,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE,CAAC;YACxC,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC;IACD,IAAI,aAAa,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,EAAE,CAAC;QACtE,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,SAAG,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,OAAe,EAAE,KAAa,EAAW,EAAE,CAClE,SAAG,CAAC,eAAgB,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAE5C,MAAM,OAAO,GAAG,CAAC,KAAa,EAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAAhE,QAAA,OAAO,WAAyD;AAE7E,MAAM,OAAO,GAAG,CAAC,OAAe,EAAE,KAAa,EAAW,EAAE,CAC1D,SAAG,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAE1C,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,SAAG,CAAC,oBAAoB,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/D,CAAC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,SAAG;IACN,WAAW;IACX,oBAAoB;IACpB,eAAe;IACf,OAAO,EAAP,eAAO;IACP,OAAO;IACP,oBAAoB;CACrB,CAAC;AACF,kBAAe,WAAG,CAAC","sourcesContent":["import type { RangeStrategy } from '../../../types/versioning';\nimport { regEx } from '../../../util/regex';\nimport { api as npm } from '../npm';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport const id = 'go-mod-directive';\nexport const displayName = 'Go Modules Directive';\nexport const urls = ['https://go.dev/ref/mod'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = ['bump', 'replace'];\n\nconst validRegex = regEx(/^\\d+\\.\\d+(\\.\\d+)?$/);\n\nfunction toNpmRange(range: string): string {\n  return `^${range}`;\n}\n\nfunction shorten(version: string): string {\n  return version.split('.').slice(0, 2).join('.');\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  newVersion,\n}: NewValueConfig): string {\n  if (rangeStrategy === 'bump') {\n    if (npm.matches(newVersion, '>=1.20.0')) {\n      return newVersion;\n    }\n    return shorten(newVersion);\n  }\n  if (rangeStrategy === 'replace' && !matches(newVersion, currentValue)) {\n    return newVersion;\n  }\n  return currentValue;\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return npm.getSatisfyingVersion(versions, toNpmRange(range));\n}\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isLessThanRange!(version, toNpmRange(range));\n\nexport const isValid = (input: string): boolean => !!input.match(validRegex);\n\nconst matches = (version: string, range: string): boolean =>\n  npm.matches(version, toNpmRange(range));\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return npm.minSatisfyingVersion(versions, toNpmRange(range));\n}\n\nexport const api: VersioningApi = {\n  ...npm,\n  getNewValue,\n  getSatisfyingVersion,\n  isLessThanRange,\n  isValid,\n  matches,\n  minSatisfyingVersion,\n};\nexport default api;\n"]}