{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/npm/range.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport semver from 'semver';\nimport semverUtils from 'semver-utils';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { isSemVerXRange } from '../semver/common';\nimport type { NewValueConfig } from '../types';\n\nconst {\n  inc: increment,\n  valid: isVersion,\n  major,\n  minor,\n  patch,\n  prerelease,\n  satisfies,\n} = semver;\n\nfunction replaceCaretValue(oldValue: string, newValue: string): string {\n  const toVersionMajor = major(newValue);\n  const toVersionMinor = minor(newValue);\n  const toVersionPatch = patch(newValue);\n\n  const currentMajor = major(oldValue);\n  const currentMinor = minor(oldValue);\n  const currentPatch = patch(oldValue);\n\n  const oldTuple = [currentMajor, currentMinor, currentPatch];\n  const newTuple = [toVersionMajor, toVersionMinor, toVersionPatch];\n  const resultTuple = [];\n\n  let leadingZero = true;\n  let needReplace = false;\n  for (let idx = 0; idx < 3; idx += 1) {\n    const oldVal = oldTuple[idx];\n    const newVal = newTuple[idx];\n\n    let leadingDigit = false;\n    if (oldVal !== 0 || newVal !== 0) {\n      if (leadingZero) {\n        leadingZero = false;\n        leadingDigit = true;\n      }\n    }\n\n    if (leadingDigit && newVal > oldVal) {\n      needReplace = true;\n    }\n\n    if (!needReplace && newVal < oldVal) {\n      return newValue;\n    }\n\n    resultTuple.push(leadingDigit ? newVal : 0);\n  }\n\n  return needReplace ? resultTuple.join('.') : oldValue;\n}\n\nfunction stripV(value: string): string {\n  return value.replace(/^v/, '');\n}\n\n// TODO: #22198\nexport function getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  if (\n    !['pin', 'update-lockfile'].includes(rangeStrategy) &&\n    isSemVerXRange(currentValue)\n  ) {\n    return null;\n  }\n  if (rangeStrategy === 'pin' || isVersion(currentValue)) {\n    return newVersion;\n  }\n  if (rangeStrategy === 'update-lockfile') {\n    if (satisfies(newVersion, currentValue)) {\n      return currentValue;\n    }\n    return getNewValue({\n      currentValue,\n      rangeStrategy: 'replace',\n      currentVersion,\n      newVersion,\n    });\n  }\n  const parsedRange = semverUtils.parseRange(currentValue);\n  const element = parsedRange[parsedRange.length - 1];\n  if (rangeStrategy === 'widen') {\n    if (satisfies(newVersion, currentValue)) {\n      return currentValue;\n    }\n    const newValue = getNewValue({\n      currentValue,\n      rangeStrategy: 'replace',\n      currentVersion,\n      newVersion,\n    });\n    if (element.operator?.startsWith('<')) {\n      // TODO fix this\n      const splitCurrent = currentValue.split(element.operator);\n      splitCurrent.pop();\n      // TODO: types (#22198)\n      return `${splitCurrent.join(element.operator)}${newValue!}`;\n    }\n    if (parsedRange.length > 1) {\n      const previousElement = parsedRange[parsedRange.length - 2];\n      if (previousElement.operator === '-') {\n        const splitCurrent = currentValue.split('-');\n        splitCurrent.pop();\n        // TODO: types (#22198)\n        return `${splitCurrent.join('-')}- ${newValue!}`;\n      }\n      if (element.operator?.startsWith('>')) {\n        logger.warn(`Complex ranges ending in greater than are not supported`);\n        return null;\n      }\n    }\n    // TODO: types (#22198)\n    return `${currentValue} || ${newValue!}`;\n  }\n  const toVersionMajor = major(newVersion);\n  const toVersionMinor = minor(newVersion);\n  const toVersionPatch = patch(newVersion);\n  const toNewVersion = prerelease(newVersion);\n  const suffix = toNewVersion ? `-${toNewVersion[0]}` : '';\n  // Simple range\n  if (rangeStrategy === 'bump') {\n    if (parsedRange.length === 1) {\n      if (!element.operator) {\n        return stripV(newVersion);\n      }\n      if (element.operator === '^') {\n        return `^${stripV(newVersion)}`;\n      }\n      if (element.operator === '~') {\n        return `~${stripV(newVersion)}`;\n      }\n      if (element.operator === '=') {\n        return `=${stripV(newVersion)}`;\n      }\n      if (element.operator === '>=') {\n        return currentValue.includes('>= ')\n          ? `>= ${stripV(newVersion)}`\n          : `>=${stripV(newVersion)}`;\n      }\n      if (element.operator.startsWith('<')) {\n        return currentValue;\n      }\n    } else {\n      return semverUtils\n        .parseRange(currentValue)\n        .map((x) => x.semver)\n        .filter(is.string)\n        .map((subRange) => {\n          const bumpedSubRange = getNewValue({\n            currentValue: subRange,\n            rangeStrategy: 'bump',\n            currentVersion,\n            newVersion,\n          });\n          if (bumpedSubRange && satisfies(newVersion, bumpedSubRange)) {\n            return bumpedSubRange;\n          }\n\n          return getNewValue({\n            currentValue: subRange,\n            rangeStrategy: 'replace',\n            currentVersion,\n            newVersion,\n          });\n        })\n        .filter((x) => x !== null && x !== '')\n        .join(' ');\n    }\n    logger.debug(\n      'Unsupported range type for rangeStrategy=bump: ' + currentValue,\n    );\n    return null;\n  }\n  if (element.operator === '~>') {\n    return `~> ${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '^') {\n    if (suffix.length || !currentVersion) {\n      return `^${toVersionMajor}.${toVersionMinor}.${toVersionPatch}${suffix}`;\n    }\n    return `^${replaceCaretValue(currentVersion, newVersion)}`;\n  }\n  if (element.operator === '=') {\n    return `=${stripV(newVersion)}`;\n  }\n  if (element.operator === '~') {\n    if (suffix.length) {\n      return `~${toVersionMajor}.${toVersionMinor}.${toVersionPatch}${suffix}`;\n    }\n    return `~${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '<=') {\n    let res;\n    if (!!element.patch || suffix.length) {\n      res = `<=${stripV(newVersion)}`;\n    } else if (element.minor) {\n      res = `<=${toVersionMajor}.${toVersionMinor}`;\n    } else {\n      res = `<=${toVersionMajor}`;\n    }\n    if (currentValue.includes('<= ')) {\n      res = res.replace('<=', '<= ');\n    }\n    return res;\n  }\n  if (element.operator === '<') {\n    let res;\n    if (currentValue.endsWith('.0.0')) {\n      const newMajor = toVersionMajor + 1;\n      res = `<${newMajor}.0.0`;\n    } else if (element.patch) {\n      // TODO: types (#22198)\n      res = `<${increment(newVersion, 'patch')!}`;\n    } else if (element.minor) {\n      res = `<${toVersionMajor}.${toVersionMinor + 1}`;\n    } else {\n      res = `<${toVersionMajor + 1}`;\n    }\n    if (currentValue.includes('< ')) {\n      res = res.replace(regEx(/</g), '< ');\n    }\n    return res;\n  }\n  if (!element.operator) {\n    if (element.minor) {\n      if (element.minor === 'x') {\n        return `${toVersionMajor}.x`;\n      }\n      if (element.minor === '*') {\n        return `${toVersionMajor}.*`;\n      }\n      if (element.patch === 'x') {\n        return `${toVersionMajor}.${toVersionMinor}.x`;\n      }\n      if (element.patch === '*') {\n        return `${toVersionMajor}.${toVersionMinor}.*`;\n      }\n      return `${toVersionMajor}.${toVersionMinor}`;\n    }\n    return `${toVersionMajor}`;\n  }\n  return newVersion;\n}\n"]}