{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/debian/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RangeStrategy } from '../../../types';\nimport { DistroInfo } from '../distro';\nimport { GenericVersioningApi } from '../generic';\nimport type { GenericVersion } from '../generic';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport { RollingReleasesData } from './common';\n\nexport const id = 'debian';\nexport const displayName = 'Debian';\nexport const urls = [\n  'https://debian.pages.debian.net/distro-info-data/debian.csv',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = ['pin'];\n\nconst RELEASE_PROP = 'release';\n\nexport class DebianVersioningApi extends GenericVersioningApi {\n  private readonly _distroInfo: DistroInfo;\n  private readonly _rollingReleases: RollingReleasesData;\n\n  constructor() {\n    super();\n    this._distroInfo = new DistroInfo('data/debian-distro-info.json');\n    this._rollingReleases = new RollingReleasesData(this._distroInfo);\n  }\n\n  override isValid(version: string): boolean {\n    const isValid = super.isValid(version);\n    const schedule = this._distroInfo.getSchedule(\n      this._rollingReleases.getVersionByLts(version),\n    );\n    return isValid && schedule !== null && RELEASE_PROP in schedule;\n  }\n\n  override isStable(version: string): boolean {\n    let ver: string;\n    ver = this._rollingReleases.getVersionByLts(version);\n    ver = this._distroInfo.getVersionByCodename(ver);\n    return this._distroInfo.isReleased(ver) && !this._distroInfo.isEolLts(ver);\n  }\n\n  override getNewValue({\n    currentValue,\n    rangeStrategy,\n    newVersion,\n  }: NewValueConfig): string {\n    if (rangeStrategy === 'pin') {\n      let newVer = newVersion;\n\n      // convert newVersion to semVer\n      if (this._distroInfo.isCodename(newVersion)) {\n        newVer = this._distroInfo.getVersionByCodename(newVersion);\n      }\n      if (this._rollingReleases.has(newVersion)) {\n        newVer = this._rollingReleases.getVersionByLts(newVersion);\n      }\n\n      // current value is codename or [oldold|old|]stable\n      if (\n        this._distroInfo.isCodename(currentValue) ||\n        this._rollingReleases.has(currentValue)\n      ) {\n        return newVer;\n      }\n    }\n\n    // current value is [oldold|old|]stable\n    if (this._rollingReleases.has(currentValue)) {\n      return this._rollingReleases.getLtsByVersion(newVersion);\n    }\n\n    if (this._distroInfo.isCodename(currentValue)) {\n      const di = this._rollingReleases.schedule(newVersion);\n      let ver = newVersion;\n      if (di) {\n        ver = di.version;\n      }\n      return this._distroInfo.getCodenameByVersion(ver);\n    }\n\n    // newVersion is [oldold|old|]stable\n    // current value is numeric\n    if (this._rollingReleases.has(newVersion)) {\n      return (\n        this._rollingReleases.schedule(newVersion)?.version ??\n        /* istanbul ignore next: should never happen */ newVersion\n      );\n    }\n\n    return this._distroInfo.getVersionByCodename(newVersion);\n  }\n\n  protected override _parse(version: string): GenericVersion | null {\n    let ver: string;\n    ver = this._rollingReleases.getVersionByLts(version);\n    ver = this._distroInfo.getVersionByCodename(ver);\n    if (!this._distroInfo.exists(ver)) {\n      return null;\n    }\n    return { release: ver.split('.').map(Number) };\n  }\n}\n\nexport const api: VersioningApi = new DebianVersioningApi();\n\nexport default api;\n"]}