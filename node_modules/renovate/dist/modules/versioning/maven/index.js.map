{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/maven/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RangeStrategy } from '../../../types/versioning';\nimport { coerceString } from '../../../util/string';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport {\n  EXCLUDING_POINT,\n  QualifierTypes,\n  TYPE_NUMBER,\n  TYPE_QUALIFIER,\n  autoExtendMavenRange,\n  compare,\n  isSingleVersion,\n  isValid,\n  isVersion,\n  parseRange,\n  qualifierType,\n  tokenize,\n} from './compare';\n\nexport const id = 'maven';\nexport const displayName = 'Maven';\nexport const urls = [\n  'https://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification',\n  'https://octopus.com/blog/maven-versioning-explained',\n  'https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nconst equals = (a: string, b: string): boolean => compare(a, b) === 0;\n\nfunction matches(a: string, b: string): boolean {\n  if (!b) {\n    return false;\n  }\n  if (isVersion(b)) {\n    return equals(a, b);\n  }\n  const ranges = parseRange(b);\n  if (!ranges) {\n    return false;\n  }\n  return ranges.reduce((result, range): any => {\n    if (result) {\n      return result;\n    }\n\n    const { leftType, leftValue, rightType, rightValue } = range;\n\n    let leftResult = true;\n    let rightResult = true;\n\n    if (leftValue) {\n      leftResult =\n        leftType === EXCLUDING_POINT\n          ? compare(leftValue, a) === -1\n          : compare(leftValue, a) !== 1;\n    }\n\n    if (rightValue) {\n      rightResult =\n        rightType === EXCLUDING_POINT\n          ? compare(a, rightValue) === -1\n          : compare(a, rightValue) !== 1;\n    }\n\n    return leftResult && rightResult;\n  }, false);\n}\n\nconst getMajor = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version);\n    const majorToken = tokens[0];\n    return +majorToken.val;\n  }\n  return null;\n};\n\nconst getMinor = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version);\n    const minorToken = tokens[1];\n    if (minorToken && minorToken.type === TYPE_NUMBER) {\n      return +minorToken.val;\n    }\n    return 0;\n  }\n  return null;\n};\n\nconst getPatch = (version: string): number | null => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version);\n    const minorToken = tokens[1];\n    const patchToken = tokens[2];\n    if (\n      patchToken &&\n      minorToken.type === TYPE_NUMBER &&\n      patchToken.type === TYPE_NUMBER\n    ) {\n      return +patchToken.val;\n    }\n    return 0;\n  }\n  return null;\n};\n\nconst isGreaterThan = (a: string, b: string): boolean => compare(a, b) === 1;\n\nconst isStable = (version: string): boolean => {\n  if (isVersion(version)) {\n    const tokens = tokenize(version);\n    for (const token of tokens) {\n      if (token.type === TYPE_QUALIFIER) {\n        const qualType = qualifierType(token);\n        if (qualType && qualType < QualifierTypes.Release) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n// istanbul ignore next\nconst getSatisfyingVersion = (\n  versions: string[],\n  range: string,\n): string | null =>\n  versions.reduce((result: string | null, version) => {\n    if (matches(version, range)) {\n      if (!result) {\n        return version;\n      }\n      if (isGreaterThan(version, result)) {\n        return version;\n      }\n    }\n    return result;\n  }, null);\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  newVersion,\n}: NewValueConfig): string {\n  if (isVersion(currentValue) || rangeStrategy === 'pin') {\n    return newVersion;\n  }\n  return coerceString(\n    autoExtendMavenRange(currentValue, newVersion),\n    currentValue,\n  );\n}\n\nexport { isValid };\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getPatch,\n  isCompatible: isVersion,\n  isGreaterThan,\n  isSingleVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion: getSatisfyingVersion,\n  getNewValue,\n  sortVersions: compare,\n};\n\nexport default api;\n"]}