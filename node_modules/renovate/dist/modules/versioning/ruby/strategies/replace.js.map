{"version":3,"file":"replace.js","sourceRoot":"","sources":["../../../../../lib/modules/versioning/ruby/strategies/replace.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../../logger';\nimport { EQUAL, GT, GTE, LT, LTE, NOT_EQUAL, PGTE } from '../operator';\nimport type { Range } from '../range';\nimport { parseRanges, satisfiesRange, stringifyRanges } from '../range';\nimport { adapt, decrement, floor, increment } from '../version';\n\n// Common logic for replace, widen, and bump strategies\n// It basically makes the range stick to the new version.\nexport function replacePart(part: Range, to: string): Range {\n  const { operator, version: ver, companion } = part;\n  switch (operator) {\n    case LT:\n      return { ...part, version: increment(ver, to) };\n    case LTE:\n      return { ...part, version: to };\n    case PGTE:\n      if (companion) {\n        return {\n          ...part,\n          version: floor(adapt(to, ver)),\n          companion: { ...companion, version: to },\n        };\n      } else {\n        return { ...part, version: floor(adapt(to, ver)) };\n      }\n    case GT:\n      return { ...part, version: decrement(to) };\n    case GTE:\n    case EQUAL:\n      return { ...part, version: to };\n    case NOT_EQUAL:\n      return part;\n    // istanbul ignore next\n    default:\n      logger.warn({ operator }, `Unsupported ruby versioning operator`);\n      return { operator: '', delimiter: ' ', version: '' };\n  }\n}\n\nexport default ({ range, to }: { range: string; to: string }): string => {\n  const parts = parseRanges(range).map((part): Range => {\n    if (satisfiesRange(to, part)) {\n      // The new version satisfies the range. Keep it as-is.\n      // Note that consecutive `~>` and `>=` parts are combined into one Range object,\n      // therefore both parts are updated if the new version violates one of them.\n      return part;\n    }\n\n    if (part.version.split('.').length > to.split('.').length) {\n      const diff = part.version.split('.').length - to.split('.').length;\n      const versionToReplace = [to, ...Array(diff).fill('0')].join('.');\n      const replacement = replacePart(part, versionToReplace);\n      return {\n        ...replacement,\n        version: replacement.version.split('.').slice(0, -diff).join('.'),\n      };\n    }\n\n    return replacePart(part, to);\n  });\n\n  return stringifyRanges(parts);\n};\n"]}