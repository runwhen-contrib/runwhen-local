{"version":3,"file":"widen.js","sourceRoot":"","sources":["../../../../../lib/modules/versioning/ruby/strategies/widen.ts"],"names":[],"mappings":";;AAAA,0CAA4C;AAE5C,oCAAwE;AACxE,wCAAuD;AACvD,uCAAwC;AAExC,kBAAe,CAAC,EAAE,KAAK,EAAE,EAAE,EAAiC,EAAU,EAAE;IACtE,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAW,EAAE;QACzD,IAAI,IAAA,sBAAc,EAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC;QAED,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QACnD,QAAQ,QAAQ,EAAE,CAAC;YACjB,kDAAkD;YAClD,8CAA8C;YAC9C,KAAK,eAAI,CAAC,CAAC,CAAC;gBACV,+BAA+B;gBAC/B,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;gBACxD,MAAM,KAAK,GAAG,IAAA,mBAAS,EAAC,IAAA,wBAAc,EAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjD,OAAO;oBACL,EAAE,QAAQ,EAAE,cAAG,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE;oBACvD,EAAE,QAAQ,EAAE,aAAE,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE;iBACjD,CAAC;YACJ,CAAC;YACD;gBACE,OAAO,CAAC,IAAA,qBAAW,EAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,IAAA,uBAAe,EAAC,KAAK,CAAC,CAAC;AAChC,CAAC,CAAC","sourcesContent":["import { GTE, LT, PGTE } from '../operator';\nimport type { Range } from '../range';\nimport { parseRanges, satisfiesRange, stringifyRanges } from '../range';\nimport { increment, pgteUpperBound } from '../version';\nimport { replacePart } from './replace';\n\nexport default ({ range, to }: { range: string; to: string }): string => {\n  const parts = parseRanges(range).flatMap((part): Range[] => {\n    if (satisfiesRange(to, part)) {\n      return [part];\n    }\n\n    const { operator, version: ver, companion } = part;\n    switch (operator) {\n      // `~>` works as both lower bound and upper bound.\n      // We need to decompose it to get wider range.\n      case PGTE: {\n        // Prefer constraints from `>=`\n        const baseVersion = companion ? companion.version : ver;\n        const limit = increment(pgteUpperBound(ver), to);\n        return [\n          { operator: GTE, delimiter: ' ', version: baseVersion },\n          { operator: LT, delimiter: ' ', version: limit },\n        ];\n      }\n      default:\n        return [replacePart(part, to)];\n    }\n  });\n\n  return stringifyRanges(parts);\n};\n"]}