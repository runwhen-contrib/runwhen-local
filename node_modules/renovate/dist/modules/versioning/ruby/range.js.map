{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/ruby/range.ts"],"names":[],"mappings":"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","sourcesContent":["import { satisfies } from '@renovatebot/ruby-semver';\nimport { parse as _parse } from '@renovatebot/ruby-semver/dist/ruby/requirement.js';\nimport type { Version } from '@renovatebot/ruby-semver/dist/ruby/version.js';\nimport { create } from '@renovatebot/ruby-semver/dist/ruby/version.js';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { EQUAL, GT, GTE, LT, LTE, NOT_EQUAL, PGTE } from './operator';\n\nexport interface Range {\n  version: string;\n  operator: string;\n  delimiter: string;\n  /**\n   * If the range is `~>` and immediately followed by `>=`,\n   * the latter range is considered the former's companion\n   * and assigned here instead of being an independent range.\n   *\n   * Example: `'~> 6.2', '>= 6.2.1'`\n   */\n  companion?: Range;\n}\n\nconst parse = (range: string): Range => {\n  const regExp = regEx(\n    /^(?<operator>[^\\d\\s]+)?(?<delimiter>\\s*)(?<version>[0-9a-zA-Z-.]+)$/,\n  );\n\n  const value = (range || '').trim();\n\n  const match = regExp.exec(value);\n  if (match?.groups) {\n    const { version, operator = '', delimiter } = match.groups;\n    return { version, operator, delimiter };\n  }\n\n  return {\n    version: '',\n    operator: '',\n    delimiter: ' ',\n  };\n};\n\n/** Wrapper for {@link satisfies} for {@link Range} record. */\nexport function satisfiesRange(ver: string, range: Range): boolean {\n  if (range.companion) {\n    return (\n      satisfies(ver, `${range.operator}${range.version}`) &&\n      satisfiesRange(ver, range.companion)\n    );\n  } else {\n    return satisfies(ver, `${range.operator}${range.version}`);\n  }\n}\n\n/**\n * Parses a comma-delimited list of range parts,\n * with special treatment for a pair of `~>` and `>=` parts.\n */\nexport function parseRanges(range: string): Range[] {\n  const originalRanges = range.split(',').map(parse);\n  const ranges: Range[] = [];\n  for (let i = 0; i < originalRanges.length; ) {\n    if (\n      i + 1 < originalRanges.length &&\n      originalRanges[i].operator === PGTE &&\n      originalRanges[i + 1].operator === GTE\n    ) {\n      ranges.push({\n        ...originalRanges[i],\n        companion: originalRanges[i + 1],\n      });\n      i += 2;\n    } else {\n      ranges.push(originalRanges[i]);\n      i++;\n    }\n  }\n  return ranges;\n}\n\n/**\n * Stringifies a list of range parts into a comma-separated string,\n * with special treatment for a pair of `~>` and `>=` parts.\n */\nexport function stringifyRanges(ranges: Range[]): string {\n  return ranges\n    .map((r) => {\n      if (r.companion) {\n        return `${r.operator}${r.delimiter}${r.version}, ${r.companion.operator}${r.companion.delimiter}${r.companion.version}`;\n      } else {\n        return `${r.operator}${r.delimiter}${r.version}`;\n      }\n    })\n    .join(', ');\n}\n\ntype GemRequirement = [string, Version];\n\nconst ltr = (version: string, range: string): boolean => {\n  const gemVersion = create(version);\n  if (!gemVersion) {\n    logger.warn({ version }, `Invalid ruby version`);\n    return false;\n  }\n  const requirements: GemRequirement[] = range.split(',').map(_parse);\n\n  const results = requirements.map(([operator, ver]) => {\n    switch (operator) {\n      case GT:\n      case LT:\n        return gemVersion.compare(ver) <= 0;\n      case GTE:\n      case LTE:\n      case EQUAL:\n      case NOT_EQUAL:\n        return gemVersion.compare(ver) < 0;\n      case PGTE:\n        return (\n          gemVersion.compare(ver) < 0 &&\n          gemVersion.release().compare(ver.bump()) <= 0\n        );\n      // istanbul ignore next\n      default:\n        logger.warn({ operator }, `Unsupported operator`);\n        return false;\n    }\n  });\n\n  return results.reduce((accumulator, value) => accumulator && value, true);\n};\n\nexport { parse, ltr };\n"]}