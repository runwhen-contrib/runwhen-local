{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/perl/index.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,wCAAkD;AAGrC,QAAA,EAAE,GAAG,MAAM,CAAC;AACZ,QAAA,WAAW,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAC5C,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,oDAAoD;AACpD,MAAM,qBAAqB,GAAG,IAAA,aAAK,EAAC,yBAAyB,CAAC,CAAC;AAC/D,2DAA2D;AAC3D,MAAM,2BAA2B,GAAG,IAAA,aAAK,EAAC,8BAA8B,CAAC,CAAC;AAE1E,MAAM,iBAAkB,SAAQ,8BAAoB;IACxC,MAAM,CAAC,OAAe;QAC9B,OAAO,CACL,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CACzC,CAAC;IACJ,CAAC;IAEO,oBAAoB,CAAC,OAAe;QAC1C,MAAM,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,EAAE,OAAO,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC;QACzC,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAE5D,MAAM,iBAAiB,GACrB,WAAW;aACR,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;aACjB,KAAK,CAAC,SAAS,CAAC;YACjB,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACd,IAAI,SAAS,GAAG,KAAK,CAAC;YACtB,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,SAAS,IAAI,GAAG,CAAC;YACnB,CAAC;YACD,OAAO,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,IAAI,0BAA0B,CAAC,EAAE,CAAC;QACxC,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,GAAG,iBAAiB,CAAC,CAAC;QACrE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;IACjC,CAAC;IAEO,0BAA0B,CAAC,OAAe;QAChD,MAAM,OAAO,GAAG,2BAA2B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,EAAE,YAAY,CAAC,GAAG,OAAO,CAAC;QACjC,MAAM,UAAU,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7D,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;IACjC,CAAC;CACF;AAEY,QAAA,GAAG,GAAkB,IAAI,iBAAiB,EAAE,CAAC;AAE1D,kBAAe,WAAG,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { GenericVersion } from '../generic';\nimport { GenericVersioningApi } from '../generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'perl';\nexport const displayName = 'Perl';\nexport const urls = ['https://metacpan.org/pod/version'];\nexport const supportsRanges = false;\n\n// https://metacpan.org/pod/version#Decimal-Versions\nconst decimalVersionPattern = regEx(/^(\\d+)\\.(\\d+(?:_\\d+)?)$/);\n// https://metacpan.org/pod/version#Dotted-Decimal-Versions\nconst dottedDecimalVersionPattern = regEx(/^v?(\\d+(?:\\.\\d+)*(?:_\\d+)?)$/);\n\nclass PerlVersioningApi extends GenericVersioningApi {\n  protected _parse(version: string): GenericVersion | null {\n    return (\n      this._parseDecimalVersion(version) ??\n      this._parseDottedDecimalVersion(version)\n    );\n  }\n\n  private _parseDecimalVersion(version: string): GenericVersion | null {\n    const matches = decimalVersionPattern.exec(version);\n    if (!matches) {\n      return null;\n    }\n    const [, intPart, decimalPart] = matches;\n    const prerelease = decimalPart.includes('_') ? 'alpha' : '';\n\n    const decimalComponents =\n      decimalPart\n        .replace(/_/g, '')\n        .match(/.{1,3}/g)\n        ?.map((value) => {\n          let component = value;\n          while (component.length < 3) {\n            component += '0';\n          }\n          return Number.parseInt(component, 10);\n        }) ?? /* istanbul ignore next */ [];\n    const release = [Number.parseInt(intPart, 10), ...decimalComponents];\n    return { release, prerelease };\n  }\n\n  private _parseDottedDecimalVersion(version: string): GenericVersion | null {\n    const matches = dottedDecimalVersionPattern.exec(version);\n    if (!matches) {\n      return null;\n    }\n    const [, versionValue] = matches;\n    const prerelease = versionValue.includes('_') ? 'alpha' : '';\n    const release = versionValue.split(/[._]/).map(Number);\n    return { release, prerelease };\n  }\n}\n\nexport const api: VersioningApi = new PerlVersioningApi();\n\nexport default api;\n"]}