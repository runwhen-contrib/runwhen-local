{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/ubuntu/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { coerceString } from '../../../util/string';\nimport { DistroInfo } from '../distro';\nimport type { NewValueConfig, VersioningApi } from '../types';\nimport {\n  getDatedContainerImageCodename,\n  getDatedContainerImageSuffix,\n  getDatedContainerImageVersion,\n  isDatedCodeName,\n} from './common';\n\nexport const id = 'ubuntu';\nexport const displayName = 'Ubuntu';\nexport const urls = [\n  'https://changelogs.ubuntu.com/meta-release',\n  'https://debian.pages.debian.net/distro-info-data/ubuntu.csv',\n];\nexport const supportsRanges = false;\n\nconst di = new DistroInfo('data/ubuntu-distro-info.json');\n\n// validation\n\nfunction isValid(input: string): boolean {\n  if (\n    regEx(/^(0[4-5]|[6-9]|[1-9][0-9])\\.[0-9][0-9](\\.[0-9]{1,2})?$/).test(input)\n  ) {\n    return true;\n  }\n\n  if (di.isCodename(input)) {\n    return true;\n  }\n\n  return isDatedCodeName(input);\n}\n\nfunction isVersion(input: string): boolean {\n  return isValid(input);\n}\n\nfunction isCompatible(version: string, _current?: string): boolean {\n  return isValid(version);\n}\n\nfunction isSingleVersion(version: string): boolean {\n  return isValid(version);\n}\n\nfunction isStable(version: string): boolean {\n  const ver = di.getVersionByCodename(version);\n  if (!isValid(ver)) {\n    return false;\n  }\n\n  const match = ver.match(regEx(/^\\d+.\\d+/));\n\n  if (!di.isReleased(coerceString(match?.[0], ver))) {\n    return false;\n  }\n\n  return regEx(/^\\d?[02468]\\.04/).test(ver);\n}\n\n// digestion of version\n\nfunction getVersionByCodename(version: string): string {\n  const datedImgVersion = getDatedContainerImageCodename(version);\n  const getVersion = datedImgVersion ?? version;\n  return di.getVersionByCodename(getVersion);\n}\n\nfunction getMajor(version: string): null | number {\n  const ver = getVersionByCodename(version);\n  if (isValid(ver)) {\n    const [major] = ver.split('.');\n    return parseInt(major, 10);\n  }\n  return null;\n}\n\nfunction getMinor(version: string): null | number {\n  const ver = getVersionByCodename(version);\n  if (isValid(ver)) {\n    const [, minor] = ver.split('.');\n    return parseInt(minor, 10);\n  }\n  return null;\n}\n\nfunction getPatch(version: string): null | number {\n  const ver = getVersionByCodename(version);\n  if (isValid(ver)) {\n    const [, , patch] = ver.split('.');\n    return patch ? parseInt(patch, 10) : null;\n  }\n  return null;\n}\n\n// comparison\n\nfunction equals(version: string, other: string): boolean {\n  const verImage = getDatedContainerImageVersion(version);\n  const otherImageVer = getDatedContainerImageVersion(other);\n  if (verImage !== otherImageVer) {\n    return false;\n  }\n\n  const verSuffix = getDatedContainerImageSuffix(version);\n  const otherSuffix = getDatedContainerImageSuffix(other);\n  if (verSuffix !== otherSuffix) {\n    return false;\n  }\n\n  const ver = getVersionByCodename(version);\n  const otherVer = getVersionByCodename(other);\n  return isVersion(ver) && isVersion(otherVer) && ver === otherVer;\n}\n\nfunction isGreaterThan(version: string, other: string): boolean {\n  const xMajor = getMajor(version) ?? 0;\n  const yMajor = getMajor(other) ?? 0;\n  if (xMajor > yMajor) {\n    return true;\n  }\n  if (xMajor < yMajor) {\n    return false;\n  }\n\n  const xMinor = getMinor(version) ?? 0;\n  const yMinor = getMinor(other) ?? 0;\n  if (xMinor > yMinor) {\n    return true;\n  }\n  if (xMinor < yMinor) {\n    return false;\n  }\n\n  const xImageVersion = getDatedContainerImageVersion(version) ?? 0;\n  const yImageVersion = getDatedContainerImageVersion(other) ?? 0;\n  if (xImageVersion > yImageVersion) {\n    return true;\n  }\n  if (xImageVersion < yImageVersion) {\n    return false;\n  }\n\n  const xSuffixVersion = getDatedContainerImageSuffix(version) ?? 0;\n  const ySuffixVersion = getDatedContainerImageSuffix(other) ?? 0;\n  if (xSuffixVersion > ySuffixVersion) {\n    return true;\n  }\n  if (xSuffixVersion < ySuffixVersion) {\n    return false;\n  }\n\n  const xPatch = getPatch(version) ?? 0;\n  const yPatch = getPatch(other) ?? 0;\n  return xPatch > yPatch;\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return versions.find((version) => equals(version, range)) ? range : null;\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return getSatisfyingVersion(versions, range);\n}\n\nfunction getNewValue({ currentValue, newVersion }: NewValueConfig): string {\n  if (di.isCodename(currentValue)) {\n    return di.getCodenameByVersion(newVersion);\n  }\n  return di.getVersionByCodename(newVersion);\n}\n\nfunction sortVersions(version: string, other: string): number {\n  if (equals(version, other)) {\n    return 0;\n  }\n  if (isGreaterThan(version, other)) {\n    return 1;\n  }\n  return -1;\n}\n\nfunction matches(version: string, range: string): boolean {\n  return equals(version, range);\n}\n\nexport const api: VersioningApi = {\n  isCompatible,\n  isSingleVersion,\n  isStable,\n  isValid,\n  isVersion,\n\n  getMajor,\n  getMinor,\n  getPatch,\n\n  equals,\n  isGreaterThan,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  getNewValue,\n  sortVersions,\n\n  matches,\n};\n\nexport default api;\n"]}