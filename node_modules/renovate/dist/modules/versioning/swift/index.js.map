{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/swift/index.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport stable from 'semver-stable';\nimport type { RangeStrategy } from '../../../types/versioning';\nimport { regEx } from '../../../util/regex';\nimport type { VersioningApi } from '../types';\nimport { getNewValue, toSemverRange } from './range';\n\nexport const id = 'swift';\nexport const displayName = 'Swift';\nexport const urls = ['https://swift.org/package-manager/'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nconst { is: isStable } = stable;\n\nconst {\n  compare: sortVersions,\n  maxSatisfying,\n  minSatisfying,\n  major: getMajor,\n  minor: getMinor,\n  patch: getPatch,\n  satisfies,\n  valid,\n  validRange,\n  ltr,\n  gt: isGreaterThan,\n  eq: equals,\n} = semver;\n\nexport const isValid = (input: string): boolean =>\n  !!valid(input) || !!validRange(toSemverRange(input));\n\nexport const isVersion = (input: string): boolean => !!valid(input);\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const normalizedVersions = versions.map((v) => v.replace(regEx(/^v/), ''));\n  const semverRange = toSemverRange(range);\n  return semverRange ? maxSatisfying(normalizedVersions, semverRange) : null;\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const normalizedVersions = versions.map((v) => v.replace(regEx(/^v/), ''));\n  const semverRange = toSemverRange(range);\n  return semverRange ? minSatisfying(normalizedVersions, semverRange) : null;\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  const semverRange = toSemverRange(range);\n  return semverRange ? ltr(version, semverRange) : false;\n}\n\nfunction matches(version: string, range: string): boolean {\n  // Check if both are an exact version\n  if (isVersion(range) && equals(version, range)) {\n    return true;\n  }\n  const semverRange = toSemverRange(range);\n  return semverRange ? satisfies(version, semverRange) : false;\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getNewValue,\n  getPatch,\n  isCompatible: isVersion,\n  isGreaterThan,\n  isLessThanRange,\n  isSingleVersion: isVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  sortVersions,\n};\n\nexport default api;\n"]}