{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/swift/range.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { regEx } from '../../../util/regex';\nimport type { NewValueConfig } from '../types';\n\nconst fromParam = regEx(/^\\s*from\\s*:\\s*\"([^\"]+)\"\\s*$/);\nconst fromRange = regEx(/^\\s*\"([^\"]+)\"\\s*\\.\\.\\.\\s*$/);\nconst binaryRange = regEx(/^\\s*\"([^\"]+)\"\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/);\nconst toRange = regEx(/^\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/);\nconst vPrefix = regEx(/^v([0-9]+)/);\n\nfunction toSemverRange(range: string): string | null {\n  const fromParamMatch = fromParam.exec(range);\n  if (fromParamMatch) {\n    const [, version] = fromParamMatch;\n    if (semver.valid(version)) {\n      const nextMajor = `${semver.major(version) + 1}.0.0`;\n      return `>=${version} <${nextMajor}`;\n    }\n    return null;\n  }\n\n  const fromRangeMatch = fromRange.exec(range);\n  if (fromRangeMatch) {\n    const [, version] = fromRangeMatch;\n    if (semver.valid(version)) {\n      return `>=${version}`;\n    }\n    return null;\n  }\n\n  const binaryRangeMatch = binaryRange.exec(range);\n  if (binaryRangeMatch) {\n    const [, currentVersion, op, newVersion] = binaryRangeMatch;\n    if (semver.valid(currentVersion) && semver.valid(newVersion)) {\n      return op === '..<'\n        ? `>=${currentVersion} <${newVersion}`\n        : `>=${currentVersion} <=${newVersion}`;\n    }\n    return null;\n  }\n\n  const toRangeMatch = toRange.exec(range);\n  if (toRangeMatch) {\n    const [, op, newVersion] = toRangeMatch;\n    if (semver.valid(newVersion)) {\n      return op === '..<' ? `<${newVersion}` : `<=${newVersion}`;\n    }\n  }\n  return null;\n}\n\nfunction getNewValue({ currentValue, newVersion }: NewValueConfig): string {\n  // Remove the v prefix if it exists\n  const cleanNewVersion = newVersion.replace(vPrefix, '$1');\n\n  if (fromParam.test(currentValue)) {\n    return currentValue.replace(regEx(/\".*?\"/), `\"${cleanNewVersion}\"`);\n  }\n\n  const fromRangeMatch = fromRange.exec(currentValue);\n  if (fromRangeMatch) {\n    const [, version] = fromRangeMatch;\n    return currentValue.replace(version, cleanNewVersion);\n  }\n\n  const binaryRangeMatch = binaryRange.exec(currentValue);\n  if (binaryRangeMatch) {\n    const [, , , version] = binaryRangeMatch;\n    return currentValue.replace(version, cleanNewVersion);\n  }\n\n  const toRangeMatch = toRange.exec(currentValue);\n  if (toRangeMatch) {\n    const [, , version] = toRangeMatch;\n    return currentValue.replace(version, cleanNewVersion);\n  }\n\n  return cleanNewVersion;\n}\n\nexport { toSemverRange, getNewValue };\n"]}