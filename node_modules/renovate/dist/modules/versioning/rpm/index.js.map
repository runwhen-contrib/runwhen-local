{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/rpm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport type { GenericVersion } from '../generic';\nimport { GenericVersioningApi } from '../generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'rpm';\nexport const displayName = 'RPM version';\nexport const urls = [\n  'https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/',\n  'https://fedoraproject.org/wiki/Package_Versioning_Examples',\n  'https://fedoraproject.org/wiki/User:Tibbs/TildeCaretVersioning',\n];\nexport const supportsRanges = false;\n\nconst alphaNumPattern = regEx(/([a-zA-Z]+)|(\\d+)|(~)/g);\nconst epochPattern = regEx(/^\\d+$/);\n\nexport interface RpmVersion extends GenericVersion {\n  /**\n   * epoch, defaults to 0 if not present, are used to leave version mistakes and previous\n   * versioning schemes behind.\n   */\n  epoch: number;\n  /**\n   * upstreamVersion is the main version part: it defines the version of origin software\n   * that was packaged.\n   */\n  upstreamVersion: string;\n  /**\n   * rpmRelease is used to distinguish between different versions of packaging for the\n   * same upstream version.\n   */\n  rpmRelease: string;\n\n  /**\n   * rpmPreRelease is used to distinguish versions of prerelease of the same upstream and release version\n   * Example: Python 3.12.0-1 > Python 3.12.0-1~a1\n   */\n  rpmPreRelease: string;\n\n  /**\n   * snapshot is an archive taken from upstream's source code control system which is not equivalent to any release version.\n   * This field must at minimum consist of the date in eight-digit \"YYYYMMDD\" format. The packager MAY\n   * include up to 17 characters of additional information after the date. The following formats are suggested:\n   * YYYYMMDD.<revision>\n   * YYYYMMDD<scm><revision>\n   */\n  snapshot: string;\n}\n\nclass RpmVersioningApi extends GenericVersioningApi {\n  /**\n   * https://github.com/rpm-software-management/rpm/blob/e3c11a790367016aed7ea48cfcc78751a71ce862/rpmio/rpmvercmp.c#L16\n   */\n  protected _parse(version: string): RpmVersion | null {\n    let remainingVersion = version;\n\n    let epoch = 0;\n    const epochIndex = remainingVersion.indexOf(':');\n    if (epochIndex !== -1) {\n      const epochStr = remainingVersion.slice(0, epochIndex);\n      if (epochPattern.test(epochStr)) {\n        epoch = parseInt(epochStr, 10);\n      } else {\n        return null;\n      }\n\n      remainingVersion = remainingVersion.slice(epochIndex + 1);\n    }\n\n    let upstreamVersion: string;\n    let rpmRelease = '';\n    let rpmPreRelease = '';\n    let snapshot = '';\n    const releaseIndex = remainingVersion.indexOf('-');\n    const prereleaseIndex = remainingVersion.indexOf('~');\n\n    // Note: There can be a snapshot if there is no prerelease. Snapshot always beat no snapshot,\n    // so if there is 3.12.0-1 vs 3.12.0-1^20231110, the snapshot wins.\n    // The logic below only creates snapshot IF there is a prerleease version. This logic is NOT\n    // correct, but the result is still correct due to the caret being ignored in release, and\n    // release continue comparing\n    //\n    // Note: If there IS a tilde preceding the caret, then snapshot DOES NOT win\n    // Example: 3.12.0-1~^20231001 LOSES to 3.12.0-1 and\n    // 3.12.0-1~^20231001 LOSES to 3.12.0-1^20231001\n    const snapshotIndex = remainingVersion.indexOf('^');\n\n    if (releaseIndex >= 0) {\n      upstreamVersion = remainingVersion.slice(0, releaseIndex);\n\n      // Do NOT splice out prerelease, we need to distinguish if the flag is set or not, regardless if there is a version.\n      // The tilde will get filtered out during regex\n      if (prereleaseIndex >= 0) {\n        rpmRelease = remainingVersion.slice(releaseIndex, prereleaseIndex);\n        if (snapshotIndex >= 0) {\n          rpmPreRelease = remainingVersion.slice(\n            prereleaseIndex,\n            snapshotIndex,\n          );\n          snapshot = remainingVersion.slice(snapshotIndex + 1);\n        } else {\n          rpmPreRelease = remainingVersion.slice(prereleaseIndex);\n        }\n      } else {\n        rpmRelease = remainingVersion.slice(releaseIndex + 1);\n      }\n    } else {\n      upstreamVersion = remainingVersion;\n    }\n\n    const release = [...remainingVersion.matchAll(regEx(/\\d+/g))].map((m) =>\n      parseInt(m[0], 10),\n    );\n\n    return {\n      epoch,\n      upstreamVersion,\n      rpmRelease,\n      release,\n      rpmPreRelease,\n      snapshot,\n    };\n  }\n\n  protected _compare_string(s1: string, s2: string): number {\n    if (s1 === s2) {\n      return 0;\n    }\n\n    const minLength = Math.min(s1.length, s2.length);\n\n    for (let i = 0; i < minLength; i++) {\n      const c1 = s1[i];\n      const c2 = s2[i];\n\n      if (c1 === c2) {\n        continue;\n      }\n\n      if (c1 > c2) {\n        return 1;\n      } else if (c1 < c2) {\n        return -1;\n      }\n    }\n\n    // Okay, they've been the exact same up until now, so return the longer one\n    return s1.length > s2.length ? 1 : -1;\n  }\n\n  /**\n   * Taken from https://github.com/rpm-software-management/rpm/blob/master/rpmio/rpmvercmp.c\n   */\n  protected _compare_glob(v1: string, v2: string): number {\n    if (v1 === v2) {\n      return 0;\n    }\n\n    const matchesv1 = v1.match(alphaNumPattern) ?? [];\n    const matchesv2 = v2.match(alphaNumPattern) ?? [];\n    const matches = Math.min(matchesv1.length, matchesv2.length);\n\n    for (let i = 0; i < matches; i++) {\n      const matchv1 = matchesv1[i];\n      const matchv2 = matchesv2[i];\n\n      // compare tildes\n      if (matchv1?.startsWith('~') || matchv2?.startsWith('~')) {\n        if (!matchv1?.startsWith('~')) {\n          return 1;\n        }\n\n        if (!matchv2?.startsWith('~')) {\n          return -1;\n        }\n      }\n\n      if (is.numericString(matchv1?.[0])) {\n        // numbers are greater than letters\n        if (!is.numericString(matchv2?.[0])) {\n          return 1;\n        }\n\n        //We clearly have a number here, so return which is greater\n        const result = matchv1.localeCompare(matchv2, undefined, {\n          numeric: true,\n        });\n\n        if (result === 0) {\n          continue;\n        }\n\n        return Math.sign(result);\n      } else if (is.numericString(matchv2?.[0])) {\n        return -1;\n      }\n\n      // We have two string globs, compare them\n      const compared_value = this._compare_string(matchv1, matchv2);\n      if (compared_value !== 0) {\n        return compared_value;\n      }\n    }\n\n    // segments were all the same, but separators were different\n    if (matchesv1.length === matchesv2.length) {\n      return 0;\n    }\n\n    // If there is a tilde in a segment past the minimum number of segments, find it\n    if (matchesv1.length > matches && matchesv1[matches].startsWith('~')) {\n      return -1;\n    }\n\n    if (matchesv2.length > matches && matchesv2[matches].startsWith('~')) {\n      return 1;\n    }\n\n    // whichever has the most segments wins\n    return matchesv1.length > matchesv2.length ? 1 : -1;\n  }\n\n  protected override _compare(version: string, other: string): number {\n    const parsed1 = this._parse(version);\n    const parsed2 = this._parse(other);\n\n    if (!(parsed1 && parsed2)) {\n      return 1;\n    }\n\n    // Greater epoch wins\n    if (parsed1.epoch !== parsed2.epoch) {\n      return Math.sign(parsed1.epoch - parsed2.epoch);\n    }\n\n    // Greater upstream version wins\n    const upstreamVersionDifference = this._compare_glob(\n      parsed1.upstreamVersion,\n      parsed2.upstreamVersion,\n    );\n\n    if (upstreamVersionDifference !== 0) {\n      return upstreamVersionDifference;\n    }\n\n    // Greater release version wins\n    const releaseVersionDifference = this._compare_glob(\n      parsed1.rpmRelease,\n      parsed2.rpmRelease,\n    );\n\n    if (releaseVersionDifference !== 0) {\n      return releaseVersionDifference;\n    }\n\n    // No Prerelease wins\n    if (parsed1.rpmPreRelease === '' && parsed2.rpmPreRelease !== '') {\n      return 1;\n    } else if (parsed1.rpmPreRelease !== '' && parsed2.rpmPreRelease === '') {\n      return -1;\n    }\n\n    const preReleaseDifference = this._compare_glob(\n      parsed1.rpmPreRelease,\n      parsed2.rpmPreRelease,\n    );\n\n    if (preReleaseDifference !== 0) {\n      return releaseVersionDifference;\n    }\n\n    // Greater Snapshot wins\n    return this._compare_glob(parsed1.snapshot, parsed2.snapshot);\n  }\n}\n\nexport const api: VersioningApi = new RpmVersioningApi();\n\nexport default api;\n"]}