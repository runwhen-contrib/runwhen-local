{"version":3,"file":"pattern.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/rez/pattern.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,gDAAgD;AAChD,0BAA0B;AAC1B,4CAA4C;AAC5C,2CAA2C;AAC3C,UAAU;AACV,wDAAwD;AACxD,gCAAgC;AAChC,2CAA2C;AAC3C,0DAA0D;AAC1D,eAAe;AACf,UAAU;AACV,wDAAwD;AACxD,kCAAkC;AAClC,8DAA8D;AAC9D,6CAA6C;AAC7C,8DAA8D;AAC9D,eAAe;AACf,UAAU;AACV,6CAA6C;AAC7C,8BAA8B;AAC9B,qEAAqE;AACrE,oDAAoD;AACpD,+EAA+E;AAC/E,eAAe;AACf,UAAU;AACV,+CAA+C;AAC/C,8BAA8B;AAC9B,wFAAwF;AACxF,oDAAoD;AACpD,eAAe;AACf,UAAU;AACV,gEAAgE;AAChE,4BAA4B;AAC5B,qCAAqC;AACrC,kFAAkF;AAClF,iEAAiE;AACjE,6FAA6F;AAC7F,qCAAqC;AACrC,qFAAqF;AACrF,iHAAiH;AACjH,iEAAiE;AACjE,iBAAiB;AACjB,eAAe;AACf,UAAU;AACV,mEAAmE;AACnE,6BAA6B;AAC7B,sCAAsC;AACtC,mFAAmF;AACnF,kEAAkE;AAClE,8FAA8F;AAC9F,sCAAsC;AACtC,qIAAqI;AACrI,wHAAwH;AACxH,kEAAkE;AAClE,iBAAiB;AACjB,eAAe;AACf,wCAAwC;AACxC,+CAA+C;AAC/C,kCAAkC;AAClC,8BAA8B;;;AAE9B,+CAA4C;AAE5C,iCAAiC;AACpB,QAAA,YAAY,GAAG,uCAAuC,CAAC;AACvD,QAAA,YAAY,GAAG,IAAA,aAAK,EAC/B,eAAe,oBAAY,IAAI,CAChC,CAAC,CAAC,yCAAyC;AAC/B,QAAA,YAAY,GAAG,IAAA,aAAK,EAC/B,8CAA8C,oBAAY,MAAM,CACjE,CAAC,CAAC,kDAAkD;AACrD,kEAAkE;AAClE,wEAAwE;AAC3D,QAAA,cAAc,GAAG,IAAA,aAAK,EACjC,kDAAkD,oBAAY,sCAAsC,oBAAY,MAAM,CACvH,CAAC,CAAC,kDAAkD;AACrD,6CAA6C;AAChC,QAAA,UAAU,GAAG,IAAI,MAAM,CAAE,kCAAkC;AACtE,gEAAgE,oBAAY,oCAAoC,CACjH,CAAC,CAAC,uCAAuC;AAC7B,QAAA,UAAU,GAAG,IAAI,MAAM,CAAE,yBAAyB;AAC7D,6CAA6C,oBAAY,0BAA0B,oBAAY,MAAM,CACtG,CAAC,CAAC,yCAAyC;AAC5C,2DAA2D;AAC9C,QAAA,cAAc,GAAG,IAAI,MAAM,CAAE,mCAAmC;AAC3E,+FAA+F,oBAAY,4HAA4H,oBAAY,mCAAmC,oBAAY,OAAO,CAC1S,CAAC,CAAC,0DAA0D;AAC7D,0DAA0D;AAC7C,QAAA,eAAe,GAAG,IAAI,MAAM,CAAE,mCAAmC;AAC5E,mGAAmG,oBAAY,8HAA8H,oBAAY,qCAAqC,oBAAY,OAAO,CAClT,CAAC,CAAC,6DAA6D","sourcesContent":["// Regular Expressions have been copied from, some more work were necessary to make it work:\n// original rez regex written in python (#11634)\n// version_range_regex = (\n//     # Match a version number (e.g. 1.0.0)\n//     r\"   ^(?P<version>{version_group})$\"\n//     \"|\"\n//     # Or match an exact version number (e.g. ==1.0.0)\n//     \"    ^(?P<exact_version>\"\n//     \"        ==\"  # Required == operator\n//     \"        (?P<exact_version_group>{version_group})?\"\n//     \"    )$\"\n//     \"|\"\n//     # Or match an inclusive bound (e.g. 1.0.0..2.0.0)\n//     \"    ^(?P<inclusive_bound>\"\n//     \"        (?P<inclusive_lower_version>{version_group})?\"\n//     \"        \\.\\.\"  # Required .. operator\n//     \"        (?P<inclusive_upper_version>{version_group})?\"\n//     \"    )$\"\n//     \"|\"\n//     # Or match a lower bound (e.g. 1.0.0+)\n//     \"    ^(?P<lower_bound>\"\n//     \"        (?P<lower_bound_prefix>>|>=)?\"  # Bound is exclusive?\n//     \"        (?P<lower_version>{version_group})?\"\n//     \"        (?(lower_bound_prefix)|\\+)\"  # + only if bound is not exclusive\n//     \"    )$\"\n//     \"|\"\n//     # Or match an upper bound (e.g. <=1.0.0)\n//     \"    ^(?P<upper_bound>\"\n//     \"        (?P<upper_bound_prefix><(?={version_group})|<=)?\"  # Bound is exclusive?\n//     \"        (?P<upper_version>{version_group})?\"\n//     \"    )$\"\n//     \"|\"\n//     # Or match a range in ascending order (e.g. 1.0.0+<2.0.0)\n//     \"    ^(?P<range_asc>\"\n//     \"        (?P<range_lower_asc>\"\n//     \"           (?P<range_lower_asc_prefix>>|>=)?\"  # Lower bound is exclusive?\n//     \"           (?P<range_lower_asc_version>{version_group})?\"\n//     \"           (?(range_lower_asc_prefix)|\\+)?\"  # + only if lower bound is not exclusive\n//     \"       )(?P<range_upper_asc>\"\n//     \"           (?(range_lower_asc_version),?|)\"  # , only if lower bound is found\n//     \"           (?P<range_upper_asc_prefix><(?={version_group})|<=)\"  # <= only if followed by a version group\n//     \"           (?P<range_upper_asc_version>{version_group})?\"\n//     \"       )\"\n//     \"    )$\"\n//     \"|\"\n//     # Or match a range in descending order (e.g. <=2.0.0,1.0.0+)\n//     \"    ^(?P<range_desc>\"\n//     \"        (?P<range_upper_desc>\"\n//     \"           (?P<range_upper_desc_prefix><|<=)?\"  # Upper bound is exclusive?\n//     \"           (?P<range_upper_desc_version>{version_group})?\"\n//     \"           (?(range_upper_desc_prefix)|\\+)?\"  # + only if upper bound is not exclusive\n//     \"       )(?P<range_lower_desc>\"\n//     \"           (?(range_upper_desc_version),|)\"  # Comma is not optional because we don't want to recognize something like \"<4>3\"\n//     \"           (?P<range_lower_desc_prefix><(?={version_group})|>=?)\"  # >= or > only if followed by a version group\n//     \"           (?P<range_lower_desc_version>{version_group})?\"\n//     \"       )\"\n//     \"    )$\"\n// ).format(version_group=version_group)\n// - Replace {version_group} -> ${versionGroup}\n// - Replace (?P<...>) -> (?<...>)\n// - Replace ?(...) -> \\k<...>\n\nimport { regEx } from '../../../util/regex';\n\n// - Replace single \\ -> double \\\nexport const versionGroup = '([0-9a-zA-Z_]+(?:[.-][0-9a-zA-Z_]+)*)';\nexport const matchVersion = regEx(\n  `^(?<version>${versionGroup})$`,\n); /* Match a version number (e.g. 1.0.0) */\nexport const exactVersion = regEx(\n  `^(?<exact_version>==(?<exact_version_group>${versionGroup})?)$`,\n); /* Match an exact version number (e.g. ==1.0.0) */\n// inclusiveBound is called inclusive but behavior in rez is this:\n// package-1..3 will match versions 1.2.3, 2.3.4, but not 3.0.0 or above\nexport const inclusiveBound = regEx(\n  `^(?<inclusive_bound>(?<inclusive_lower_version>${versionGroup})?\\\\.\\\\.(?<inclusive_upper_version>${versionGroup})?)$`,\n); /* Match an inclusive bound (e.g. 1.0.0..2.0.0) */\n// Add ? after |\\\\+) in order to match >=1.15\nexport const lowerBound = new RegExp( // TODO #12872 named backreference\n  `^(?<lower_bound>(?<lower_bound_prefix>>|>=)?(?<lower_version>${versionGroup})?(\\\\k<lower_bound_prefix>|\\\\+)?)$`,\n); /* Match a lower bound (e.g. 1.0.0+) */\nexport const upperBound = new RegExp( // TODO #12872  lookahead\n  `^(?<upper_bound>(?<upper_bound_prefix><(?=${versionGroup})|<=)?(?<upper_version>${versionGroup})?)$`,\n); /* Match an upper bound (e.g. <=1.0.0) */\n// Add ,? to match >=7,<9 (otherwise it just matches >=7<9)\nexport const ascendingRange = new RegExp( // TODO #12872  named backreference\n  `^(?<range_asc>(?<range_lower_asc>(?<range_lower_asc_prefix>>|>=)?(?<range_lower_asc_version>${versionGroup})?(\\\\k<range_lower_asc_prefix>|\\\\+)?),?(?<range_upper_asc>(\\\\k<range_lower_asc_version>,?|)(?<range_upper_asc_prefix><(?=${versionGroup})|<=)(?<range_upper_asc_version>${versionGroup})?))$`,\n); /* Match a range in ascending order (e.g. 1.0.0+<2.0.0) */\n// Add , to match <9,>=7 (otherwise it just matches <9>=7)\nexport const descendingRange = new RegExp( // TODO #12872  named backreference\n  `^(?<range_desc>(?<range_upper_desc>(?<range_upper_desc_prefix><|<=)?(?<range_upper_desc_version>${versionGroup})?(\\\\k<range_upper_desc_prefix>|\\\\+)?),(?<range_lower_desc>(\\\\k<range_upper_desc_version>,|)(?<range_lower_desc_prefix><(?=${versionGroup})|>=?)(?<range_lower_desc_version>${versionGroup})?))$`,\n); /* Match a range in descending order (e.g. <=2.0.0,1.0.0+) */\n"]}