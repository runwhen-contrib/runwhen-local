{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/rez/transform.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport {\n  ascendingRange,\n  descendingRange,\n  exactVersion,\n  inclusiveBound,\n  lowerBound,\n  matchVersion,\n  upperBound,\n} from './pattern';\n\nfunction getVersionParts(input: string): [string, string] {\n  const versionParts = input.split('-');\n  if (versionParts.length === 1) {\n    return [input, ''];\n  }\n\n  return [versionParts[0], '-' + versionParts[1]];\n}\n\nexport function padZeroes(input: string): string {\n  if (regEx(/[~^*]/).test(input)) {\n    // ignore ranges\n    return input;\n  }\n\n  const [output, stability] = getVersionParts(input);\n\n  const sections = output.split('.');\n  while (sections.length < 3) {\n    sections.push('0');\n  }\n  return sections.join('.') + stability;\n}\n\nfunction plus2npm(input: string): string {\n  if (input.includes('+')) {\n    return '>=' + input.replace('+', ' ');\n  }\n  return input;\n}\n\nexport function rez2npm(input: string): string {\n  if (matchVersion.test(input)) {\n    return input;\n  }\n  if (exactVersion.test(input)) {\n    return input.replace('==', '=');\n  }\n  if (inclusiveBound.test(input)) {\n    return '>=' + input.replace(regEx(/\\.\\./g), ' <');\n  }\n  if (lowerBound.test(input)) {\n    return plus2npm(input);\n  }\n  if (upperBound.test(input)) {\n    return input;\n  }\n  const matchAscRange = ascendingRange.exec(input);\n  if (matchAscRange?.groups) {\n    const lowerBoundAsc = matchAscRange.groups.range_lower_asc;\n    const upperBoundAsc = matchAscRange.groups.range_upper_asc;\n    return plus2npm(lowerBoundAsc) + ' ' + plus2npm(upperBoundAsc);\n  }\n  const matchDscRange = descendingRange.exec(input);\n  if (matchDscRange?.groups) {\n    const upperBoundDesc = matchDscRange.groups.range_upper_desc;\n    const lowerBoundDesc = matchDscRange.groups.range_lower_desc;\n    return plus2npm(lowerBoundDesc) + ' ' + plus2npm(upperBoundDesc);\n  }\n  return input;\n}\n\nexport function rez2pep440(input: string): string {\n  if (matchVersion.test(input)) {\n    return input;\n  }\n  if (exactVersion.test(input)) {\n    return input;\n  }\n  if (inclusiveBound.test(input)) {\n    return '>=' + input.replace(regEx(/\\.\\./g), ', <');\n  }\n  if (lowerBound.test(input)) {\n    return plus2npm(input);\n  }\n  if (upperBound.test(input)) {\n    return input;\n  }\n  const matchAscRange = ascendingRange.exec(input);\n  if (matchAscRange?.groups) {\n    const lowerBoundAsc = matchAscRange.groups.range_lower_asc;\n    const upperBoundAsc = matchAscRange.groups.range_upper_asc;\n    return plus2npm(lowerBoundAsc) + ', ' + plus2npm(upperBoundAsc);\n  }\n  const matchDscRange = descendingRange.exec(input);\n  if (matchDscRange?.groups) {\n    const upperBoundDesc = matchDscRange.groups.range_upper_desc;\n    const lowerBoundDesc = matchDscRange.groups.range_lower_desc;\n    return plus2npm(lowerBoundDesc) + ', ' + plus2npm(upperBoundDesc);\n  }\n  return input;\n}\n\nexport function pep4402rezInclusiveBound(input: string): string {\n  return input\n    .split(',')\n    .map((v) => v.trim().replace(regEx(/[<>=]/g), ''))\n    .join('..');\n}\n\nexport function npm2rezplus(input: string): string {\n  return input.trim().replace('>=', '') + '+';\n}\n"]}