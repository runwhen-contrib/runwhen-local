{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/rez/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RangeStrategy } from '../../../types/versioning';\nimport { regEx } from '../../../util/regex';\nimport { coerceString } from '../../../util/string';\nimport { api as npm } from '../npm';\nimport { api as pep440 } from '../pep440';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nimport {\n  ascendingRange,\n  descendingRange,\n  exactVersion,\n  inclusiveBound,\n  lowerBound,\n  upperBound,\n  versionGroup,\n} from './pattern';\nimport {\n  npm2rezplus,\n  padZeroes,\n  pep4402rezInclusiveBound,\n  rez2npm,\n  rez2pep440,\n} from './transform';\n\nexport const id = 'rez';\nexport const displayName = 'rez';\nexport const urls = ['https://github.com/nerdvegas/rez'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nfunction equals(a: string, b: string): boolean {\n  try {\n    return npm.equals(padZeroes(a), padZeroes(b));\n  } catch /* istanbul ignore next */ {\n    return pep440.equals(a, b);\n  }\n}\n\nfunction getMajor(version: string): number | null {\n  try {\n    return npm.getMajor(padZeroes(version));\n  } catch /* istanbul ignore next */ {\n    return pep440.getMajor(version);\n  }\n}\n\nfunction getMinor(version: string): number | null {\n  try {\n    return npm.getMinor(padZeroes(version));\n  } catch /* istanbul ignore next */ {\n    return pep440.getMinor(version);\n  }\n}\n\nfunction getPatch(version: string): number | null {\n  try {\n    return npm.getPatch(padZeroes(version));\n  } catch /* istanbul ignore next */ {\n    return pep440.getPatch(version);\n  }\n}\n\nfunction isGreaterThan(a: string, b: string): boolean {\n  try {\n    return npm.isGreaterThan(padZeroes(a), padZeroes(b));\n  } catch /* istanbul ignore next */ {\n    return pep440.isGreaterThan(a, b);\n  }\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  return (\n    npm.isVersion(padZeroes(version)) &&\n    !!npm.isLessThanRange?.(padZeroes(version), rez2npm(range))\n  );\n}\n\nexport function isValid(input: string): boolean {\n  return npm.isValid(rez2npm(input));\n}\n\nfunction isStable(version: string): boolean {\n  return npm.isStable(padZeroes(version));\n}\n\nfunction isVersion(input: string): boolean {\n  return npm.isVersion(padZeroes(rez2npm(input)));\n}\n\nfunction matches(version: string, range: string): boolean {\n  return (\n    npm.isVersion(padZeroes(version)) &&\n    npm.matches(padZeroes(version), rez2npm(range))\n  );\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return npm.getSatisfyingVersion(versions, rez2npm(range));\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return npm.minSatisfyingVersion(versions, rez2npm(range));\n}\n\nfunction isSingleVersion(constraint: string): boolean {\n  return (\n    (constraint.trim().startsWith('==') &&\n      isVersion(constraint.trim().substring(2).trim())) ||\n    isVersion(constraint.trim())\n  );\n}\n\nfunction sortVersions(a: string, b: string): number {\n  return npm.sortVersions(padZeroes(a), padZeroes(b));\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string | null {\n  const pep440Value = pep440.getNewValue({\n    currentValue: rez2pep440(currentValue),\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n  });\n  if (exactVersion.test(currentValue)) {\n    return pep440Value;\n  }\n  if (pep440Value && inclusiveBound.test(currentValue)) {\n    return pep4402rezInclusiveBound(pep440Value);\n  }\n  if (pep440Value && lowerBound.test(currentValue)) {\n    if (currentValue.includes('+')) {\n      return npm2rezplus(pep440Value);\n    }\n    return pep440Value;\n  }\n  if (pep440Value && upperBound.test(currentValue)) {\n    return pep440Value;\n  }\n  const matchAscRange = ascendingRange.exec(currentValue);\n  if (pep440Value && matchAscRange?.groups) {\n    // Replace version numbers but keep rez format, otherwise we just end up trying\n    // to convert every single case separately.\n    const lowerBoundAscCurrent = matchAscRange.groups.range_lower_asc;\n    const upperBoundAscCurrent = matchAscRange.groups.range_upper_asc;\n    const lowerAscVersionCurrent = matchAscRange.groups.range_lower_asc_version;\n    const upperAscVersionCurrent = matchAscRange.groups.range_upper_asc_version;\n    const [lowerBoundAscPep440, upperBoundAscPep440] = pep440Value.split(', ');\n    const lowerAscVersionNew = coerceString(\n      regEx(versionGroup).exec(lowerBoundAscPep440)?.[0],\n    );\n    const upperAscVersionNew = coerceString(\n      regEx(versionGroup).exec(upperBoundAscPep440)?.[0],\n    );\n    const lowerBoundAscNew = lowerBoundAscCurrent.replace(\n      lowerAscVersionCurrent,\n      lowerAscVersionNew,\n    );\n    const upperBoundAscNew = upperBoundAscCurrent.replace(\n      upperAscVersionCurrent,\n      upperAscVersionNew,\n    );\n    const separator = currentValue.includes(',') ? ',' : '';\n\n    return lowerBoundAscNew + separator + upperBoundAscNew;\n  }\n  const matchDscRange = descendingRange.exec(currentValue);\n  if (pep440Value && matchDscRange?.groups) {\n    // Replace version numbers but keep rez format, otherwise we just end up trying\n    // to convert every single case separately.\n    const upperBoundDescCurrent = matchDscRange.groups.range_upper_desc;\n    const lowerBoundDescCurrent = matchDscRange.groups.range_lower_desc;\n    const upperDescVersionCurrent =\n      matchDscRange.groups.range_upper_desc_version;\n    const lowerDescVersionCurrent =\n      matchDscRange.groups.range_lower_desc_version;\n    const [lowerBoundDescPep440, upperBoundDescPep440] =\n      pep440Value.split(', ');\n\n    const upperDescVersionNew = coerceString(\n      regEx(versionGroup).exec(upperBoundDescPep440)?.[0],\n    );\n    const lowerDescVersionNew = coerceString(\n      regEx(versionGroup).exec(lowerBoundDescPep440)?.[0],\n    );\n    const upperBoundDescNew = upperBoundDescCurrent.replace(\n      upperDescVersionCurrent,\n      upperDescVersionNew,\n    );\n    const lowerBoundDescNew = lowerBoundDescCurrent.replace(\n      lowerDescVersionCurrent,\n      lowerDescVersionNew,\n    );\n    // Descending ranges are only supported with a comma.\n    const separator = ',';\n\n    return upperBoundDescNew + separator + lowerBoundDescNew;\n  }\n  return null;\n}\n\nfunction isCompatible(version: string): boolean {\n  return isVersion(version);\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getPatch,\n  getNewValue,\n  getSatisfyingVersion,\n  isCompatible,\n  isGreaterThan,\n  isLessThanRange,\n  isSingleVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  minSatisfyingVersion,\n  sortVersions,\n};\nexport default api;\n"]}