{"version":3,"file":"distro.js","sourceRoot":"","sources":["../../../lib/modules/versioning/distro.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport type { DataFile } from '../../data-files.generated';\nimport dataFiles from '../../data-files.generated';\n\nexport interface DistroSchedule {\n  codename: string;\n  series: string;\n  created: string;\n  release: string;\n  eol: string;\n  eol_server?: string;\n  eol_esm?: string;\n  eol_lts?: string;\n  eol_elts?: string;\n}\n\nexport type DistroDataFile =\n  | 'data/ubuntu-distro-info.json'\n  | 'data/debian-distro-info.json';\n\nexport type DistroInfoRecord = Record<string, DistroSchedule>;\n\nexport type DistroInfoRecordWithVersion = { version: string } & DistroSchedule;\n\n// Days to delay new releases\nconst delay = 1;\n\nexport class DistroInfo {\n  private readonly _codenameToVersion = new Map<\n    string,\n    DistroInfoRecordWithVersion\n  >();\n\n  private readonly _sortedInfo: DistroInfoRecordWithVersion[] = [];\n\n  private readonly _distroInfo: DistroInfoRecord;\n\n  constructor(distroJsonKey: DistroDataFile) {\n    this._distroInfo = JSON.parse(\n      dataFiles.get(distroJsonKey as DataFile)!.replace(/v([\\d.]+)\\b/gm, '$1'),\n    );\n\n    for (const version of Object.keys(this._distroInfo)) {\n      const schedule = this._distroInfo[version];\n      this._codenameToVersion.set(schedule.series, { version, ...schedule });\n    }\n\n    const arr = Object.keys(this._distroInfo).sort(\n      (a, b) => parseFloat(a) - parseFloat(b),\n    );\n\n    for (const v of arr) {\n      const obj = { version: v, ...this._distroInfo[v.toString()] };\n      if (!obj.release) {\n        // istanbul ignore next\n        continue;\n      }\n      this._sortedInfo.push(obj);\n    }\n  }\n\n  /**\n   * Check if input is a valid release codename\n   * @param input A codename\n   * @returns true if input is a codename, false otherwise\n   */\n  public isCodename(input: string): boolean {\n    return this._codenameToVersion.has(input);\n  }\n\n  /**\n   * Checks if given input string is a valid release version\n   * @param input A codename/semVer\n   * @returns true if release exists, false otherwise\n   */\n  public exists(input: string): boolean {\n    const ver = this.getVersionByCodename(input);\n    return !!this._distroInfo[ver];\n  }\n\n  /**\n   * Get semVer representation of a given codename\n   * @param input A codename\n   * @returns A semVer if exists, otherwise input string is returned\n   */\n  public getVersionByCodename(input: string): string {\n    const schedule = this._codenameToVersion.get(input);\n    if (schedule) {\n      return schedule.version;\n    }\n    return input;\n  }\n\n  /**\n   * Get codename representation of a given semVer\n   * @param input A semVer\n   * @returns A codename if exists, otherwise input string is returned\n   */\n  public getCodenameByVersion(input: string): string {\n    const di = this._distroInfo[input];\n    if (di) {\n      return di.series;\n    }\n    // istanbul ignore next\n    return input;\n  }\n\n  /**\n   * Get schedule of a given release\n   * @param input A codename/semVer\n   * @returns A schedule if available, otherwise undefined\n   */\n  public getSchedule(input: string): DistroSchedule | null {\n    const ver = this.getVersionByCodename(input);\n    return this._distroInfo[ver] ?? null;\n  }\n\n  /**\n   * Check if a given release has passed its EOL\n   * @param input A codename/semVer\n   * @returns false if still supported, true otherwise\n   */\n  public isEolLts(input: string): boolean {\n    const ver = this.getVersionByCodename(input);\n    const schedule = this.getSchedule(ver);\n    const endLts = schedule?.eol ?? null;\n    let end = schedule?.eol_lts ?? null;\n\n    // ubuntu: does not have eol_lts\n    // debian: only \"Stable\" has no eol_lts, old and oldold has both\n    end ??= endLts;\n\n    if (end) {\n      const now = DateTime.now().toUTC();\n      const eol = DateTime.fromISO(end, { zone: 'utc' });\n      return eol < now;\n    }\n\n    // istanbul ignore next\n    return true;\n  }\n\n  /**\n   * Check if a given version has been released\n   * @param input A codename/semVer\n   * @returns false if unreleased or has no schedule, true otherwise\n   */\n  public isReleased(input: string): boolean {\n    const ver = this.getVersionByCodename(input);\n    const schedule = this.getSchedule(ver);\n\n    if (!schedule) {\n      return false;\n    }\n\n    const now = DateTime.now().minus({ day: delay }).toUTC();\n    const release = DateTime.fromISO(schedule.release, { zone: 'utc' });\n\n    return release < now;\n  }\n\n  /**\n   * Get distro info for the release that has N other newer releases.\n   * Example: n=0 corresponds to the latest available release, n=1 the release before, etc.\n   * In Debian terms: N = 0 -> stable, N = 1 -> oldstable, N = 2 -> oldoldstalbe\n   * @param n\n   * @returns Distro info of the Nth latest release\n   */\n  public getNLatest(n: number): DistroInfoRecordWithVersion | null {\n    const len = this._sortedInfo.length - 1;\n    let idx = -1;\n\n    if (n < 0) {\n      return null;\n    }\n\n    for (let i = len; i >= 0; i--) {\n      if (this.isReleased(this._sortedInfo[i].version)) {\n        // 'i' holds the latest released version index\n        // compensate for the requested 'n'\n        idx = i - Math.floor(n);\n        break;\n      }\n    }\n\n    if (idx > len || idx < 0) {\n      return null;\n    }\n\n    return this._sortedInfo[idx];\n  }\n}\n"]}