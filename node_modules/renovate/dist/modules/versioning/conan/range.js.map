{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/conan/range.ts"],"names":[],"mappings":"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","sourcesContent":["import * as semver from 'semver';\nimport type { SemVer } from 'semver-utils';\nimport { parseRange } from 'semver-utils';\nimport { logger } from '../../../logger';\nimport { coerceString } from '../../../util/string';\nimport type { NewValueConfig } from '../types';\nimport {\n  cleanVersion,\n  containsOperators,\n  getOptions,\n  makeVersion,\n  matchesWithOptions,\n} from './common';\n\n// always include prereleases\nexport function getMajor(version: string): null | number {\n  const cleanedVersion = cleanVersion(version);\n  const options = getOptions(version);\n  options.includePrerelease = true;\n  const cleanerVersion = makeVersion(cleanedVersion, options);\n  if (typeof cleanerVersion === 'string') {\n    return Number(cleanerVersion.split('.')[0]);\n  }\n  return null;\n}\n\n// always include prereleases\nexport function getMinor(version: string): null | number {\n  const cleanedVersion = cleanVersion(version);\n  const options = getOptions(version);\n  options.includePrerelease = true;\n  const cleanerVersion = makeVersion(cleanedVersion, options);\n  if (typeof cleanerVersion === 'string') {\n    return Number(cleanerVersion.split('.')[1]);\n  }\n  return null;\n}\n\n// always include prereleases\nexport function getPatch(version: string): null | number {\n  const cleanedVersion = cleanVersion(version);\n  const options = getOptions(version);\n  options.includePrerelease = true;\n  const cleanerVersion = makeVersion(cleanedVersion, options);\n\n  if (typeof cleanerVersion === 'string') {\n    const newVersion = semver.valid(\n      semver.coerce(cleanedVersion, {\n        loose: false,\n      }),\n      options,\n    );\n    return Number(newVersion?.split('.')[2]);\n  }\n  return null;\n}\n\nexport function fixParsedRange(range: string): any {\n  const ordValues = [];\n\n  // don't bump or'd single version values\n  const originalSplit = range.split(' ');\n  for (let i = 0; i < originalSplit.length; i += 1) {\n    if (\n      !containsOperators(originalSplit[i]) &&\n      !originalSplit[i].includes('||')\n    ) {\n      if (i !== 0 && originalSplit[i - 1].includes('||')) {\n        ordValues.push(`|| ${originalSplit[i]}`);\n      } else if (i !== originalSplit.length && originalSplit[i + 1] === '||') {\n        ordValues.push(`${originalSplit[i]} ||`);\n      }\n    } else {\n      ordValues.push(originalSplit[i]);\n    }\n  }\n\n  const parsedRange = parseRange(range);\n  const cleanRange = range.replace(/([<=>^~])( )?/g, '');\n  const splitRange = cleanRange.split(' ');\n  const semverRange: SemVer[] = [];\n\n  for (let i = 0; i < splitRange.length; i += 1) {\n    if (!splitRange[i].includes('||')) {\n      const splitVersion = splitRange[i].split('.');\n      const major = splitVersion[0];\n      const minor = splitVersion[1];\n      const patch = splitVersion[2];\n      const operator = ordValues[i].includes('||')\n        ? '||'\n        : parsedRange[i].operator;\n      const NewSemVer: SemVer = {\n        major,\n      };\n\n      let full = `${coerceString(operator)}${major}`;\n      if (minor) {\n        NewSemVer.minor = minor;\n        full = `${full}.${minor}`;\n        if (patch) {\n          NewSemVer.patch = patch;\n          full = `${full}.${patch}`;\n        }\n      }\n      if (operator) {\n        NewSemVer.operator = operator;\n        full = range.includes(`${operator} `)\n          ? `${operator} ${full.replace(operator, '')}`\n          : `${operator}${full.replace(operator, '')}`;\n      }\n\n      full = ordValues[i].includes('||') ? ordValues[i] : full;\n\n      NewSemVer.semver = full;\n\n      semverRange.push(NewSemVer);\n    }\n  }\n  return semverRange;\n}\n\nexport function replaceRange({\n  currentValue,\n  newVersion,\n}: NewValueConfig): string {\n  const parsedRange = parseRange(currentValue);\n  const element = parsedRange[parsedRange.length - 1];\n  const toVersionMajor = getMajor(newVersion);\n  const toVersionMinor = getMinor(newVersion);\n  const toVersionPatch = getPatch(newVersion);\n  const suffix = semver.prerelease(newVersion)\n    ? '-' + String(semver.prerelease(newVersion)?.[0])\n    : '';\n\n  if (element.operator === '~>') {\n    return `~> ${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '=') {\n    return `=${newVersion}`;\n  }\n  if (element.operator === '~') {\n    if (suffix.length) {\n      return `~${toVersionMajor}.${toVersionMinor}.${toVersionPatch}${suffix}`;\n    }\n    return `~${toVersionMajor}.${toVersionMinor}.0`;\n  }\n  if (element.operator === '<=') {\n    let res;\n    if (!!element.patch || suffix.length) {\n      res = `<=${newVersion}`;\n    } else if (element.minor) {\n      res = `<=${toVersionMajor}.${toVersionMinor}`;\n    } else {\n      res = `<=${toVersionMajor}`;\n    }\n    if (currentValue.includes('<= ')) {\n      res = res.replace('<=', '<= ');\n    }\n    return res;\n  }\n  if (element.operator === '<' && toVersionMajor) {\n    let res;\n    if (currentValue.endsWith('.0.0')) {\n      const newMajor = toVersionMajor + 1;\n      res = `<${newMajor}.0.0`;\n    } else if (element.patch) {\n      res = `<${semver.inc(newVersion, 'patch')}`;\n    } else if (element.minor && toVersionMinor) {\n      res = `<${toVersionMajor}.${toVersionMinor + 1}`;\n    } else {\n      res = `<${toVersionMajor + 1}`;\n    }\n    if (currentValue.includes('< ')) {\n      res = res.replace(/</g, '< ');\n    }\n    return res;\n  }\n  if (element.operator === '>') {\n    let res;\n    if (currentValue.endsWith('.0.0') && toVersionMajor) {\n      const newMajor = toVersionMajor + 1;\n      res = `>${newMajor}.0.0`;\n    } else if (element.patch) {\n      res = `>${toVersionMajor}.${toVersionMinor}.${toVersionPatch}`;\n    } else if (element.minor) {\n      res = `>${toVersionMajor}.${toVersionMinor}`;\n    } else {\n      res = `>${toVersionMajor}`;\n    }\n    if (currentValue.includes('> ')) {\n      res = res.replace(/</g, '> ');\n    }\n    return res;\n  }\n  if (!element.operator) {\n    if (element.minor) {\n      if (element.minor === 'x') {\n        return `${toVersionMajor}.x`;\n      }\n      if (element.minor === '*') {\n        return `${toVersionMajor}.*`;\n      }\n      if (element.patch === 'x') {\n        return `${toVersionMajor}.${toVersionMinor}.x`;\n      }\n      if (element.patch === '*') {\n        return `${toVersionMajor}.${toVersionMinor}.*`;\n      }\n      return `${newVersion}`;\n    }\n    return `${toVersionMajor}`;\n  }\n  return newVersion;\n}\n\nexport function widenRange(\n  { currentValue, currentVersion, newVersion }: NewValueConfig,\n  options: semver.Options,\n): string | null {\n  const parsedRange = parseRange(currentValue);\n  const element = parsedRange[parsedRange.length - 1];\n\n  if (matchesWithOptions(newVersion, currentValue, options)) {\n    return currentValue;\n  }\n  const newValue = replaceRange({\n    currentValue,\n    rangeStrategy: 'replace',\n    currentVersion,\n    newVersion,\n  });\n  if (element.operator?.startsWith('<')) {\n    const splitCurrent = currentValue.split(element.operator);\n    splitCurrent.pop();\n    return splitCurrent.join(element.operator) + newValue;\n  }\n  if (parsedRange.length > 1) {\n    const previousElement = parsedRange[parsedRange.length - 2];\n    if (previousElement.operator === '-') {\n      const splitCurrent = currentValue.split('-');\n      splitCurrent.pop();\n      return splitCurrent.join('-') + '- ' + newValue;\n    }\n    if (element.operator?.startsWith('>')) {\n      logger.warn(`Complex ranges ending in greater than are not supported`);\n      return null;\n    }\n  }\n  return `${currentValue} || ${newValue}`;\n}\n\nexport function bumpRange(\n  { currentValue, currentVersion, newVersion }: NewValueConfig,\n  options: semver.Options,\n): string | null {\n  if (!containsOperators(currentValue) && currentValue.includes('||')) {\n    return widenRange(\n      {\n        currentValue,\n        rangeStrategy: 'widen',\n        currentVersion,\n        newVersion,\n      },\n      options,\n    );\n  }\n  const parsedRange = parseRange(currentValue);\n  const element = parsedRange[parsedRange.length - 1];\n\n  const toVersionMajor = getMajor(newVersion);\n  const toVersionMinor = getMinor(newVersion);\n  const suffix = semver.prerelease(newVersion)\n    ? '-' + String(semver.prerelease(newVersion)?.[0])\n    : '';\n\n  if (parsedRange.length === 1) {\n    if (!element.operator) {\n      return replaceRange({\n        currentValue,\n        rangeStrategy: 'replace',\n        currentVersion,\n        newVersion,\n      });\n    }\n    if (element.operator.startsWith('~')) {\n      const split = currentValue.split('.');\n      if (suffix.length) {\n        return `${element.operator}${newVersion}`;\n      }\n      if (split.length === 1) {\n        // ~4\n        return `${element.operator}${toVersionMajor}`;\n      }\n      if (split.length === 2) {\n        // ~4.1\n        return `${element.operator}${toVersionMajor}.${toVersionMinor}`;\n      }\n      return `${element.operator}${newVersion}`;\n    }\n    if (element.operator === '=') {\n      return `=${newVersion}`;\n    }\n    if (element.operator === '>=') {\n      return currentValue.includes('>= ')\n        ? `>= ${newVersion}`\n        : `>=${newVersion}`;\n    }\n    if (element.operator.startsWith('<')) {\n      return currentValue;\n    }\n  } else {\n    const newRange = fixParsedRange(currentValue);\n    const versions = newRange.map((x: any) => {\n      // don't bump or'd single version values\n      if (x.operator === '||') {\n        return x.semver;\n      }\n      if (x.operator) {\n        const bumpedSubRange = bumpRange(\n          {\n            currentValue: x.semver,\n            rangeStrategy: 'bump',\n            currentVersion,\n            newVersion,\n          },\n          options,\n        );\n        if (\n          bumpedSubRange &&\n          matchesWithOptions(newVersion, bumpedSubRange, options)\n        ) {\n          return bumpedSubRange;\n        }\n      }\n\n      return replaceRange({\n        currentValue: x.semver,\n        rangeStrategy: 'replace',\n        currentVersion,\n        newVersion,\n      });\n    });\n    return versions.filter((x: any) => x !== null && x !== '').join(' ');\n  }\n  logger.debug(\n    'Unsupported range type for rangeStrategy=bump: ' + currentValue,\n  );\n  return null;\n}\n"]}