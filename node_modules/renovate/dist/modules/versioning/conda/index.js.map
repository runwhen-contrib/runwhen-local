{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/conda/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Version, VersionSpec } from '@baszalmstra/rattler';\nimport type { SemVer } from 'semver';\n\nimport type { RangeStrategy } from '../../../types/versioning';\nimport * as pep440 from '../pep440';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nfunction parse(v: string): Version | null {\n  try {\n    return new Version(v);\n  } catch {\n    return null;\n  }\n}\n\nexport const id = 'conda';\nexport const displayName = 'conda';\nexport const urls = [\n  'https://docs.conda.io/projects/conda-build/en/stable/resources/package-spec.html#package-match-specifications',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nfunction isValidVersion(s: string): boolean {\n  try {\n    new Version(s);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidVersionSpec(s: string): boolean {\n  try {\n    new VersionSpec(s);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValid(input: string): boolean {\n  return isValidVersion(input) || isValidVersionSpec(input);\n}\n\nfunction matches(version: string, range: string): boolean {\n  try {\n    return new VersionSpec(range).matches(new Version(version));\n  } catch {\n    return false;\n  }\n}\n\nfunction isSingleVersion(input: string): boolean {\n  if (!input.startsWith('=')) {\n    return false;\n  }\n\n  return isValidVersion(input.replace(/^==/, '').trimStart());\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n  isReplacement,\n}: NewValueConfig): string | null {\n  if (rangeStrategy === 'pin') {\n    return '==' + newVersion;\n  }\n\n  if (currentValue === '*') {\n    if (rangeStrategy === 'bump') {\n      return '>=' + newVersion;\n    }\n\n    // don't think you can widen or replace `*`\n    return null;\n  }\n\n  const normalizedCurrentValue = new VersionSpec(currentValue).toString();\n\n  // it's valid range spec in conda to write `3.12.*`, translate to pep440 `==3.12.*`\n  if (/^(\\d+\\.)+\\*$/.test(normalizedCurrentValue)) {\n    const newValue = pep440.api.getNewValue({\n      currentValue: '==' + normalizedCurrentValue,\n      rangeStrategy,\n      currentVersion,\n      newVersion,\n      isReplacement,\n    });\n\n    return newValue?.replace(/^==/, '') ?? null;\n  }\n\n  return pep440.api.getNewValue({\n    currentValue: normalizedCurrentValue,\n    rangeStrategy,\n    currentVersion,\n    newVersion,\n    isReplacement,\n  });\n}\n\nfunction sortVersions(version: string, other: string): number {\n  return new Version(version).compare(new Version(other));\n}\n\nfunction equals(version: string, other: string): boolean {\n  const v2 = parse(other);\n  if (!v2) {\n    return false;\n  }\n\n  return parse(version)?.equals(v2) ?? false;\n}\n\nfunction isStable(version: string): boolean {\n  return !(parse(version)?.isDev ?? true);\n}\n\nfunction isCompatible(version: string, current?: string): boolean {\n  return true;\n}\n\nfunction getMajor(version: string | SemVer): null | number {\n  return parse(version as string)?.asMajorMinor?.()?.[0] ?? null;\n}\nfunction getMinor(version: string | SemVer): null | number {\n  return parse(version as string)?.asMajorMinor?.()?.[1] ?? null;\n}\n\nfunction getPatch(version: string | SemVer): null | number {\n  try {\n    return pep440.api.getPatch(version);\n  } catch {\n    return null;\n  }\n}\n\nfunction isGreaterThan(version: string, other: string): boolean {\n  return sortVersions(version, other) > 0;\n}\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const spec = new VersionSpec(range);\n\n  const satisfiedVersions = versions\n    .map((v) => {\n      return [new Version(v), v] as const;\n    })\n    .filter(([v, raw]) => spec.matches(v))\n    .sort((a, b) => {\n      return a[0].compare(b[0]);\n    });\n\n  if (satisfiedVersions.length === 0) {\n    return null;\n  }\n\n  return satisfiedVersions[satisfiedVersions.length - 1][1];\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const spec = new VersionSpec(range);\n\n  const satisfiedVersions = versions\n    .map((v) => {\n      return [new Version(v), v] as const;\n    })\n    .filter(([v, raw]) => spec.matches(v))\n    .sort((a, b) => {\n      return a[0].compare(b[0]);\n    });\n\n  if (satisfiedVersions.length === 0) {\n    return null;\n  }\n\n  return satisfiedVersions[0][1];\n}\n\nexport const api = {\n  equals,\n  isValid,\n  isVersion: isValidVersion,\n  isSingleVersion,\n\n  // conda doesn't have stable version and non-stable version\n  // for example, tzdata has version 2024a but it's stable\n  isStable,\n\n  // conda use version are always compatible with each other.\n  isCompatible,\n\n  getMajor,\n  getMinor,\n  // sadly conda version doesn't have a concept of patch version\n  // so we try to use pep440 get a patch version.\n  getPatch,\n\n  isGreaterThan,\n  getSatisfyingVersion,\n\n  minSatisfyingVersion,\n  getNewValue,\n\n  matches,\n  sortVersions,\n} satisfies VersioningApi;\n"]}