{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/ivy/parse.ts"],"names":[],"mappings":";;;AAyDE,oDAAoB;AAzDtB,+CAA4C;AAC5C,8CAA2E;AAE3E,MAAM,eAAe,GAAG,iBAAiB,CAAC;AAmDxC,0CAAe;AAlDjB,MAAM,eAAe,GAAG,sBAAsB,CAAC;AAmD7C,0CAAe;AAlDjB,MAAM,cAAc,GAAG,gBAAgB,CAAC;AAmDtC,wCAAc;AA3CH,QAAA,YAAY,GAAG,IAAA,aAAK,EAAC,qBAAqB,CAAC,CAAC;AAEzD,SAAS,oBAAoB,CAAC,GAAW;IACvC,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,oBAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,oBAAY,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC;QAChE,OAAO;YACL,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK;SAC5C,CAAC;IACJ,CAAC;IAED,MAAM,YAAY,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;IACpC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,IAAA,yBAAe,EAAC,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,KAAK;aACN,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,KAAK,GAAG,IAAA,oBAAU,EAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAChC,MAAM,UAAU,GAAG,IAAA,oBAAU,EAAC,KAAK,CAAC,CAAC;QACrC,IAAI,UAAU,EAAE,CAAC;YACf,OAAO;gBACL,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,UAAU;aAClB,CAAC;QACJ,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { isSingleVersion, parseRange, rangeToStr } from '../maven/compare';\n\nconst REV_TYPE_LATEST = 'REV_TYPE_LATEST';\nconst REV_TYPE_SUBREV = 'REV_TYPE_SUBREVISION';\nconst REV_TYPE_RANGE = 'REV_TYPE_RANGE';\n\nexport interface Revision {\n  type: typeof REV_TYPE_LATEST | typeof REV_TYPE_RANGE | typeof REV_TYPE_SUBREV;\n\n  value: string;\n}\n\nexport const LATEST_REGEX = regEx(/^latest\\.|^latest$/i);\n\nfunction parseDynamicRevision(str: string): Revision | null {\n  if (!str) {\n    return null;\n  }\n\n  if (LATEST_REGEX.test(str)) {\n    const value = str.replace(LATEST_REGEX, '').toLowerCase() || '';\n    return {\n      type: REV_TYPE_LATEST,\n      value: value === 'integration' ? '' : value,\n    };\n  }\n\n  const SUBREV_REGEX = regEx(/\\.\\+$/);\n  if (str.endsWith('.+')) {\n    const value = str.replace(SUBREV_REGEX, '');\n    if (isSingleVersion(value)) {\n      return {\n        type: REV_TYPE_SUBREV,\n        value,\n      };\n    }\n  }\n\n  const range = parseRange(str);\n  if (range && range.length === 1) {\n    const rangeValue = rangeToStr(range);\n    if (rangeValue) {\n      return {\n        type: REV_TYPE_RANGE,\n        value: rangeValue,\n      };\n    }\n  }\n\n  return null;\n}\n\nexport {\n  REV_TYPE_LATEST,\n  REV_TYPE_SUBREV,\n  REV_TYPE_RANGE,\n  parseDynamicRevision,\n};\n"]}