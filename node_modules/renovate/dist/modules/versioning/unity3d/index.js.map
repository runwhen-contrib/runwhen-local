{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/unity3d/index.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,wCAAkD;AAGrC,QAAA,EAAE,GAAG,SAAS,CAAC;AACf,QAAA,WAAW,GAAG,SAAS,CAAC;AACxB,QAAA,IAAI,GAAG;IAClB,8FAA8F;CAC/F,CAAC;AACW,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC,MAAM,oBAAqB,SAAQ,8BAAoB;IAC7C,MAAM,CAAU,YAAY,GAAG,IAAA,aAAK,EAC1C,+EAA+E,CAChF,CAAC;IAEM,MAAM,CAAU,iBAAiB,GAAG;QAC1C,GAAG,EAAE,QAAQ;QACb,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,QAAQ;QACb,GAAG,EAAE,eAAe;QACpB,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,iBAAiB;KACvB,CAAC;IACM,MAAM,CAAU,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE1C,MAAM,CAAC,OAAe;QAC9B,MAAM,OAAO,GAAG,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;QAErE,MAAM,OAAO,GAAG;YACd,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YACnB,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YACnB,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;YACnB,oBAAoB,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC;YAC7D,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;SACpB,CAAC;QACF,MAAM,QAAQ,GACZ,oBAAoB,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAE9D,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC/D,CAAC;;AAGU,QAAA,GAAG,GAAkB,IAAI,oBAAoB,EAAE,CAAC;AAE7D,kBAAe,WAAG,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { GenericVersion } from '../generic';\nimport { GenericVersioningApi } from '../generic';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'unity3d';\nexport const displayName = 'Unity3D';\nexport const urls = [\n  'https://docs.unity3d.com/Manual/assembly-definition-includes.html#version-define-expressions',\n];\nexport const supportsRanges = false;\n\nclass Unity3dVersioningApi extends GenericVersioningApi {\n  private static readonly parsingRegex = regEx(\n    /^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(?<releaseStream>\\w)(?<build>\\d+)/,\n  );\n\n  private static readonly ReleaseStreamType = [\n    'a', // Alpha\n    'b', // Beta\n    'p', // Patch\n    'x', // Experimental\n    'f', // Stable\n    'c', // Stable (China)\n  ];\n  private static readonly stableVersions = ['f', 'c'];\n\n  protected _parse(version: string): GenericVersion | null {\n    const matches = Unity3dVersioningApi.parsingRegex.exec(version);\n    if (!matches?.groups) {\n      return null;\n    }\n    const { major, minor, patch, releaseStream, build } = matches.groups;\n\n    const release = [\n      parseInt(major, 10),\n      parseInt(minor, 10),\n      parseInt(patch, 10),\n      Unity3dVersioningApi.ReleaseStreamType.indexOf(releaseStream),\n      parseInt(build, 10),\n    ];\n    const isStable =\n      Unity3dVersioningApi.stableVersions.includes(releaseStream);\n\n    return { release, prerelease: isStable ? undefined : build };\n  }\n}\n\nexport const api: VersioningApi = new Unity3dVersioningApi();\n\nexport default api;\n"]}