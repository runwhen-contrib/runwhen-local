{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/same-major/index.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,sDAAyD;AAG5C,QAAA,EAAE,GAAG,YAAY,CAAC;AAClB,QAAA,WAAW,GAAG,uBAAuB,CAAC;AACtC,QAAA,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC;;;;GAIG;AACH,SAAS,cAAc,CAAC,KAAa;IACnC,qGAAqG;IACrG,IAAI,CAAC,oBAAa,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC;QAC1C,eAAM,CAAC,IAAI,CACT,EAAE,OAAO,EAAE,KAAK,EAAE,EAClB,mJAAmJ,CACpJ,CAAC;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,kEAAkE;IAClE,MAAM,KAAK,GAAG,oBAAa,CAAC,QAAQ,CAAC,KAAK,CAAE,CAAC;IAC7C,OAAO,KAAK,KAAK,KAAK,KAAK,GAAG,CAAC,EAAE,CAAC;AACpC,CAAC;AAED,0FAA0F;AAC1F,SAAS,aAAa,CAAC,OAAe,EAAE,KAAa;IACnD,MAAM,YAAY,GAAG,oBAAa,CAAC,QAAQ,CAAC,OAAO,CAAE,CAAC;IACtD,MAAM,UAAU,GAAG,oBAAa,CAAC,QAAQ,CAAC,KAAK,CAAE,CAAC;IAElD,IAAI,CAAC,YAAY,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO,YAAY,GAAG,UAAU,CAAC;AACnC,CAAC;AAED,SAAS,OAAO,CAAC,OAAe,EAAE,KAAa;IAC7C,OAAO,oBAAa,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,oBAAa,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7E,CAAC;AAED,SAAS,oBAAoB,CAC3B,QAAkB,EAClB,KAAa;IAEb,OAAO,oBAAa,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7E,CAAC;AAED,SAAS,eAAe,CAAC,OAAe,EAAE,KAAa;IACrD,OAAO,oBAAa,CAAC,eAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AACxE,CAAC;AAEY,QAAA,GAAG,GAAkB;IAChC,GAAG,oBAAa;IAChB,OAAO;IACP,oBAAoB;IACpB,oBAAoB;IACpB,eAAe;IACf,aAAa;CACd,CAAC;AACF,kBAAe,WAAG,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { api as semverCoerced } from '../semver-coerced';\nimport type { VersioningApi } from '../types';\n\nexport const id = 'same-major';\nexport const displayName = 'Same Major Versioning';\nexport const urls = [];\nexport const supportsRanges = false;\n\n/**\n *\n * Converts input to range if it's a version. eg. X.Y.Z -> '>=X.Y.Z <X+1'\n * If the input is already a range, it returns the input.\n */\nfunction massageVersion(input: string): string {\n  // istanbul ignore if: same-major versioning should not be used with ranges as it defeats the purpose\n  if (!semverCoerced.isSingleVersion(input)) {\n    logger.warn(\n      { version: input },\n      'Same major versioning expects a single version but got a range. Please switch to a different versioning as this may lead to unexpected behaviour.',\n    );\n    return input;\n  }\n\n  // we are sure to get a major because of the isSingleVersion check\n  const major = semverCoerced.getMajor(input)!;\n  return `>=${input} <${major + 1}`;\n}\n\n// for same major versioning one version is greater than the other if its major is greater\nfunction isGreaterThan(version: string, other: string): boolean {\n  const versionMajor = semverCoerced.getMajor(version)!;\n  const otherMajor = semverCoerced.getMajor(other)!;\n\n  if (!versionMajor || !otherMajor) {\n    return false;\n  }\n\n  return versionMajor > otherMajor;\n}\n\nfunction matches(version: string, range: string): boolean {\n  return semverCoerced.matches(version, massageVersion(range));\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return semverCoerced.getSatisfyingVersion(versions, massageVersion(range));\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  return semverCoerced.minSatisfyingVersion(versions, massageVersion(range));\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  return semverCoerced.isLessThanRange!(version, massageVersion(range));\n}\n\nexport const api: VersioningApi = {\n  ...semverCoerced,\n  matches,\n  getSatisfyingVersion,\n  minSatisfyingVersion,\n  isLessThanRange,\n  isGreaterThan,\n};\nexport default api;\n"]}