{"version":3,"file":"version.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/nuget/version.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type { NugetVersion } from './types';\n\n// We can't just use `Number.parseInt()` beacause it parses `123abc` as `123`,\n// which leads to incorrect version comparison.\nfunction ensureNumber(input: string): number | null {\n  if (!regEx(/^\\d+$/).test(input)) {\n    return null;\n  }\n\n  return Number.parseInt(input, 10);\n}\n\nfunction comparePrereleases(x: string, y: string): number {\n  const xParts = x.split('.');\n  const yParts = y.split('.');\n\n  const maxLen = Math.max(xParts.length, yParts.length);\n  for (let i = 0; i < maxLen; i += 1) {\n    const xPart = xParts[i] ?? '';\n    const yPart = yParts[i] ?? '';\n    const xNum = ensureNumber(xPart);\n    const yNum = ensureNumber(yPart);\n\n    const res =\n      xNum !== null && yNum !== null\n        ? Math.sign(xNum - yNum)\n        : xPart.localeCompare(yPart, undefined, { sensitivity: 'base' });\n\n    if (res !== 0) {\n      return res;\n    }\n  }\n\n  return 0;\n}\n\nexport function compare(x: NugetVersion, y: NugetVersion): number {\n  const xMajor = x.major;\n  const yMajor = y.major;\n\n  const xMinor = x.minor ?? 0;\n  const yMinor = y.minor ?? 0;\n\n  const xPatch = x.patch ?? 0;\n  const yPatch = y.patch ?? 0;\n\n  const xRevision = x.revision ?? 0;\n  const yRevision = y.revision ?? 0;\n\n  if (xMajor !== yMajor) {\n    return Math.sign(xMajor - yMajor);\n  } else if (xMinor !== yMinor) {\n    return Math.sign(xMinor - yMinor);\n  } else if (xPatch !== yPatch) {\n    return Math.sign(xPatch - yPatch);\n  } else if (xRevision !== yRevision) {\n    return Math.sign(xRevision - yRevision);\n  } else if (x.prerelease && !y.prerelease) {\n    return -1;\n  } else if (!x.prerelease && y.prerelease) {\n    return 1;\n  } else if (x.prerelease && y.prerelease) {\n    return comparePrereleases(x.prerelease, y.prerelease);\n  }\n\n  return 0;\n}\n\nexport function versionToString(version: NugetVersion): string {\n  let res = `${version.major}`;\n\n  if (version.minor !== undefined) {\n    res += `.${version.minor}`;\n  }\n\n  if (version.patch !== undefined) {\n    res += `.${version.patch}`;\n  }\n\n  if (version.revision !== undefined) {\n    res += `.${version.revision}`;\n  }\n\n  if (version.prerelease) {\n    res += `-${version.prerelease}`;\n  }\n\n  if (version.metadata) {\n    res += `+${version.metadata}`;\n  }\n\n  return res;\n}\n"]}