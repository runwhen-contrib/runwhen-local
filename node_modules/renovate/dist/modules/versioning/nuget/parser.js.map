{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/nuget/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport type {\n  NugetBracketRange,\n  NugetExactRange,\n  NugetFloatingRange,\n  NugetRange,\n  NugetVersion,\n} from './types';\n\nconst versionRegex = regEx(\n  /^(?<major>\\d+)(?:\\s*\\.\\s*(?<minor>\\d+)(?:\\s*\\.\\s*(?<patch>\\d+)(?:\\s*\\.\\s*(?<revision>\\d+))?)?)?\\s*(?:-(?<prerelease>[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)*))?(?:\\+(?<metadata>[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)*))?$/,\n);\n\nexport function parseVersion(input: string): NugetVersion | null {\n  const groups = versionRegex.exec(input?.trim())?.groups;\n  if (!groups) {\n    return null;\n  }\n\n  const { major, minor, patch, revision, prerelease, metadata } = groups;\n\n  // istanbul ignore if: never happens by design\n  if (!major) {\n    return null;\n  }\n\n  const res: NugetVersion = {\n    type: 'nuget-version',\n    major: Number.parseInt(major, 10),\n  };\n\n  if (minor) {\n    res.minor = Number.parseInt(minor, 10);\n  }\n\n  if (patch) {\n    res.patch = Number.parseInt(patch, 10);\n  }\n\n  if (revision) {\n    res.revision = Number.parseInt(revision, 10);\n  }\n\n  if (prerelease) {\n    res.prerelease = prerelease;\n  }\n\n  if (metadata) {\n    res.metadata = metadata;\n  }\n\n  return res;\n}\n\nconst floatingRangeRegex = regEx(\n  /^(?:(?:(?<floating_major>\\d*\\*)|(?<major>\\d+)(?:\\.(?:(?<floating_minor>\\d*\\*)|(?<minor>\\d+)(?:\\.(?:(?<floating_patch>\\d*\\*)|(?<patch>\\d+)(?:\\.(?:(?<floating_revision>\\d*\\*)|(?<revision>\\d+)))?))?))?)(?:-(?<floating_prerelease>\\*|[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)*\\.?\\*))?)$/,\n);\n\nfunction parseFloatingComponent(input: string): number {\n  const [int] = input.split('*');\n  return int ? 10 * Number.parseInt(int, 10) : 0;\n}\n\nexport function parseFloatingRange(input: string): NugetFloatingRange | null {\n  const groups = floatingRangeRegex.exec(input)?.groups;\n  if (!groups) {\n    return null;\n  }\n\n  let res: NugetFloatingRange = {\n    type: 'nuget-floating-range',\n    major: 0,\n  };\n\n  const {\n    major,\n    floating_major,\n    minor,\n    floating_minor,\n    patch,\n    floating_patch,\n    revision,\n    floating_revision,\n    floating_prerelease,\n  } = groups;\n\n  if (floating_prerelease) {\n    res.prerelease = groups.floating_prerelease as `${string}*`;\n  }\n\n  if (floating_major) {\n    return {\n      ...res,\n      major: parseFloatingComponent(floating_major),\n      floating: 'major',\n    };\n  }\n\n  const majorNum = Number.parseInt(major, 10);\n  if (!Number.isNaN(majorNum)) {\n    res = { ...res, major: majorNum };\n  }\n\n  if (floating_minor) {\n    return {\n      ...res,\n      minor: parseFloatingComponent(floating_minor),\n      floating: 'minor',\n    };\n  }\n\n  const minorNum = Number.parseInt(minor, 10);\n  if (!Number.isNaN(minorNum)) {\n    res = { ...res, minor: minorNum };\n  }\n\n  if (floating_patch) {\n    return {\n      ...res,\n      patch: parseFloatingComponent(floating_patch),\n      floating: 'patch',\n    };\n  }\n\n  const patchNum = Number.parseInt(patch, 10);\n  if (!Number.isNaN(patchNum)) {\n    res = { ...res, patch: Number.parseInt(patch, 10) };\n  }\n\n  if (floating_revision) {\n    return {\n      ...res,\n      revision: parseFloatingComponent(floating_revision),\n      floating: 'revision',\n    };\n  }\n\n  const revisionNum = Number.parseInt(revision, 10);\n  if (!Number.isNaN(revisionNum)) {\n    res = { ...res, revision: Number.parseInt(revision, 10) };\n  }\n\n  if (res.prerelease) {\n    return res;\n  }\n\n  return null;\n}\n\nconst exactRangeRegex = regEx(/^\\s*\\[\\s*(?<version>[^,]+)\\s*\\]\\s*$/);\n\nexport function parseExactRange(input: string): NugetExactRange | null {\n  const versionStr = exactRangeRegex.exec(input)?.groups?.version;\n  if (!versionStr) {\n    return null;\n  }\n\n  const version = parseVersion(versionStr);\n  if (!version) {\n    return null;\n  }\n\n  return {\n    type: 'nuget-exact-range',\n    version,\n  };\n}\n\nconst maxBracketRangeRegex = regEx(\n  /^\\s*(?<left_bracket>\\(|\\[)\\s*,\\s*(?<max_version>[^\\s\\])]+)\\s*(?<right_bracket>\\)|\\])\\s*$/,\n);\n\nconst minBracketRangeRegex = regEx(\n  /^\\s*(?<left_bracket>\\(|\\[)\\s*(?<min_version>[^\\s,]+)\\s*,\\s*(?<right_bracket>\\)|\\])\\s*$/,\n);\n\nconst bracketRangeRegex = regEx(\n  /^\\s*(?<left_bracket>\\(|\\[)\\s*(?<min_version>[^\\s,]+)\\s*,\\s*(?<max_version>[^\\s\\])]+)\\s*(?<right_bracket>\\)|\\])\\s*$/,\n);\n\nexport function parseBracketRange(input: string): NugetBracketRange | null {\n  const maxGroups = maxBracketRangeRegex.exec(input)?.groups;\n  if (maxGroups) {\n    const { max_version, left_bracket, right_bracket } = maxGroups;\n\n    const max = parseVersion(max_version);\n    if (!max) {\n      return null;\n    }\n\n    return {\n      type: 'nuget-bracket-range',\n      max,\n      minInclusive: left_bracket === '[',\n      maxInclusive: right_bracket === ']',\n    };\n  }\n\n  const minGroups = minBracketRangeRegex.exec(input)?.groups;\n  if (minGroups) {\n    const { min_version, left_bracket, right_bracket } = minGroups;\n\n    const min = parseVersion(min_version) ?? parseFloatingRange(min_version);\n    if (!min) {\n      return null;\n    }\n\n    return {\n      type: 'nuget-bracket-range',\n      min,\n      minInclusive: left_bracket === '[',\n      maxInclusive: right_bracket === ']',\n    };\n  }\n\n  const groups = bracketRangeRegex.exec(input)?.groups;\n  if (groups) {\n    const { min_version, max_version, left_bracket, right_bracket } = groups;\n\n    const min = parseVersion(min_version) ?? parseFloatingRange(min_version);\n    if (!min) {\n      return null;\n    }\n\n    const max = parseVersion(max_version);\n    if (!max) {\n      return null;\n    }\n\n    return {\n      type: 'nuget-bracket-range',\n      min,\n      max,\n      minInclusive: left_bracket === '[',\n      maxInclusive: right_bracket === ']',\n    };\n  }\n\n  return null;\n}\n\nexport function parseRange(input: string): NugetRange | null {\n  return (\n    parseExactRange(input) ??\n    parseBracketRange(input) ??\n    parseFloatingRange(input)\n  );\n}\n"]}