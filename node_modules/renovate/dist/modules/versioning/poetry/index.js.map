{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/poetry/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseRange } from 'semver-utils';\nimport { logger } from '../../../logger';\nimport type { RangeStrategy } from '../../../types/versioning';\nimport { api as npm } from '../npm';\nimport { api as pep440 } from '../pep440';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nimport { VERSION_PATTERN } from './patterns';\nimport {\n  npm2poetry,\n  poetry2npm,\n  poetry2semver,\n  semver2poetry,\n} from './transform';\n\nexport const id = 'poetry';\nexport const displayName = 'Poetry';\nexport const urls = [\n  'https://python-poetry.org/docs/dependency-specification/',\n  'https://python-poetry.org/docs/faq#why-does-poetry-not-adhere-to-semantic-versioning',\n  'https://python-poetry.org/docs/faq#why-does-poetry-enforce-pep-440-versions',\n];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies: RangeStrategy[] = [\n  'bump',\n  'widen',\n  'pin',\n  'replace',\n];\n\nfunction equals(a: string, b: string): boolean {\n  const semverA = poetry2semver(a);\n  const semverB = poetry2semver(b);\n  return !!(semverA && semverB && npm.equals(semverA, semverB));\n}\n\nfunction getMajor(version: string): number | null {\n  const semverVersion = poetry2semver(version);\n  return semverVersion ? npm.getMajor(semverVersion) : null;\n}\n\nfunction getMinor(version: string): number | null {\n  const semverVersion = poetry2semver(version);\n  return semverVersion ? npm.getMinor(semverVersion) : null;\n}\n\nfunction getPatch(version: string): number | null {\n  const semverVersion = poetry2semver(version);\n  return semverVersion ? npm.getPatch(semverVersion) : null;\n}\n\nfunction isVersion(input: string): boolean {\n  return VERSION_PATTERN.test(input);\n}\n\nfunction isGreaterThan(a: string, b: string): boolean {\n  return !!(a && b && pep440.isGreaterThan(a, b));\n}\n\nfunction isLessThanRange(version: string, range: string): boolean {\n  const semverVersion = poetry2semver(version);\n  return !!(\n    isVersion(version) &&\n    semverVersion &&\n    npm.isLessThanRange?.(semverVersion, poetry2npm(range))\n  );\n}\n\nexport function isValid(input: string): boolean {\n  if (!input) {\n    return false;\n  }\n\n  try {\n    return npm.isValid(poetry2npm(input, true));\n  } catch {\n    logger.once.debug(\n      { version: input },\n      'Poetry version or range is not supported by current implementation',\n    );\n    return false;\n  }\n}\n\nfunction isStable(version: string): boolean {\n  const semverVersion = poetry2semver(version);\n  return !!(semverVersion && npm.isStable(semverVersion));\n}\n\nfunction matches(version: string, range: string): boolean {\n  const semverVersion = poetry2semver(version);\n  return !!(\n    isVersion(version) &&\n    semverVersion &&\n    npm.matches(semverVersion, poetry2npm(range))\n  );\n}\n\nfunction getSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const semverVersions: string[] = [];\n  versions.forEach((version) => {\n    const semverVersion = poetry2semver(version);\n    if (semverVersion) {\n      semverVersions.push(semverVersion);\n    }\n  });\n  const npmRange = poetry2npm(range);\n  const satisfyingVersion = npm.getSatisfyingVersion(semverVersions, npmRange);\n  return satisfyingVersion ? semver2poetry(satisfyingVersion) : null;\n}\n\nfunction minSatisfyingVersion(\n  versions: string[],\n  range: string,\n): string | null {\n  const semverVersions: string[] = [];\n  versions.forEach((version) => {\n    const semverVersion = poetry2semver(version);\n    if (semverVersion) {\n      semverVersions.push(semverVersion);\n    }\n  });\n  const npmRange = poetry2npm(range);\n  const satisfyingVersion = npm.minSatisfyingVersion(semverVersions, npmRange);\n  return satisfyingVersion ? semver2poetry(satisfyingVersion) : null;\n}\n\nfunction isSingleVersion(constraint: string): boolean {\n  return (\n    (constraint.trim().startsWith('=') &&\n      isVersion(constraint.trim().substring(1).trim())) ||\n    isVersion(constraint.trim())\n  );\n}\n\nfunction handleShort(\n  operator: string,\n  currentValue: string,\n  newVersion: string,\n): string | null {\n  const toVersionMajor = getMajor(newVersion);\n  const toVersionMinor = getMinor(newVersion);\n  const split = currentValue.split('.');\n  if (toVersionMajor !== null && split.length === 1) {\n    // [^,~]4\n    return `${operator}${toVersionMajor}`;\n  }\n  if (\n    toVersionMajor !== null &&\n    toVersionMinor !== null &&\n    split.length === 2\n  ) {\n    // [^,~]4.1\n    return `${operator}${toVersionMajor}.${toVersionMinor}`;\n  }\n  return null;\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string {\n  if (rangeStrategy === 'pin') {\n    return newVersion;\n  }\n  if (rangeStrategy === 'replace') {\n    const npmCurrentValue = poetry2npm(currentValue);\n    try {\n      const massagedNewVersion = poetry2semver(newVersion);\n      if (\n        massagedNewVersion &&\n        isVersion(massagedNewVersion) &&\n        npm.matches(massagedNewVersion, npmCurrentValue)\n      ) {\n        return currentValue;\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.info(\n        { err },\n        'Poetry versioning: Error caught checking if newVersion satisfies currentValue',\n      );\n    }\n    const parsedRange = parseRange(npmCurrentValue);\n    const element = parsedRange[parsedRange.length - 1];\n    if (parsedRange.length === 1 && element.operator) {\n      if (element.operator === '^') {\n        const version = handleShort('^', npmCurrentValue, newVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n      if (element.operator === '~') {\n        const version = handleShort('~', npmCurrentValue, newVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n    }\n  }\n\n  // Explicitly check whether this is a fully-qualified version\n  if (\n    (VERSION_PATTERN.exec(newVersion)?.groups?.release ?? '').split('.')\n      .length !== 3\n  ) {\n    logger.debug(\n      'Cannot massage python version to npm - returning currentValue',\n    );\n    return currentValue;\n  }\n  try {\n    const currentSemverVersion =\n      currentVersion && poetry2semver(currentVersion);\n\n    const newSemverVersion = poetry2semver(newVersion);\n\n    if (currentSemverVersion && newSemverVersion) {\n      const newSemver = npm.getNewValue({\n        currentValue: poetry2npm(currentValue),\n        rangeStrategy,\n        currentVersion: currentSemverVersion,\n        newVersion: newSemverVersion,\n      });\n      const newPoetry = newSemver && npm2poetry(newSemver);\n      if (newPoetry) {\n        return newPoetry;\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { currentValue, rangeStrategy, currentVersion, newVersion, err },\n      'Could not generate new value using npm.getNewValue()',\n    );\n  }\n\n  // istanbul ignore next\n  return currentValue;\n}\n\nfunction sortVersions(a: string, b: string): number {\n  return pep440.sortVersions(a, b);\n}\n\nfunction subset(subRange: string, superRange: string): boolean | undefined {\n  return npm.subset!(poetry2npm(subRange), poetry2npm(superRange));\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getPatch,\n  getNewValue,\n  getSatisfyingVersion,\n  isCompatible: isVersion,\n  isGreaterThan,\n  isLessThanRange,\n  isSingleVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  minSatisfyingVersion,\n  sortVersions,\n  subset,\n};\nexport default api;\n"]}