{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/poetry/transform.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { regEx } from '../../../util/regex';\nimport { RANGE_COMPARATOR_PATTERN, VERSION_PATTERN } from './patterns';\n\ninterface LetterTag {\n  letter: string;\n  number: string;\n}\n\nfunction parseLetterTag(letter?: string, number?: string): LetterTag | null {\n  if (letter !== undefined) {\n    // apply the same normalizations as poetry\n    const spellings: Record<string, string> = {\n      alpha: 'a',\n      beta: 'b',\n      c: 'rc',\n      pre: 'rc',\n      preview: 'rc',\n      r: 'post',\n      rev: 'post',\n    };\n    return {\n      letter: spellings[letter] || letter,\n      number: number ?? '0',\n    };\n  }\n  if (letter === undefined && number !== undefined) {\n    return { letter: 'post', number };\n  }\n  return null;\n}\n\nfunction notEmpty(s: string): boolean {\n  return s !== '';\n}\n\n/**\n * Parse versions like poetry.core.masonry.version.Version does (union of SemVer\n * and PEP440, with normalization of certain prerelease tags), and emit in SemVer\n * format. NOTE: this silently discards the epoch field in PEP440 versions, as\n * it has no equivalent in SemVer.\n */\nexport function poetry2semver(\n  poetry_version: string,\n  padRelease = true,\n): string | null {\n  const matchGroups = VERSION_PATTERN.exec(poetry_version)?.groups;\n  if (!matchGroups) {\n    return null;\n  }\n  // trim leading zeros from valid numbers\n  const releaseParts = matchGroups.release\n    .split('.')\n    .map((segment) => parseInt(segment, 10));\n  while (padRelease && releaseParts.length < 3) {\n    releaseParts.push(0);\n  }\n  const pre = parseLetterTag(matchGroups.pre_l, matchGroups.pre_n);\n  const post = matchGroups.post_n1\n    ? parseLetterTag(undefined, matchGroups.post_n1)\n    : parseLetterTag(matchGroups.post_l, matchGroups.post_n);\n  const dev = parseLetterTag(matchGroups.dev_l, matchGroups.dev_n);\n\n  const parts = [releaseParts.map((num) => num.toString()).join('.')];\n  if (pre !== null) {\n    // trim leading zeros from valid numbers\n    pre.number = pre.number.replace(regEx(/^0+(\\d+)/), '$1');\n    parts.push(`-${pre.letter}.${pre.number}`);\n  }\n  if (post !== null) {\n    // trim leading zeros from valid numbers\n    post.number = post.number.replace(regEx(/^0+(\\d+)/), '$1');\n    parts.push(`-${post.letter}.${post.number}`);\n  }\n  if (dev !== null) {\n    // trim leading zeros from valid numbers\n    dev.number = dev.number.replace(regEx(/^0+(\\d+)/), '$1');\n    parts.push(`-${dev.letter}.${dev.number}`);\n  }\n\n  return semver.valid(parts.join(''));\n}\n\n/** Reverse normalizations applied by poetry2semver */\nexport function semver2poetry(version?: string): string | null {\n  if (!version) {\n    return null;\n  }\n  const s = semver.parse(version);\n  if (!s) {\n    return null;\n  }\n  const spellings: Record<string, string> = {\n    a: 'alpha',\n    b: 'beta',\n    c: 'rc',\n    dev: 'alpha',\n  };\n  s.prerelease = s.prerelease.map((letter) => spellings[letter] ?? letter);\n  return s.format();\n}\n\n/**\n * Translate a poetry-style version range to npm format\n *\n * This function works like cargo2npm, but it doesn't\n * add a '^', because poetry treats versions without operators as\n * exact versions.\n */\nexport function poetry2npm(input: string, throwOnUnsupported = false): string {\n  // replace commas with spaces, then split at valid semver comparators\n  const chunks = input\n    .split(',')\n    .map((str) => str.trim())\n    .filter(notEmpty)\n    .join(' ')\n    .split(RANGE_COMPARATOR_PATTERN);\n  // do not pad versions with zeros in a range\n  const transformed = chunks\n    .map((chunk) => poetry2semver(chunk, false) ?? chunk)\n    .join('')\n    .replace(/===/, '=');\n  if (throwOnUnsupported) {\n    const isUnsupported = transformed\n      .split(regEx(/\\s+/))\n      .some((part) => part.startsWith('!=')); // Patterns like `!=1.2.3` can't be easily translated between poetry/npm\n    if (isUnsupported) {\n      throw new Error('Unsupported by Poetry versioning implementation');\n    }\n  }\n  return transformed;\n}\n\n/**\n * Translate an npm-style version range to poetry format\n *\n * NOTE: This function is largely copied from cargo versioning code.\n * Poetry uses commas (like in cargo) instead of spaces (like in npm)\n * for AND operation.\n */\nexport function npm2poetry(range: string): string {\n  // apply poetry-style normalizations to versions embedded in range string\n  // (i.e. anything that is not a range operator, potentially surrounded by whitespace)\n  const transformedRange = range\n    .split(RANGE_COMPARATOR_PATTERN)\n    .map((chunk) => semver2poetry(chunk) ?? chunk)\n    .join('');\n\n  // Note: this doesn't remove the ^\n  const res = transformedRange\n    .split(' ')\n    .map((str) => str.trim())\n    .filter(notEmpty);\n\n  const operators = ['^', '~', '=', '>', '<', '<=', '>='];\n  for (let i = 0; i < res.length - 1; i += 1) {\n    if (operators.includes(res[i])) {\n      const newValue = res[i] + ' ' + res[i + 1];\n      res.splice(i, 2, newValue);\n    }\n  }\n  return res.join(', ').replace(/\\s*,?\\s*\\|\\|\\s*,?\\s*/g, ' || ');\n}\n"]}