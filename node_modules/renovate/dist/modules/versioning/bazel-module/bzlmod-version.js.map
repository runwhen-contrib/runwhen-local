{"version":3,"file":"bzlmod-version.js","sourceRoot":"","sources":["../../../../lib/modules/versioning/bazel-module/bzlmod-version.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileoverview Contains classes that represent a Bazel module version.\n */\n\n/**\n * Represents a single value in a VersionPart. For example, the version string\n * `1.2.3` has three identifiers: `1`, `2`, `3`.\n */\nexport class Identifier {\n  /**\n   * Returns the identifier as a string.\n   */\n  readonly asString: string;\n\n  /**\n   * If the identifier only contains digits, this is the numeric value.\n   * Otherwise, it is `0`.\n   */\n  readonly asNumber: number;\n\n  /**\n   * Specifies whether the identifier only contains digits.\n   */\n  readonly isDigitsOnly: boolean;\n\n  /**\n   * Regular expression used to identify whether an identifier value only\n   * contains digits.\n   */\n  static readonly digitsOnlyMatcher = /^[0-9]+$/;\n\n  /**\n   * @param value The value that is parsed for the Bazel module version parts.\n   */\n  constructor(value: string) {\n    if (value === '') {\n      throw new Error('Identifier value cannot be empty.');\n    }\n    this.asString = value;\n    if (Identifier.digitsOnlyMatcher.test(value)) {\n      this.isDigitsOnly = true;\n      this.asNumber = parseInt(value);\n    } else {\n      this.isDigitsOnly = false;\n      this.asNumber = 0;\n    }\n  }\n\n  /**\n   * Determines whether this identifier and another identifier are equal.\n   */\n  equals(other: Identifier): boolean {\n    return this.asString === other.asString;\n  }\n\n  /**\n   * Determines whether this identifier comes before the other identifier.\n   */\n  isLessThan(other: Identifier): boolean {\n    // This logic mirrors the comparison logic in\n    // https://cs.opensource.google/bazel/bazel/+/refs/heads/master:src/main/java/com/google/devtools/build/lib/bazel/bzlmod/Version.java\n    // isDigitsOnly: true first\n    if (this.isDigitsOnly !== other.isDigitsOnly) {\n      return this.isDigitsOnly;\n    }\n    if (this.asNumber !== other.asNumber) {\n      return this.asNumber < other.asNumber;\n    }\n    return this.asString < other.asString;\n  }\n}\n\n/**\n * A collection of {@link Identifier} values that represent a portion of a\n * Bazel module version.\n */\nexport class VersionPart extends Array<Identifier> {\n  /**\n   * Creates a {@link VersionPart} populated with the provided identifiers.\n   */\n  static create(...items: (Identifier | string)[]): VersionPart {\n    const idents = items.map((item) => {\n      if (typeof item === 'string') {\n        return new Identifier(item);\n      }\n      return item;\n    });\n    const vp = new VersionPart();\n    vp.push(...idents);\n    return vp;\n  }\n\n  /**\n   * The string representation of the version part.\n   */\n  get asString(): string {\n    return this.map((ident) => ident.asString).join('.');\n  }\n\n  /**\n   * Specifies whether this contains any identifiers.\n   */\n  get isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  /**\n   * Returns the equivalent of the a Semver major value.\n   */\n  get major(): number {\n    return this.length > 0 ? this[0].asNumber : 0;\n  }\n\n  /**\n   * Returns the equivalent of the a Semver minor value.\n   */\n  get minor(): number {\n    return this.length > 1 ? this[1].asNumber : 0;\n  }\n\n  /**\n   * Returns the equivalent of the a Semver patch value.\n   */\n  get patch(): number {\n    return this.length > 2 ? this[2].asNumber : 0;\n  }\n\n  /**\n   * Determines whether this version part is equal to the other.\n   */\n  equals(other: VersionPart): boolean {\n    if (this.length !== other.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      const a = this[i];\n      const b = other[i];\n      if (!a.equals(b)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether this version part comes before the other.\n   */\n  isLessThan(other: VersionPart): boolean {\n    // This logic mirrors the comparison logic in\n    // https://cs.opensource.google/bazel/bazel/+/refs/heads/master:src/main/java/com/google/devtools/build/lib/bazel/bzlmod/Version.java\n    if (this.equals(other)) {\n      return false;\n    }\n    // Non-empty are first\n    if (this.length === 0 && other.length !== 0) {\n      return false;\n    }\n    if (other.length === 0 && this.length !== 0) {\n      return true;\n    }\n    const shortestLen = this.length < other.length ? this.length : other.length;\n    for (let i = 0; i < shortestLen; i++) {\n      const a = this[i];\n      const b = other[i];\n      if (!a.equals(b)) {\n        return a.isLessThan(b);\n      }\n    }\n    return this.length < other.length;\n  }\n}\n\n// Represents the capture groups produced by BzlmodVersion.versionMatcher.\ninterface VersionRegexResult {\n  release: string;\n  prerelease: string | undefined;\n  build: string | undefined;\n}\n\n/**\n * Represents a version in the Bazel module system. The version format we support is\n * `RELEASE[-PRERELEASE][+BUILD]`, where `RELEASE`, `PRERELEASE`, and `BUILD` are\n * each a sequence of \"identifiers\" (defined as a non-empty sequence of ASCII alphanumerical\n * characters and hyphens) separated by dots. The `RELEASE` part may not contain hyphens.\n *\n * Otherwise, this format is identical to SemVer, especially in terms of the comparison algorithm\n * (https://semver.org/#spec-item-11). In other words, this format is intentionally looser than\n * SemVer; in particular:\n *\n * - the \"release\" part isn't limited to exactly 3 segments (major, minor, patch), but can be\n *   fewer or more;\n * - each segment in the \"release\" part can be identifiers instead of just numbers (so letters\n *   are also allowed -- although hyphens are not).\n *\n * Any valid SemVer version is a valid Bazel module version. Additionally, two SemVer versions\n * `a` and `b` compare `a < b` iff the same holds when they're compared as Bazel * module versions.\n *\n * The special \"empty string\" version can also be used, and compares higher than everything else.\n * It signifies that there is a NonRegistryOverride for a module.\n */\nexport class BzlmodVersion {\n  readonly original: string;\n  readonly release: VersionPart;\n  readonly prerelease: VersionPart;\n  readonly build: VersionPart;\n\n  /**\n   * The regular expression that identifies a valid Bazel module version.\n   */\n  static readonly versionMatcher =\n    /^(?<release>[a-zA-Z0-9.]+)(?:-(?<prerelease>[a-zA-Z0-9.-]+))?(?:\\+(?<build>[a-zA-Z0-9.-]+))?$/;\n\n  /**\n   * @param version The string that is parsed for the Bazel module version\n   *     values.\n   */\n  constructor(version: string) {\n    this.original = version;\n    if (version === '') {\n      this.release = VersionPart.create();\n      this.prerelease = VersionPart.create();\n      this.build = VersionPart.create();\n      return;\n    }\n    const vparts: Partial<VersionRegexResult> | undefined =\n      BzlmodVersion.versionMatcher.exec(version)?.groups;\n    if (!vparts) {\n      throw new Error(`Invalid Bazel module version: ${version}`);\n    }\n    // The regex check above ensures that we will have a release group.\n    const rparts = vparts.release!.split('.');\n    this.release = VersionPart.create(...rparts);\n    const pparts = vparts.prerelease ? vparts.prerelease.split('.') : [];\n    this.prerelease = VersionPart.create(...pparts);\n    // Do not parse the build value. Treat it as a single value.\n    const bparts = vparts.build ? [vparts.build] : [];\n    this.build = VersionPart.create(...bparts);\n  }\n\n  /**\n   * Specifies whether this is a pre-release version.\n   */\n  get isPrerelease(): boolean {\n    return !this.prerelease.isEmpty;\n  }\n\n  // Comparison\n\n  /**\n   * Determines whether this Bazel module version is equal to the other.\n   *\n   * @param other The other version for the comparison.\n   * @param ignoreBuild? If specified, determines whether the build value is\n   *     evaluated as part of the equality check. This is useful when\n   *     determining precedence.\n   */\n  equals(other: BzlmodVersion, ignoreBuild?: boolean): boolean {\n    if (ignoreBuild) {\n      return (\n        this.release.equals(other.release) &&\n        this.prerelease.equals(other.prerelease)\n      );\n    }\n    return (\n      this.release.equals(other.release) &&\n      this.prerelease.equals(other.prerelease) &&\n      this.build.equals(other.build)\n    );\n  }\n\n  /**\n   * Determines whether this Bazel module version comes before the other.\n   */\n  isLessThan(other: BzlmodVersion): boolean {\n    // This logic mirrors the comparison logic in\n    // https://cs.opensource.google/bazel/bazel/+/refs/heads/master:src/main/java/com/google/devtools/build/lib/bazel/bzlmod/Version.java\n    if (this.release.isLessThan(other.release)) {\n      return true;\n    }\n    // Ensure that prerelease is listed before regular releases\n    if (this.isPrerelease && !other.isPrerelease) {\n      return true;\n    }\n    if (this.prerelease.isLessThan(other.prerelease)) {\n      return true;\n    }\n    // NOTE: We ignore the build value for precedence comparison per the Semver spec.\n    // https://semver.org/#spec-item-10\n    return false;\n  }\n\n  /**\n   * Determines whether this Bazel module version comes after the other.\n   */\n  isGreaterThan(other: BzlmodVersion): boolean {\n    return BzlmodVersion.defaultCompare(this, other) === 1;\n  }\n\n  /**\n   * Evaluates two Bazel module versions and returns a value specifying whether\n   * a < b (-1), a == b (0), or a > b (1).\n   */\n  static defaultCompare(a: BzlmodVersion, b: BzlmodVersion): number {\n    if (a.equals(b, true)) {\n      return 0;\n    }\n    if (a.isLessThan(b)) {\n      return -1;\n    }\n    return 1;\n  }\n}\n"]}