{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/html/extract.ts"],"names":[],"mappings":";;AAWA,gCAkBC;AAED,gDAmBC;AAlDD,+CAA4C;AAC5C,kDAAyD;AACzD,+CAAuD;AAGvD,MAAM,KAAK,GAAG,IAAA,aAAK,EAAC,iCAAiC,CAAC,CAAC;AAEvD,MAAM,cAAc,GAAG,IAAA,aAAK,EAC1B,kDAAkD,CACnD,CAAC;AAEF,SAAgB,UAAU,CAAC,GAAW;IACpC,MAAM,KAAK,GAAG,4BAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3C,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;IACtD,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,uBAAe,CAAC,EAAE;QAC9B,OAAO;QACP,WAAW,EAAE,GAAG,OAAO,IAAI,KAAK,EAAE;QAClC,YAAY;QACZ,aAAa,EAAE,GAAG;KACnB,CAAC;IACF,MAAM,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChD,IAAI,cAAc,EAAE,MAAM,EAAE,CAAC;QAC3B,GAAG,CAAC,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC;IAC1D,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAe;IAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,IAAI,GAAG,OAAO,CAAC;IACnB,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC;QAC7C,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC7B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;QACtC,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { CdnjsDatasource } from '../../datasource/cdnjs';\nimport { cloudflareUrlRegex } from '../cdnurl/extract';\nimport type { PackageDependency, PackageFileContent } from '../types';\n\nconst regex = regEx(/<\\s*(script|link)\\s+[^>]*?\\/?>/i);\n\nconst integrityRegex = regEx(\n  /\\s+integrity\\s*=\\s*(\"|')(?<currentDigest>[^\"']+)/,\n);\n\nexport function extractDep(tag: string): PackageDependency | null {\n  const match = cloudflareUrlRegex.exec(tag);\n  if (!match?.groups) {\n    return null;\n  }\n  const { depName, currentValue, asset } = match.groups;\n  const dep: PackageDependency = {\n    datasource: CdnjsDatasource.id,\n    depName,\n    packageName: `${depName}/${asset}`,\n    currentValue,\n    replaceString: tag,\n  };\n  const integrityMatch = integrityRegex.exec(tag);\n  if (integrityMatch?.groups) {\n    dep.currentDigest = integrityMatch.groups.currentDigest;\n  }\n  return dep;\n}\n\nexport function extractPackageFile(content: string): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  let rest = content;\n  let match = regex.exec(rest);\n  let offset = 0;\n  while (match) {\n    const [replaceString] = match;\n    offset += match.index + replaceString.length;\n    rest = content.slice(offset);\n    match = regex.exec(rest);\n    const dep = extractDep(replaceString);\n    if (dep) {\n      deps.push(dep);\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}