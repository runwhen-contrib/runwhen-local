{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle-wrapper/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { lang, query as q } from 'good-enough-parser';\nimport { quote } from 'shlex';\nimport { dirname, join } from 'upath';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  localPathExists,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport type { StatusResult } from '../../../util/git/types';\nimport { Http } from '../../../util/http';\nimport { newlineRegex } from '../../../util/regex';\nimport { replaceAt } from '../../../util/string';\nimport { updateArtifacts as gradleUpdateArtifacts } from '../gradle';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\nimport {\n  extraEnv,\n  getJavaConstraint,\n  gradleWrapperFileName,\n  prepareGradleCommand,\n} from './utils';\n\nconst http = new Http('gradle-wrapper');\nconst groovy = lang.createLang('groovy');\n\ntype Ctx = string[];\n\nasync function addIfUpdated(\n  status: StatusResult,\n  fileProjectPath: string,\n): Promise<UpdateArtifactsResult | null> {\n  if (status.modified.includes(fileProjectPath)) {\n    return {\n      file: {\n        type: 'addition',\n        path: fileProjectPath,\n        contents: await readLocalFile(fileProjectPath),\n      },\n    };\n  }\n  return null;\n}\n\nfunction getDistributionUrl(newPackageFileContent: string): string | null {\n  const distributionUrlLine = newPackageFileContent\n    .split(newlineRegex)\n    .find((line) => line.startsWith('distributionUrl='));\n  if (distributionUrlLine) {\n    return distributionUrlLine\n      .replace('distributionUrl=', '')\n      .replace('https\\\\:', 'https:');\n  }\n  return null;\n}\n\nasync function getDistributionChecksum(url: string): Promise<string> {\n  const { body } = await http.getText(`${url}.sha256`);\n  return body;\n}\n\nexport async function updateBuildFile(\n  localGradleDir: string,\n  wrapperProperties: Record<string, string | undefined | null>,\n): Promise<string> {\n  let buildFileName = join(localGradleDir, 'build.gradle');\n  if (!(await localPathExists(buildFileName))) {\n    buildFileName = join(localGradleDir, 'build.gradle.kts');\n  }\n\n  const buildFileContent = await readLocalFile(buildFileName, 'utf8');\n  if (!buildFileContent) {\n    logger.debug('build.gradle or build.gradle.kts not found');\n    return buildFileName;\n  }\n\n  let buildFileUpdated = buildFileContent;\n  for (const [propertyName, newValue] of Object.entries(wrapperProperties)) {\n    if (!newValue) {\n      continue;\n    }\n\n    const query = q.tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      search: q\n        .sym<Ctx>(propertyName)\n        .op('=')\n        .str((ctx, { value, offset }) => {\n          buildFileUpdated = replaceAt(\n            buildFileUpdated,\n            offset,\n            value,\n            newValue,\n          );\n          return ctx;\n        }),\n    });\n    groovy.query(buildFileUpdated, query, []);\n  }\n\n  await writeLocalFile(buildFileName, buildFileUpdated);\n\n  return buildFileName;\n}\n\nexport async function updateLockFiles(\n  buildFileName: string,\n  config: UpdateArtifactsConfig,\n): Promise<UpdateArtifactsResult[] | null> {\n  const buildFileContent = await readLocalFile(buildFileName, 'utf8');\n  if (!buildFileContent) {\n    logger.debug('build.gradle or build.gradle.kts not found');\n    return null;\n  }\n\n  return await gradleUpdateArtifacts({\n    packageFileName: buildFileName,\n    updatedDeps: [],\n    newPackageFileContent: buildFileContent,\n    config,\n  });\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  newPackageFileContent,\n  updatedDeps,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  try {\n    logger.debug({ updatedDeps }, 'gradle-wrapper.updateArtifacts()');\n    const localGradleDir = join(dirname(packageFileName), '../../');\n    const gradlewFile = join(localGradleDir, gradleWrapperFileName());\n\n    let cmd = await prepareGradleCommand(gradlewFile);\n    if (!cmd) {\n      logger.info('No gradlew found - skipping Artifacts update');\n      return null;\n    }\n    cmd += ' :wrapper';\n\n    let checksum: string | null = null;\n    const distributionUrl = getDistributionUrl(newPackageFileContent);\n    if (distributionUrl) {\n      cmd += ` --gradle-distribution-url ${distributionUrl}`;\n      if (newPackageFileContent.includes('distributionSha256Sum=')) {\n        //update checksum in case of distributionSha256Sum in properties then run wrapper\n        checksum = await getDistributionChecksum(distributionUrl);\n        await writeLocalFile(\n          packageFileName,\n          newPackageFileContent.replace(\n            /distributionSha256Sum=.*/,\n            `distributionSha256Sum=${checksum}`,\n          ),\n        );\n        cmd += ` --gradle-distribution-sha256-sum ${quote(checksum)}`;\n      }\n    } else {\n      cmd += ` --gradle-version ${quote(config.newValue!)}`;\n    }\n    logger.debug(`Updating gradle wrapper: \"${cmd}\"`);\n    const execOptions: ExecOptions = {\n      cwdFile: gradlewFile,\n      docker: {},\n      extraEnv,\n      toolConstraints: [\n        {\n          toolName: 'java',\n          constraint:\n            config.constraints?.java ??\n            (await getJavaConstraint(config.currentValue, gradlewFile)),\n        },\n      ],\n    };\n    try {\n      await exec(cmd, execOptions);\n    } catch (err) {\n      // istanbul ignore if\n      if (err.message === TEMPORARY_ERROR) {\n        throw err;\n      }\n      logger.warn(\n        { err },\n        'Error executing gradle wrapper update command. It can be not a critical one though.',\n      );\n    }\n\n    const buildFileName = await updateBuildFile(localGradleDir, {\n      gradleVersion: config.newValue,\n      distributionSha256Sum: checksum,\n      distributionUrl,\n    });\n    const lockFiles = await updateLockFiles(buildFileName, config);\n\n    const status = await getRepoStatus();\n    const artifactFileNames = [\n      packageFileName,\n      buildFileName,\n      ...['gradle/wrapper/gradle-wrapper.jar', 'gradlew', 'gradlew.bat'].map(\n        (filename) => join(localGradleDir, filename),\n      ),\n    ];\n    const updateArtifactsResult = (\n      await Promise.all(\n        artifactFileNames.map((fileProjectPath) =>\n          addIfUpdated(status, fileProjectPath),\n        ),\n      )\n    ).filter(is.truthy);\n    if (lockFiles) {\n      updateArtifactsResult.push(...lockFiles);\n    }\n\n    logger.debug(\n      { files: updateArtifactsResult.map((r) => r.file?.path) },\n      `Returning updated gradle-wrapper files`,\n    );\n    return updateArtifactsResult;\n  } catch (err) {\n    logger.debug({ err }, 'Error setting new Gradle Wrapper release value');\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}