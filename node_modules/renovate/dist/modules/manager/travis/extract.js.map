{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/travis/extract.ts"],"names":[],"mappings":";;AAOA,gDAyDC;;AAhED,kEAAkC;AAClC,4CAAyC;AACzC,6CAAqD;AACrD,gEAAsE;AAItE,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAoB;IAEpB,IAAI,GAAe,CAAC;IACpB,IAAI,CAAC;QACH,2BAA2B;QAC3B,GAAG,GAAG,IAAA,sBAAe,EAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,mCAAmC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,IAAI,GAAwB,EAAE,CAAC;IACnC,IAAI,GAAG,IAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QACjC,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACxC,OAAO,EAAE,MAAM;YACf,UAAU,EAAE,oCAAqB,CAAC,EAAE;YACpC,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;SACtC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,2BAA2B;IAC3B,IAAI,cAA8C,CAAC;IACnD,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;QACvB,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IACpC,CAAC;SAAM,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;QAChC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;IACtC,CAAC;IAED,IAAI,CAAC,YAAE,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACvC,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,cAAc,EAAE,CAAC;QAClC,IAAI,IAAI,EAAE,OAAO,EAAE,CAAC;YAClB,IAAI,YAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;oBACpC,IAAI,CAAC,IAAI,CAAC;wBACR,OAAO,EAAE,MAAM;wBACf,UAAU,EAAE,oCAAqB,CAAC,EAAE;wBACpC,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE;qBACtC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;iBAAM,IAAI,YAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;gBACnC,IAAI,CAAC,IAAI,CAAC;oBACR,OAAO,EAAE,MAAM;oBACf,UAAU,EAAE,oCAAqB,CAAC,EAAE;oBACpC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;iBACtC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { NodeVersionDatasource } from '../../datasource/node-version';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { TravisMatrixItem, TravisYaml } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile?: string,\n): PackageFileContent | null {\n  let doc: TravisYaml;\n  try {\n    // TODO: use schema (#9610)\n    doc = parseSingleYaml(content);\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse .travis.yml file.');\n    return null;\n  }\n  let deps: PackageDependency[] = [];\n  if (doc && is.array(doc.node_js)) {\n    deps = doc.node_js.map((currentValue) => ({\n      depName: 'node',\n      datasource: NodeVersionDatasource.id,\n      currentValue: currentValue.toString(),\n    }));\n  }\n\n  // Handle the matrix syntax\n  let matrix_include: TravisMatrixItem[] | undefined;\n  if (doc?.jobs?.include) {\n    matrix_include = doc.jobs.include;\n  } else if (doc?.matrix?.include) {\n    matrix_include = doc.matrix.include;\n  }\n\n  if (!is.array(matrix_include)) {\n    return deps.length ? { deps } : null;\n  }\n\n  for (const item of matrix_include) {\n    if (item?.node_js) {\n      if (is.array(item.node_js)) {\n        item.node_js.forEach((currentValue) => {\n          deps.push({\n            depName: 'node',\n            datasource: NodeVersionDatasource.id,\n            currentValue: currentValue.toString(),\n          });\n        });\n      } else if (is.string(item.node_js)) {\n        deps.push({\n          depName: 'node',\n          datasource: NodeVersionDatasource.id,\n          currentValue: item.node_js.toString(),\n        });\n      }\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}