{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/jsonnet-bundler/extract.ts"],"names":[],"mappings":";;AAQA,gDA+BC;AAvCD,iCAA6B;AAC7B,4CAAyC;AACzC,+CAAkD;AAClD,iDAAoD;AACpD,2CAA6C;AAI7C,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,sCAAsC,CAAC,CAAC;IAEtE,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,WAAwB,CAAC;IAC7B,IAAI,CAAC;QACH,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAgB,CAAC;IACnD,CAAC;IAAC,MAAM,CAAC;QACP,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,MAAM,UAAU,IAAI,IAAA,mBAAW,EAAC,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC;QAC/D,MAAM,GAAG,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAED,SAAS,iBAAiB,CAAC,UAAsB;IAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,SAAS,GAAG,IAAA,cAAQ,EAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzD,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,wBAAwB,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,OAAO,GAAG,IAAA,YAAI,EAClB,SAAS,CAAC,IAAI,EACd,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EACxC,IAAA,qBAAY,EAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAC3C,CAAC;IAEF,OAAO;QACL,OAAO;QACP,WAAW,EAAE,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM;QACzC,YAAY,EAAE,UAAU,CAAC,OAAO;QAChC,WAAW,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE;KACtD,CAAC;AACJ,CAAC","sourcesContent":["import { join } from 'upath';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { coerceString } from '../../../util/string';\nimport { parseUrl } from '../../../util/url';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { Dependency, JsonnetFile } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  logger.trace({ packageFile }, 'jsonnet-bundler.extractPackageFile()');\n\n  if (packageFile.includes('vendor/')) {\n    return null;\n  }\n\n  const deps: PackageDependency[] = [];\n  let jsonnetFile: JsonnetFile;\n  try {\n    jsonnetFile = JSON.parse(content) as JsonnetFile;\n  } catch {\n    logger.debug({ packageFile }, `Invalid JSON`);\n    return null;\n  }\n\n  for (const dependency of coerceArray(jsonnetFile.dependencies)) {\n    const dep = extractDependency(dependency);\n    if (dep) {\n      deps.push(dep);\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n\nfunction extractDependency(dependency: Dependency): PackageDependency | null {\n  if (!dependency.source.git) {\n    return null;\n  }\n\n  const gitRemote = parseUrl(dependency.source.git.remote);\n  if (!gitRemote) {\n    logger.debug({ dependency }, 'Invalid Git remote URL');\n    return null;\n  }\n\n  const depName = join(\n    gitRemote.host,\n    gitRemote.pathname.replace(/\\.git$/, ''),\n    coerceString(dependency.source.git.subdir),\n  );\n\n  return {\n    depName,\n    packageName: dependency.source.git.remote,\n    currentValue: dependency.version,\n    managerData: { subdir: dependency.source.git.subdir },\n  };\n}\n"]}