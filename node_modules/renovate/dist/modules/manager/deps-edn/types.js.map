{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../lib/modules/manager/deps-edn/types.ts"],"names":[],"mappings":"","sourcesContent":["export type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never;\nexport type TokenTypes<T> = keyof UnionToIntersection<T[keyof T]>;\n\nexport type ParsedEdnPrimitive = string | null;\nexport type ParsedEdnArray = ParsedEdnData[];\n// Interface not possible due to circular reference\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type ParsedEdnRecord = { [k: string]: ParsedEdnData };\nexport type ParsedEdnData =\n  | ParsedEdnPrimitive\n  | ParsedEdnRecord\n  | ParsedEdnArray;\n\nexport type ParserState =\n  | {\n      type: 'root';\n      data: ParsedEdnData;\n    }\n  | {\n      type: 'array';\n      startIndex: number;\n      data: ParsedEdnArray;\n    }\n  | {\n      type: 'record';\n      skipKey: boolean;\n      currentKey: string | null;\n      startIndex: number;\n      data: ParsedEdnRecord;\n    };\n\nexport interface EdnMetadata {\n  replaceString: string;\n}\n\nexport type ParsedEdnMetadata = WeakMap<\n  ParsedEdnRecord | ParsedEdnArray,\n  EdnMetadata\n>;\n\nexport interface ParsedEdnResult {\n  data: ParsedEdnRecord;\n  metadata: ParsedEdnMetadata;\n}\n"]}