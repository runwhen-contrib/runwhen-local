{"version":3,"file":"maven.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel-module/parser/maven.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { MavenDatasource } from '../../../datasource/maven';\nimport { id as versioning } from '../../../versioning/gradle';\nimport type { PackageDependency } from '../../types';\nimport {\n  ExtensionTagFragmentSchema,\n  StringArrayFragmentSchema,\n  StringFragmentSchema,\n} from './fragments';\n\nconst artifactTag = 'artifact';\nconst installTag = 'install';\nconst commonDepType = 'maven_install';\n\nexport const mavenExtensionPrefix = 'maven';\n\nexport const mavenExtensionTags = [artifactTag, installTag];\n\nfunction depTypeByTag(tag: string): string {\n  return `maven_${tag}`;\n}\n\nconst ArtifactSpec = z.object({\n  group: z.string(),\n  artifact: z.string(),\n  version: z.string(),\n});\ntype ArtifactSpec = z.infer<typeof ArtifactSpec>;\n\nconst MavenArtifactTarget = ExtensionTagFragmentSchema.extend({\n  extension: z.literal(mavenExtensionPrefix),\n  tag: z.literal(artifactTag),\n  children: z.object({\n    artifact: StringFragmentSchema,\n    group: StringFragmentSchema,\n    version: StringFragmentSchema,\n  }),\n}).transform(\n  ({ children: { artifact, group, version } }): PackageDependency[] => [\n    {\n      datasource: MavenDatasource.id,\n      versioning,\n      depName: `${group.value}:${artifact.value}`,\n      currentValue: version.value,\n      depType: depTypeByTag(artifactTag),\n    },\n  ],\n);\n\nconst MavenInstallTarget = ExtensionTagFragmentSchema.extend({\n  extension: z.literal(mavenExtensionPrefix),\n  tag: z.literal(installTag),\n  children: z.object({\n    artifacts: StringArrayFragmentSchema.transform((artifacts) => {\n      const result: ArtifactSpec[] = [];\n      for (const { value } of artifacts.items) {\n        const [group, artifact, version] = value.split(':');\n        if (group && artifact && version) {\n          result.push({ group, artifact, version });\n        }\n      }\n\n      return result;\n    }),\n    repositories: StringArrayFragmentSchema,\n  }),\n}).transform(({ children: { artifacts, repositories } }): PackageDependency[] =>\n  artifacts.map(({ group, artifact, version: currentValue }) => ({\n    datasource: MavenDatasource.id,\n    versioning,\n    depName: `${group}:${artifact}`,\n    currentValue,\n    depType: depTypeByTag(installTag),\n    registryUrls: repositories.items.map((i) => i.value),\n  })),\n);\n\nexport const RuleToMavenPackageDep = z.union([\n  MavenArtifactTarget,\n  MavenInstallTarget,\n]);\n\nexport function fillRegistryUrls(\n  packageDeps: PackageDependency[][],\n): PackageDependency[] {\n  const artifactRules: PackageDependency[] = [];\n  const registryUrls: string[] = [];\n  const result: PackageDependency[] = [];\n\n  // registry urls are specified only in maven.install, not in maven.artifact\n  packageDeps.flat().forEach((dep) => {\n    if (dep.depType === depTypeByTag(installTag)) {\n      if (Array.isArray(dep.registryUrls)) {\n        registryUrls.push(...dep.registryUrls);\n        result.push(dep);\n      }\n    } else if (dep.depType === depTypeByTag(artifactTag)) {\n      artifactRules.push(dep);\n    }\n  });\n\n  const uniqUrls = [...new Set(registryUrls)];\n\n  for (const artifactRule of artifactRules) {\n    artifactRule.registryUrls = uniqUrls;\n    artifactRule.depType = commonDepType;\n    result.push(artifactRule);\n  }\n\n  return result;\n}\n"]}