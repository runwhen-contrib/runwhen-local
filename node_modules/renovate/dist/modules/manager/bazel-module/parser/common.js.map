{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel-module/parser/common.ts"],"names":[],"mappings":";;;;AAAA,2DAAgD;AAChD,kDAA+C;AAE/C,6DAAuC;AAEvC,MAAM,kBAAkB,GAAG,IAAA,aAAK,EAAC,IAAI,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAEhF;;;;;IAKI;AACS,QAAA,QAAQ,GAAG,0BAAC;KACtB,GAAG,CAAM,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACzD,EAAE,CAAC,GAAG,CAAC;KACP,GAAG,CACF,0BAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EACjD,0BAAC,CAAC,GAAG,CAAM,kBAAkB,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAC3E,0BAAC,CAAC,IAAI,CAAC;IACL,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE;IACpC,UAAU,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,EAAE;IACrC,MAAM,EAAE,0BAAC,CAAC,IAAI,CAAC,0BAAC,CAAC,GAAG,CAAM,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;CACvE,CAAC,CACH,CAAC","sourcesContent":["import { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from './context';\nimport * as starlark from './starlark';\n\nconst booleanValuesRegex = regEx(`^${starlark.booleanStringValues.join('|')}$`);\n\n/**\n * Matches key-value pairs:\n * - `name = \"foobar\"`\n * - `name = True`\n * - `name = [\"string\"]`\n **/\nexport const kvParams = q\n  .sym<Ctx>((ctx, token) => ctx.startAttribute(token.value))\n  .op('=')\n  .alt(\n    q.str((ctx, token) => ctx.addString(token.value)),\n    q.sym<Ctx>(booleanValuesRegex, (ctx, token) => ctx.addBoolean(token.value)),\n    q.tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '[',\n      endsWith: ']',\n      postHandler: (ctx) => ctx.endArray(),\n      preHandler: (ctx) => ctx.startArray(),\n      search: q.many(q.str<Ctx>((ctx, token) => ctx.addString(token.value))),\n    }),\n  );\n"]}