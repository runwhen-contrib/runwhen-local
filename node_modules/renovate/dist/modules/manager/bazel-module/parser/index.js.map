{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel-module/parser/index.ts"],"names":[],"mappings":";;AAgBA,sBAGC;AAnBD,2DAAsD;AACtD,uCAAgC;AAChC,qDAAiD;AAEjD,mCAAgC;AAEhC,MAAM,IAAI,GAAG,0BAAC,CAAC,GAAG,CAAM,aAAK,EAAE,8BAAa,CAAC,CAAC;AAE9C,MAAM,KAAK,GAAG,0BAAC,CAAC,IAAI,CAAM;IACxB,IAAI,EAAE,WAAW;IACjB,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,IAAI;CACb,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,yBAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAEjD,SAAgB,KAAK,CAAC,KAAa;IACjC,MAAM,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,aAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACtE,OAAO,YAAY,EAAE,OAAO,IAAI,EAAE,CAAC;AACrC,CAAC","sourcesContent":["import { lang, query as q } from 'good-enough-parser';\nimport { Ctx } from './context';\nimport { extensionTags } from './extension-tags';\nimport type { ResultFragment } from './fragments';\nimport { rules } from './rules';\n\nconst rule = q.alt<Ctx>(rules, extensionTags);\n\nconst query = q.tree<Ctx>({\n  type: 'root-tree',\n  maxDepth: 16,\n  search: rule,\n});\n\nconst starlarkLang = lang.createLang('starlark');\n\nexport function parse(input: string): ResultFragment[] {\n  const parsedResult = starlarkLang.query(input, query, new Ctx(input));\n  return parsedResult?.results ?? [];\n}\n"]}