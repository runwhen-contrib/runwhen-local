{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel-module/extract.ts"],"names":[],"mappings":";;AAgBA,gDA4BC;;AA5CD,iCAAgC;AAChC,4CAAyC;AACzC,+CAA2D;AAC3D,6DAAwD;AAExD,2DAAqC;AACrC,qCAAiC;AAEjC,0CAAyE;AACzE,sCAAsD;AACtD,mCAGiB;AACjB,uDAAiC;AAE1B,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB;IAEnB,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,IAAA,cAAK,EAAC,OAAO,CAAC,CAAC;QAC/B,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACxD,MAAM,iBAAiB,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,UAAU,GAAG,IAAA,yBAAU,EAAC,4BAAsB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAErE,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC7B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAC;QACtC,CAAC;QAED,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;YACtB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;QAC/B,CAAC;QAED,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IACtC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,oCAAoC,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED,KAAK,UAAU,eAAe,CAC5B,OAAyB,EACzB,WAAmB;IAEnB,MAAM,GAAG,GAAuB,IAAA,yBAAU,EAAC,mCAA2B,CAAC;SACpE,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC;SACtC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;SAC/B,KAAK,CAAC,OAAO,CAAC,CAAC;IAElB,MAAM,YAAY,GAAG,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,IAAA,eAAO,EAAC,WAAW,CAAC,CAAC,CAAC;QAC7D,+CAA+C;SAC9C,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,KAAK,SAAS,CAAC;SACvC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC;SAC5C,MAAM,CAAC,4BAAoB,CAAC,CAAC;IAChC,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;IAClC,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,wBAAwB,CAC/B,OAAyB;IAEzB,OAAO,IAAA,yBAAU,EAAC,iCAAyB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,gBAAgB,CAAC,OAAyB;IACjD,OAAO,IAAA,yBAAU,EAAC,6BAAqB,CAAC;SACrC,SAAS,CAAC,wBAAgB,CAAC;SAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import { dirname } from 'upath';\nimport { logger } from '../../../logger';\nimport { isNotNullOrUndefined } from '../../../util/array';\nimport { LooseArray } from '../../../util/schema-utils';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport * as bazelrc from './bazelrc';\nimport { parse } from './parser';\nimport type { ResultFragment } from './parser/fragments';\nimport { RuleToMavenPackageDep, fillRegistryUrls } from './parser/maven';\nimport { RuleToDockerPackageDep } from './parser/oci';\nimport {\n  GitRepositoryToPackageDep,\n  RuleToBazelModulePackageDep,\n} from './rules';\nimport * as rules from './rules';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n): Promise<PackageFileContent | null> {\n  try {\n    const records = parse(content);\n    const pfc = await extractBazelPfc(records, packageFile);\n    const gitRepositoryDeps = extractGitRepositoryDeps(records);\n    const mavenDeps = extractMavenDeps(records);\n    const dockerDeps = LooseArray(RuleToDockerPackageDep).parse(records);\n\n    if (gitRepositoryDeps.length) {\n      pfc.deps.push(...gitRepositoryDeps);\n    }\n\n    if (mavenDeps.length) {\n      pfc.deps.push(...mavenDeps);\n    }\n\n    if (dockerDeps.length) {\n      pfc.deps.push(...dockerDeps);\n    }\n\n    return pfc.deps.length ? pfc : null;\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse bazel module file.');\n    return null;\n  }\n}\n\nasync function extractBazelPfc(\n  records: ResultFragment[],\n  packageFile: string,\n): Promise<PackageFileContent> {\n  const pfc: PackageFileContent = LooseArray(RuleToBazelModulePackageDep)\n    .transform(rules.toPackageDependencies)\n    .transform((deps) => ({ deps }))\n    .parse(records);\n\n  const registryUrls = (await bazelrc.read(dirname(packageFile)))\n    // Ignore any entries for custom configurations\n    .filter((ce) => ce.config === undefined)\n    .map((ce) => ce.getOption('registry')?.value)\n    .filter(isNotNullOrUndefined);\n  if (registryUrls.length) {\n    pfc.registryUrls = registryUrls;\n  }\n\n  return pfc;\n}\n\nfunction extractGitRepositoryDeps(\n  records: ResultFragment[],\n): PackageDependency[] {\n  return LooseArray(GitRepositoryToPackageDep).parse(records);\n}\n\nfunction extractMavenDeps(records: ResultFragment[]): PackageDependency[] {\n  return LooseArray(RuleToMavenPackageDep)\n    .transform(fillRegistryUrls)\n    .parse(records);\n}\n"]}