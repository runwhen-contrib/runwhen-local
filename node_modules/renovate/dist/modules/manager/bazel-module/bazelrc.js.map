{"version":3,"file":"bazelrc.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel-module/bazelrc.ts"],"names":[],"mappings":"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","sourcesContent":["import upath from 'upath';\nimport { logger } from '../../../logger';\nimport { isNotNullOrUndefined } from '../../../util/array';\nimport * as fs from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\n\nconst importRegex = regEx(`^(?<type>(?:try-)?import)\\\\s+(?<path>\\\\S+)$`);\nconst optionRegex = regEx(\n  `^(?<command>\\\\w+)(:(?<config>\\\\S+))?\\\\s+(?<options>.*)$`,\n);\nconst spaceRegex = regEx(`\\\\s+`);\n\nexport class ImportEntry {\n  readonly entryType = 'import';\n  constructor(\n    readonly path: string,\n    readonly isTry: boolean,\n  ) {}\n}\n\nexport class BazelOption {\n  constructor(\n    readonly name: string,\n    readonly value?: string,\n  ) {}\n\n  static parse(input: string): BazelOption[] {\n    const options: BazelOption[] = [];\n    const parts = input.split(spaceRegex);\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      if (!part.startsWith('--')) {\n        continue;\n      }\n\n      const nameStartIdx = 2;\n      // Check for --option_name=option_value\n      const equalSignIdx = part.indexOf('=');\n      if (equalSignIdx >= 0) {\n        const name = part.substring(nameStartIdx, equalSignIdx);\n        const value = part.substring(equalSignIdx + 1);\n        options.push(new BazelOption(name, value));\n        continue;\n      }\n\n      const name = part.substring(nameStartIdx);\n      const nextIdx = i + 1;\n      // Check for --option_name OR --option_name option_value\n      const value =\n        nextIdx < parts.length && !parts[nextIdx].startsWith('--')\n          ? parts[nextIdx]\n          : undefined;\n      options.push(new BazelOption(name, value));\n    }\n    return options;\n  }\n}\n\nexport class CommandEntry {\n  readonly entryType = 'command';\n  constructor(\n    readonly command: string,\n    readonly options: BazelOption[],\n    readonly config?: string,\n  ) {}\n\n  getOption(name: string): BazelOption | undefined {\n    return this.options.find((bo) => bo.name === name);\n  }\n}\n\ntype BazelrcEntries = ImportEntry | CommandEntry;\n\nfunction shouldProcessLine(line: string): boolean {\n  if (line.length === 0) {\n    return false;\n  }\n  return !line.startsWith('#');\n}\n\nfunction createEntry(line: string): BazelrcEntries | undefined {\n  const importResult = importRegex.exec(line);\n  if (importResult?.groups) {\n    const irGroups = importResult.groups;\n    return new ImportEntry(irGroups.path, irGroups.type === 'try-import');\n  }\n  const optionResult = optionRegex.exec(line);\n  if (optionResult?.groups) {\n    const orGroups = optionResult.groups;\n    return new CommandEntry(\n      orGroups.command,\n      BazelOption.parse(orGroups.options),\n      orGroups.config,\n    );\n  }\n  return undefined;\n}\n\nexport function parse(contents: string): BazelrcEntries[] {\n  return contents\n    .split('\\n')\n    .map((l) => l.trim())\n    .filter(shouldProcessLine)\n    .map(createEntry)\n    .filter(isNotNullOrUndefined);\n}\n\nasync function readFile(\n  file: string,\n  workspaceDir: string,\n  readFiles: Set<string>,\n): Promise<CommandEntry[]> {\n  if (readFiles.has(file)) {\n    throw new Error(\n      `Attempted to read a bazelrc multiple times. file: ${file}`,\n    );\n  }\n  readFiles.add(file);\n  const contents = await fs.readLocalFile(file, 'utf8');\n  if (!contents) {\n    return [];\n  }\n  const entries = parse(contents);\n  const results: CommandEntry[] = [];\n  for (const entry of entries) {\n    if (entry.entryType === 'command') {\n      results.push(entry);\n      continue;\n    }\n\n    const importFile = upath.normalize(\n      entry.path.replace('%workspace%', workspaceDir),\n    );\n    if (fs.isValidLocalPath(importFile)) {\n      const importEntries = await readFile(importFile, workspaceDir, readFiles);\n      results.push(...importEntries);\n    } else {\n      logger.debug(`Skipping non-local .bazelrc import ${importFile}`);\n    }\n  }\n  return results;\n}\n\nexport async function read(workspaceDir: string): Promise<CommandEntry[]> {\n  const bazelrcPath = upath.join(workspaceDir, '.bazelrc');\n  const readFiles = new Set<string>();\n  return await readFile(bazelrcPath, workspaceDir, readFiles);\n}\n"]}