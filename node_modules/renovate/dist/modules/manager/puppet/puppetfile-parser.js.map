{"version":3,"file":"puppetfile-parser.js","sourceRoot":"","sources":["../../../../lib/modules/manager/puppet/puppetfile-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { coerceArray } from '../../../util/array';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { PuppetfileModule } from './types';\n\nconst forgeRegex = regEx(/^forge\\s+['\"]([^'\"]+)['\"]/);\nconst commentRegex = regEx(/#.*$/);\n\n/**\n * For us a Puppetfile is build up of forges that have Modules.\n *\n * Modules are the updatable parts.\n *\n */\nexport class Puppetfile {\n  private readonly forgeModules = new Map<string | null, PuppetfileModule[]>();\n\n  public add(currentForge: string | null, module: PuppetfileModule): void {\n    if (Object.keys(module).length === 0) {\n      return;\n    }\n\n    if (!this.forgeModules.has(currentForge)) {\n      this.forgeModules.set(currentForge, []);\n    }\n\n    this.forgeModules.get(currentForge)?.push(module);\n  }\n\n  public getForges(): (string | null)[] {\n    return Array.from(this.forgeModules.keys());\n  }\n\n  public getModulesOfForge(\n    forgeUrl: string | null | undefined,\n  ): PuppetfileModule[] {\n    const modules = this.forgeModules.get(forgeUrl ?? null);\n\n    return coerceArray(modules);\n  }\n}\n\nexport function parsePuppetfile(content: string): Puppetfile {\n  const puppetfile: Puppetfile = new Puppetfile();\n\n  let currentForge: string | null = null;\n  let currentPuppetfileModule: PuppetfileModule = {};\n\n  for (const rawLine of content.split(newlineRegex)) {\n    // remove comments\n    const line = rawLine.replace(commentRegex, '');\n\n    const forgeResult = forgeRegex.exec(line);\n    if (forgeResult) {\n      puppetfile.add(currentForge, currentPuppetfileModule);\n\n      currentPuppetfileModule = {};\n\n      currentForge = forgeResult[1];\n      continue;\n    }\n\n    const moduleStart = line.startsWith('mod');\n\n    if (moduleStart) {\n      puppetfile.add(currentForge, currentPuppetfileModule);\n      currentPuppetfileModule = {};\n    }\n\n    const moduleValueRegex = regEx(/(?:\\s*:(\\w+)\\s+=>\\s+)?['\"]([^'\"]+)['\"]/g);\n    let moduleValue: RegExpExecArray | null;\n\n    while ((moduleValue = moduleValueRegex.exec(line)) !== null) {\n      const key = moduleValue[1];\n      const value = moduleValue[2];\n\n      if (key) {\n        currentPuppetfileModule.tags =\n          currentPuppetfileModule.tags ?? new Map();\n        currentPuppetfileModule.tags.set(key, value);\n      } else {\n        fillPuppetfileModule(currentPuppetfileModule, value);\n      }\n    }\n  }\n\n  puppetfile.add(currentForge, currentPuppetfileModule);\n\n  return puppetfile;\n}\n\nfunction fillPuppetfileModule(\n  currentPuppetfileModule: PuppetfileModule,\n  value: string,\n): void {\n  // \"positional\" module values\n  if (currentPuppetfileModule.name === undefined) {\n    // moduleName\n    currentPuppetfileModule.name = value;\n  } else if (currentPuppetfileModule.version === undefined) {\n    // second value without a key is the version\n    currentPuppetfileModule.version = value;\n  } else {\n    // 3+ value without a key is not supported\n    currentPuppetfileModule.skipReason = 'invalid-config';\n  }\n}\n"]}