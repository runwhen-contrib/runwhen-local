{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/git-submodules/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'node:url';\nimport type { SimpleGit } from 'simple-git';\nimport Git from 'simple-git';\nimport upath from 'upath';\nimport { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { getGitEnvironmentVariables } from '../../../util/git/auth';\nimport { simpleGitConfig } from '../../../util/git/config';\nimport { getHttpUrl } from '../../../util/git/url';\nimport { regEx } from '../../../util/regex';\nimport { GitRefsDatasource } from '../../datasource/git-refs';\nimport * as semVerVersioning from '../../versioning/semver';\nimport type { ExtractConfig, PackageFileContent } from '../types';\nimport type { GitModule } from './types';\n\nasync function getUrl(\n  git: SimpleGit,\n  gitModulesPath: string,\n  submoduleName: string,\n): Promise<string> {\n  const path = (\n    await Git(simpleGitConfig()).raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.url`,\n    ])\n  )?.trim();\n  if (!path?.startsWith('../')) {\n    return path;\n  }\n  const remoteUrl = (\n    await git.raw(['config', '--get', 'remote.origin.url'])\n  ).trim();\n  return URL.resolve(`${remoteUrl}/`, path);\n}\n\nconst headRefRe = regEx(/ref: refs\\/heads\\/(?<branch>\\w+)\\s/);\n\nasync function getDefaultBranch(subModuleUrl: string): Promise<string> {\n  const gitSubmoduleAuthEnvironmentVariables = getGitEnvironmentVariables([\n    'git-tags',\n    'git-refs',\n  ]);\n  const gitEnv = {\n    // pass all existing env variables\n    ...process.env,\n    // add all known git Variables\n    ...gitSubmoduleAuthEnvironmentVariables,\n  };\n  const val = await Git(simpleGitConfig())\n    .env(gitEnv)\n    .listRemote(['--symref', subModuleUrl, 'HEAD']);\n  return headRefRe.exec(val)?.groups?.branch ?? 'master';\n}\n\nasync function getBranch(\n  git: SimpleGit,\n  gitModulesPath: string,\n  submoduleName: string,\n  subModuleUrl: string,\n): Promise<string> {\n  const branchFromConfig = (\n    await Git(simpleGitConfig()).raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.branch`,\n    ])\n  ).trim();\n\n  return branchFromConfig === '.'\n    ? (await git.branch(['--list'])).current.trim()\n    : branchFromConfig || (await getDefaultBranch(subModuleUrl)).trim();\n}\n\nasync function getModules(\n  git: SimpleGit,\n  gitModulesPath: string,\n): Promise<GitModule[]> {\n  const res: GitModule[] = [];\n  try {\n    const modules = (\n      (await git.raw([\n        'config',\n        '--file',\n        gitModulesPath,\n        '--get-regexp',\n        '\\\\.path',\n      ])) ?? /* istanbul ignore next: should never happen */ ''\n    )\n      .trim()\n      .split(regEx(/\\n/))\n      .filter((s) => !!s);\n\n    for (const line of modules) {\n      const [, name, path] = line.split(regEx(/submodule\\.(.+?)\\.path\\s(.+)/));\n      res.push({ name, path });\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error getting git submodules during extract');\n  }\n  return res;\n}\n\nexport default async function extractPackageFile(\n  _content: string,\n  packageFile: string,\n  _config: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  const localDir = GlobalConfig.get('localDir');\n  const git = Git(localDir, simpleGitConfig());\n  const gitModulesPath = upath.join(localDir, packageFile);\n\n  const depNames = await getModules(git, gitModulesPath);\n\n  if (!depNames.length) {\n    return null;\n  }\n\n  const deps = [];\n  for (const { name, path } of depNames) {\n    try {\n      const [currentDigest] = (\n        await git.subModule(['status', '--cached', path])\n      )\n        .trim()\n        .replace(regEx(/^[-+]/), '')\n        .split(regEx(/\\s/));\n      const subModuleUrl = await getUrl(git, gitModulesPath, name);\n      const httpSubModuleUrl = getHttpUrl(subModuleUrl);\n      const currentValue = await getBranch(\n        git,\n        gitModulesPath,\n        name,\n        httpSubModuleUrl,\n      );\n      deps.push({\n        depName: path,\n        packageName: httpSubModuleUrl,\n        currentValue,\n        currentDigest,\n        ...(semVerVersioning.api.isVersion(currentValue)\n          ? { versioning: semVerVersioning.id }\n          : {}),\n      });\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn(\n        { err, packageFile },\n        'Error mapping git submodules during extraction',\n      );\n    }\n  }\n\n  return { deps, datasource: GitRefsDatasource.id };\n}\n"]}