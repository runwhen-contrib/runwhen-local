{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/woodpecker/extract.ts"],"names":[],"mappings":";;AAgBA,gDAiDC;;AAjED,kEAAkC;AAClC,4CAAyC;AACzC,6CAAqD;AACrD,mDAA+C;AAI/C,SAAS,wBAAwB,CAC/B,gBAAkC;IAElC,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACxD,OAAO,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAClD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CACW,CAAC;AAClC,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,aAA4B;IAE5B,eAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;IAChD,IAAI,MAAwB,CAAC;IAC7B,IAAI,CAAC;QACH,2BAA2B;QAC3B,MAAM,GAAG,IAAA,sBAAe,EAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,2DAA2D,CAC5D,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC/B,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,MAAM,EAAE,EACpC,sDAAsD,CACvD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,GAAG,EAAE,EACpB,oDAAoD,CACrD,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,YAAY,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAEtD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC9B,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,gCAAgC,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0EAA0E;IAC1E,sDAAsD;IACtD,MAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE,CAChD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;SACrC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,YAAE,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACxC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC,CAC1E,CAAC;IAEF,eAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,gCAAgC,CAAC,CAAC;IACzD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { getDep } from '../dockerfile/extract';\nimport type { ExtractConfig, PackageFileContent } from '../types';\nimport type { WoodpeckerConfig } from './types';\n\nfunction woodpeckerVersionDecider(\n  woodpeckerConfig: WoodpeckerConfig,\n): (keyof WoodpeckerConfig)[] {\n  const keys = ['clone', 'steps', 'pipeline', 'services'];\n  return Object.keys(woodpeckerConfig).filter((key) =>\n    keys.includes(key),\n  ) as (keyof WoodpeckerConfig)[];\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  extractConfig: ExtractConfig,\n): PackageFileContent | null {\n  logger.debug('woodpecker.extractPackageFile()');\n  let config: WoodpeckerConfig;\n  try {\n    // TODO: use schema (#9610)\n    config = parseSingleYaml(content);\n    if (!config) {\n      logger.debug(\n        { packageFile },\n        'Null config when parsing Woodpecker Configuration content',\n      );\n      return null;\n    }\n    if (typeof config !== 'object') {\n      logger.debug(\n        { packageFile, type: typeof config },\n        'Unexpected type for Woodpecker Configuration content',\n      );\n      return null;\n    }\n  } catch (err) {\n    logger.debug(\n      { packageFile, err },\n      'Error parsing Woodpecker Configuration config YAML',\n    );\n    return null;\n  }\n\n  const pipelineKeys = woodpeckerVersionDecider(config);\n\n  if (pipelineKeys.length === 0) {\n    logger.debug({ packageFile }, \"Couldn't identify dependencies\");\n    return null;\n  }\n\n  // Image name/tags for services are only eligible for update if they don't\n  // use variables and if the image is not built locally\n  const deps = pipelineKeys.flatMap((pipelineKey) =>\n    Object.values(config[pipelineKey] ?? {})\n      .filter((step) => is.string(step?.image))\n      .map((step) => getDep(step.image, true, extractConfig.registryAliases)),\n  );\n\n  logger.trace({ deps }, 'Woodpecker Configuration image');\n  return deps.length ? { deps } : null;\n}\n"]}