{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bitbucket-pipelines/util.ts"],"names":[],"mappings":";;;AAWA,oDAYC;AAED,kDAQC;AAED,4CAgCC;AAnED,+CAA4C;AAC5C,oEAA0E;AAC1E,mDAA+C;AAGlC,QAAA,SAAS,GAAG,IAAA,aAAK,EAAC,6CAA6C,CAAC,CAAC;AACjE,QAAA,gBAAgB,GAAG,IAAA,aAAK,EACnC,+CAA+C,CAChD,CAAC;AACW,QAAA,sBAAsB,GAAG,IAAA,aAAK,EAAC,6BAA6B,CAAC,CAAC;AAE3E,SAAgB,oBAAoB,CAClC,IAAyB,EACzB,IAAY;IAEZ,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChD,MAAM,GAAG,GAAsB;QAC7B,OAAO;QACP,YAAY;QACZ,UAAU,EAAE,wCAAuB,CAAC,EAAE;KACvC,CAAC;IACF,GAAG,CAAC,OAAO,GAAG,gBAAgB,CAAC;IAC/B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjB,CAAC;AAED,SAAgB,mBAAmB,CACjC,IAAyB,EACzB,kBAA0B,EAC1B,eAAwC;IAExC,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,kBAAkB,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;IAC9D,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjB,CAAC;AAED,SAAgB,gBAAgB,CAC9B,IAAyB,EACzB,KAAe,EACf,KAAa,EACb,GAAW,EACX,MAAc,EACd,eAAwC;IAExC,MAAM,SAAS,GAAG,IAAA,aAAK,EACrB,IAAI,MAAM,iDAAiD,CAC5D,CAAC;IACF,MAAM,WAAW,GAAG,IAAA,aAAK,EAAC,IAAI,MAAM,MAAM,CAAC,CAAC;IAE5C,KAAK,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;QAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QAExB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,YAAY;YACZ,OAAO,GAAG,CAAC;QACb,CAAC;QAED,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,GAAG,GAAG,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;YACxD,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,OAAO,GAAG,CAAC;QACb,CAAC;IACH,CAAC;IAED,YAAY;IACZ,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { BitbucketTagsDatasource } from '../../datasource/bitbucket-tags';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency } from '../types';\n\nexport const pipeRegex = regEx(`^\\\\s*-\\\\s?pipe:\\\\s*'?\"?([^\\\\s'\"]+)'?\"?\\\\s*$`);\nexport const dockerImageRegex = regEx(\n  `^\\\\s*-?\\\\s?image:\\\\s*'?\"?([^\\\\s'\"]+)'?\"?\\\\s*$`,\n);\nexport const dockerImageObjectRegex = regEx('^(?<spaces>\\\\s*)image:\\\\s*$');\n\nexport function addDepAsBitbucketTag(\n  deps: PackageDependency[],\n  pipe: string,\n): void {\n  const [depName, currentValue] = pipe.split(':');\n  const dep: PackageDependency = {\n    depName,\n    currentValue,\n    datasource: BitbucketTagsDatasource.id,\n  };\n  dep.depType = 'bitbucket-tags';\n  deps.push(dep);\n}\n\nexport function addDepAsDockerImage(\n  deps: PackageDependency[],\n  currentDockerImage: string,\n  registryAliases?: Record<string, string>,\n): void {\n  const dep = getDep(currentDockerImage, true, registryAliases);\n  dep.depType = 'docker';\n  deps.push(dep);\n}\n\nexport function addDepFromObject(\n  deps: PackageDependency[],\n  lines: string[],\n  start: number,\n  len: number,\n  spaces: string,\n  registryAliases?: Record<string, string>,\n): number {\n  const nameRegex = regEx(\n    `^${spaces}\\\\s+name:\\\\s*['\"]?(?<image>[^\\\\s'\"]+)['\"]?\\\\s*$`,\n  );\n  const indentRegex = regEx(`^${spaces}\\\\s+`);\n\n  for (let idx = start + 1; idx < len; idx++) {\n    const line = lines[idx];\n\n    if (!indentRegex.test(line)) {\n      // malformed\n      return idx;\n    }\n\n    const groups = nameRegex.exec(line)?.groups;\n    if (groups) {\n      const dep = getDep(groups.image, true, registryAliases);\n      dep.depType = 'docker';\n      deps.push(dep);\n      return idx;\n    }\n  }\n\n  // malformed\n  return start;\n}\n"]}