{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bitbucket-pipelines/extract.ts"],"names":[],"mappings":";;AAgBA,gDA4DC;AA5ED,4CAAyC;AACzC,+CAAmD;AAMnD,iCAOgB;AAEhB,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,MAAqB;IAErB,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,OAAO;aAClB,UAAU,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,sBAAsB;aACpD,UAAU,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,wBAAwB;aACzD,KAAK,CAAC,oBAAY,CAAC,CAAC;QACvB,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;QACzB,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC;YAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YAE5B,MAAM,uBAAuB,GAAG,6BAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC;YAC1E,IAAI,uBAAuB,EAAE,CAAC;gBAC5B,eAAe;gBACf,2EAA2E;gBAC3E,OAAO,GAAG,IAAA,uBAAgB,EACxB,IAAI,EACJ,KAAK,EACL,OAAO,EACP,GAAG,EACH,uBAAuB,CAAC,MAAM,EAC9B,MAAM,CAAC,eAAe,CACvB,CAAC;gBACF,SAAS;YACX,CAAC;YAED,MAAM,SAAS,GAAG,gBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAE1B,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;oBACjC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;oBAClD,IAAA,0BAAmB,EAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;gBACjE,CAAC;qBAAM,CAAC;oBACN,IAAA,2BAAoB,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnC,CAAC;gBACD,SAAS;YACX,CAAC;YAED,MAAM,gBAAgB,GAAG,uBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,gBAAgB,EAAE,CAAC;gBACrB,MAAM,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAA,0BAAmB,EAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;QACxC,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,WAAW,EAAE,EACpB,+CAA+C,CAChD,CAAC;IACJ,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex } from '../../../util/regex';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport {\n  addDepAsBitbucketTag,\n  addDepAsDockerImage,\n  addDepFromObject,\n  dockerImageObjectRegex,\n  dockerImageRegex,\n  pipeRegex,\n} from './util';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n\n  try {\n    const lines = content\n      .replaceAll(/^\\s*\\r?\\n/gm, '') // replace empty lines\n      .replaceAll(/^\\s*#.*\\r?\\n/gm, '') // replace comment lines\n      .split(newlineRegex);\n    const len = lines.length;\n    for (let lineIdx = 0; lineIdx < len; lineIdx++) {\n      const line = lines[lineIdx];\n\n      const dockerImageObjectGroups = dockerImageObjectRegex.exec(line)?.groups;\n      if (dockerImageObjectGroups) {\n        // image object\n        // https://support.atlassian.com/bitbucket-cloud/docs/docker-image-options/\n        lineIdx = addDepFromObject(\n          deps,\n          lines,\n          lineIdx,\n          len,\n          dockerImageObjectGroups.spaces,\n          config.registryAliases,\n        );\n        continue;\n      }\n\n      const pipeMatch = pipeRegex.exec(line);\n      if (pipeMatch) {\n        const pipe = pipeMatch[1];\n\n        if (pipe.startsWith('docker://')) {\n          const currentPipe = pipe.replace('docker://', '');\n          addDepAsDockerImage(deps, currentPipe, config.registryAliases);\n        } else {\n          addDepAsBitbucketTag(deps, pipe);\n        }\n        continue;\n      }\n\n      const dockerImageMatch = dockerImageRegex.exec(line);\n      if (dockerImageMatch) {\n        const currentFrom = dockerImageMatch[1];\n        addDepAsDockerImage(deps, currentFrom, config.registryAliases);\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { err, packageFile },\n      'Error extracting Bitbucket Pipes dependencies',\n    );\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}