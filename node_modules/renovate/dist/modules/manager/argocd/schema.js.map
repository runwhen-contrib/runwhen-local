{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/argocd/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAsE;AAEzD,QAAA,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IACzC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE;CACvB,CAAC,CAAC;AAEU,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,MAAM,EAAE,IAAA,yBAAU,EAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC1C,CAAC,CAAC;AACU,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,CAAC;IACxC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;IACnB,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE;IAC1B,SAAS,EAAE,4BAAoB,CAAC,QAAQ,EAAE;CAC3C,CAAC,CAAC;AAGU,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,MAAM,EAAE,yBAAiB,CAAC,QAAQ,EAAE;IACpC,OAAO,EAAE,IAAA,yBAAU,EAAC,yBAAiB,CAAC,CAAC,QAAQ,EAAE;CAClD,CAAC,CAAC;AAGU,QAAA,WAAW,GAAG,0BAAkB,CAAC,MAAM,CAAC;IACnD,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,aAAa,CAAC;IAC9B,IAAI,EAAE,uBAAe;CACtB,CAAC,CAAC;AAEU,QAAA,cAAc,GAAG,0BAAkB,CAAC,MAAM,CAAC;IACtD,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACjC,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,QAAQ,EAAE,OAAC,CAAC,MAAM,CAAC;YACjB,IAAI,EAAE,uBAAe;SACtB,CAAC;KACH,CAAC;CACH,CAAC,CAAC;AAEU,QAAA,qBAAqB,GAAG,mBAAW,CAAC,EAAE,CAAC,sBAAc,CAAC,CAAC;AAGvD,QAAA,2BAA2B,GAAG,IAAA,2BAAY,EAAC;IACtD,eAAe,EAAE,IAAI;CACtB,CAAC,CAAC,IAAI,CAAC,IAAA,yBAAU,EAAC,6BAAqB,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, multidocYaml } from '../../../util/schema-utils';\n\nexport const KubernetesResource = z.object({\n  apiVersion: z.string(),\n});\n\nexport const ApplicationKustomize = z.object({\n  images: LooseArray(z.string()).optional(),\n});\nexport const ApplicationSource = z.object({\n  chart: z.string().optional(),\n  repoURL: z.string(),\n  targetRevision: z.string(),\n  kustomize: ApplicationKustomize.optional(),\n});\nexport type ApplicationSource = z.infer<typeof ApplicationSource>;\n\nexport const ApplicationSpec = z.object({\n  source: ApplicationSource.optional(),\n  sources: LooseArray(ApplicationSource).optional(),\n});\nexport type ApplicationSpec = z.infer<typeof ApplicationSpec>;\n\nexport const Application = KubernetesResource.extend({\n  kind: z.literal('Application'),\n  spec: ApplicationSpec,\n});\n\nexport const ApplicationSet = KubernetesResource.extend({\n  kind: z.literal('ApplicationSet'),\n  spec: z.object({\n    template: z.object({\n      spec: ApplicationSpec,\n    }),\n  }),\n});\n\nexport const ApplicationDefinition = Application.or(ApplicationSet);\nexport type ApplicationDefinition = z.infer<typeof ApplicationDefinition>;\n\nexport const ApplicationDefinitionSchema = multidocYaml({\n  removeTemplates: true,\n}).pipe(LooseArray(ApplicationDefinition));\n"]}