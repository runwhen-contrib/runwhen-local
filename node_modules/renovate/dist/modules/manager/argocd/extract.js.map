{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/argocd/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { regEx } from '../../../util/regex';\nimport { withDebugMessage } from '../../../util/schema-utils';\nimport { trimTrailingSlash } from '../../../util/url';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { getDep } from '../dockerfile/extract';\nimport { isOCIRegistry, removeOCIPrefix } from '../helmv3/oci';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport {\n  type ApplicationDefinition,\n  ApplicationDefinitionSchema,\n  type ApplicationSource,\n  type ApplicationSpec,\n} from './schema';\nimport { fileTestRegex } from './util';\n\nconst kustomizeImageRe = regEx(/=(?<image>.+)$/);\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config?: ExtractConfig,\n): PackageFileContent | null {\n  // check for argo reference. API version for the kind attribute is used\n  if (fileTestRegex.test(content) === false) {\n    logger.debug(\n      `Skip file ${packageFile} as no argoproj.io apiVersion could be found in matched file`,\n    );\n    return null;\n  }\n\n  const definitions = ApplicationDefinitionSchema.catch(\n    withDebugMessage([], `${packageFile} does not match schema`),\n  ).parse(content);\n\n  const deps = definitions.flatMap(processAppSpec);\n\n  return deps.length ? { deps } : null;\n}\n\nfunction processSource(source: ApplicationSource): PackageDependency[] {\n  // a chart variable is defined this is helm declaration\n  if (source.chart) {\n    // assume OCI helm chart if repoURL doesn't contain explicit protocol\n    if (isOCIRegistry(source.repoURL) || !source.repoURL.includes('://')) {\n      const registryURL = trimTrailingSlash(removeOCIPrefix(source.repoURL));\n\n      return [\n        {\n          depName: `${registryURL}/${source.chart}`,\n          currentValue: source.targetRevision,\n          datasource: DockerDatasource.id,\n        },\n      ];\n    }\n\n    return [\n      {\n        depName: source.chart,\n        registryUrls: [source.repoURL],\n        currentValue: source.targetRevision,\n        datasource: HelmDatasource.id,\n      },\n    ];\n  }\n\n  const dependencies: PackageDependency[] = [\n    {\n      depName: source.repoURL,\n      currentValue: source.targetRevision,\n      datasource: GitTagsDatasource.id,\n    },\n  ];\n\n  // Git repo is pointing to a Kustomize resources\n  if (source.kustomize?.images) {\n    dependencies.push(\n      ...source.kustomize.images.map(processKustomizeImage).filter(is.truthy),\n    );\n  }\n\n  return dependencies;\n}\n\nfunction processAppSpec(\n  definition: ApplicationDefinition,\n): PackageDependency[] {\n  const spec: ApplicationSpec =\n    definition.kind === 'Application'\n      ? definition.spec\n      : definition.spec.template.spec;\n\n  const deps: PackageDependency[] = [];\n\n  if (is.nonEmptyObject(spec.source)) {\n    deps.push(...processSource(spec.source));\n  }\n\n  for (const source of coerceArray(spec.sources)) {\n    deps.push(...processSource(source));\n  }\n\n  return deps;\n}\n\nfunction processKustomizeImage(\n  kustomizeImage: string,\n): PackageDependency | null {\n  const parts = kustomizeImageRe.exec(kustomizeImage);\n  if (!parts?.groups?.image) {\n    return null;\n  }\n\n  return getDep(parts.groups.image);\n}\n"]}