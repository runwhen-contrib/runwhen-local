{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/manager/haskell-cabal/index.ts"],"names":[],"mappings":";;;AAqBA,gDA0BC;AAED,4CAOC;;AAtDD,sDAA6D;AAC7D,4EAAsD;AAOtD,uCAA+D;AAElD,QAAA,aAAa,GAAG;IAC3B,SAAS,EAAE,CAAC,WAAW,CAAC;IACxB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEW,QAAA,UAAU,GAAe,CAAC,SAAS,CAAC,CAAC;AAErC,QAAA,oBAAoB,GAAG,CAAC,2BAAiB,CAAC,EAAE,CAAC,CAAC;AAE3D,SAAgB,kBAAkB,CAAC,OAAe;IAChD,MAAM,IAAI,GAAG,EAAE,CAAC;IAChB,IAAI,OAAO,GAAG,OAAO,CAAC;IACtB,SAAS,CAAC;QACR,MAAM,YAAY,GAAG,IAAA,qBAAW,EAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;YAC1B,MAAM;QACR,CAAC;QACD,MAAM,SAAS,GAAsB,IAAA,+BAAqB,EACxD,YAAY,CAAC,mBAAmB,CACjC,CAAC;QACF,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,MAAM,GAAG,GAAsB;gBAC7B,OAAO,EAAE,QAAQ,CAAC,WAAW;gBAC7B,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,UAAU,EAAE,2BAAiB,CAAC,EAAE;gBAChC,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,UAAU,EAAE,aAAa,CAAC,EAAE;gBAC5B,aAAa,EAAE,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE;gBAC5C,yBAAyB,EAAE,8BAA8B;aAC1D,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;QACD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAED,SAAgB,gBAAgB,CAAC,EAC/B,aAAa,GACD;IACZ,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import type { Category } from '../../../constants';\nimport type { RangeStrategy } from '../../../types';\nimport { HackageDatasource } from '../../datasource/hackage';\nimport * as pvpVersioning from '../../versioning/pvp';\nimport type {\n  PackageDependency,\n  PackageFileContent,\n  RangeConfig,\n} from '../types';\nimport type { CabalDependency } from './extract';\nimport { extractNamesAndRanges, findDepends } from './extract';\n\nexport const defaultConfig = {\n  fileMatch: ['\\\\.cabal$'],\n  pinDigests: false,\n};\n\nexport const categories: Category[] = ['haskell'];\n\nexport const supportedDatasources = [HackageDatasource.id];\n\nexport function extractPackageFile(content: string): PackageFileContent {\n  const deps = [];\n  let current = content;\n  for (;;) {\n    const maybeContent = findDepends(current);\n    if (maybeContent === null) {\n      break;\n    }\n    const cabalDeps: CabalDependency[] = extractNamesAndRanges(\n      maybeContent.buildDependsContent,\n    );\n    for (const cabalDep of cabalDeps) {\n      const dep: PackageDependency = {\n        depName: cabalDep.packageName,\n        currentValue: cabalDep.currentValue,\n        datasource: HackageDatasource.id,\n        packageName: cabalDep.packageName,\n        versioning: pvpVersioning.id,\n        replaceString: cabalDep.replaceString.trim(),\n        autoReplaceStringTemplate: '{{{depName}}} {{{newValue}}}',\n      };\n      deps.push(dep);\n    }\n    current = current.slice(maybeContent.lengthProcessed);\n  }\n  return { deps };\n}\n\nexport function getRangeStrategy({\n  rangeStrategy,\n}: RangeConfig): RangeStrategy {\n  if (rangeStrategy === 'auto') {\n    return 'widen';\n  }\n  return rangeStrategy;\n}\n"]}