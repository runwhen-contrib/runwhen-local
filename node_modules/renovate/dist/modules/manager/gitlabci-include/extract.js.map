{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci-include/extract.ts"],"names":[],"mappings":";;AAOA,gDAoCC;AA3CD,mDAAsD;AACtD,4CAAyC;AACzC,+CAA4C;AAC5C,6CAA+C;AAE/C,qCAA+C;AAE/C,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAoB;IAEpB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,YAAY,GAChB,QAAQ,KAAK,QAAQ,IAAI,QAAQ;QAC/B,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,IAAI,CAAC;IAEX,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAA,gBAAS,EAAC,OAAO,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACvD,KAAK,MAAM,GAAG,IAAI,4BAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YAClD,IAAI,YAAY,EAAE,CAAC;gBACjB,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;QACxC,IAAI,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC5C,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,WAAW,EAAE,EACpB,8CAA8C,CAC/C,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,qCAAqC,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import { GlobalConfig } from '../../../config/global';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { parseYaml } from '../../../util/yaml';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { GitlabDocumentArray } from './schema';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile?: string,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  const platform = GlobalConfig.get('platform');\n  const endpoint = GlobalConfig.get('endpoint');\n  const registryUrls =\n    platform === 'gitlab' && endpoint\n      ? [endpoint.replace(regEx(/\\/api\\/v4\\/?/), '')]\n      : null;\n\n  try {\n    const docs = parseYaml(content, { uniqueKeys: false });\n    for (const dep of GitlabDocumentArray.parse(docs)) {\n      if (registryUrls) {\n        dep.registryUrls = registryUrls;\n      }\n      deps.push(dep);\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug(\n        { err, packageFile },\n        'YAML exception extracting GitLab CI includes',\n      );\n    } else {\n      logger.debug({ err, packageFile }, 'Error extracting GitLab CI includes');\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n"]}