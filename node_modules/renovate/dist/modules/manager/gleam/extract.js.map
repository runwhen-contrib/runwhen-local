{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gleam/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { getSiblingFileName, localPathExists } from '../../../util/fs';\nimport { HexDatasource } from '../../datasource/hex';\nimport { api as versioning } from '../../versioning/hex';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { extractLockFileVersions } from './locked-version';\nimport { GleamToml } from './schema';\n\nconst dependencySections = ['dependencies', 'dev-dependencies'] as const;\n\n// map gleam.toml section keys to standard renovate depType's\n// this allows us to leverage renovate built-in configurations and presets\nfunction mapSectionKey(sectionKey: string): string {\n  switch (sectionKey) {\n    case 'dev-dependencies':\n      return 'devDependencies';\n    default:\n      return sectionKey;\n  }\n}\n\nfunction toPackageDep({\n  name,\n  sectionKey,\n  version,\n}: {\n  name: string;\n  sectionKey: string;\n  version: string;\n}): PackageDependency {\n  return {\n    depName: name,\n    depType: mapSectionKey(sectionKey),\n    datasource: HexDatasource.id,\n    currentValue: version,\n  };\n}\n\nfunction toPackageDeps({\n  deps,\n  sectionKey,\n}: {\n  deps?: Record<string, string>;\n  sectionKey: string;\n}): PackageDependency[] {\n  return Object.entries(deps ?? {}).map(([name, version]) =>\n    toPackageDep({ name, sectionKey, version }),\n  );\n}\n\nfunction extractGleamTomlDeps(gleamToml: GleamToml): PackageDependency[] {\n  return dependencySections.flatMap((sectionKey) =>\n    toPackageDeps({\n      deps: gleamToml[sectionKey],\n      sectionKey,\n    }),\n  );\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n): Promise<PackageFileContent | null> {\n  const result = GleamToml.safeParse(content);\n  if (!result.success) {\n    logger.debug(\n      { err: result.error, packageFile },\n      'Error parsing Gleam package file content',\n    );\n    return null;\n  }\n\n  const deps = extractGleamTomlDeps(result.data);\n  if (!deps.length) {\n    logger.debug(`No dependencies found in Gleam package file ${packageFile}`);\n    return null;\n  }\n\n  const packageFileContent: PackageFileContent = { deps };\n  const lockFileName = getSiblingFileName(packageFile, 'manifest.toml');\n\n  const lockFileExists = await localPathExists(lockFileName);\n  if (!lockFileExists) {\n    logger.debug(`Lock file ${lockFileName} does not exist.`);\n    return packageFileContent;\n  }\n\n  const versionsByPackage = await extractLockFileVersions(lockFileName);\n  if (!versionsByPackage) {\n    return packageFileContent;\n  }\n\n  packageFileContent.lockFiles = [lockFileName];\n\n  for (const dep of packageFileContent.deps) {\n    const packageName = dep.depName!;\n    const versions = coerceArray(versionsByPackage.get(packageName));\n    const lockedVersion = versioning.getSatisfyingVersion(\n      versions,\n      dep.currentValue!,\n    );\n    if (lockedVersion) {\n      dep.lockedVersion = lockedVersion;\n    } else {\n      logger.debug(\n        `No locked version found for package ${dep.depName} in the range of ${dep.currentValue}.`,\n      );\n    }\n  }\n  return packageFileContent;\n}\n"]}