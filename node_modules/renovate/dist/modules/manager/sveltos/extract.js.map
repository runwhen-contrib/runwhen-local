{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/sveltos/extract.ts"],"names":[],"mappings":";;AAeA,gDAkBC;AAED,8CAKC;AAxCD,+CAAkD;AAClD,2CAAsD;AACtD,6CAA+C;AAC/C,oDAA2D;AAC3D,gDAAuD;AACvD,mDAA+C;AAC/C,uCAA+D;AAM/D,qCAAqE;AACrE,iCAA8C;AAE9C,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,MAAsB;IAEtB,MAAM,WAAW,GAAG,IAAA,gBAAS,EAAC,OAAO,EAAE;QACrC,YAAY,EAAE,0BAAiB;QAC/B,gBAAgB,EAAE,QAAQ;KAC3B,CAAC,CAAC;IAEH,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;QACrC,MAAM,aAAa,GAAG,iBAAiB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC;AAED,SAAgB,iBAAiB,CAC/B,UAA6B,EAC7B,MAAsB;IAEtB,OAAO,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,iBAAiB,CACxB,MAAyB,EACzB,eAAmD;IAEnD,MAAM,GAAG,GAAsB;QAC7B,OAAO,EAAE,MAAM,CAAC,SAAS;QACzB,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,UAAU,EAAE,qBAAc,CAAC,EAAE;KAC9B,CAAC;IAEF,IAAI,IAAA,mBAAa,EAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;QACxC,MAAM,KAAK,GAAG,IAAA,uBAAiB,EAAC,IAAA,qBAAe,EAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;QAEvE,GAAG,CAAC,UAAU,GAAG,yBAAgB,CAAC,EAAE,CAAC;QACrC,GAAG,CAAC,WAAW,GAAG,IAAA,gBAAM,EAAC,KAAK,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,WAAW,CAAC;IACtE,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,WAAW,GAAG,IAAA,2BAAoB,EACpC,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,SAAS,CACjB,CAAC;QACF,GAAG,CAAC,YAAY,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC1C,GAAG,CAAC,UAAU,GAAG,qBAAc,CAAC,EAAE,CAAC;IACrC,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,cAAc,CACrB,UAA6B,EAC7B,MAAsB;IAEtB,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC;IAEhC,KAAK,MAAM,MAAM,IAAI,IAAA,mBAAW,EAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC;QAC9D,MAAM,GAAG,GAAG,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;QAC/D,IAAI,GAAG,EAAE,CAAC;YACR,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { coerceArray } from '../../../util/array';\nimport { trimTrailingSlash } from '../../../util/url';\nimport { parseYaml } from '../../../util/yaml';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { getDep } from '../dockerfile/extract';\nimport { isOCIRegistry, removeOCIPrefix } from '../helmv3/oci';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { ProfileDefinition, type SveltosHelmSource } from './schema';\nimport { removeRepositoryName } from './util';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config?: ExtractConfig,\n): PackageFileContent | null {\n  const definitions = parseYaml(content, {\n    customSchema: ProfileDefinition,\n    failureBehaviour: 'filter',\n  });\n\n  const deps: PackageDependency[] = [];\n\n  for (const definition of definitions) {\n    const extractedDeps = extractDefinition(definition, config);\n    deps.push(...extractedDeps);\n  }\n\n  return deps.length ? { deps } : null;\n}\n\nexport function extractDefinition(\n  definition: ProfileDefinition,\n  config?: ExtractConfig,\n): PackageDependency[] {\n  return processAppSpec(definition, config);\n}\n\nfunction processHelmCharts(\n  source: SveltosHelmSource,\n  registryAliases: Record<string, string> | undefined,\n): PackageDependency | null {\n  const dep: PackageDependency = {\n    depName: source.chartName,\n    currentValue: source.chartVersion,\n    datasource: HelmDatasource.id,\n  };\n\n  if (isOCIRegistry(source.repositoryURL)) {\n    const image = trimTrailingSlash(removeOCIPrefix(source.repositoryURL));\n\n    dep.datasource = DockerDatasource.id;\n    dep.packageName = getDep(image, false, registryAliases).packageName;\n  } else {\n    dep.packageName = removeRepositoryName(\n      source.repositoryName,\n      source.chartName,\n    );\n    dep.registryUrls = [source.repositoryURL];\n    dep.datasource = HelmDatasource.id;\n  }\n\n  return dep;\n}\n\nfunction processAppSpec(\n  definition: ProfileDefinition,\n  config?: ExtractConfig,\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n\n  const depType = definition.kind;\n\n  for (const source of coerceArray(definition.spec?.helmCharts)) {\n    const dep = processHelmCharts(source, config?.registryAliases);\n    if (dep) {\n      dep.depType = depType;\n      deps.push(dep);\n    }\n  }\n\n  return deps;\n}\n"]}