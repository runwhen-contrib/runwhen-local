{"version":3,"file":"roles.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ansible-galaxy/roles.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { GalaxyDatasource } from '../../datasource/galaxy';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport type { PackageDependency } from '../types';\nimport type { AnsibleGalaxyPackageDependency } from './types';\nimport {\n  blockLineRegEx,\n  galaxyDepRegex,\n  nameMatchRegex,\n  newBlockRegEx,\n} from './util';\n\nfunction interpretLine(\n  lineMatch: RegExpMatchArray,\n  lineNumber: number,\n  dependency: AnsibleGalaxyPackageDependency,\n): AnsibleGalaxyPackageDependency | null {\n  const localDependency = dependency;\n  const key = lineMatch[2];\n  const value = lineMatch[3].replace(regEx(/[\"']/g), '');\n  switch (key) {\n    case 'name': {\n      localDependency.managerData.name = value;\n      break;\n    }\n    case 'version': {\n      localDependency.managerData.version = value;\n      localDependency.currentValue = value;\n      localDependency.managerData.lineNumber = lineNumber;\n      break;\n    }\n    case 'scm': {\n      localDependency.managerData.scm = value;\n      break;\n    }\n    case 'src': {\n      localDependency.managerData.src = value;\n      break;\n    }\n    default: {\n      return null;\n    }\n  }\n  return localDependency;\n}\n\nfunction finalize(dependency: AnsibleGalaxyPackageDependency): boolean {\n  const dep = dependency;\n  if (dependency.managerData.version === null) {\n    dep.skipReason = 'unspecified-version';\n    return false;\n  }\n  const source = dep.managerData.src ?? '';\n  const sourceMatch = nameMatchRegex.exec(source);\n  if (sourceMatch?.groups) {\n    dep.datasource = GitTagsDatasource.id;\n    dep.depName = sourceMatch.groups.depName.replace(regEx(/.git$/), '');\n    // remove leading `git+` from URLs like `git+https://...`\n    dep.packageName = source.replace(regEx(/git\\+/), '');\n  } else if (galaxyDepRegex.exec(source)) {\n    dep.datasource = GalaxyDatasource.id;\n    dep.depName = source;\n    dep.packageName = source;\n  } else if (galaxyDepRegex.exec(dep.managerData.name ?? '')) {\n    dep.datasource = GalaxyDatasource.id;\n    dep.depName = dep.managerData.name!;\n    dep.packageName = dep.managerData.name!;\n  } else {\n    dep.skipReason = 'no-source-match';\n    return false;\n  }\n  if (dep.managerData.name !== null) {\n    dep.depName = dep.managerData.name;\n  }\n\n  return true;\n}\n\nexport function extractRoles(lines: string[]): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    let lineMatch = newBlockRegEx.exec(lines[lineNumber]);\n    if (lineMatch) {\n      const dep: AnsibleGalaxyPackageDependency = {\n        depType: 'role',\n        managerData: {\n          name: null,\n          version: null,\n          scm: null,\n          src: null,\n        },\n      };\n      do {\n        const localdep = interpretLine(lineMatch, lineNumber, dep);\n        if (!localdep) {\n          break;\n        }\n        const line = lines[lineNumber + 1];\n\n        if (!line) {\n          break;\n        }\n        lineMatch = blockLineRegEx.exec(line);\n        if (lineMatch) {\n          lineNumber += 1;\n        }\n      } while (lineMatch);\n      if (finalize(dep)) {\n        delete (dep as PackageDependency).managerData;\n        deps.push(dep);\n      }\n    }\n  }\n  return deps;\n}\n"]}