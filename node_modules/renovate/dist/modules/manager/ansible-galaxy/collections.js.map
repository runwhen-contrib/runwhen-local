{"version":3,"file":"collections.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ansible-galaxy/collections.ts"],"names":[],"mappings":"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","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { GalaxyCollectionDatasource } from '../../datasource/galaxy-collection';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport type { PackageDependency } from '../types';\nimport type { AnsibleGalaxyPackageDependency } from './types';\nimport {\n  blockLineRegEx,\n  galaxyDepRegex,\n  nameMatchRegex,\n  newBlockRegEx,\n} from './util';\n\nfunction interpretLine(\n  lineMatch: RegExpMatchArray,\n  dependency: AnsibleGalaxyPackageDependency,\n): void {\n  const localDependency = dependency;\n  const key = lineMatch[2];\n  const value = lineMatch[3].replace(regEx(/[\"']/g), '');\n  switch (key) {\n    case 'name': {\n      localDependency.managerData.name = value;\n      break;\n    }\n    case 'version': {\n      localDependency.managerData.version = value;\n      localDependency.currentValue = value;\n      break;\n    }\n    case 'source': {\n      localDependency.managerData.source = value;\n      if (value?.startsWith('git@') || value?.endsWith('.git')) {\n        localDependency.packageName = value;\n      } else {\n        localDependency.registryUrls = value\n          ? [value]\n          : /* istanbul ignore next: should have test */ [];\n      }\n      break;\n    }\n    case 'type': {\n      localDependency.managerData.type = value;\n      break;\n    }\n    default: {\n      // fail if we find an unexpected key\n      localDependency.skipReason = 'unsupported';\n    }\n  }\n}\n\nfunction handleGitDep(\n  dep: AnsibleGalaxyPackageDependency,\n  nameMatch: RegExpExecArray | null,\n): void {\n  dep.datasource = GitTagsDatasource.id;\n\n  if (nameMatch?.groups) {\n    // if a github.com repository is referenced use github-tags instead of git-tags\n    if (nameMatch.groups.hostname === 'github.com') {\n      dep.datasource = GithubTagsDatasource.id;\n    } else {\n      dep.datasource = GitTagsDatasource.id;\n    }\n    // source definition without version appendix\n    const source = nameMatch.groups.source;\n    const massagedDepName = nameMatch.groups.depName.replace(\n      regEx(/.git$/),\n      '',\n    );\n    dep.depName = `${nameMatch.groups.hostname}/${massagedDepName}`;\n    // remove leading `git+` from URLs like `git+https://...`\n    dep.packageName = source.replace(regEx(/git\\+/), '');\n\n    // if version is declared using version appendix `<source url>,v1.2.0`, use it\n    if (nameMatch.groups.version) {\n      dep.currentValue = nameMatch.groups.version;\n    } else {\n      dep.currentValue = dep.managerData.version;\n    }\n  }\n}\n\nfunction handleGalaxyDep(dep: AnsibleGalaxyPackageDependency): void {\n  dep.datasource = GalaxyCollectionDatasource.id;\n  dep.depName = dep.managerData.name;\n  dep.registryUrls = dep.managerData.source\n    ? /* istanbul ignore next: should have test */ [dep.managerData.source]\n    : [];\n  dep.currentValue = dep.managerData.version;\n}\n\nfunction finalize(dependency: AnsibleGalaxyPackageDependency): boolean {\n  const dep = dependency;\n  dep.depName = dep.managerData.name;\n\n  const name = dep.managerData.name;\n  const nameMatch = nameMatchRegex.exec(name);\n\n  // use type if defined\n  switch (dependency.managerData.type) {\n    case 'galaxy':\n      handleGalaxyDep(dep);\n      break;\n    case 'git':\n      handleGitDep(dep, nameMatch);\n      break;\n    case 'file':\n      dep.skipReason = 'local-dependency';\n      break;\n    case null:\n      // try to find out type based on source\n      if (nameMatch) {\n        handleGitDep(dep, nameMatch);\n        break;\n      }\n      if (galaxyDepRegex.exec(dep.managerData.name)) {\n        dep.datasource = GalaxyCollectionDatasource.id;\n        dep.depName = dep.managerData.name;\n        break;\n      }\n      dep.skipReason = 'no-source-match';\n      break;\n    default:\n      dep.skipReason = 'unsupported';\n      return true;\n  }\n\n  if (!dependency.currentValue && !dep.skipReason) {\n    dep.skipReason = 'unspecified-version';\n  }\n  return true;\n}\n\nexport function extractCollections(lines: string[]): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    let lineMatch = newBlockRegEx.exec(lines[lineNumber]);\n    if (lineMatch) {\n      const dep: AnsibleGalaxyPackageDependency = {\n        depType: 'galaxy-collection',\n        managerData: {\n          name: null,\n          version: null,\n          type: null,\n          source: null,\n        },\n      };\n      do {\n        interpretLine(lineMatch, dep);\n        const line = lines[lineNumber + 1];\n\n        if (!line) {\n          break;\n        }\n        lineMatch = blockLineRegEx.exec(line);\n        if (lineMatch) {\n          lineNumber += 1;\n        }\n      } while (lineMatch);\n      if (finalize(dep)) {\n        delete (dep as PackageDependency).managerData;\n        deps.push(dep);\n      }\n    }\n  }\n  return deps;\n}\n"]}