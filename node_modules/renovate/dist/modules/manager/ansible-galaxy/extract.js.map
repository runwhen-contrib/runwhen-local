{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ansible-galaxy/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { extractCollections } from './collections';\nimport { extractCollectionsMetaDataFile } from './collections-metadata';\nimport { extractRoles } from './roles';\n\nexport function getSliceEndNumber(\n  start: number,\n  numberOfLines: number,\n  ...blocks: number[]\n): number {\n  if (start < 0 || start > numberOfLines - 1) {\n    return -1;\n  }\n  let nearestEnd = numberOfLines;\n  for (const blocksKey of blocks) {\n    if (start < blocksKey && blocksKey < nearestEnd) {\n      nearestEnd = blocksKey;\n    }\n  }\n  return nearestEnd;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  logger.trace(`ansible-galaxy.extractPackageFile(${packageFile})`);\n  const galaxyFileNameRegEx = regEx(/galaxy\\.ya?ml$/);\n  const deps: PackageDependency[] = [];\n  const lines = content.split(newlineRegex);\n\n  try {\n    // if this is a galaxy.yml file we have to interpret the dependencies differently\n    if (galaxyFileNameRegEx.exec(packageFile)) {\n      const galaxyDeps = extractCollectionsMetaDataFile(lines);\n      deps.push(...galaxyDeps);\n    } else {\n      // interpret requirements file\n      // check if new or old format is used and save start lines for collection and roles.\n      const positions = {\n        collections: -1,\n        roles: -1,\n      };\n      // find role and collection block\n      lines.forEach((line, index) => {\n        if (regEx(/^collections:/).exec(line)) {\n          positions.collections = index;\n        }\n        if (regEx(/^roles:/).exec(line)) {\n          positions.roles = index;\n        }\n      });\n      if (positions.collections >= 0 || positions.roles >= 0) {\n        // using new format\n        const collectionLines = lines.slice(\n          positions.collections,\n          getSliceEndNumber(\n            positions.collections,\n            lines.length,\n            positions.roles,\n          ),\n        );\n        const collectionDeps = extractCollections(collectionLines);\n        deps.push(...collectionDeps);\n\n        const roleLines = lines.slice(\n          positions.roles,\n          getSliceEndNumber(\n            positions.roles,\n            lines.length,\n            positions.collections,\n          ),\n        );\n        const roleDeps = extractRoles(roleLines);\n        deps.push(...roleDeps);\n      } else {\n        // use old format which only has only roles\n        const galaxyDeps = extractRoles(lines);\n        deps.push(...galaxyDeps);\n      }\n    }\n\n    if (!deps.length) {\n      return null;\n    }\n    return { deps };\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, packageFile }, 'Error extracting ansible-galaxy deps');\n    return null;\n  }\n}\n"]}