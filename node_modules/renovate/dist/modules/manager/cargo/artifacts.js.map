{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/artifacts.ts"],"names":[],"mappings":";;AAqEA,0CAIC;AAzED,iCAA8B;AAC9B,sEAAoE;AACpE,4CAAyC;AACzC,+CAAkD;AAClD,6CAA0C;AAE1C,yCAI0B;AAC1B,iDAAoE;AACpE,+CAA4C;AAE5C,qDAAkE;AAElE,KAAK,UAAU,WAAW,CACxB,YAAoB,EACpB,qBAA8B,EAC9B,UAA8B;IAE9B,IAAI,GAAG,GAAG,qEAAqE,IAAA,aAAK,EAClF,YAAY,CACb,EAAE,CAAC;IACJ,4EAA4E;IAC5E,kFAAkF;IAClF,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3B,GAAG,IAAI,cAAc,CAAC;IACxB,CAAC;IAED,MAAM,WAAW,GAAgB;QAC/B,QAAQ,EAAE,EAAE,GAAG,IAAA,iCAA0B,EAAC,CAAC,OAAO,CAAC,CAAC,EAAE;QACtD,MAAM,EAAE,EAAE;QACV,eAAe,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;KACpD,CAAC;IACF,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAC/B,CAAC;AAED,KAAK,UAAU,kBAAkB,CAC/B,YAAoB,EACpB,WAAsB,EACtB,UAA8B;IAE9B,uEAAuE;IACvE,MAAM,IAAI,GAAG;QACX,mDAAmD;YACjD,oBAAoB,IAAA,aAAK,EAAC,YAAY,CAAC,cAAc;KACxD,CAAC;IAEF,uEAAuE;IACvE,4EAA4E;IAC5E,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,CACP,mDAAmD;YACjD,oBAAoB,IAAA,aAAK,EAAC,YAAY,CAAC,EAAE;YACzC,cAAc,IAAA,aAAK,EAAC,GAAG,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC,EAAE;YAChE,cAAc,IAAA,aAAK,EAAC,GAAG,CAAC,UAAW,CAAC,EAAE,CACzC,CAAC;IACJ,CAAC;IAED,MAAM,WAAW,GAAgB;QAC/B,QAAQ,EAAE,EAAE,GAAG,IAAA,iCAA0B,EAAC,CAAC,OAAO,CAAC,CAAC,EAAE;QACtD,MAAM,EAAE,EAAE;QACV,eAAe,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;KACpD,CAAC;IAEF,MAAM,IAAA,WAAI,EAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAChC,CAAC;AAEM,KAAK,UAAU,eAAe,CACnC,cAA8B;IAE9B,OAAO,MAAM,mBAAmB,CAAC,cAAc,CAAC,CAAC;AACnD,CAAC;AAED,KAAK,UAAU,mBAAmB,CAChC,EACE,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS,EACjB,cAAc,GAAG,EAAE;IAEnB,eAAM,CAAC,KAAK,CAAC,yBAAyB,eAAe,GAAG,CAAC,CAAC;IAE1D,sEAAsE;IACtE,sEAAsE;IACtE,sBAAsB;IACtB,MAAM,YAAY,GAAG,MAAM,IAAA,6BAAwB,EACjD,eAAe,EACf,YAAY,CACb,CAAC;IACF,MAAM,uBAAuB,GAAG,YAAY;QAC1C,CAAC,CAAC,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC;QACnC,CAAC,CAAC,IAAI,CAAC;IACT,IAAI,CAAC,uBAAuB,IAAI,CAAC,YAAY,EAAE,CAAC;QAC9C,eAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,EAAE,qBAAqB,EAAE,GAAG,MAAM,CAAC;IACzC,IAAI,CAAC,qBAAqB,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC;QACnD,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAC/C,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,uBAAuB;iBAClC;aACF;SACF,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,MAAM,IAAA,mBAAc,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAC7D,eAAM,CAAC,KAAK,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QAEzC,IAAI,qBAAqB,EAAE,CAAC;YAC1B,MAAM,WAAW,CAAC,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,CAAC;aAAM,CAAC;YACN,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YACjE,IAAI,UAAU,EAAE,CAAC;gBACf,uEAAuE;gBACvE,mDAAmD;gBACnD,eAAM,CAAC,IAAI,CACT,EAAE,UAAU,EAAE,UAAU,CAAC,OAAO,EAAE,EAClC,uCAAuC,CACxC,CAAC;gBACF,MAAM,WAAW,CAAC,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACtE,CAAC;iBAAM,CAAC;gBACN,uEAAuE;gBACvE,MAAM,kBAAkB,CACtB,eAAe,EACf,WAAW,EACX,MAAM,CAAC,WAAW,EAAE,IAAI,CACzB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,MAAM,mBAAmB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC,CAAC;QAC9D,IAAI,uBAAuB,KAAK,mBAAmB,EAAE,CAAC;YACpD,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,mBAAmB;iBAC9B;aACF;SACF,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,KAAK,gCAAe,EAAE,CAAC;YACpC,MAAM,GAAG,CAAC;QACZ,CAAC;QAED,wEAAwE;QACxE,qEAAqE;QACrE,mEAAmE;QACnE,yBAAyB;QACzB,MAAM,mBAAmB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACtE,IACE,cAAc,GAAG,CAAC;YAClB,mBAAmB;YACnB,IAAA,aAAK,EAAC,iCAAiC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EACzD,CAAC;YACD,MAAM,QAAQ,GAAG,IAAA,+CAA8B,EAAC,mBAAmB,CAAC,CAAC;YACrE,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CACvC,CAAC,GAAG,EAAE,EAAE,CACN,CAAC,IAAA,mBAAW,EAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,WAAY,CAAC,CAAC,CAAC,QAAQ,CACpD,GAAG,CAAC,UAAW,CAChB,CACJ,CAAC;YAEF,IAAI,cAAc,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBAC/C,eAAM,CAAC,KAAK,CACV,0DAA0D,CAC3D,CAAC;gBACF,OAAO,mBAAmB,CACxB;oBACE,eAAe;oBACf,WAAW,EAAE,cAAc;oBAC3B,qBAAqB;oBACrB,MAAM;iBACP,EACD,cAAc,GAAG,CAAC,CACnB,CAAC;YACJ,CAAC;QACH,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;QAE1D,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  findLocalSiblingOrParent,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getGitEnvironmentVariables } from '../../../util/git/auth';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult, Upgrade } from '../types';\nimport { extractLockFileContentVersions } from './locked-version';\n\nasync function cargoUpdate(\n  manifestPath: string,\n  isLockFileMaintenance: boolean,\n  constraint: string | undefined,\n): Promise<void> {\n  let cmd = `cargo update --config net.git-fetch-with-cli=true --manifest-path ${quote(\n    manifestPath,\n  )}`;\n  // If we're updating a specific crate, `cargo-update` requires `--workspace`\n  // for more information, see: https://github.com/renovatebot/renovate/issues/12332\n  if (!isLockFileMaintenance) {\n    cmd += ` --workspace`;\n  }\n\n  const execOptions: ExecOptions = {\n    extraEnv: { ...getGitEnvironmentVariables(['cargo']) },\n    docker: {},\n    toolConstraints: [{ toolName: 'rust', constraint }],\n  };\n  await exec(cmd, execOptions);\n}\n\nasync function cargoUpdatePrecise(\n  manifestPath: string,\n  updatedDeps: Upgrade[],\n  constraint: string | undefined,\n): Promise<void> {\n  // First update all dependencies that have been bumped in `Cargo.toml`.\n  const cmds = [\n    'cargo update --config net.git-fetch-with-cli=true' +\n      ` --manifest-path ${quote(manifestPath)} --workspace`,\n  ];\n\n  // Update individual dependencies to their `newVersion`. Necessary when\n  // using the `update-lockfile` rangeStrategy which doesn't touch Cargo.toml.\n  for (const dep of updatedDeps) {\n    cmds.push(\n      `cargo update --config net.git-fetch-with-cli=true` +\n        ` --manifest-path ${quote(manifestPath)}` +\n        ` --package ${quote(`${dep.packageName}@${dep.lockedVersion}`)}` +\n        ` --precise ${quote(dep.newVersion!)}`,\n    );\n  }\n\n  const execOptions: ExecOptions = {\n    extraEnv: { ...getGitEnvironmentVariables(['cargo']) },\n    docker: {},\n    toolConstraints: [{ toolName: 'rust', constraint }],\n  };\n\n  await exec(cmds, execOptions);\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact,\n): Promise<UpdateArtifactsResult[] | null> {\n  return await updateArtifactsImpl(updateArtifact);\n}\n\nasync function updateArtifactsImpl(\n  {\n    packageFileName,\n    updatedDeps,\n    newPackageFileContent,\n    config,\n  }: UpdateArtifact,\n  recursionLimit = 10,\n): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`cargo.updateArtifacts(${packageFileName})`);\n\n  // For standalone package crates, the `Cargo.lock` will be in the same\n  // directory as `Cargo.toml` (ie. a sibling). For cargo workspaces, it\n  // will be further up.\n  const lockFileName = await findLocalSiblingOrParent(\n    packageFileName,\n    'Cargo.lock',\n  );\n  const existingLockFileContent = lockFileName\n    ? await readLocalFile(lockFileName)\n    : null;\n  if (!existingLockFileContent || !lockFileName) {\n    logger.debug('No Cargo.lock found');\n    return null;\n  }\n\n  const { isLockFileMaintenance } = config;\n  if (!isLockFileMaintenance && !updatedDeps?.length) {\n    logger.debug('No more dependencies to update');\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: existingLockFileContent,\n        },\n      },\n    ];\n  }\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n\n    if (isLockFileMaintenance) {\n      await cargoUpdate(packageFileName, true, config.constraints?.rust);\n    } else {\n      const missingDep = updatedDeps.find((dep) => !dep.lockedVersion);\n      if (missingDep) {\n        // If there is a dependency without a locked version then log a warning\n        // and perform a regular workspace lockfile update.\n        logger.warn(\n          { dependency: missingDep.depName },\n          'Missing locked version for dependency',\n        );\n        await cargoUpdate(packageFileName, false, config.constraints?.rust);\n      } else {\n        // If all dependencies have locked versions then update them precisely.\n        await cargoUpdatePrecise(\n          packageFileName,\n          updatedDeps,\n          config.constraints?.rust,\n        );\n      }\n    }\n\n    logger.debug('Returning updated Cargo.lock');\n    const newCargoLockContent = await readLocalFile(lockFileName);\n    if (existingLockFileContent === newCargoLockContent) {\n      logger.debug('Cargo.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newCargoLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n\n    // Sometimes `cargo update` will fail when a preceding dependency update\n    // causes another dependency to update. In this case we can no longer\n    // reference the dependency by its old version, so we filter it out\n    // and retry recursively.\n    const newCargoLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (\n      recursionLimit > 0 &&\n      newCargoLockContent &&\n      regEx(/error: package ID specification/).test(err.stderr)\n    ) {\n      const versions = extractLockFileContentVersions(newCargoLockContent);\n      const newUpdatedDeps = updatedDeps.filter(\n        (dep) =>\n          !coerceArray(versions?.get(dep.packageName!)).includes(\n            dep.newVersion!,\n          ),\n      );\n\n      if (newUpdatedDeps.length < updatedDeps.length) {\n        logger.debug(\n          'Dependency already up to date - reattempting recursively',\n        );\n        return updateArtifactsImpl(\n          {\n            packageFileName,\n            updatedDeps: newUpdatedDeps,\n            newPackageFileContent,\n            config,\n          },\n          recursionLimit - 1,\n        );\n      }\n    }\n\n    logger.debug({ err }, 'Failed to update Cargo lock file');\n\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}