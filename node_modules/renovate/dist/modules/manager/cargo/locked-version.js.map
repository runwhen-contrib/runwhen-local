{"version":3,"file":"locked-version.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/locked-version.ts"],"names":[],"mappings":";;AAMA,0DAQC;AAED,wEAcC;AAED,sCAOC;AAvCD,4CAAyC;AACzC,+CAAkD;AAClD,yCAAiD;AAEjD,qCAA+C;AAExC,KAAK,UAAU,uBAAuB,CAC3C,YAAoB;IAEpB,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1D,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,8BAA8B,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,8BAA8B,CAC5C,OAAe;IAEf,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAoB,CAAC;IACtD,MAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACpC,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,MAAM,GAAG,IAAI,IAAA,mBAAW,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,IAAA,mBAAW,EAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,SAAgB,aAAa,CAAC,QAAgB;IAC5C,MAAM,GAAG,GAAG,4BAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACpD,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,GAAG,CAAC,IAAI,CAAC;IAClB,CAAC;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,+BAA+B,CAAC,CAAC;IAClE,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { readLocalFile } from '../../../util/fs';\nimport type { CargoLockSchema } from './schema';\nimport { CargoLockSchemaToml } from './schema';\n\nexport async function extractLockFileVersions(\n  lockFilePath: string,\n): Promise<Map<string, string[]> | null> {\n  const content = await readLocalFile(lockFilePath, 'utf8');\n  if (content) {\n    return extractLockFileContentVersions(content);\n  }\n  return null;\n}\n\nexport function extractLockFileContentVersions(\n  content: string,\n): Map<string, string[]> | null {\n  const versionsByPackage = new Map<string, string[]>();\n  const lock = parseLockFile(content);\n  if (!lock) {\n    return null;\n  }\n  for (const pkg of coerceArray(lock.package)) {\n    const versions = coerceArray(versionsByPackage.get(pkg.name));\n    versions.push(pkg.version);\n    versionsByPackage.set(pkg.name, versions);\n  }\n  return versionsByPackage;\n}\n\nexport function parseLockFile(lockFile: string): CargoLockSchema | null {\n  const res = CargoLockSchemaToml.safeParse(lockFile);\n  if (res.success) {\n    return res.data;\n  }\n  logger.debug({ err: res.error }, 'Error parsing Cargo lockfile.');\n  return null;\n}\n"]}