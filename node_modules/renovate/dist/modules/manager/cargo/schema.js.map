{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport type { SkipReason } from '../../../types';\nimport { Toml, withDepType } from '../../../util/schema-utils';\nimport { CrateDatasource } from '../../datasource/crate';\nimport type { PackageDependency } from '../types';\nimport type { CargoManagerData } from './types';\n\nconst CargoDep = z.union([\n  z\n    .object({\n      /** Path on disk to the crate sources */\n      path: z.string().optional(),\n      /** Git URL for the dependency */\n      git: z.string().optional(),\n      /** Semver version */\n      version: z.string().optional(),\n      /** Name of a registry whose URL is configured in `.cargo/config.toml` or `.cargo/config` */\n      registry: z.string().optional(),\n      /** Name of a package to look up */\n      package: z.string().optional(),\n      /** Whether the dependency is inherited from the workspace */\n      workspace: z.boolean().optional(),\n    })\n    .transform(\n      ({\n        path,\n        git,\n        version,\n        registry,\n        package: pkg,\n        workspace,\n      }): PackageDependency<CargoManagerData> => {\n        let skipReason: SkipReason | undefined;\n        let currentValue: string | undefined;\n        let nestedVersion = false;\n\n        if (version) {\n          currentValue = version;\n          nestedVersion = true;\n        } else {\n          currentValue = '';\n          skipReason = 'invalid-dependency-specification';\n        }\n\n        if (path) {\n          skipReason = 'path-dependency';\n        } else if (git) {\n          skipReason = 'git-dependency';\n        } else if (workspace) {\n          skipReason = 'inherited-dependency';\n        }\n\n        const dep: PackageDependency<CargoManagerData> = {\n          currentValue,\n          managerData: { nestedVersion },\n          datasource: CrateDatasource.id,\n        };\n\n        if (skipReason) {\n          dep.skipReason = skipReason;\n        }\n        if (pkg) {\n          dep.packageName = pkg;\n        }\n        if (registry) {\n          dep.managerData!.registryName = registry;\n        }\n\n        return dep;\n      },\n    ),\n  z.string().transform(\n    (version): PackageDependency<CargoManagerData> => ({\n      currentValue: version,\n      managerData: { nestedVersion: false },\n      datasource: CrateDatasource.id,\n    }),\n  ),\n]);\n\nconst CargoDeps = z.record(z.string(), CargoDep).transform((record) => {\n  const deps: PackageDependency[] = [];\n\n  for (const [depName, dep] of Object.entries(record)) {\n    dep.depName = depName;\n    deps.push(dep);\n  }\n\n  return deps;\n});\n\nexport type CargoDeps = z.infer<typeof CargoDeps>;\n\nconst CargoSection = z.object({\n  dependencies: withDepType(CargoDeps, 'dependencies').optional(),\n  'dev-dependencies': withDepType(CargoDeps, 'dev-dependencies').optional(),\n  'build-dependencies': withDepType(CargoDeps, 'build-dependencies').optional(),\n});\n\nconst CargoWorkspace = z.object({\n  dependencies: withDepType(CargoDeps, 'workspace.dependencies').optional(),\n  package: z\n    .object({\n      version: z.string().optional(),\n    })\n    .optional(),\n});\n\nconst CargoTarget = z.record(z.string(), CargoSection);\n\nexport const CargoManifestSchema = Toml.pipe(\n  CargoSection.extend({\n    package: z\n      .object({\n        version: z\n          .union([z.string(), z.object({ workspace: z.literal(true) })])\n          .optional(),\n      })\n      .optional(),\n    workspace: CargoWorkspace.optional(),\n    target: CargoTarget.optional(),\n  }),\n);\n\nconst CargoConfigRegistry = z.object({\n  index: z.string().optional(),\n});\n\nconst CargoConfigSource = z.object({\n  'replace-with': z.string().optional(),\n  registry: z.string().optional(),\n});\n\nexport const CargoConfigSchema = Toml.pipe(\n  z.object({\n    registries: z.record(z.string(), CargoConfigRegistry).optional(),\n    source: z.record(z.string(), CargoConfigSource).optional(),\n  }),\n);\n\nexport type CargoConfig = z.infer<typeof CargoConfigSchema>;\n\nconst CargoLockPackageSchema = z.object({\n  name: z.string(),\n  version: z.string(),\n  source: z.string().optional(),\n});\n\nexport const CargoLockSchema = z.object({\n  package: z.array(CargoLockPackageSchema).optional(),\n});\n\nexport type CargoLockSchema = z.infer<typeof CargoLockSchema>;\n\nexport const CargoLockSchemaToml = Toml.pipe(CargoLockSchema);\n"]}