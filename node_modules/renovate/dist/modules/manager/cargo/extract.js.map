{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cargo/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { findLocalSiblingOrParent, readLocalFile } from '../../../util/fs';\nimport { api as versioning } from '../../versioning/cargo';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { extractLockFileVersions } from './locked-version';\nimport {\n  type CargoConfig,\n  CargoConfigSchema,\n  CargoManifestSchema,\n} from './schema';\nimport type {\n  CargoManagerData,\n  CargoRegistries,\n  CargoRegistryUrl,\n} from './types';\nimport { DEFAULT_REGISTRY_URL } from './utils';\n\nconst DEFAULT_REGISTRY_ID = 'crates-io';\n\nfunction getCargoIndexEnv(registryName: string): string | null {\n  const registry = registryName.toUpperCase().replaceAll('-', '_');\n  return process.env[`CARGO_REGISTRIES_${registry}_INDEX`] ?? null;\n}\n\nfunction extractFromSection(\n  dependencies: PackageDependency<CargoManagerData>[] | undefined,\n  cargoRegistries: CargoRegistries,\n  target?: string,\n): PackageDependency[] {\n  if (!dependencies) {\n    return [];\n  }\n\n  const deps: PackageDependency<CargoManagerData>[] = [];\n\n  for (const dep of Object.values(dependencies)) {\n    let registryUrls: string[] | undefined;\n\n    if (dep.managerData?.registryName) {\n      const registryUrl =\n        getCargoIndexEnv(dep.managerData.registryName) ??\n        cargoRegistries[dep.managerData?.registryName];\n      if (registryUrl) {\n        if (registryUrl !== DEFAULT_REGISTRY_URL) {\n          registryUrls = [registryUrl];\n        }\n      } else {\n        dep.skipReason = 'unknown-registry';\n      }\n    }\n\n    if (registryUrls) {\n      dep.registryUrls = registryUrls;\n    } else {\n      // if we don't have an explicit registry URL check if the default registry has a non-standard url\n      if (cargoRegistries[DEFAULT_REGISTRY_ID]) {\n        if (cargoRegistries[DEFAULT_REGISTRY_ID] !== DEFAULT_REGISTRY_URL) {\n          dep.registryUrls = [cargoRegistries[DEFAULT_REGISTRY_ID]];\n        }\n      } else {\n        // we always expect to have DEFAULT_REGISTRY_ID set, if it's not it means the config defines an alternative\n        // registry that we couldn't resolve.\n        dep.skipReason = 'unknown-registry';\n      }\n    }\n\n    if (target) {\n      dep.target = target;\n    }\n    deps.push(dep);\n  }\n\n  return deps;\n}\n\n/** Reads `.cargo/config.toml`, or, if not found, `.cargo/config` */\nasync function readCargoConfig(): Promise<CargoConfig | null> {\n  for (const configName of ['config.toml', 'config']) {\n    const path = `.cargo/${configName}`;\n    const payload = await readLocalFile(path, 'utf8');\n    if (payload) {\n      const parsedCargoConfig = CargoConfigSchema.safeParse(payload);\n      if (parsedCargoConfig.success) {\n        return parsedCargoConfig.data;\n      } else {\n        logger.debug(\n          { err: parsedCargoConfig.error, path },\n          `Error parsing cargo config`,\n        );\n      }\n    }\n  }\n\n  logger.debug('Neither .cargo/config nor .cargo/config.toml found');\n  return null;\n}\n\n/** Extracts a map of cargo registries from a CargoConfig */\nfunction extractCargoRegistries(config: CargoConfig): CargoRegistries {\n  const result: CargoRegistries = {};\n  // check if we're overriding our default registry index\n  result[DEFAULT_REGISTRY_ID] = resolveRegistryIndex(\n    DEFAULT_REGISTRY_ID,\n    config,\n  );\n\n  const registryNames = new Set([\n    ...Object.keys(config.registries ?? {}),\n    ...Object.keys(config.source ?? {}),\n  ]);\n  for (const registryName of registryNames) {\n    result[registryName] = resolveRegistryIndex(registryName, config);\n  }\n\n  return result;\n}\n\nfunction resolveRegistryIndex(\n  registryName: string,\n  config: CargoConfig,\n  originalNames = new Set<string>(),\n): CargoRegistryUrl {\n  // if we have a source replacement, follow that.\n  // https://doc.rust-lang.org/cargo/reference/source-replacement.html\n  const replacementName = config.source?.[registryName]?.['replace-with'];\n  if (replacementName) {\n    logger.debug(\n      `Replacing index of cargo registry ${registryName} with ${replacementName}`,\n    );\n    if (originalNames.has(replacementName)) {\n      logger.warn({ registryName }, 'cargo registry resolves to itself');\n      return null;\n    }\n    return resolveRegistryIndex(\n      replacementName,\n      config,\n      originalNames.add(replacementName),\n    );\n  }\n\n  const sourceRegistry = config.source?.[registryName]?.registry;\n  if (sourceRegistry) {\n    logger.debug(\n      `Replacing cargo source registry with ${sourceRegistry} for ${registryName}`,\n    );\n    return sourceRegistry;\n  }\n\n  const registryIndex = config.registries?.[registryName]?.index;\n  if (registryIndex) {\n    return registryIndex;\n  } else {\n    // we don't need an explicit index if we're using the default registry\n    if (registryName === DEFAULT_REGISTRY_ID) {\n      return DEFAULT_REGISTRY_URL;\n    } else {\n      logger.debug(`${registryName} cargo registry is missing index`);\n      return null;\n    }\n  }\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config?: ExtractConfig,\n): Promise<PackageFileContent<CargoManagerData> | null> {\n  logger.trace(`cargo.extractPackageFile(${packageFile})`);\n\n  const cargoConfig = (await readCargoConfig()) ?? {};\n  const cargoRegistries = extractCargoRegistries(cargoConfig);\n\n  const parsedCargoManifest = CargoManifestSchema.safeParse(content);\n  if (!parsedCargoManifest.success) {\n    logger.debug(\n      { err: parsedCargoManifest.error, packageFile },\n      'Error parsing Cargo.toml file',\n    );\n    return null;\n  }\n\n  const cargoManifest = parsedCargoManifest.data;\n\n  /*\n    There are the following sections in Cargo.toml:\n    [package]\n    [dependencies]\n    [dev-dependencies]\n    [build-dependencies]\n    [target.*.dependencies]\n    [workspace.dependencies]\n  */\n  const targetSection = cargoManifest.target;\n  // An array of all dependencies in the target section\n  let targetDeps: PackageDependency[] = [];\n  if (targetSection) {\n    const targets = Object.keys(targetSection);\n    targets.forEach((target) => {\n      const targetContent = targetSection[target];\n      // Dependencies for `${target}`\n      const deps = [\n        ...extractFromSection(\n          targetContent.dependencies,\n          cargoRegistries,\n          target,\n        ),\n        ...extractFromSection(\n          targetContent['dev-dependencies'],\n          cargoRegistries,\n          target,\n        ),\n        ...extractFromSection(\n          targetContent['build-dependencies'],\n          cargoRegistries,\n          target,\n        ),\n      ];\n      targetDeps = targetDeps.concat(deps);\n    });\n  }\n\n  const workspaceSection = cargoManifest.workspace;\n  let workspaceDeps: PackageDependency[] = [];\n  if (workspaceSection) {\n    workspaceDeps = extractFromSection(\n      workspaceSection.dependencies,\n      cargoRegistries,\n      undefined,\n    );\n  }\n\n  const deps = [\n    ...extractFromSection(cargoManifest.dependencies, cargoRegistries),\n    ...extractFromSection(cargoManifest['dev-dependencies'], cargoRegistries),\n    ...extractFromSection(cargoManifest['build-dependencies'], cargoRegistries),\n    ...targetDeps,\n    ...workspaceDeps,\n  ];\n  if (!deps.length) {\n    return null;\n  }\n\n  const packageSection = cargoManifest.package;\n  let version: string | undefined = undefined;\n  if (packageSection) {\n    if (is.string(packageSection.version)) {\n      version = packageSection.version;\n    } else if (\n      is.object(packageSection.version) &&\n      cargoManifest.workspace?.package?.version\n    ) {\n      // TODO: Support reading from parent workspace manifest?\n      version = cargoManifest.workspace.package.version;\n    }\n  }\n\n  const lockFileName = await findLocalSiblingOrParent(\n    packageFile,\n    'Cargo.lock',\n  );\n  const res: PackageFileContent = { deps, packageFileVersion: version };\n  if (lockFileName) {\n    logger.debug(\n      `Found lock file ${lockFileName} for packageFile: ${packageFile}`,\n    );\n\n    const versionsByPackage = await extractLockFileVersions(lockFileName);\n    if (!versionsByPackage) {\n      logger.debug(\n        `Could not extract lock file versions from ${lockFileName}.`,\n      );\n      return res;\n    }\n\n    res.lockFiles = [lockFileName];\n\n    for (const dep of deps) {\n      const packageName = dep.packageName ?? dep.depName!;\n      const versions = coerceArray(versionsByPackage.get(packageName));\n      const lockedVersion = versioning.getSatisfyingVersion(\n        versions,\n        dep.currentValue!,\n      );\n      if (lockedVersion) {\n        dep.lockedVersion = lockedVersion;\n      } else {\n        logger.debug(\n          `No locked version found for package ${dep.depName} in the range of ${dep.currentValue}.`,\n        );\n      }\n    }\n  }\n\n  return res;\n}\n"]}