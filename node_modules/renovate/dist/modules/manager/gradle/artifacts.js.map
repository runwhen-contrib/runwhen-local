{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { dirname, join } from 'upath';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { findUpLocal, readLocalFile, writeLocalFile } from '../../../util/fs';\nimport { getFiles, getRepoStatus } from '../../../util/git';\nimport { regEx } from '../../../util/regex';\nimport { scm } from '../../platform/scm';\nimport {\n  extraEnv,\n  extractGradleVersion,\n  getJavaConstraint,\n  gradleWrapperFileName,\n  prepareGradleCommand,\n} from '../gradle-wrapper/utils';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport {\n  isGcvLockFile,\n  isGcvPropsFile,\n} from './extract/consistent-versions-plugin';\nimport { isGradleBuildFile } from './utils';\n\n// .lockfile is gradle default lockfile, /versions.lock is gradle-consistent-versions plugin lockfile\nfunction isLockFile(fileName: string): boolean {\n  return fileName.endsWith('.lockfile') || isGcvLockFile(fileName);\n}\n\nasync function getUpdatedLockfiles(\n  oldLockFileContentMap: Record<string, string | null>,\n): Promise<UpdateArtifactsResult[]> {\n  const res: UpdateArtifactsResult[] = [];\n\n  const status = await getRepoStatus();\n\n  for (const modifiedFile of status.modified) {\n    if (\n      isLockFile(modifiedFile) ||\n      modifiedFile.endsWith('gradle/verification-metadata.xml')\n    ) {\n      const newContent = await readLocalFile(modifiedFile, 'utf8');\n      if (oldLockFileContentMap[modifiedFile] !== newContent) {\n        res.push({\n          file: {\n            type: 'addition',\n            path: modifiedFile,\n            contents: newContent,\n          },\n        });\n      }\n    }\n  }\n\n  return res;\n}\n\nasync function getSubProjectList(\n  cmd: string,\n  execOptions: ExecOptions,\n): Promise<string[]> {\n  const subprojects = ['']; // = root project\n  const subprojectsRegex = regEx(/^[ \\t]*subprojects: \\[(?<subprojects>.+)\\]/m);\n\n  const gradleProperties = await exec(`${cmd} properties`, execOptions);\n  const subprojectsMatch = gradleProperties.stdout.match(subprojectsRegex);\n  if (subprojectsMatch?.groups?.subprojects) {\n    const projectRegex = regEx(/project '(?<name>.+?)'/g);\n    const matches = subprojectsMatch.groups.subprojects.matchAll(projectRegex);\n    for (const match of matches) {\n      if (match?.groups?.name) {\n        subprojects.push(match.groups.name);\n      }\n    }\n  }\n\n  return subprojects;\n}\n\nasync function getGradleVersion(gradlewFile: string): Promise<string | null> {\n  const propertiesFile = join(\n    dirname(gradlewFile),\n    'gradle/wrapper/gradle-wrapper.properties',\n  );\n  const properties = await readLocalFile(propertiesFile, 'utf8');\n  const extractResult = extractGradleVersion(properties ?? '');\n\n  return extractResult ? extractResult.version : null;\n}\n\nasync function buildUpdateVerificationMetadataCmd(\n  verificationMetadataFile: string | undefined,\n  baseCmd: string,\n): Promise<string | null> {\n  if (!verificationMetadataFile) {\n    return null;\n  }\n  const hashTypes: string[] = [];\n  const verificationMetadata = await readLocalFile(verificationMetadataFile);\n  if (\n    verificationMetadata?.includes('<verify-metadata>true</verify-metadata>')\n  ) {\n    logger.debug('Dependency verification enabled - generating checksums');\n    for (const hashType of ['sha256', 'sha512']) {\n      if (verificationMetadata?.includes(`<${hashType}`)) {\n        hashTypes.push(hashType);\n      }\n    }\n    if (!hashTypes.length) {\n      hashTypes.push('sha256');\n    }\n  }\n  if (\n    verificationMetadata?.includes(\n      '<verify-signatures>true</verify-signatures>',\n    )\n  ) {\n    logger.debug(\n      'Dependency signature verification enabled - generating PGP signatures',\n    );\n    // signature verification requires at least one checksum type as fallback.\n    if (!hashTypes.length) {\n      hashTypes.push('sha256');\n    }\n    hashTypes.push('pgp');\n  }\n  if (!hashTypes.length) {\n    return null;\n  }\n  return `${baseCmd} --write-verification-metadata ${hashTypes.join(',')} dependencies`;\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`gradle.updateArtifacts(${packageFileName})`);\n\n  const fileList = await scm.getFileList();\n  const lockFiles = fileList.filter((file) => isLockFile(file));\n  const verificationMetadataFile = fileList.find((fileName) =>\n    fileName.endsWith('gradle/verification-metadata.xml'),\n  );\n  if (!lockFiles.length && !verificationMetadataFile) {\n    logger.debug(\n      'No Gradle dependency lockfiles or verification metadata found - skipping update',\n    );\n    return null;\n  }\n\n  const gradlewName = gradleWrapperFileName();\n  const gradlewFile = await findUpLocal(gradlewName, dirname(packageFileName));\n  if (!gradlewFile) {\n    logger.debug(\n      'Found Gradle dependency lockfiles but no gradlew - aborting update',\n    );\n    return null;\n  }\n\n  if (\n    config.isLockFileMaintenance &&\n    (!isGradleBuildFile(packageFileName) ||\n      dirname(packageFileName) !== dirname(gradlewFile))\n  ) {\n    logger.trace(\n      'No build.gradle(.kts) file or not in root project - skipping lock file maintenance',\n    );\n    return null;\n  }\n\n  logger.debug('Updating found Gradle dependency lockfiles');\n\n  try {\n    const oldLockFileContentMap = await getFiles(lockFiles);\n    await prepareGradleCommand(gradlewFile);\n\n    const baseCmd = `${gradlewName} --console=plain --dependency-verification lenient -q`;\n    const execOptions: ExecOptions = {\n      cwdFile: gradlewFile,\n      docker: {},\n      extraEnv,\n      toolConstraints: [\n        {\n          toolName: 'java',\n          constraint:\n            config.constraints?.java ??\n            (await getJavaConstraint(\n              await getGradleVersion(gradlewFile),\n              gradlewFile,\n            )),\n        },\n      ],\n    };\n\n    const cmds = [];\n    if (lockFiles.length) {\n      const subprojects = await getSubProjectList(baseCmd, execOptions);\n      let lockfileCmd = `${baseCmd} ${subprojects\n        .map((project) => `${project}:dependencies`)\n        .map(quote)\n        .join(' ')}`;\n\n      if (\n        config.isLockFileMaintenance === true ||\n        !updatedDeps.length ||\n        isGcvPropsFile(packageFileName)\n      ) {\n        lockfileCmd += ' --write-locks';\n      } else {\n        const updatedDepNames = updatedDeps\n          .map(({ depName, packageName }) => packageName ?? depName)\n          .filter(is.nonEmptyStringAndNotWhitespace);\n\n        lockfileCmd += ` --update-locks ${updatedDepNames\n          .map(quote)\n          .join(',')}`;\n      }\n      cmds.push(lockfileCmd);\n    }\n\n    const updateVerificationMetadataCmd =\n      await buildUpdateVerificationMetadataCmd(\n        verificationMetadataFile,\n        baseCmd,\n      );\n    if (updateVerificationMetadataCmd) {\n      cmds.push(updateVerificationMetadataCmd);\n    }\n\n    if (!cmds.length) {\n      logger.debug('No lockfile or verification metadata update necessary');\n      return null;\n    }\n\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    await exec(cmds, { ...execOptions, ignoreStdout: true });\n\n    const res = await getUpdatedLockfiles(oldLockFileContentMap);\n    logger.debug('Returning updated Gradle dependency lockfiles');\n\n    return res.length > 0 ? res : null;\n  } catch (err) {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n\n    logger.debug({ err }, 'Error while updating Gradle dependency lockfiles');\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}