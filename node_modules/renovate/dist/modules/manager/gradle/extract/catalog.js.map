{"version":3,"file":"catalog.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/extract/catalog.ts"],"names":[],"mappings":";;AAoPA,oCAmEC;;AAvTD,kEAAkC;AAClC,kEAAkC;AAElC,oDAAiD;AACjD,kDAA6D;AAC7D,gDAAoE;AAYpE,SAAS,gBAAgB,CACvB,OAAe,EACf,OAAe,EACf,OAAe;IAEf,MAAM,GAAG,GAAG,IAAA,oBAAY,EAAC,OAAO,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,IAAA,oBAAY,EAAC,OAAO,CAAC,CAAC;IACnC,MAAM,EAAE,GAAG,IAAA,aAAK,EACd,wBAAwB,GAAG,8EAA8E,IAAI,OAAO,CACrH,CAAC;IACF,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IACD,8GAA8G;IAC9G,0BAA0B;IAC1B,OAAO,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACnD,CAAC;AAED,SAAS,cAAc,CACrB,OAAe,EACf,UAAkB,EAClB,IAAY;IAEZ,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;IACnE,OAAO,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,oBAAoB,CAC3B,GAAoE;IAEpE,OAAO,IAAA,eAAM,EAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAC9B,CAAC;AAED,SAAS,gBAAgB,CACvB,GAA4C;IAE5C,OAAO,IAAA,eAAM,EAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC5B,CAAC;AAED,SAAS,cAAc,CAAC,KAAa;IACnC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,iBAAiB,CACxB,QAAoD,EACpD,KAAa;IAEb,MAAM,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC9C,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/C,IAAI,cAAc,CAAC,UAAU,CAAC,KAAK,eAAe,EAAE,CAAC;YACnD,OAAO,UAAU,CAAC;QACpB,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAQD,SAAS,cAAc,CAAC,EACtB,OAAO,EACP,QAAQ,EACR,aAAa,EACb,aAAa,EACb,OAAO,EACP,iBAAiB,EACjB,iBAAiB,GASlB;IACC,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,iBAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/D,OAAO,qBAAqB,CAAC;YAC3B,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC;YAChC,aAAa,EAAE,iBAAiB;YAChC,aAAa,EAAE,iBAAiB;YAChC,UAAU,EAAE,aAAa;SAC1B,CAAC,CAAC;IACL,CAAC;SAAM,CAAC;QACN,OAAO,qBAAqB,CAAC;YAC3B,OAAO;YACP,aAAa;YACb,aAAa;YACb,UAAU,EAAE,OAAO;SACpB,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAS,qBAAqB,CAAC,EAC7B,OAAO,EACP,aAAa,EACb,aAAa,EACb,UAAU,GAMX;IACC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC;IAC/C,CAAC;SAAM,IAAI,YAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9B,MAAM,mBAAmB,GACvB,aAAa,GAAG,gBAAgB,CAAC,aAAa,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QACvE,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IACxD,CAAC;SAAM,IAAI,YAAE,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;QACnC,uLAAuL;QACvL,+DAA+D;QAC/D,yFAAyF;QACzF,MAAM,WAAW,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACtD,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,YAAgC,CAAC;QACrC,IAAI,mBAAuC,CAAC;QAE5C,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACxC,OAAO,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC;QAC/C,CAAC;QAED,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;YAC9B,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;gBACnB,IAAI,KAAK,EAAE,CAAC;oBACV,8DAA8D;oBAC9D,OAAO,EAAE,UAAU,EAAE,yBAAyB,EAAE,CAAC;gBACnD,CAAC;gBACD,KAAK,GAAG,IAAI,CAAC;gBAEb,YAAY,GAAG,OAAO,CAAC,GAAG,CAAW,CAAC;gBACtC,mBAAmB;oBACjB,aAAa;wBACb,cAAc,CAAC,aAAa,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;QAED,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,OAAO,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC;AAC/C,CAAC;AAED,SAAS,iBAAiB,CAAC,EACzB,UAAU,EACV,QAAQ,EACR,aAAa,EACb,aAAa,EACb,OAAO,EACP,iBAAiB,EACjB,iBAAiB,GAYlB;IACC,IAAI,YAAE,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;QAC1B,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO;gBACL,OAAO;gBACP,UAAU,EAAE,qBAAqB;aAClC,CAAC;QACJ,CAAC;QACD,OAAO;YACL,OAAO,EAAE,GAAG,KAAK,IAAI,IAAI,EAAE;YAC3B,YAAY;YACZ,WAAW,EAAE;gBACX,mBAAmB,EACjB,aAAa,GAAG,cAAc,CAAC,aAAa,EAAE,OAAO,EAAE,YAAY,CAAC;aACvE;SACF,CAAC;IACJ,CAAC;IAED,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;QACvE,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,QAAQ;QACR,aAAa;QACb,aAAa;QACb,OAAO;QACP,iBAAiB;QACjB,iBAAiB;KAClB,CAAC,CAAC;IAEH,IAAI,UAAU,EAAE,CAAC;QACf,OAAO;YACL,OAAO;YACP,UAAU;SACX,CAAC;IACJ,CAAC;IAED,MAAM,UAAU,GAAyC;QACvD,YAAY;QACZ,WAAW,EAAE,EAAE,mBAAmB,EAAE;KACrC,CAAC;IAEF,IAAI,oBAAoB,CAAC,UAAU,CAAC,EAAE,CAAC;QACrC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;QACnC,UAAU,CAAC,OAAO,GAAG,GAAG,KAAK,IAAI,IAAI,EAAE,CAAC;IAC1C,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,UAAU,CAAC,OAAO,GAAG,GAAG,YAAY,IAAI,IAAI,EAAE,CAAC;IACjD,CAAC;IAED,IAAI,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QACzC,UAAU,CAAC,kBAAkB,GAAG,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,YAAY,CAC1B,WAAmB,EACnB,OAAe;IAEf,MAAM,WAAW,GAAG,IAAA,YAAS,EAAC,IAAA,cAAO,EAAC,OAAO,CAAC,CAAkB,CAAC;IACjE,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,IAAI,EAAE,CAAC;IAC5C,MAAM,IAAI,GAAG,WAAW,CAAC,SAAS,IAAI,EAAE,CAAC;IACzC,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACnD,MAAM,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,iBAAiB,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC3D,MAAM,aAAa,GAA2C,EAAE,CAAC;IACjE,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,iBAAiB,CAAC;YACnC,UAAU,EAAE,aAAa;YACzB,QAAQ;YACR,aAAa,EAAE,aAAa;YAC5B,aAAa,EAAE,aAAa;YAC5B,OAAO,EAAE,WAAW;YACpB,iBAAiB;YACjB,iBAAiB;SAClB,CAAC,CAAC;QACH,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAC;IAC1C,MAAM,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC3D,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9C,MAAM,gBAAgB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,YAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC;YACpD,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC;YAC7B,CAAC,CAAC,CAAC,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,EAAE,YAAY,EAAE,mBAAmB,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;YACvE,OAAO;YACP,QAAQ;YACR,aAAa,EAAE,iBAAiB;YAChC,aAAa,EAAE,iBAAiB;YAChC,OAAO;YACP,iBAAiB;YACjB,iBAAiB;SAClB,CAAC,CAAC;QAEH,MAAM,UAAU,GAAyC;YACvD,OAAO,EAAE,QAAQ;YACjB,OAAO;YACP,WAAW,EAAE,GAAG,OAAO,IAAI,OAAO,gBAAgB;YAClD,YAAY;YACZ,kBAAkB,EAAE,UAAU,UAAU,EAAE;YAC1C,WAAW,EAAE,EAAE,mBAAmB,EAAE;SACrC,CAAC;QACF,IAAI,UAAU,EAAE,CAAC;YACf,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,CAAC;QACD,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,kBAAkB,EAAE,CAAC;YAC/D,UAAU,CAAC,kBAAkB,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5D,OAAO,UAAU,CAAC,kBAAkB,CAAC;QACvC,CAAC;QAED,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;QACrC,OAAO,IAAA,mBAAS,EAAC,GAAG,EAAE,EAAE,WAAW,EAAE,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport deepmerge from 'deepmerge';\nimport type { SkipReason } from '../../../../types';\nimport { hasKey } from '../../../../util/object';\nimport { escapeRegExp, regEx } from '../../../../util/regex';\nimport { massage, parse as parseToml } from '../../../../util/toml';\nimport type { PackageDependency } from '../../types';\nimport type {\n  GradleCatalog,\n  GradleCatalogArtifactDescriptor,\n  GradleCatalogModuleDescriptor,\n  GradleManagerData,\n  GradleVersionCatalogVersion,\n  GradleVersionPointerTarget,\n  VersionPointer,\n} from '../types';\n\nfunction findVersionIndex(\n  content: string,\n  depName: string,\n  version: string,\n): number {\n  const eDn = escapeRegExp(depName);\n  const eVer = escapeRegExp(version);\n  const re = regEx(\n    `(?:id\\\\s*=\\\\s*)?['\"]?${eDn}[\"']?(?:(?:\\\\s*=\\\\s*)|:|,\\\\s*)(?:.*version(?:\\\\.ref)?(?:\\\\s*\\\\=\\\\s*))?[\"']?${eVer}['\"]?`,\n  );\n  const match = re.exec(content);\n  if (match) {\n    return match.index + content.slice(match.index).indexOf(version);\n  }\n  // ignoring Fallback because I can't reach it in tests, and code is not supposed to reach it but just in case.\n  /* istanbul ignore next */\n  return findIndexAfter(content, depName, version);\n}\n\nfunction findIndexAfter(\n  content: string,\n  sliceAfter: string,\n  find: string,\n): number {\n  const slicePoint = content.indexOf(sliceAfter) + sliceAfter.length;\n  return slicePoint + content.slice(slicePoint).indexOf(find);\n}\n\nfunction isArtifactDescriptor(\n  obj: GradleCatalogArtifactDescriptor | GradleCatalogModuleDescriptor,\n): obj is GradleCatalogArtifactDescriptor {\n  return hasKey('group', obj);\n}\n\nfunction isVersionPointer(\n  obj: GradleVersionCatalogVersion | undefined,\n): obj is VersionPointer {\n  return hasKey('ref', obj);\n}\n\nfunction normalizeAlias(alias: string): string {\n  return alias.replace(regEx(/[-_]/g), '.');\n}\n\nfunction findOriginalAlias(\n  versions: Record<string, GradleVersionPointerTarget>,\n  alias: string,\n): string {\n  const normalizedAlias = normalizeAlias(alias);\n  for (const sectionKey of Object.keys(versions)) {\n    if (normalizeAlias(sectionKey) === normalizedAlias) {\n      return sectionKey;\n    }\n  }\n\n  return alias;\n}\n\ninterface VersionExtract {\n  currentValue?: string;\n  fileReplacePosition?: number;\n  skipReason?: SkipReason;\n}\n\nfunction extractVersion({\n  version,\n  versions,\n  depStartIndex,\n  depSubContent,\n  depName,\n  versionStartIndex,\n  versionSubContent,\n}: {\n  version: GradleVersionCatalogVersion | undefined;\n  versions: Record<string, GradleVersionPointerTarget>;\n  depStartIndex: number;\n  depSubContent: string;\n  depName: string;\n  versionStartIndex: number;\n  versionSubContent: string;\n}): VersionExtract {\n  if (isVersionPointer(version)) {\n    const originalAlias = findOriginalAlias(versions, version.ref);\n    return extractLiteralVersion({\n      version: versions[originalAlias],\n      depStartIndex: versionStartIndex,\n      depSubContent: versionSubContent,\n      sectionKey: originalAlias,\n    });\n  } else {\n    return extractLiteralVersion({\n      version,\n      depStartIndex,\n      depSubContent,\n      sectionKey: depName,\n    });\n  }\n}\n\nfunction extractLiteralVersion({\n  version,\n  depStartIndex,\n  depSubContent,\n  sectionKey,\n}: {\n  version: GradleVersionPointerTarget | undefined;\n  depStartIndex: number;\n  depSubContent: string;\n  sectionKey: string;\n}): VersionExtract {\n  if (!version) {\n    return { skipReason: 'unspecified-version' };\n  } else if (is.string(version)) {\n    const fileReplacePosition =\n      depStartIndex + findVersionIndex(depSubContent, sectionKey, version);\n    return { currentValue: version, fileReplacePosition };\n  } else if (is.plainObject(version)) {\n    // https://github.com/gradle/gradle/blob/d9adf33a57925582988fc512002dcc0e8ce4db95/subprojects/core/src/main/java/org/gradle/api/internal/catalog/parser/TomlCatalogFileParser.java#L368\n    // https://docs.gradle.org/current/userguide/rich_versions.html\n    // https://docs.gradle.org/current/userguide/platforms.html#sub::toml-dependencies-format\n    const versionKeys = ['require', 'prefer', 'strictly'];\n    let found = false;\n    let currentValue: string | undefined;\n    let fileReplacePosition: number | undefined;\n\n    if (version.reject || version.rejectAll) {\n      return { skipReason: 'unsupported-version' };\n    }\n\n    for (const key of versionKeys) {\n      if (key in version) {\n        if (found) {\n          // Currently, we only support one version constraint at a time\n          return { skipReason: 'multiple-constraint-dep' };\n        }\n        found = true;\n\n        currentValue = version[key] as string;\n        fileReplacePosition =\n          depStartIndex +\n          findIndexAfter(depSubContent, sectionKey, currentValue);\n      }\n    }\n\n    if (found) {\n      return { currentValue, fileReplacePosition };\n    }\n  }\n\n  return { skipReason: 'unspecified-version' };\n}\n\nfunction extractDependency({\n  descriptor,\n  versions,\n  depStartIndex,\n  depSubContent,\n  depName,\n  versionStartIndex,\n  versionSubContent,\n}: {\n  descriptor:\n    | string\n    | GradleCatalogModuleDescriptor\n    | GradleCatalogArtifactDescriptor;\n  versions: Record<string, GradleVersionPointerTarget>;\n  depStartIndex: number;\n  depSubContent: string;\n  depName: string;\n  versionStartIndex: number;\n  versionSubContent: string;\n}): PackageDependency<GradleManagerData> {\n  if (is.string(descriptor)) {\n    const [group, name, currentValue] = descriptor.split(':');\n    if (!currentValue) {\n      return {\n        depName,\n        skipReason: 'unspecified-version',\n      };\n    }\n    return {\n      depName: `${group}:${name}`,\n      currentValue,\n      managerData: {\n        fileReplacePosition:\n          depStartIndex + findIndexAfter(depSubContent, depName, currentValue),\n      },\n    };\n  }\n\n  const { currentValue, fileReplacePosition, skipReason } = extractVersion({\n    version: descriptor.version,\n    versions,\n    depStartIndex,\n    depSubContent,\n    depName,\n    versionStartIndex,\n    versionSubContent,\n  });\n\n  if (skipReason) {\n    return {\n      depName,\n      skipReason,\n    };\n  }\n\n  const dependency: PackageDependency<GradleManagerData> = {\n    currentValue,\n    managerData: { fileReplacePosition },\n  };\n\n  if (isArtifactDescriptor(descriptor)) {\n    const { group, name } = descriptor;\n    dependency.depName = `${group}:${name}`;\n  } else {\n    const [depGroupName, name] = descriptor.module.split(':');\n    dependency.depName = `${depGroupName}:${name}`;\n  }\n\n  if (isVersionPointer(descriptor.version)) {\n    dependency.sharedVariableName = normalizeAlias(descriptor.version.ref);\n  }\n\n  return dependency;\n}\n\nexport function parseCatalog(\n  packageFile: string,\n  content: string,\n): PackageDependency<GradleManagerData>[] {\n  const tomlContent = parseToml(massage(content)) as GradleCatalog;\n  const versions = tomlContent.versions ?? {};\n  const libs = tomlContent.libraries ?? {};\n  const libStartIndex = content.indexOf('libraries');\n  const libSubContent = content.slice(libStartIndex);\n  const versionStartIndex = content.indexOf('versions');\n  const versionSubContent = content.slice(versionStartIndex);\n  const extractedDeps: PackageDependency<GradleManagerData>[] = [];\n  for (const libraryName of Object.keys(libs)) {\n    const libDescriptor = libs[libraryName];\n    const dependency = extractDependency({\n      descriptor: libDescriptor,\n      versions,\n      depStartIndex: libStartIndex,\n      depSubContent: libSubContent,\n      depName: libraryName,\n      versionStartIndex,\n      versionSubContent,\n    });\n    extractedDeps.push(dependency);\n  }\n\n  const plugins = tomlContent.plugins ?? {};\n  const pluginsStartIndex = content.indexOf('[plugins]');\n  const pluginsSubContent = content.slice(pluginsStartIndex);\n  for (const pluginName of Object.keys(plugins)) {\n    const pluginDescriptor = plugins[pluginName];\n    const [depName, version] = is.string(pluginDescriptor)\n      ? pluginDescriptor.split(':')\n      : [pluginDescriptor.id, pluginDescriptor.version];\n    const { currentValue, fileReplacePosition, skipReason } = extractVersion({\n      version,\n      versions,\n      depStartIndex: pluginsStartIndex,\n      depSubContent: pluginsSubContent,\n      depName,\n      versionStartIndex,\n      versionSubContent,\n    });\n\n    const dependency: PackageDependency<GradleManagerData> = {\n      depType: 'plugin',\n      depName,\n      packageName: `${depName}:${depName}.gradle.plugin`,\n      currentValue,\n      commitMessageTopic: `plugin ${pluginName}`,\n      managerData: { fileReplacePosition },\n    };\n    if (skipReason) {\n      dependency.skipReason = skipReason;\n    }\n    if (isVersionPointer(version) && dependency.commitMessageTopic) {\n      dependency.sharedVariableName = normalizeAlias(version.ref);\n      delete dependency.commitMessageTopic;\n    }\n\n    extractedDeps.push(dependency);\n  }\n\n  const deps = extractedDeps.map((dep) => {\n    return deepmerge(dep, { managerData: { packageFile } });\n  });\n  return deps;\n}\n"]}