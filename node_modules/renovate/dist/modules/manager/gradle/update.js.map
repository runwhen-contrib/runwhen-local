{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gradle/update.ts"],"names":[],"mappings":";;AAKA,4CA6BC;AAlCD,4CAAyC;AAGzC,mCAA+C;AAE/C,SAAgB,gBAAgB,CAAC,EAC/B,WAAW,EACX,OAAO,GACmC;IAC1C,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAC7E,IAAI,UAAU,KAAK,aAAa,EAAE,CAAC;QACjC,eAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,2BAA2B;IAC3B,MAAM,MAAM,GAAG,WAAY,CAAC,mBAAmB,CAAC;IAChD,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,OAAO,GAAG,IAAA,4BAAoB,EAAC,SAAS,CAAC,CAAC;IAChD,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,oBAAoB,GAAG,OAAO,CAAC,MAAM,CAAC;QAC5C,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACvD,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC;YACzB,OAAO,WAAW,CAAC;QACrB,CAAC;QACD,IAAI,OAAO,KAAK,YAAY,IAAI,OAAO,CAAC,kBAAkB,EAAE,CAAC;YAC3D,uBAAuB;YACvB,OAAO,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC;QAC7C,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,eAAe,CAAC,CAAC;IAC9E,CAAC;SAAM,CAAC;QACN,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;IACpE,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport type { UpdateDependencyConfig } from '../types';\nimport type { GradleManagerData } from './types';\nimport { versionLikeSubstring } from './utils';\n\nexport function updateDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig<GradleManagerData>): string | null {\n  const { depName, currentValue, newValue, managerData, updateType } = upgrade;\n  if (updateType === 'replacement') {\n    logger.warn('gradle manager does not support replacement updates yet');\n    return null;\n  }\n  // TODO check null (#22198)\n  const offset = managerData!.fileReplacePosition;\n  const leftPart = fileContent.slice(0, offset);\n  const rightPart = fileContent.slice(offset);\n  const version = versionLikeSubstring(rightPart);\n  if (version) {\n    const versionClosePosition = version.length;\n    const restPart = rightPart.slice(versionClosePosition);\n    if (version === newValue) {\n      return fileContent;\n    }\n    if (version === currentValue || upgrade.sharedVariableName) {\n      // TODO: types (#22198)\n      return `${leftPart}${newValue}${restPart}`;\n    }\n    logger.debug({ depName, version, currentValue, newValue }, 'Unknown value');\n  } else {\n    logger.debug({ depName, currentValue, newValue }, 'Wrong offset');\n  }\n  return null;\n}\n"]}