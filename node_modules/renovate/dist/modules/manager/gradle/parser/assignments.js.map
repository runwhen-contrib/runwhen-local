{"version":3,"file":"assignments.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/assignments.ts"],"names":[],"mappings":"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","sourcesContent":["import type { parser } from 'good-enough-parser';\nimport { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from '../types';\nimport {\n  cleanupTempVars,\n  coalesceVariable,\n  increaseNestingDepth,\n  prependNestingDepth,\n  qStringValue,\n  qValueMatcher,\n  qVariableAssignmentIdentifier,\n  reduceNestingDepth,\n  storeInTokenMap,\n  storeVarToken,\n} from './common';\nimport {\n  qDependencyStrings,\n  qGroovyMapNotationDependencies,\n} from './dependencies';\nimport { handleAssignment } from './handlers';\n\n// foo = \"1.2.3\"\nconst qGroovySingleVarAssignment = qVariableAssignmentIdentifier\n  .op('=')\n  .handler(coalesceVariable)\n  .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n  .join(qStringValue)\n  .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n  .handler(handleAssignment)\n  .handler(cleanupTempVars);\n\n// set(\"foo\", \"1.2.3\")\nconst qKotlinSingleVarAssignment = q\n  .sym<Ctx>(regEx(/^(?:set|version)$/))\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q\n      .begin<Ctx>()\n      .join(qStringValue)\n      .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n      .op(',')\n      .join(qStringValue)\n      .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n      .handler(handleAssignment)\n      .end(),\n  })\n  .handler(cleanupTempVars);\n\n// val foo by extra { \"1.2.3\" }\nconst qKotlinSingleExtraVarAssignment = q\n  .sym<Ctx>('val')\n  .sym(storeVarToken)\n  .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n  .opt(q.op<Ctx>(':').sym('String'))\n  .sym('by')\n  .sym('extra')\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    search: q\n      .begin<Ctx>()\n      .join(qStringValue)\n      .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n      .handler(handleAssignment)\n      .end(),\n  })\n  .handler(cleanupTempVars);\n\nconst qGroovySingleMapOfVarAssignment = q.alt(\n  // foo: [group: \"foo\", name: \"bar\", version: \"1.2.3\"]\n  q.begin<Ctx>().join(qGroovyMapNotationDependencies).end(),\n  // foo: \"1.2.3\"\n  q\n    .alt(q.sym(storeVarToken), q.str(storeVarToken))\n    .handler(prependNestingDepth)\n    .handler(coalesceVariable)\n    .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n    .op(':')\n    .join(qValueMatcher)\n    .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n    .handler(handleAssignment),\n  // [\"foo:bar:1.2.3\", \"foo:baz:$qux\"]\n  qDependencyStrings,\n);\n\nconst qGroovyMapOfExpr = (\n  search: q.QueryBuilder<Ctx, parser.Node>,\n): q.QueryBuilder<Ctx, parser.Node> =>\n  q.alt(\n    q.alt(q.sym(storeVarToken), q.str(storeVarToken)).op(':').tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '[',\n      endsWith: ']',\n      preHandler: increaseNestingDepth,\n      search,\n      postHandler: reduceNestingDepth,\n    }),\n    qGroovySingleMapOfVarAssignment,\n  );\n\n// versions = [ android: [ buildTools: '30.0.3' ], kotlin: '1.4.30' ]\nconst qGroovyMultiVarAssignment = qVariableAssignmentIdentifier\n  .alt(q.op('='), q.op('+='))\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '[',\n    endsWith: ']',\n    preHandler: increaseNestingDepth,\n    search: qGroovyMapOfExpr(qGroovyMapOfExpr(qGroovySingleMapOfVarAssignment)),\n    postHandler: reduceNestingDepth,\n  })\n  .handler(cleanupTempVars);\n\n// \"foo1\" to \"bar1\"\nconst qKotlinSingleMapOfVarAssignment = qStringValue\n  .sym('to')\n  .handler(prependNestingDepth)\n  .handler(coalesceVariable)\n  .handler((ctx) => storeInTokenMap(ctx, 'keyToken'))\n  .join(qValueMatcher)\n  .handler((ctx) => storeInTokenMap(ctx, 'valToken'))\n  .handler(handleAssignment);\n\nconst qKotlinMapOfExpr = (\n  search: q.QueryBuilder<Ctx, parser.Node>,\n): q.QueryBuilder<Ctx, parser.Node> =>\n  q.alt(\n    qStringValue.sym('to').sym('mapOf').tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '(',\n      endsWith: ')',\n      preHandler: increaseNestingDepth,\n      search,\n      postHandler: reduceNestingDepth,\n    }),\n    qKotlinSingleMapOfVarAssignment,\n  );\n\n// val versions = mapOf(\"foo1\" to \"bar1\", \"foo2\" to \"bar2\", \"foo3\" to \"bar3\")\nexport const qKotlinMultiMapOfVarAssignment = qVariableAssignmentIdentifier\n  .op('=')\n  .sym('mapOf')\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    preHandler: increaseNestingDepth,\n    search: qKotlinMapOfExpr(qKotlinMapOfExpr(qKotlinSingleMapOfVarAssignment)),\n    postHandler: reduceNestingDepth,\n  })\n  .handler(cleanupTempVars);\n\nexport const qAssignments = q.alt(\n  qGroovySingleVarAssignment,\n  qGroovyMultiVarAssignment,\n  qKotlinSingleVarAssignment,\n  qKotlinSingleExtraVarAssignment,\n  qKotlinMultiMapOfVarAssignment,\n);\n"]}