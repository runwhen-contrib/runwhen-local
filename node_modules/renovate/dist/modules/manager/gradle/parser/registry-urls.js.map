{"version":3,"file":"registry-urls.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/registry-urls.ts"],"names":[],"mappings":"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","sourcesContent":["import type { lexer, parser } from 'good-enough-parser';\nimport { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from '../types';\nimport { qApplyFrom } from './apply-from';\nimport { qAssignments } from './assignments';\nimport {\n  REGISTRY_URLS,\n  cleanupTempVars,\n  qArtifactId,\n  qGroupId,\n  qValueMatcher,\n  qVersion,\n  storeInTokenMap,\n  storeVarToken,\n} from './common';\nimport { handleRegistryContent, handleRegistryUrl } from './handlers';\nimport { qPlugins } from './plugins';\n\nconst cleanupTmpContentSpec = (ctx: Ctx): Ctx => {\n  ctx.tmpRegistryContent = [];\n  return ctx;\n};\n\nconst qContentDescriptorSpec = (\n  methodName: RegExp,\n  matcher: q.QueryBuilder<Ctx, parser.Node>,\n): q.QueryBuilder<Ctx, parser.Node> => {\n  return q\n    .sym<Ctx>(methodName, storeVarToken)\n    .handler((ctx) => storeInTokenMap(ctx, 'methodName'))\n    .alt(\n      // includeGroup \"foo.bar\"\n      matcher,\n      // includeGroup(\"foo.bar\")\n      q.tree({\n        type: 'wrapped-tree',\n        maxDepth: 1,\n        startsWith: '(',\n        endsWith: ')',\n        search: q.begin<Ctx>().join(matcher).end(),\n      }),\n    );\n};\n\n// includeModule('foo')\n// excludeModuleByRegex('bar')\nconst qContentDescriptor = (\n  mode: 'include' | 'exclude',\n): q.QueryBuilder<Ctx, parser.Node> => {\n  return q\n    .alt<Ctx>(\n      qContentDescriptorSpec(\n        regEx(\n          `^(?:${mode}Group|${mode}GroupByRegex|${mode}GroupAndSubgroups)$`,\n        ),\n        qGroupId,\n      ),\n      qContentDescriptorSpec(\n        regEx(`^(?:${mode}Module|${mode}ModuleByRegex)$`),\n        q.join(qGroupId, q.op(','), qArtifactId),\n      ),\n      qContentDescriptorSpec(\n        regEx(`^(?:${mode}Version|${mode}VersionByRegex)$`),\n        q.join(qGroupId, q.op(','), qArtifactId, q.op(','), qVersion),\n      ),\n    )\n    .handler(handleRegistryContent);\n};\n\n// content { includeModule('foo'); excludeModule('bar') }\nconst qRegistryContent = q.sym<Ctx>('content').tree({\n  type: 'wrapped-tree',\n  maxDepth: 1,\n  startsWith: '{',\n  endsWith: '}',\n  search: q.alt(qContentDescriptor('include'), qContentDescriptor('exclude')),\n});\n\n// uri(\"https://foo.bar/baz\")\n// \"https://foo.bar/baz\"\nconst qUri = q\n  .alt(\n    q.sym<Ctx>('uri').tree({\n      maxDepth: 1,\n      search: qValueMatcher,\n    }),\n    qValueMatcher,\n  )\n  .handler((ctx) => storeInTokenMap(ctx, 'registryUrl'));\n\n// mavenCentral()\n// mavenCentral { ... }\nconst qPredefinedRegistries = q\n  .sym(\n    regEx(`^(?:${Object.keys(REGISTRY_URLS).join('|')})$`),\n    (ctx: Ctx, node: lexer.Token) => {\n      const nodeTransformed: lexer.Token = {\n        ...node,\n        type: 'string-value',\n        value: REGISTRY_URLS[node.value as keyof typeof REGISTRY_URLS],\n      };\n      storeVarToken(ctx, nodeTransformed);\n      return ctx;\n    },\n  )\n  .handler((ctx) => storeInTokenMap(ctx, 'registryUrl'))\n  .alt(\n    q\n      .tree({\n        type: 'wrapped-tree',\n        startsWith: '(',\n        endsWith: ')',\n        search: q.begin<Ctx>().end(),\n      })\n      .opt(q.op<Ctx>('.').join(qRegistryContent)),\n    q.tree({\n      type: 'wrapped-tree',\n      startsWith: '{',\n      endsWith: '}',\n      search: q.opt(qRegistryContent),\n    }),\n  );\n\n// { url = \"https://some.repo\"; content { ... } }\nconst qMavenArtifactRegistry = q.tree({\n  type: 'wrapped-tree',\n  maxDepth: 1,\n  startsWith: '{',\n  endsWith: '}',\n  search: q.alt(\n    q\n      .sym<Ctx>('name')\n      .opt(q.op('='))\n      .join(qValueMatcher)\n      .handler((ctx) => storeInTokenMap(ctx, 'name')),\n    q.sym<Ctx>('url').opt(q.op('=')).join(qUri),\n    q.sym<Ctx>('setUrl').tree({\n      maxDepth: 1,\n      startsWith: '(',\n      endsWith: ')',\n      search: q.begin<Ctx>().join(qUri).end(),\n    }),\n    qRegistryContent,\n  ),\n});\n\n// maven(url = uri(\"https://foo.bar/baz\"))\n// maven(\"https://foo.bar/baz\") { content { ... } }\n// maven { name = some; url = \"https://foo.bar/${name}\" }\nconst qCustomRegistryUrl = q.sym<Ctx>('maven').alt(\n  q\n    .tree<Ctx>({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '(',\n      endsWith: ')',\n      search: q.begin<Ctx>().opt(q.sym<Ctx>('url').op('=')).join(qUri).end(),\n    })\n    .opt(qMavenArtifactRegistry),\n  qMavenArtifactRegistry,\n);\n\n// forRepository { maven { ... } }\nconst qForRepository = q.sym<Ctx>('forRepository').tree({\n  type: 'wrapped-tree',\n  maxDepth: 1,\n  maxMatches: 1,\n  startsWith: '{',\n  endsWith: '}',\n  search: q.alt<Ctx>(qPredefinedRegistries, qCustomRegistryUrl),\n});\n\n// filter { includeGroup(...); includeModule(...) }\nconst qFilter = q.sym<Ctx>('filter').tree({\n  type: 'wrapped-tree',\n  maxDepth: 1,\n  startsWith: '{',\n  endsWith: '}',\n  search: qContentDescriptor('include'),\n});\n\n// exclusiveContent { forRepository { ... }; filter { ... } }\nconst qExclusiveContent = q\n  .sym<Ctx>('exclusiveContent', storeVarToken)\n  .handler((ctx) => storeInTokenMap(ctx, 'registryType'))\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    maxMatches: 1,\n    startsWith: '{',\n    endsWith: '}',\n    search: q.alt<Ctx>(\n      q.join<Ctx>(qForRepository, qFilter),\n      q.join<Ctx>(qFilter, qForRepository),\n    ),\n  });\n\nconst qRegistries = q\n  .alt(qExclusiveContent, qPredefinedRegistries, qCustomRegistryUrl)\n  .handler(handleRegistryUrl)\n  .handler(cleanupTmpContentSpec)\n  .handler(cleanupTempVars);\n\nconst qPluginManagement = q.sym<Ctx>('pluginManagement', storeVarToken).tree({\n  type: 'wrapped-tree',\n  startsWith: '{',\n  endsWith: '}',\n  preHandler: (ctx) => {\n    ctx.tmpTokenStore.registryScope = ctx.varTokens;\n    ctx.varTokens = [];\n    return ctx;\n  },\n  search: q\n    .handler<Ctx>((ctx) => {\n      if (ctx.tmpTokenStore.registryScope) {\n        ctx.tokenMap.registryScope = ctx.tmpTokenStore.registryScope;\n      }\n      return ctx;\n    })\n    .alt(qAssignments, qApplyFrom, qPlugins, qRegistries),\n  postHandler: (ctx) => {\n    delete ctx.tmpTokenStore.registryScope;\n    return ctx;\n  },\n});\n\nexport const qRegistryUrls = q.alt<Ctx>(\n  q.sym<Ctx>('publishing').tree(),\n  qPluginManagement,\n  qRegistries,\n);\n"]}