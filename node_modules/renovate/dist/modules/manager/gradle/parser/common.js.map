{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/common.ts"],"names":[],"mappings":"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","sourcesContent":["import type { lexer, parser } from 'good-enough-parser';\nimport { query as q } from 'good-enough-parser';\nimport { clone } from '../../../../util/clone';\nimport { regEx } from '../../../../util/regex';\nimport type {\n  Ctx,\n  NonEmptyArray,\n  PackageVariables,\n  VariableData,\n} from '../types';\n\nexport const REGISTRY_URLS = {\n  google: 'https://dl.google.com/android/maven2/',\n  gradlePluginPortal: 'https://plugins.gradle.org/m2/',\n  jcenter: 'https://jcenter.bintray.com/',\n  mavenCentral: 'https://repo.maven.apache.org/maven2',\n};\n\nexport const GRADLE_PLUGINS = {\n  checkstyle: ['toolVersion', 'com.puppycrawl.tools:checkstyle'],\n  codenarc: ['toolVersion', 'org.codenarc:CodeNarc'],\n  composeOptions: [\n    'kotlinCompilerExtensionVersion',\n    'androidx.compose.compiler:compiler',\n  ],\n  detekt: ['toolVersion', 'io.gitlab.arturbosch.detekt:detekt-core'],\n  findbugs: ['toolVersion', 'com.google.code.findbugs:findbugs'],\n  googleJavaFormat: [\n    'toolVersion',\n    'com.google.googlejavaformat:google-java-format',\n  ],\n  jacoco: ['toolVersion', 'org.jacoco:jacoco'],\n  jmh: ['jmhVersion', 'org.openjdk.jmh:jmh-core'],\n  lombok: ['version', 'org.projectlombok:lombok'],\n  micronaut: ['version', 'io.micronaut.platform:micronaut-platform'],\n  pmd: ['toolVersion', 'net.sourceforge.pmd:pmd-java'],\n  spotbugs: ['toolVersion', 'com.github.spotbugs:spotbugs'],\n};\n\nexport const GRADLE_TEST_SUITES = {\n  useJunit: 'junit:junit',\n  useJUnitJupiter: 'org.junit.jupiter:junit-jupiter',\n  useKotlinTest: 'org.jetbrains.kotlin:kotlin-test-junit',\n  useSpock: 'org.spockframework:spock-core',\n  useTestNG: 'org.testng:testng',\n};\n\nexport function storeVarToken(ctx: Ctx, node: lexer.Token): Ctx {\n  ctx.varTokens.push(node);\n  return ctx;\n}\n\nexport function increaseNestingDepth(ctx: Ctx): Ctx {\n  ctx.tmpNestingDepth.push(...ctx.varTokens);\n  ctx.varTokens = [];\n  return ctx;\n}\n\nexport function reduceNestingDepth(ctx: Ctx): Ctx {\n  ctx.tmpNestingDepth.pop();\n  return ctx;\n}\n\nexport function prependNestingDepth(ctx: Ctx): Ctx {\n  ctx.varTokens = [...clone(ctx.tmpNestingDepth), ...ctx.varTokens];\n  return ctx;\n}\n\nexport function storeInTokenMap(ctx: Ctx, tokenMapKey: string): Ctx {\n  ctx.tokenMap[tokenMapKey] = ctx.varTokens;\n  ctx.varTokens = [];\n\n  return ctx;\n}\n\nexport function loadFromTokenMap(\n  ctx: Ctx,\n  tokenMapKey: string,\n): NonEmptyArray<lexer.Token> {\n  const tokens = ctx.tokenMap[tokenMapKey];\n  if (!tokens) {\n    throw new Error(`Expected token ${tokenMapKey} not found`);\n  }\n\n  return tokens as NonEmptyArray<lexer.Token>;\n}\n\nexport function cleanupTempVars(ctx: Ctx): Ctx {\n  ctx.tokenMap = {};\n  ctx.varTokens = [];\n\n  return ctx;\n}\n\nexport function stripReservedPrefixFromKeyTokens(ctx: Ctx): Ctx {\n  const unwantedPrefixes = [\n    'ext',\n    'extra',\n    'project',\n    'rootProject',\n    'properties',\n  ];\n  while (\n    ctx.varTokens.length > 1 && // ensures there will be always at least one token\n    ctx.varTokens[0] &&\n    unwantedPrefixes.includes(ctx.varTokens[0].value)\n  ) {\n    ctx.varTokens.shift();\n  }\n\n  return ctx;\n}\n\nexport function coalesceVariable(ctx: Ctx): Ctx {\n  if (ctx.varTokens.length > 1) {\n    ctx.varTokens[0].value = ctx.varTokens\n      .map((token) => token.value)\n      .join('.');\n    ctx.varTokens.length = 1;\n  }\n\n  return ctx;\n}\n\nexport function findVariableInKotlinImport(\n  name: string,\n  ctx: Ctx,\n  variables: PackageVariables,\n): VariableData | undefined {\n  if (ctx.tmpKotlinImportStore.length && name.includes('.')) {\n    for (const tokens of ctx.tmpKotlinImportStore) {\n      const lastToken = tokens[tokens.length - 1];\n      if (lastToken && name.startsWith(`${lastToken.value}.`)) {\n        const prefix = tokens\n          .slice(0, -1)\n          .map((token) => token.value)\n          .join('.');\n        const identifier = `${prefix}.${name}`;\n\n        if (variables[identifier]) {\n          return variables[identifier];\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function findVariable(\n  name: string,\n  ctx: Ctx,\n  variables: PackageVariables = ctx.globalVars,\n): VariableData | undefined {\n  if (ctx.tmpNestingDepth.length) {\n    const prefixParts = ctx.tmpNestingDepth.map((token) => token.value);\n    for (let idx = ctx.tmpNestingDepth.length; idx > 0; idx -= 1) {\n      const prefix = prefixParts.slice(0, idx).join('.');\n      const identifier = `${prefix}.${name}`;\n\n      if (variables[identifier]) {\n        return variables[identifier];\n      }\n    }\n  }\n\n  if (variables[name]) {\n    return variables[name];\n  }\n\n  return findVariableInKotlinImport(name, ctx, variables);\n}\n\nexport function interpolateString(\n  childTokens: lexer.Token[],\n  ctx: Ctx,\n  variables: PackageVariables = ctx.globalVars,\n): string | null {\n  const resolvedSubstrings: string[] = [];\n  for (const childToken of childTokens) {\n    const type = childToken.type;\n    if (type === 'string-value') {\n      resolvedSubstrings.push(childToken.value);\n    } else if (type === 'symbol') {\n      const varData = findVariable(childToken.value, ctx, variables);\n      if (varData) {\n        resolvedSubstrings.push(varData.value);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  return resolvedSubstrings.join('');\n}\n\nexport const qStringValue = q.str((ctx: Ctx, node: lexer.Token) => {\n  storeVarToken(ctx, node);\n  return ctx;\n});\n\nexport const qStringValueAsSymbol = q.str((ctx: Ctx, node: lexer.Token) => {\n  const nodeTransformed: lexer.SymbolToken = {\n    ...node,\n    type: 'symbol',\n  };\n  storeVarToken(ctx, nodeTransformed);\n  return ctx;\n});\n\n// foo.bar[\"baz\"] = \"1.2.3\"\nexport const qVariableAssignmentIdentifier = q\n  .sym(storeVarToken)\n  .many(\n    q.alt(\n      q.op<Ctx>('.').sym(storeVarToken),\n      q.tree<Ctx>({\n        type: 'wrapped-tree',\n        maxDepth: 1,\n        startsWith: '[',\n        endsWith: ']',\n        search: q.begin<Ctx>().join(qStringValueAsSymbol).end(),\n      }),\n    ),\n    0,\n    32,\n  )\n  .handler(stripReservedPrefixFromKeyTokens);\n\n// foo.bar[\"baz\"] -> \"foo.bar.baz\"\nexport const qVariableAccessIdentifier = q\n  .handler<Ctx>((ctx) => {\n    ctx.tmpTokenStore.backupVarAccessTokens = ctx.varTokens;\n    ctx.varTokens = [];\n    return ctx;\n  })\n  .join(qVariableAssignmentIdentifier)\n  .handler(coalesceVariable)\n  .handler((ctx) => {\n    ctx.varTokens = [\n      ...ctx.tmpTokenStore.backupVarAccessTokens,\n      ...ctx.varTokens,\n    ];\n    delete ctx.tmpTokenStore.backupVarAccessTokens;\n    return ctx;\n  });\n\n// project.ext.getProperty(...)\n// extra.get(...)\nexport const qPropertyAccessIdentifier = q\n  .opt(q.sym<Ctx>(regEx(/^(?:rootProject|project)$/)).op('.'))\n  .alt(\n    q.opt(q.sym<Ctx>('ext').op('.')).sym(regEx(/^(?:property|getProperty)$/)),\n    q\n      .sym<Ctx>(regEx(/^(?:extra|ext)$/))\n      .op('.')\n      .sym('get'),\n  )\n  .tree({\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q.begin<Ctx>().join(qStringValueAsSymbol).end(),\n  })\n  .opt(q.sym<Ctx>('as').sym('String'));\n\n// \"foo${bar}baz\"\nexport const qTemplateString = q\n  .tree({\n    type: 'string-tree',\n    maxDepth: 2,\n    preHandler: (ctx) => {\n      ctx.tmpTokenStore.templateTokens = [];\n      return ctx;\n    },\n    search: q\n      .alt(qStringValue, qPropertyAccessIdentifier, qVariableAccessIdentifier)\n      .handler((ctx) => {\n        ctx.tmpTokenStore.templateTokens?.push(...ctx.varTokens);\n        ctx.varTokens = [];\n        return ctx;\n      }),\n  })\n  .handler((ctx) => {\n    ctx.varTokens = ctx.tmpTokenStore.templateTokens!;\n    return ctx;\n  });\n\n// foo = \"bar\"\n// foo + foo + \"${foo}\" + \"foo\" => \"barbarbarfoo\"\nexport const qConcatExpr = (\n  ...matchers: q.QueryBuilder<Ctx, parser.Node>[]\n): q.QueryBuilder<Ctx, parser.Node> =>\n  q.alt(...matchers).many(q.op<Ctx>('+').alt(...matchers), 0, 32);\n\nexport const qValueMatcher = qConcatExpr(\n  qTemplateString,\n  qPropertyAccessIdentifier,\n  qVariableAccessIdentifier,\n);\n\n// import foo.bar\n// runtimeOnly(\"some:foo:${bar.bazVersion}\")\nexport const qKotlinImport = q\n  .sym<Ctx>('import')\n  .join(qVariableAssignmentIdentifier)\n  .handler((ctx) => {\n    ctx.tmpKotlinImportStore.push(ctx.varTokens);\n    return ctx;\n  })\n  .handler(cleanupTempVars);\n\n// foo { bar { baz } }\n// foo.bar { baz }\nexport const qDotOrBraceExpr = (\n  symValue: q.SymMatcherValue,\n  matcher: q.QueryBuilder<Ctx, parser.Node>,\n): q.QueryBuilder<Ctx, parser.Node> =>\n  q.sym<Ctx>(symValue).alt(\n    q.op<Ctx>('.').join(matcher),\n    q.tree({\n      type: 'wrapped-tree',\n      maxDepth: 1,\n      startsWith: '{',\n      endsWith: '}',\n      search: matcher,\n    }),\n  );\n\nexport const qGroupId = qValueMatcher.handler((ctx) =>\n  storeInTokenMap(ctx, 'groupId'),\n);\n\nexport const qArtifactId = qValueMatcher.handler((ctx) =>\n  storeInTokenMap(ctx, 'artifactId'),\n);\n\nexport const qVersion = qValueMatcher.handler((ctx) =>\n  storeInTokenMap(ctx, 'version'),\n);\n"]}