{"version":3,"file":"apply-from.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/apply-from.ts"],"names":[],"mappings":";;;AAAA,2DAAgD;AAChD,kDAA+C;AAE/C,qCAA2E;AAC3E,yCAA6C;AAE7C,2BAA2B;AAC3B,gCAAgC;AAChC,MAAM,cAAc,GAAG,0BAAC;KACrB,GAAG,CACF,0BAAC;KACE,GAAG,CACF,0BAAC;KACE,GAAG,CAAC,0BAAC,CAAC,GAAG,CAAM,IAAA,aAAK,EAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;KAC3D,GAAG,CAAC,MAAM,CAAC,EACd,0BAAC,CAAC,GAAG,CAAM,0BAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CACrC;KACA,IAAI,CAAC;IACJ,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,MAAM,EAAE,0BAAC;SACN,KAAK,EAAO;SACZ,GAAG,CACF,0BAAC;SACE,IAAI,CAAC,sBAAa,EAAE,0BAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;SAC9B,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,wBAAe,EAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CACxD;SACA,IAAI,CAAC,sBAAa,CAAC;SACnB,GAAG,EAAE;CACT,CAAC,EACJ,sBAAa,CACd;KACA,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAA,wBAAe,EAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;AAE3C,QAAA,UAAU,GAAG,0BAAC;KACxB,GAAG,CAAM,OAAO,CAAC;KACjB,GAAG,CACF,0BAAC,CAAC,4DAA4D;KAC3D,GAAG,CAAM,MAAM,CAAC;KAChB,EAAE,CAAC,GAAG,CAAC;KACP,IAAI,CAAC,cAAc,CAAC,EACvB,0BAAC,CAAC,yCAAyC;KACxC,IAAI,CAAC;IACJ,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,CAAC;IACb,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,MAAM,EAAE,0BAAC,CAAC,KAAK,EAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,EAAE;CACtE,CAAC,CACL;KACA,OAAO,CAAC,0BAAe,CAAC;KACxB,OAAO,CAAC,wBAAe,CAAC,CAAC","sourcesContent":["import { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from '../types';\nimport { cleanupTempVars, qValueMatcher, storeInTokenMap } from './common';\nimport { handleApplyFrom } from './handlers';\n\n// apply from: 'foo.gradle'\n// apply(from = property(\"foo\"))\nconst qApplyFromFile = q\n  .alt(\n    q\n      .alt(\n        q\n          .opt(q.sym<Ctx>(regEx(/^(?:rootProject|project)$/)).op('.'))\n          .sym('file'),\n        q.opt<Ctx>(q.sym('new')).sym('File'),\n      )\n      .tree({\n        maxDepth: 1,\n        startsWith: '(',\n        endsWith: ')',\n        search: q\n          .begin<Ctx>()\n          .opt(\n            q\n              .join(qValueMatcher, q.op(','))\n              .handler((ctx) => storeInTokenMap(ctx, 'parentPath')),\n          )\n          .join(qValueMatcher)\n          .end(),\n      }),\n    qValueMatcher,\n  )\n  .handler((ctx) => storeInTokenMap(ctx, 'scriptFile'));\n\nexport const qApplyFrom = q\n  .sym<Ctx>('apply')\n  .alt(\n    q // apply from: rootProject.file(\"basedir\", \"foo/bar.gradle\")\n      .sym<Ctx>('from')\n      .op(':')\n      .join(qApplyFromFile),\n    q // apply(from = File(base, \"bar.gradle\"))\n      .tree({\n        maxDepth: 1,\n        maxMatches: 1,\n        startsWith: '(',\n        endsWith: ')',\n        search: q.begin<Ctx>().sym('from').op('=').join(qApplyFromFile).end(),\n      }),\n  )\n  .handler(handleApplyFrom)\n  .handler(cleanupTempVars);\n"]}