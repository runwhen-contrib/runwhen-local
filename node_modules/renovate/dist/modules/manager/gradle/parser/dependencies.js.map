{"version":3,"file":"dependencies.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/dependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from '../types';\nimport {\n  GRADLE_PLUGINS,\n  GRADLE_TEST_SUITES,\n  cleanupTempVars,\n  qArtifactId,\n  qDotOrBraceExpr,\n  qGroupId,\n  qTemplateString,\n  qValueMatcher,\n  qVersion,\n  storeInTokenMap,\n  storeVarToken,\n} from './common';\nimport {\n  handleDepString,\n  handleImplicitDep,\n  handleKotlinShortNotationDep,\n  handleLongFormDep,\n} from './handlers';\n\n// \"foo:bar:1.2.3\"\n// \"foo:bar:$baz\"\n// \"foo\" + \"${bar}\" + baz\nexport const qDependencyStrings = qTemplateString\n  .opt(q.op<Ctx>('+').join(qValueMatcher))\n  .handler((ctx: Ctx) => storeInTokenMap(ctx, 'templateStringTokens'))\n  .handler(handleDepString)\n  .handler(cleanupTempVars);\n\n// dependencySet(group: 'foo', version: bar) { entry 'baz' }\nconst qDependencySet = q\n  .sym<Ctx>('dependencySet', storeVarToken)\n  .handler((ctx) => storeInTokenMap(ctx, 'methodName'))\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q\n      .begin<Ctx>()\n      .sym('group')\n      .alt(q.op(':'), q.op('='))\n      .join(qGroupId)\n      .op(',')\n      .sym('version')\n      .alt(q.op(':'), q.op('='))\n      .join(qVersion)\n      .end(),\n  })\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '{',\n    endsWith: '}',\n    search: q\n      .sym<Ctx>('entry')\n      .alt(\n        qArtifactId,\n        q.tree({\n          type: 'wrapped-tree',\n          maxDepth: 1,\n          startsWith: '(',\n          endsWith: ')',\n          search: q.begin<Ctx>().join(qArtifactId).end(),\n        }),\n      )\n      .handler(handleLongFormDep),\n  })\n  .handler(cleanupTempVars);\n\n// group: \"foo\", name: \"bar\", version: \"1.2.3\"\nexport const qGroovyMapNotationDependencies = q\n  .sym<Ctx>('group')\n  .op(':')\n  .join(qGroupId)\n  .op(',')\n  .sym('name')\n  .op(':')\n  .join(qArtifactId)\n  .op(',')\n  .sym('version')\n  .op(':')\n  .join(qVersion)\n  .handler(handleLongFormDep)\n  .handler(cleanupTempVars);\n\n// kotlin(\"bom\", \"1.7.21\")\nconst qKotlinShortNotationDependencies = q\n  .sym<Ctx>('kotlin')\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q\n      .begin<Ctx>()\n      .join(qArtifactId)\n      .op(',')\n      .opt(q.sym<Ctx>('version').op('='))\n      .join(qVersion)\n      .end(),\n  })\n  .handler(handleKotlinShortNotationDep)\n  .handler(cleanupTempVars);\n\n// (group = \"foo\", name = \"bar\", version = \"1.2.3\")\nconst qKotlinMapNotationDependencies = q\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q\n      .begin<Ctx>()\n      .sym('group')\n      .op('=')\n      .join(qGroupId)\n      .op(',')\n      .sym('name')\n      .op('=')\n      .join(qArtifactId)\n      .op(',')\n      .sym('version')\n      .op('=')\n      .join(qVersion),\n  })\n  .handler(handleLongFormDep)\n  .handler(cleanupTempVars);\n\n// someMethod(\"foo\", \"bar\", \"1.2.3\")\nexport const qLongFormDep = q\n  .opt<Ctx>(\n    q.sym(storeVarToken).handler((ctx) => storeInTokenMap(ctx, 'methodName')),\n  )\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    maxMatches: 1,\n    startsWith: '(',\n    endsWith: ')',\n    search: q\n      .begin<Ctx>()\n      .join(qGroupId)\n      .op(',')\n      .join(qArtifactId)\n      .op(',')\n      .join(qVersion)\n      .end(),\n  })\n  .handler(handleLongFormDep)\n  .handler(cleanupTempVars);\n\n// pmd { toolVersion = \"1.2.3\" }\nconst qImplicitGradlePlugin = q\n  .alt(\n    ...Object.keys(GRADLE_PLUGINS).map((implicitDepName) =>\n      q\n        .sym<Ctx>(implicitDepName, storeVarToken)\n        .handler((ctx) => storeInTokenMap(ctx, 'implicitDepName'))\n        .tree({\n          type: 'wrapped-tree',\n          maxDepth: 1,\n          maxMatches: 1,\n          startsWith: '{',\n          endsWith: '}',\n          search: q\n            .sym<Ctx>(\n              GRADLE_PLUGINS[implicitDepName as keyof typeof GRADLE_PLUGINS][0],\n            )\n            .alt(\n              // toolVersion = \"1.2.3\"\n              q.opt<Ctx>(q.op('=')).join(qVersion),\n              // toolVersion.set(\"1.2.3\"), toolVersion.value(\"1.2.3\")\n              q\n                .op<Ctx>('.')\n                .sym(regEx(/^(?:set|value)$/))\n                .tree({\n                  maxDepth: 1,\n                  startsWith: '(',\n                  endsWith: ')',\n                  search: q.begin<Ctx>().join(qVersion).end(),\n                }),\n            ),\n        }),\n    ),\n  )\n  .handler(handleImplicitDep)\n  .handler(cleanupTempVars);\n\n// testing { suites { test { useSpock(\"1.2.3\") } } }\nconst qImplicitTestSuites = qDotOrBraceExpr(\n  'testing',\n  qDotOrBraceExpr(\n    'suites',\n    qDotOrBraceExpr(\n      'test',\n      q\n        .sym(\n          regEx(`^(?:${Object.keys(GRADLE_TEST_SUITES).join('|')})$`),\n          storeVarToken,\n        )\n        .handler((ctx) => storeInTokenMap(ctx, 'implicitDepName'))\n        .tree({\n          type: 'wrapped-tree',\n          maxDepth: 1,\n          maxMatches: 1,\n          startsWith: '(',\n          endsWith: ')',\n          search: q.begin<Ctx>().join(qVersion).end(),\n        }),\n    ),\n  ),\n)\n  .handler(handleImplicitDep)\n  .handler(cleanupTempVars);\n\nexport const qDependencies = q.alt(\n  qDependencyStrings,\n  qDependencySet,\n  qGroovyMapNotationDependencies,\n  qKotlinShortNotationDependencies,\n  qKotlinMapNotationDependencies,\n  qImplicitGradlePlugin,\n  qImplicitTestSuites,\n  // avoid heuristic matching of gradle feature variant capabilities\n  qDotOrBraceExpr('java', q.sym<Ctx>('registerFeature').tree()),\n);\n"]}