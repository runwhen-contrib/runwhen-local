{"version":3,"file":"language-version.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/gradle/parser/language-version.ts"],"names":[],"mappings":";;;AACA,2DAAgD;AAChD,kDAA+C;AAE/C,qCAA2C;AAE3C,OAAO;AACP,MAAM,cAAc,GAAG,0BAAC,CAAC,IAAI,CAAC;IAC5B,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,CAAC;IACb,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,MAAM,EAAE,0BAAC,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,IAAiB,EAAE,EAAE;QAC5C,GAAG,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC;QACrC,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;CACH,CAAC,CAAC;AAEH,8BAA8B;AAC9B,0BAA0B;AAC1B,MAAM,6BAA6B,GAAG,IAAA,wBAAe,EACnD,QAAQ,EACR,0BAAC,CAAC,GAAG,CAAM,cAAc,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAChD,CAAC;AAEF,6BAA6B;AAC7B,MAAM,oBAAoB,GAAG,0BAAC;KAC3B,GAAG,CAAM,qBAAqB,CAAC;KAC/B,EAAE,CAAC,GAAG,CAAC;KACP,GAAG,CAAC,IAAI,CAAC;KACT,IAAI,CAAC,cAAc,CAAC,CAAC;AAExB,sEAAsE;AACtE,8EAA8E;AAC9E,MAAM,yBAAyB,GAAG,IAAA,wBAAe,EAC/C,IAAA,aAAK,EAAC,mBAAmB,CAAC,EAC1B,IAAA,wBAAe,EACb,IAAA,aAAK,EAAC,8BAA8B,CAAC,EACrC,0BAAC,CAAC,GAAG,CAAM,iBAAiB,CAAC,CAAC,GAAG,CAC/B,0BAAC,CAAC,EAAE,CAAM,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,EACzC,0BAAC;KACE,EAAE,CAAM,GAAG,CAAC;KACZ,GAAG,CAAC,KAAK,CAAC;KACV,IAAI,CAAC;IACJ,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,GAAG;IACf,QAAQ,EAAE,GAAG;IACb,MAAM,EAAE,0BAAC,CAAC,KAAK,EAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,EAAE;CACxD,CAAC,CACL,CACF,CACF,CAAC;AAEW,QAAA,iBAAiB,GAAG,0BAAC,CAAC,GAAG,CACpC,6BAA6B,EAC7B,yBAAyB,CAC1B,CAAC","sourcesContent":["import type { lexer } from 'good-enough-parser';\nimport { query as q } from 'good-enough-parser';\nimport { regEx } from '../../../../util/regex';\nimport type { Ctx } from '../types';\nimport { qDotOrBraceExpr } from './common';\n\n// (21)\nconst qVersionNumber = q.tree({\n  type: 'wrapped-tree',\n  maxDepth: 1,\n  maxMatches: 1,\n  startsWith: '(',\n  endsWith: ')',\n  search: q.num((ctx: Ctx, node: lexer.Token) => {\n    ctx.javaLanguageVersion = node.value;\n    return ctx;\n  }),\n});\n\n// kotlin { jvmToolchain(17) }\n// kotlin.jvmToolchain(17)\nconst qKotlinShortNotationToolchain = qDotOrBraceExpr(\n  'kotlin',\n  q.sym<Ctx>('jvmToolchain').join(qVersionNumber),\n);\n\n// JavaLanguageVersion.of(21)\nconst qJavaLanguageVersion = q\n  .sym<Ctx>('JavaLanguageVersion')\n  .op('.')\n  .sym('of')\n  .join(qVersionNumber);\n\n// java { toolchain { languageVersion = JavaLanguageVersion.of(21) } }\n// kotlin { jvmToolchain { languageVersion.set(JavaLanguageVersion.of(17)) } }\nconst qLongFormToolchainVersion = qDotOrBraceExpr(\n  regEx(/^(?:java|kotlin)$/),\n  qDotOrBraceExpr(\n    regEx(/^(?:toolchain|jvmToolchain)$/),\n    q.sym<Ctx>('languageVersion').alt(\n      q.op<Ctx>('=').join(qJavaLanguageVersion),\n      q\n        .op<Ctx>('.')\n        .sym('set')\n        .tree({\n          type: 'wrapped-tree',\n          maxDepth: 1,\n          startsWith: '(',\n          endsWith: ')',\n          search: q.begin<Ctx>().join(qJavaLanguageVersion).end(),\n        }),\n    ),\n  ),\n);\n\nexport const qToolchainVersion = q.alt(\n  qKotlinShortNotationToolchain,\n  qLongFormToolchainVersion,\n);\n"]}