{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/buildpacks/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { BuildpacksRegistryDatasource } from '../../datasource/buildpacks-registry';\nimport { isVersion } from '../../versioning/semver';\nimport { getDep as getDockerDep } from '../dockerfile/extract';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport {\n  type ProjectDescriptor,\n  ProjectDescriptorToml,\n  isBuildpackByName,\n  isBuildpackByURI,\n} from './schema';\n\nexport const DOCKER_PREFIX = regEx(/^docker:\\/?\\//);\nconst dockerRef = regEx(\n  /^((?:[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)(?::\\d{2,5}\\/)?)?[a-z\\d]+((\\.|_|__|-+)[a-z\\d]+)*(\\/[a-z\\d]+((\\.|_|__|-+)[a-z\\d]+)*)*(?::(\\w[\\w.-]{0,127})(?:@sha256:[A-Fa-f\\d]{32,})?|@sha256:[A-Fa-f\\d]{32,})$/,\n);\n\nexport function isDockerRef(ref: string): boolean {\n  if (ref.startsWith('docker:/') || dockerRef.test(ref)) {\n    return true;\n  }\n  return false;\n}\nexport const BUILDPACK_REGISTRY_PREFIX = 'urn:cnb:registry:';\nconst buildpackRegistryId = regEx(\n  /^[a-z0-9\\-.]+\\/[a-z0-9\\-.]+(?:@(?<version>.+))?$/,\n);\n\nfunction isBuildpackRegistryId(ref: string): boolean {\n  const bpRegistryMatch = buildpackRegistryId.exec(ref);\n  if (!bpRegistryMatch) {\n    return false;\n  } else if (!bpRegistryMatch.groups?.version) {\n    return true;\n  }\n  return isVersion(bpRegistryMatch.groups.version);\n}\n\nexport function isBuildpackRegistryRef(ref: string): boolean {\n  return (\n    isBuildpackRegistryId(ref) || ref.startsWith(BUILDPACK_REGISTRY_PREFIX)\n  );\n}\n\nfunction parseProjectToml(\n  content: string,\n  packageFile: string,\n): ProjectDescriptor | null {\n  const res = ProjectDescriptorToml.safeParse(content);\n  if (res.success) {\n    return res.data;\n  }\n\n  logger.debug(\n    { packageFile, err: res.error },\n    'Failed to parse buildpacks project descriptor TOML',\n  );\n\n  return null;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n\n  const descriptor = parseProjectToml(content, packageFile);\n  if (!descriptor) {\n    return null;\n  }\n\n  if (\n    descriptor.io?.buildpacks?.builder &&\n    isDockerRef(descriptor.io.buildpacks.builder)\n  ) {\n    const dep = getDockerDep(\n      descriptor.io.buildpacks.builder.replace(DOCKER_PREFIX, ''),\n      true,\n      config.registryAliases,\n    );\n    logger.trace(\n      {\n        depName: dep.depName,\n        currentValue: dep.currentValue,\n        currentDigest: dep.currentDigest,\n      },\n      'Cloud Native Buildpacks builder',\n    );\n\n    deps.push({ ...dep, commitMessageTopic: 'builder {{depName}}' });\n  }\n\n  if (\n    descriptor.io?.buildpacks?.group &&\n    is.array(descriptor.io.buildpacks.group)\n  ) {\n    for (const group of descriptor.io.buildpacks.group) {\n      if (isBuildpackByURI(group) && isDockerRef(group.uri)) {\n        const dep = getDockerDep(\n          group.uri.replace(DOCKER_PREFIX, ''),\n          true,\n          config.registryAliases,\n        );\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Cloud Native Buildpack',\n        );\n\n        deps.push(dep);\n      } else if (isBuildpackByURI(group) && isBuildpackRegistryRef(group.uri)) {\n        const dep = getDep(group.uri.replace(BUILDPACK_REGISTRY_PREFIX, ''));\n        if (dep) {\n          deps.push(dep);\n        }\n      } else if (isBuildpackByName(group)) {\n        const version = group.version;\n\n        if (version) {\n          const dep: PackageDependency = {\n            datasource: BuildpacksRegistryDatasource.id,\n            currentValue: version,\n            packageName: group.id,\n          };\n          deps.push(dep);\n        }\n      }\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n\nexport function getDep(currentFrom: string): PackageDependency | null {\n  if (currentFrom.includes('@')) {\n    const dep: PackageDependency = {\n      datasource: BuildpacksRegistryDatasource.id,\n      packageName: currentFrom.split('@')[0],\n      autoReplaceStringTemplate:\n        '{{depName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}',\n    };\n    const version = currentFrom.split('@')[1];\n    dep.currentValue = version;\n    return dep;\n  }\n\n  return null;\n}\n"]}