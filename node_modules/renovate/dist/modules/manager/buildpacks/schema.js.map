{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/buildpacks/schema.ts"],"names":[],"mappings":";;;AAkBA,8CAIC;AAED,4CAIC;AA5BD,6BAAwB;AACxB,6DAAkD;AAElD,MAAM,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IAC/B,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE;IACd,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC/B,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;CAChB,CAAC,CAAC;AAEH,MAAM,cAAc,GAAG,eAAe,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;AAM1D,SAAgB,iBAAiB,CAC/B,KAAqB;IAErB,OAAO,IAAI,IAAI,KAAK,CAAC;AACvB,CAAC;AAED,SAAgB,gBAAgB,CAC9B,KAAqB;IAErB,OAAO,KAAK,IAAI,KAAK,CAAC;AACxB,CAAC;AAED,MAAM,YAAY,GAAG,OAAC,CAAC,MAAM,CAAC;IAC5B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,KAAK,EAAE,OAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE;CAC1C,CAAC,CAAC;AAEU,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,CAAC;IACxC,CAAC,EAAE,OAAC,CAAC,MAAM,CAAC;QACV,gBAAgB,EAAE,OAAC,CAAC,MAAM,EAAE;KAC7B,CAAC;IACF,EAAE,EAAE,OAAC;SACF,MAAM,CAAC;QACN,UAAU,EAAE,YAAY,CAAC,QAAQ,EAAE;KACpC,CAAC;SACD,QAAQ,EAAE;CACd,CAAC,CAAC;AAGU,QAAA,qBAAqB,GAAG,mBAAI,CAAC,IAAI,CAAC,yBAAiB,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { Toml } from '../../../util/schema-utils';\n\nconst BuildpackByName = z.object({\n  id: z.string(),\n  version: z.string().optional(),\n});\n\nconst BuildpackByURI = z.object({\n  uri: z.string(),\n});\n\nconst BuildpackGroup = BuildpackByName.or(BuildpackByURI);\n\ntype BuildpackByName = z.infer<typeof BuildpackByName>;\ntype BuildpackByURI = z.infer<typeof BuildpackByURI>;\ntype BuildpackGroup = z.infer<typeof BuildpackGroup>;\n\nexport function isBuildpackByName(\n  group: BuildpackGroup,\n): group is BuildpackByName {\n  return 'id' in group;\n}\n\nexport function isBuildpackByURI(\n  group: BuildpackGroup,\n): group is BuildpackByURI {\n  return 'uri' in group;\n}\n\nconst IoBuildpacks = z.object({\n  builder: z.string().optional(),\n  group: z.array(BuildpackGroup).optional(),\n});\n\nexport const ProjectDescriptor = z.object({\n  _: z.object({\n    'schema-version': z.string(),\n  }),\n  io: z\n    .object({\n      buildpacks: IoBuildpacks.optional(),\n    })\n    .optional(),\n});\n\nexport type ProjectDescriptor = z.infer<typeof ProjectDescriptor>;\nexport const ProjectDescriptorToml = Toml.pipe(ProjectDescriptor);\n"]}