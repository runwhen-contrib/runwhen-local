{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmv3/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { getSiblingFileName, localPathExists } from '../../../util/fs';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { parseRepository, resolveAlias } from './utils';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  let chart: {\n    apiVersion: string;\n    name: string;\n    version: string;\n    dependencies: { name: string; version: string; repository: string }[];\n  };\n  try {\n    // TODO: use schema (#9610)\n    chart = parseSingleYaml(content);\n    if (!(chart?.apiVersion && chart.name && chart.version)) {\n      logger.debug(\n        { packageFile },\n        'Failed to find required fields in Chart.yaml',\n      );\n      return null;\n    }\n    if (chart.apiVersion !== 'v2') {\n      logger.debug(\n        { packageFile },\n        'Unsupported Chart apiVersion. Only v2 is supported.',\n      );\n      return null;\n    }\n  } catch {\n    logger.debug({ packageFile }, `Failed to parse helm Chart.yaml`);\n    return null;\n  }\n  const packageFileVersion = chart.version;\n  let deps: PackageDependency[] = [];\n  if (!is.nonEmptyArray(chart?.dependencies)) {\n    logger.debug(`Chart has no dependencies in ${packageFile}`);\n    return null;\n  }\n  const validDependencies = chart.dependencies.filter(\n    (dep) => is.nonEmptyString(dep.name) && is.nonEmptyString(dep.version),\n  );\n  if (!is.nonEmptyArray(validDependencies)) {\n    logger.debug('Name and/or version missing for all dependencies');\n    return null;\n  }\n  deps = validDependencies.map((dep) => {\n    const res: PackageDependency = {\n      depName: dep.name,\n      currentValue: dep.version,\n    };\n    if (!dep.repository) {\n      res.skipReason = 'no-repository';\n      return res;\n    }\n\n    const repository = resolveAlias(dep.repository, config.registryAliases!);\n    if (!repository) {\n      res.skipReason = 'placeholder-url';\n      return res;\n    }\n\n    const result: PackageDependency = {\n      ...res,\n      ...parseRepository(dep.name, repository),\n    };\n    return result;\n  });\n  const res: PackageFileContent = {\n    deps,\n    datasource: HelmDatasource.id,\n    packageFileVersion,\n  };\n  const lockFileName = getSiblingFileName(packageFile, 'Chart.lock');\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}