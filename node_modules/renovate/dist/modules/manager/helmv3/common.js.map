{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmv3/common.ts"],"names":[],"mappings":";;AAYA,4CA8BC;AAED,4CAWC;;AAvDD,iCAA8B;AAC9B,0DAA0B;AAE1B,4CAAyC;AACzC,+CAAkD;AAElD,yCAAmD;AACnD,qDAAgE;AAChE,iDAAkD;AAClD,qDAAwE;AAGjE,KAAK,UAAU,gBAAgB,CACpC,cAA8B,EAC9B,QAAgB;IAEhB,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;IAChD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAAC;IACxC,IAAI,QAAQ,KAAK,KAAK,IAAI,cAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QACpD,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,kCAAkC,CAAC,CAAC;QACjE,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,IAAA,mBAAW,EAAC,cAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1D,MAAM,IAAI,GAAG,MAAM,IAAA,qBAAe,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,IAAA,mBAAU,EAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAA,iCAAsB,EAAC,QAAQ,CAAC,CAAC;QACjC,IAAA,iCAAsB,EAAC,QAAQ,CAAC,CAAC;QACjC,OAAO,GAAG,QAAQ,eAAe,IAAA,aAAK,EAAC,QAAQ,CAAC,eAAe,IAAA,aAAK,EAClE,QAAQ,CACT,IAAI,UAAU,EAAE,CAAC;IACpB,CAAC;IACD,IAAI,QAAQ,IAAI,QAAQ,EAAE,CAAC;QACzB,eAAM,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,oCAAoC,CAAC,CAAC;QACnE,OAAO,GAAG,QAAQ,eAAe,IAAA,aAAK,EAAC,QAAQ,CAAC,eAAe,IAAA,aAAK,EAClE,QAAQ,CACT,IAAI,UAAU,EAAE,CAAC;IACpB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,gBAAgB;IAC9B,OAAO;QACL,qBAAqB,EAAE,GAAG;QAC1B,iGAAiG;QACjG,oBAAoB,EAAE,GAAG,eAAK,CAAC,IAAI,CAAC,IAAA,oBAAe,GAAE,EAAE,eAAe,CAAC,EAAE;QACzE,sBAAsB,EAAE,GAAG,eAAK,CAAC,IAAI,CACnC,IAAA,oBAAe,GAAE,EACjB,mBAAmB,CACpB,EAAE;QACH,qBAAqB,EAAE,GAAG,eAAK,CAAC,IAAI,CAAC,IAAA,oBAAe,GAAE,EAAE,cAAc,CAAC,EAAE;KAC1E,CAAC;AACJ,CAAC","sourcesContent":["import { quote } from 'shlex';\nimport upath from 'upath';\n\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport type { ExtraEnv } from '../../../util/exec/types';\nimport { privateCacheDir } from '../../../util/fs';\nimport { addSecretForSanitizing } from '../../../util/sanitize';\nimport { fromBase64 } from '../../../util/string';\nimport { ecrRegex, getECRAuthToken } from '../../datasource/docker/ecr';\nimport type { RepositoryRule } from './types';\n\nexport async function generateLoginCmd(\n  repositoryRule: RepositoryRule,\n  loginCMD: string,\n): Promise<string | null> {\n  const { hostRule, repository } = repositoryRule;\n  const { username, password } = hostRule;\n  if (username !== 'AWS' && ecrRegex.test(repository)) {\n    logger.trace({ repository }, `Using ecr auth for Helm registry`);\n    const [, region] = coerceArray(ecrRegex.exec(repository));\n    const auth = await getECRAuthToken(region, hostRule);\n    if (!auth) {\n      return null;\n    }\n    const [username, password] = fromBase64(auth).split(':');\n    if (!username || !password) {\n      return null;\n    }\n    addSecretForSanitizing(username);\n    addSecretForSanitizing(password);\n    return `${loginCMD} --username ${quote(username)} --password ${quote(\n      password,\n    )} ${repository}`;\n  }\n  if (username && password) {\n    logger.trace({ repository }, `Using basic auth for Helm registry`);\n    return `${loginCMD} --username ${quote(username)} --password ${quote(\n      password,\n    )} ${repository}`;\n  }\n  return null;\n}\n\nexport function generateHelmEnvs(): ExtraEnv {\n  return {\n    HELM_EXPERIMENTAL_OCI: '1',\n    // set cache and config files to a path in privateCacheDir to prevent file and credential leakage\n    HELM_REGISTRY_CONFIG: `${upath.join(privateCacheDir(), 'registry.json')}`,\n    HELM_REPOSITORY_CONFIG: `${upath.join(\n      privateCacheDir(),\n      'repositories.yaml',\n    )}`,\n    HELM_REPOSITORY_CACHE: `${upath.join(privateCacheDir(), 'repositories')}`,\n  };\n}\n"]}