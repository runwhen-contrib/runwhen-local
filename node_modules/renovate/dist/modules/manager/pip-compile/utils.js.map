{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pip-compile/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Graph, topologicalSort } from 'graph-data-structure';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport type { PackageFile } from '../types';\nimport type { DependencyBetweenFiles, PipCompileArgs } from './types';\n\nexport function sortPackageFiles(\n  depsBetweenFiles: DependencyBetweenFiles[],\n  packageFiles: Map<string, PackageFile>,\n): PackageFile[] {\n  const result: PackageFile[] = [];\n  const graph = new Graph();\n  depsBetweenFiles.forEach(({ sourceFile, outputFile }) => {\n    graph.addEdge(sourceFile, outputFile);\n  });\n  const sorted = topologicalSort(graph);\n  for (const file of sorted) {\n    if (packageFiles.has(file)) {\n      const packageFile = packageFiles.get(file)!;\n      const sortedLockFiles = [];\n      // TODO(not7cd): this needs better test case\n      for (const lockFile of packageFile.lockFiles!) {\n        if (sorted.includes(lockFile)) {\n          sortedLockFiles.push(lockFile);\n        }\n      }\n      packageFile.lockFiles = sortedLockFiles;\n      result.push(packageFile);\n    }\n  }\n  // istanbul ignore if: should never happen\n  if (result.length !== packageFiles.size) {\n    throw new Error('Topological sort failed to include all package files');\n  }\n  return result;\n}\n\nexport function generateMermaidGraph(\n  depsBetweenFiles: DependencyBetweenFiles[],\n  lockFileArgs: Map<string, PipCompileArgs>,\n): string {\n  const lockFiles = [];\n  for (const lockFile of lockFileArgs.keys()) {\n    // TODO: add extra args to the lock file ${extraArgs ? '\\n' + extraArgs : ''}\n    // const extraArgs = pipCompileArgs.extra\n    //   ?.map((v) => '--extra=' + v)\n    //   .join('\\n');\n    lockFiles.push(`  ${lockFile}[[${lockFile}]]`);\n  }\n  const edges = depsBetweenFiles.map(({ sourceFile, outputFile, type }) => {\n    return `  ${sourceFile} -${type === 'constraint' ? '.' : ''}-> ${outputFile}`;\n  });\n  return `graph TD\\n${lockFiles.join('\\n')}\\n${edges.join('\\n')}`;\n}\n\nexport function inferCommandExecDir(\n  outputFilePath: string,\n  outputFileArg: string | undefined,\n): string {\n  if (!outputFileArg) {\n    // implicit output file is in the same directory where command was executed\n    return upath.normalize(upath.dirname(outputFilePath));\n  }\n  if (upath.normalize(outputFileArg).startsWith('..')) {\n    throw new Error(\n      `Cannot infer command execution directory from path ${outputFileArg}`,\n    );\n  }\n  if (upath.basename(outputFileArg) !== upath.basename(outputFilePath)) {\n    throw new Error(\n      `Output file name mismatch: ${upath.basename(outputFileArg)} vs ${upath.basename(outputFilePath)}`,\n    );\n  }\n  const outputFileDir = upath.normalize(upath.dirname(outputFileArg));\n  let commandExecDir = upath.normalize(upath.dirname(outputFilePath));\n\n  for (const dir of outputFileDir.split('/').reverse()) {\n    if (commandExecDir.endsWith(dir)) {\n      commandExecDir = upath.join(commandExecDir.slice(0, -dir.length), '.');\n      // outputFileDir = upath.join(outputFileDir.slice(0, -dir.length), '.');\n    } else {\n      break;\n    }\n  }\n  commandExecDir = upath.normalizeTrim(commandExecDir);\n  if (commandExecDir !== '.') {\n    logger.debug(\n      {\n        commandExecDir,\n        outputFileArg,\n        outputFilePath,\n      },\n      `pip-compile: command was not executed in repository root`,\n    );\n  }\n  return commandExecDir;\n}\n"]}