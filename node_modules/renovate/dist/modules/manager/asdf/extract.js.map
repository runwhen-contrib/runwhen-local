{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/asdf/extract.ts"],"names":[],"mappings":";;AAOA,gDA4CC;;AAnDD,kEAAkC;AAClC,4CAAyC;AACzC,iDAAqD;AACrD,+CAA4C;AAE5C,+DAA2D;AAE3D,SAAgB,kBAAkB,CAAC,OAAe;IAChD,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAE1C,MAAM,KAAK,GAAG,IAAA,aAAK,EACjB,sFAAsF,CACvF,CAAC;IAEF,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,KAAK,MAAM,MAAM,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC9C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;SACpB,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QACrB,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAEtC,MAAM,UAAU,GAAG,wCAAkB,CAAC,OAAO,CAAC,CAAC;QAC/C,MAAM,cAAc,GAAG,UAAU;YAC/B,CAAC,CAAC,OAAO,UAAU,CAAC,MAAM,KAAK,UAAU;gBACvC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC5B,CAAC,CAAC,UAAU,CAAC,MAAM;YACrB,CAAC,CAAC,SAAS,CAAC;QAEd,IAAI,cAAc,EAAE,CAAC;YACnB,MAAM,GAAG,GAAsB;gBAC7B,YAAY,EAAE,OAAO;gBACrB,OAAO;gBACP,GAAG,cAAc;aAClB,CAAC;YACF,IAAI,IAAA,sBAAa,EAAC,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;gBACjD,GAAG,CAAC,UAAU,GAAG,SAAS,CAAC;YAC7B,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,GAAsB;gBAC7B,OAAO;gBACP,UAAU,EAAE,wBAAwB;aACrC,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { isSkipComment } from '../../../util/ignore';\nimport { regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { upgradeableTooling } from './upgradeable-tooling';\n\nexport function extractPackageFile(content: string): PackageFileContent | null {\n  logger.trace(`asdf.extractPackageFile()`);\n\n  const regex = regEx(\n    /^(?<toolName>([\\w_-]+)) +(?<version>[^\\s#]+)(?: +[^\\s#]+)* *(?: #(?<comment>.*))?$/gm,\n  );\n\n  const deps: PackageDependency[] = [];\n\n  for (const groups of [...content.matchAll(regex)]\n    .map((m) => m.groups)\n    .filter(is.truthy)) {\n    const depName = groups.toolName.trim();\n    const version = groups.version.trim();\n\n    const toolConfig = upgradeableTooling[depName];\n    const toolDefinition = toolConfig\n      ? typeof toolConfig.config === 'function'\n        ? toolConfig.config(version)\n        : toolConfig.config\n      : undefined;\n\n    if (toolDefinition) {\n      const dep: PackageDependency = {\n        currentValue: version,\n        depName,\n        ...toolDefinition,\n      };\n      if (isSkipComment((groups.comment ?? '').trim())) {\n        dep.skipReason = 'ignored';\n      }\n\n      deps.push(dep);\n    } else {\n      const dep: PackageDependency = {\n        depName,\n        skipReason: 'unsupported-datasource',\n      };\n\n      deps.push(dep);\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}