{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmsman/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { isOCIRegistry, removeOCIPrefix } from '../helmv3/oci';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport type { HelmsmanDocument } from './types';\n\nconst chartRegex = regEx('^(?<registryRef>[^/]*)/(?<packageName>[^/]*)$');\n\nfunction createDep(\n  key: string,\n  doc: HelmsmanDocument,\n): PackageDependency | null {\n  const dep: PackageDependency = {\n    depName: key,\n    datasource: HelmDatasource.id,\n  };\n  const anApp = doc.apps[key];\n  if (!anApp) {\n    return null;\n  }\n\n  if (!anApp.version) {\n    dep.skipReason = 'unspecified-version';\n    return dep;\n  }\n  dep.currentValue = anApp.version;\n\n  // in case of OCI repository, we need a PackageDependency with a DockerDatasource and a packageName\n  if (isOCIRegistry(anApp.chart)) {\n    dep.datasource = DockerDatasource.id;\n    dep.packageName = removeOCIPrefix(anApp.chart!);\n    return dep;\n  }\n\n  const regexResult = anApp.chart ? chartRegex.exec(anApp.chart) : null;\n  if (!regexResult?.groups) {\n    dep.skipReason = 'invalid-url';\n    return dep;\n  }\n\n  if (!is.nonEmptyString(regexResult.groups.packageName)) {\n    dep.skipReason = 'invalid-name';\n    return dep;\n  }\n  dep.packageName = regexResult.groups.packageName;\n\n  const registryUrl = doc.helmRepos[regexResult.groups.registryRef];\n  if (!is.nonEmptyString(registryUrl)) {\n    dep.skipReason = 'no-repository';\n    return dep;\n  }\n  dep.registryUrls = [registryUrl];\n\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config: ExtractConfig,\n): PackageFileContent | null {\n  try {\n    // TODO: use schema (#9610)\n    const doc = parseSingleYaml<HelmsmanDocument>(content);\n    if (!doc.apps) {\n      logger.debug({ packageFile }, `Missing apps keys`);\n      return null;\n    }\n\n    const deps = Object.keys(doc.apps)\n      .map((key) => createDep(key, doc))\n      .filter(is.truthy); // filter null values\n\n    if (deps.length === 0) {\n      return null;\n    }\n\n    return { deps };\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug({ err, packageFile }, 'YAML exception extracting');\n    } else {\n      logger.debug({ err, packageFile }, 'Error extracting');\n    }\n    return null;\n  }\n}\n"]}