{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/batect/extract.ts"],"names":[],"mappings":";;AAOA,gDAyBC;AAED,wDAgCC;;AAlED,0DAA0B;AAC1B,4CAAyC;AACzC,yCAAiD;AAEjD,qCAA8C;AAG9C,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,eAAM,CAAC,KAAK,CAAC,6BAA6B,WAAW,GAAG,CAAC,CAAC;IAE1D,IAAI,CAAC;QACH,MAAM,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,YAAY,EAAE,GAC3D,2BAAkB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,IAAI,GAAG,CAAC,GAAG,iBAAiB,EAAE,GAAG,kBAAkB,CAAC,CAAC;QAE3D,MAAM,OAAO,GAAG,eAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC3C,MAAM,qBAAqB,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACtD,eAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAC1B,CAAC;QAEF,OAAO,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC;IACzC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,WAAW,EAAE,EACpB,+DAA+D,CAChE,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAAqB,EACrB,YAAsB;IAEtB,MAAM,cAAc,GAAG,IAAI,GAAG,CAAS,YAAY,CAAC,CAAC;IACrD,MAAM,oBAAoB,GAAG,IAAI,GAAG,EAAU,CAAC;IAC/C,MAAM,OAAO,GAAkB,EAAE,CAAC;IAElC,OAAO,cAAc,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;QAC/B,MAAM,WAAW,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAM,CAAC;QAC1D,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACnC,oBAAoB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACzD,cAAc;QACd,MAAM,MAAM,GAAG,kBAAkB,CAAC,OAAQ,EAAE,WAAW,CAAC,CAAC;QAEzD,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;YACpB,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBACzC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC3D,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC;gBACX,WAAW;gBACX,IAAI,EAAE,MAAM,CAAC,IAAI;aAClB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import upath from 'upath';\nimport { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport type { ExtractConfig, PackageFile } from '../types';\nimport { BatectConfigSchema } from './schema';\nimport type { ExtractionResult } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): ExtractionResult | null {\n  logger.trace(`batect.extractPackageFile(${packageFile})`);\n\n  try {\n    const { imageDependencies, bundleDependencies, fileIncludes } =\n      BatectConfigSchema.parse(content);\n    const deps = [...imageDependencies, ...bundleDependencies];\n\n    const dirName = upath.dirname(packageFile);\n    const referencedConfigFiles = fileIncludes.map((file) =>\n      upath.join(dirName, file),\n    );\n\n    return { deps, referencedConfigFiles };\n  } catch (err) {\n    logger.debug(\n      { err, packageFile },\n      'Extracting dependencies from Batect configuration file failed',\n    );\n\n    return null;\n  }\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[],\n): Promise<PackageFile[] | null> {\n  const filesToExamine = new Set<string>(packageFiles);\n  const filesAlreadyExamined = new Set<string>();\n  const results: PackageFile[] = [];\n\n  while (filesToExamine.size > 0) {\n    const packageFile = filesToExamine.values().next().value!;\n    filesToExamine.delete(packageFile);\n    filesAlreadyExamined.add(packageFile);\n\n    const content = await readLocalFile(packageFile, 'utf8');\n    // TODO #22198\n    const result = extractPackageFile(content!, packageFile);\n\n    if (result !== null) {\n      result.referencedConfigFiles.forEach((f) => {\n        if (!filesAlreadyExamined.has(f) && !filesToExamine.has(f)) {\n          filesToExamine.add(f);\n        }\n      });\n\n      results.push({\n        packageFile,\n        deps: result.deps,\n      });\n    }\n  }\n\n  return results;\n}\n"]}