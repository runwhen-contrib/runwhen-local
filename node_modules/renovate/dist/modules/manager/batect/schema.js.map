{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/batect/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAA2E;AAC3E,wDAA8D;AAC9D,oDAAiE;AACjE,mDAA+C;AAGlC,QAAA,kBAAkB,GAAG,mBAAI,CAAC,IAAI,CACzC,OAAC,CAAC,MAAM,CAAC;IACP,UAAU,EAAE,IAAA,0BAAW,EACrB,OAAC,CAAC,MAAM,EAAE,EACV,OAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,CAChE;SACE,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAClC,KAAK,CAAC,EAAE,CAAC;IACZ,OAAO,EAAE,IAAA,yBAAU,EACjB,OAAC,CAAC,KAAK,CAAC;QACN,OAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,KAAK,CAAC;YACtB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;YAChB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;SAChB,CAAC;QACF,OAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,MAAM,CAAC;YACvB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;SACjB,CAAC;QACF,OAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAe,EAAE,IAAI,EAAE,CAAC,CAAC;KAClE,CAAC,CACH,CAAC,KAAK,CAAC,EAAE,CAAC;CACZ,CAAC,CACH,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,EAAE;IACtC,6DAA6D;IAC7D,MAAM,iBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,CAAC;IAEnE,MAAM,kBAAkB,GAAwB,EAAE,CAAC;IACnD,MAAM,YAAY,GAAa,EAAE,CAAC;IAElC,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE,CAAC;QAC3B,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;YACxB,kBAAkB,CAAC,IAAI,CAAC;gBACtB,OAAO,EAAE,IAAI,CAAC,IAAI;gBAClB,YAAY,EAAE,IAAI,CAAC,GAAG;gBACtB,UAAU,EAAE,WAAgB;gBAC5B,UAAU,EAAE,4BAAiB,CAAC,EAAE;gBAChC,kBAAkB,EAAE,oBAAoB;aACzC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,OAAO;QACL,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;KACb,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, LooseRecord, Yaml } from '../../../util/schema-utils';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { id as semverVersioning } from '../../versioning/semver';\nimport { getDep } from '../dockerfile/extract';\nimport type { PackageDependency } from '../types';\n\nexport const BatectConfigSchema = Yaml.pipe(\n  z.object({\n    containers: LooseRecord(\n      z.string(),\n      z.object({ image: z.string() }).transform(({ image }) => image),\n    )\n      .transform((x) => Object.values(x))\n      .catch([]),\n    include: LooseArray(\n      z.union([\n        z.object({\n          type: z.literal('git'),\n          repo: z.string(),\n          ref: z.string(),\n        }),\n        z.object({\n          type: z.literal('file'),\n          path: z.string(),\n        }),\n        z.string().transform((path) => ({ type: 'file' as const, path })),\n      ]),\n    ).catch([]),\n  }),\n).transform(({ containers, include }) => {\n  // TODO: @zharinov How to pass `registryAliases` to `getDep`?\n  const imageDependencies = containers.map((image) => getDep(image));\n\n  const bundleDependencies: PackageDependency[] = [];\n  const fileIncludes: string[] = [];\n\n  for (const item of include) {\n    if (item.type === 'git') {\n      bundleDependencies.push({\n        depName: item.repo,\n        currentValue: item.ref,\n        versioning: semverVersioning,\n        datasource: GitTagsDatasource.id,\n        commitMessageTopic: 'bundle {{depName}}',\n      });\n    } else {\n      fileIncludes.push(item.path);\n    }\n  }\n\n  return {\n    imageDependencies,\n    bundleDependencies,\n    fileIncludes,\n  };\n});\n\nexport type BatectConfig = z.infer<typeof BatectConfigSchema>;\n"]}