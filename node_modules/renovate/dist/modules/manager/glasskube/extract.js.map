{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/glasskube/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { readLocalFile } from '../../../util/fs';\nimport { parseYaml } from '../../../util/yaml';\nimport { GlasskubePackagesDatasource } from '../../datasource/glasskube-packages';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFile,\n  PackageFileContent,\n} from '../types';\nimport {\n  GlasskubeResource,\n  type Package,\n  type PackageRepository,\n} from './schema';\nimport type { GlasskubeResources } from './types';\n\nfunction parseResources(\n  content: string,\n  packageFile: string,\n): GlasskubeResources {\n  const resources: GlasskubeResource[] = parseYaml(content, {\n    customSchema: GlasskubeResource,\n    failureBehaviour: 'filter',\n  });\n\n  const packages: Package[] = [];\n  const repositories: PackageRepository[] = [];\n\n  for (const resource of resources) {\n    if (resource.kind === 'ClusterPackage' || resource.kind === 'Package') {\n      packages.push(resource);\n    } else if (resource.kind === 'PackageRepository') {\n      repositories.push(resource);\n    }\n  }\n\n  return { packageFile, repositories, packages };\n}\n\nfunction resolvePackageDependencies(\n  packages: Package[],\n  repositories: PackageRepository[],\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  for (const pkg of packages) {\n    const dep: PackageDependency = {\n      depName: pkg.spec.packageInfo.name,\n      currentValue: pkg.spec.packageInfo.version,\n      datasource: GlasskubePackagesDatasource.id,\n    };\n\n    const repository = findRepository(\n      pkg.spec.packageInfo.repositoryName ?? null,\n      repositories,\n    );\n\n    if (repository === null) {\n      dep.skipReason = 'unknown-registry';\n    } else {\n      dep.registryUrls = [repository.spec.url];\n    }\n\n    deps.push(dep);\n  }\n  return deps;\n}\n\nfunction findRepository(\n  name: string | null,\n  repositories: PackageRepository[],\n): PackageRepository | null {\n  for (const repository of repositories) {\n    if (name === repository.metadata.name) {\n      return repository;\n    }\n    if (is.falsy(name) && isDefaultRepository(repository)) {\n      return repository;\n    }\n  }\n  return null;\n}\n\nfunction isDefaultRepository(repository: PackageRepository): boolean {\n  return (\n    repository.metadata.annotations?.[\n      'packages.glasskube.dev/default-repository'\n    ] === 'true'\n  );\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config?: ExtractConfig,\n): PackageFileContent | null {\n  const { packages, repositories } = parseResources(content, packageFile);\n  const deps = resolvePackageDependencies(packages, repositories);\n  return { deps };\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[],\n): Promise<PackageFile[] | null> {\n  const allRepositories: PackageRepository[] = [];\n  const glasskubeResourceFiles: GlasskubeResources[] = [];\n  for (const packageFile of packageFiles) {\n    const content = await readLocalFile(packageFile, 'utf8');\n    if (content !== null) {\n      const resources = parseResources(content, packageFile);\n      allRepositories.push(...resources.repositories);\n      glasskubeResourceFiles.push(resources);\n    }\n  }\n\n  const result: PackageFile[] = [];\n  for (const file of glasskubeResourceFiles) {\n    const deps = resolvePackageDependencies(file.packages, allRepositories);\n    if (deps.length > 0) {\n      result.push({ packageFile: file.packageFile, deps });\n    }\n  }\n  return result.length ? result : null;\n}\n"]}