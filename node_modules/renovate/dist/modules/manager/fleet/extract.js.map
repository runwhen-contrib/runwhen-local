{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/fleet/extract.ts"],"names":[],"mappings":";;AA+HA,gDA2BC;;AA1JD,kEAAkC;AAClC,+CAA4C;AAC5C,6CAA+C;AAC/C,wDAA8D;AAC9D,gDAAuD;AACvD,mDAA+C;AAC/C,uCAA+D;AAC/D,4CAAwD;AAExD,qCAAmE;AAEnE,SAAS,cAAc,CAAC,GAAY;IAClC,MAAM,GAAG,GAAsB;QAC7B,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,4BAAiB,CAAC,EAAE;KACjC,CAAC;IAEF,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;IAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO;YACL,GAAG,GAAG;YACN,UAAU,EAAE,iBAAiB;SAC9B,CAAC;IACJ,CAAC;IACD,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;IACrB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;IAEnB,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvC,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO;YACL,GAAG,GAAG;YACN,UAAU,EAAE,qBAAqB;SAClC,CAAC;IACJ,CAAC;IAED,OAAO;QACL,GAAG,GAAG;QACN,YAAY;KACb,CAAC;AACJ,CAAC;AAED,SAAS,qBAAqB,CAAC,GAAmB;IAChD,MAAM,GAAG,GAAsB;QAC7B,OAAO,EAAE,OAAO;QAChB,UAAU,EAAE,qBAAc,CAAC,EAAE;KAC9B,CAAC;IAEF,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACf,OAAO;YACL,GAAG,GAAG;YACN,UAAU,EAAE,iBAAiB;SAC9B,CAAC;IACJ,CAAC;IAED,IAAI,IAAA,mBAAa,EAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QAC7B,MAAM,SAAS,GAAG,IAAA,gBAAM,EACtB,GAAG,IAAA,qBAAe,EAAC,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,EAC9C,KAAK,CACN,CAAC;QAEF,OAAO;YACL,GAAG,SAAS;YACZ,OAAO,EAAE,OAAO;YAChB,4CAA4C;YAC5C,4CAA4C;YAC5C,UAAU,EAAE,KAAK;SAClB,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;IACxB,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC;IAE5B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QACd,IAAI,IAAA,0BAAmB,EAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACnC,OAAO;gBACL,GAAG,GAAG;gBACN,UAAU,EAAE,aAAa;aAC1B,CAAC;QACJ,CAAC;QACD,OAAO;YACL,GAAG,GAAG;YACN,UAAU,EAAE,eAAe;SAC5B,CAAC;IACJ,CAAC;IACD,GAAG,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE9B,MAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC;IACjC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACjB,OAAO;YACL,GAAG,GAAG;YACN,UAAU,EAAE,qBAAqB;SAClC,CAAC;IACJ,CAAC;IAED,OAAO;QACL,GAAG,GAAG;QACN,YAAY;KACb,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,GAAc;IACtC,MAAM,MAAM,GAAwB,EAAE,CAAC;IAEvC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAE7C,IAAI,CAAC,YAAE,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC5C,gHAAgH;QAChH,uDAAuD;QACvD,MAAM,gBAAgB,GAAmB,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACzD,OAAO,gBAAgB,CAAC,OAAO,CAAC;QAEhC,KAAK,MAAM,MAAM,IAAI,GAAG,CAAC,oBAAoB,EAAE,CAAC;YAC9C,MAAM,GAAG,GAAG,qBAAqB,CAAC;gBAChC,uCAAuC;gBACvC,GAAG,gBAAgB;gBACnB,GAAG,MAAM,CAAC,IAAI;aACf,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC;gBACV,mEAAmE;gBACnE,GAAG,GAAG;gBACN,OAAO,EAAE,MAAM,CAAC,IAAI;aACrB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,IAAI,IAAA,aAAK,EAAC,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QAC3C,MAAM,IAAI,GAAG,IAAA,gBAAS,EAAC,OAAO,EAAE;YAC9B,YAAY,EAAE,kBAAS;YACvB,gBAAgB,EAAE,QAAQ;SAC3B,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;IAC1B,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,GAAG,IAAA,gBAAS,EAAC,OAAO,EAAE;YAC9B,YAAY,EAAE,gBAAO;YACrB,gBAAgB,EAAE,QAAQ;SAC3B,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;IAC5B,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport { parseYaml } from '../../../util/yaml';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { getDep } from '../dockerfile/extract';\nimport { isOCIRegistry, removeOCIPrefix } from '../helmv3/oci';\nimport { checkIfStringIsPath } from '../terraform/util';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { FleetFile, type FleetHelmBlock, GitRepo } from './schema';\n\nfunction extractGitRepo(doc: GitRepo): PackageDependency {\n  const dep: PackageDependency = {\n    depType: 'git_repo',\n    datasource: GitTagsDatasource.id,\n  };\n\n  const repo = doc.spec?.repo;\n  if (!repo) {\n    return {\n      ...dep,\n      skipReason: 'missing-depname',\n    };\n  }\n  dep.sourceUrl = repo;\n  dep.depName = repo;\n\n  const currentValue = doc.spec.revision;\n  if (!currentValue) {\n    return {\n      ...dep,\n      skipReason: 'unspecified-version',\n    };\n  }\n\n  return {\n    ...dep,\n    currentValue,\n  };\n}\n\nfunction extractFleetHelmBlock(doc: FleetHelmBlock): PackageDependency {\n  const dep: PackageDependency = {\n    depType: 'fleet',\n    datasource: HelmDatasource.id,\n  };\n\n  if (!doc.chart) {\n    return {\n      ...dep,\n      skipReason: 'missing-depname',\n    };\n  }\n\n  if (isOCIRegistry(doc.chart)) {\n    const dockerDep = getDep(\n      `${removeOCIPrefix(doc.chart)}:${doc.version}`,\n      false,\n    );\n\n    return {\n      ...dockerDep,\n      depType: 'fleet',\n      // https://github.com/helm/helm/issues/10312\n      // https://github.com/helm/helm/issues/10678\n      pinDigests: false,\n    };\n  }\n\n  dep.depName = doc.chart;\n  dep.packageName = doc.chart;\n\n  if (!doc.repo) {\n    if (checkIfStringIsPath(doc.chart)) {\n      return {\n        ...dep,\n        skipReason: 'local-chart',\n      };\n    }\n    return {\n      ...dep,\n      skipReason: 'no-repository',\n    };\n  }\n  dep.registryUrls = [doc.repo];\n\n  const currentValue = doc.version;\n  if (!doc.version) {\n    return {\n      ...dep,\n      skipReason: 'unspecified-version',\n    };\n  }\n\n  return {\n    ...dep,\n    currentValue,\n  };\n}\n\nfunction extractFleetFile(doc: FleetFile): PackageDependency[] {\n  const result: PackageDependency[] = [];\n\n  result.push(extractFleetHelmBlock(doc.helm));\n\n  if (!is.undefined(doc.targetCustomizations)) {\n    // remove version from helm block to allow usage of variables defined in the global block, but do not create PRs\n    // if there is no version defined in the customization.\n    const helmBlockContext: FleetHelmBlock = { ...doc.helm };\n    delete helmBlockContext.version;\n\n    for (const custom of doc.targetCustomizations) {\n      const dep = extractFleetHelmBlock({\n        // merge base config with customization\n        ...helmBlockContext,\n        ...custom.helm,\n      });\n      result.push({\n        // overwrite name with customization name to allow splitting of PRs\n        ...dep,\n        depName: custom.name,\n      });\n    }\n  }\n  return result;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  if (!content) {\n    return null;\n  }\n  const deps: PackageDependency[] = [];\n\n  if (regEx('fleet.ya?ml').test(packageFile)) {\n    const docs = parseYaml(content, {\n      customSchema: FleetFile,\n      failureBehaviour: 'filter',\n    });\n    const fleetDeps = docs.flatMap(extractFleetFile);\n\n    deps.push(...fleetDeps);\n  } else {\n    const docs = parseYaml(content, {\n      customSchema: GitRepo,\n      failureBehaviour: 'filter',\n    });\n    const gitRepoDeps = docs.flatMap(extractGitRepo);\n    deps.push(...gitRepoDeps);\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}