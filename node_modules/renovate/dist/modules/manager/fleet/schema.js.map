{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/fleet/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAExB,MAAM,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9B,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAGH;;;GAGG;AACU,QAAA,OAAO,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9B,QAAQ,EAAE,OAAC,CAAC,MAAM,CAAC;QACjB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;KACjB,CAAC;IACF,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC3B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAChC,CAAC;CACH,CAAC,CAAC;AAGH;;;GAGG;AACU,QAAA,SAAS,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,IAAI,EAAE,cAAc;IACpB,oBAAoB,EAAE,OAAC;SACpB,KAAK,CACJ,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;QAChB,IAAI,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;KAC1C,CAAC,CACH;SACA,QAAQ,EAAE;CACd,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nconst FleetHelmBlock = z.object({\n  chart: z.string().optional(),\n  repo: z.string().optional(),\n  version: z.string().optional(),\n  releaseName: z.string().optional(),\n});\nexport type FleetHelmBlock = z.infer<typeof FleetHelmBlock>;\n\n/**\n  Represent a GitRepo Kubernetes manifest of Fleet.\n  @link https://fleet.rancher.io/gitrepo-add/#create-gitrepo-instance\n */\nexport const GitRepo = z.object({\n  metadata: z.object({\n    name: z.string(),\n  }),\n  kind: z.string(),\n  spec: z.object({\n    repo: z.string().optional(),\n    revision: z.string().optional(),\n  }),\n});\nexport type GitRepo = z.infer<typeof GitRepo>;\n\n/**\n Represent a Bundle configuration of Fleet, which is located in `fleet.yaml` files.\n @link https://fleet.rancher.io/gitrepo-structure/#fleetyaml\n */\nexport const FleetFile = z.object({\n  helm: FleetHelmBlock,\n  targetCustomizations: z\n    .array(\n      z.object({\n        name: z.string(),\n        helm: FleetHelmBlock.partial().optional(),\n      }),\n    )\n    .optional(),\n});\nexport type FleetFile = z.infer<typeof FleetFile>;\n"]}