{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/github-actions/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAKoC;AAEpC,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,IAAI,EAAE,IAAA,0BAAW,EAAC,OAAC,CAAC,MAAM,EAAE,CAAC;CAC9B,CAAC,CAAC;AAGH,MAAM,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IAClC,IAAI,EAAE,IAAA,0BAAW,EACf,OAAC,CAAC,MAAM,CAAC;QACP,SAAS,EAAE,OAAC;aACT,KAAK,CAAC;YACL,OAAC,CAAC,MAAM,EAAE;YACV,OAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;SAC1D,CAAC;aACD,QAAQ,EAAE;aACV,KAAK,CAAC,SAAS,CAAC;QACnB,QAAQ,EAAE,IAAA,0BAAW,EACnB,OAAC,CAAC,KAAK,CAAC;YACN,OAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YACzD,OAAC,CAAC,MAAM,EAAE;SACX,CAAC,CACH;aACE,KAAK,CAAC,EAAE,CAAC;aACT,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,SAAS,EAAE,OAAC;aACT,KAAK,CAAC,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;aAC9D,KAAK,CAAC,EAAE,CAAC;QACZ,KAAK,EAAE,IAAA,yBAAU,EAAC,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;KACzC,CAAC,CACH;CACF,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,OAAC,CAAC,MAAM,CAAC;IAC7B,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;QACjB,KAAK,EAAE,IAAA,yBAAU,EAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC;KACpD,CAAC;CACH,CAAC,CAAC;AACU,QAAA,cAAc,GAAG,mBAAI,CAAC,IAAI,CACrC,OAAC,CAAC,KAAK,CAAC,CAAC,kBAAkB,EAAE,aAAa,EAAE,OAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CACvD,CAAC,KAAK,CAAC,IAAA,+BAAgB,EAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport {\n  LooseArray,\n  LooseRecord,\n  Yaml,\n  withDebugMessage,\n} from '../../../util/schema-utils';\n\nconst StepsSchema = z.object({\n  uses: z.string(),\n  with: LooseRecord(z.string()),\n});\nexport type Steps = z.infer<typeof StepsSchema>;\n\nconst WorkFlowJobsSchema = z.object({\n  jobs: LooseRecord(\n    z.object({\n      container: z\n        .union([\n          z.string(),\n          z.object({ image: z.string() }).transform((v) => v.image),\n        ])\n        .optional()\n        .catch(undefined),\n      services: LooseRecord(\n        z.union([\n          z.object({ image: z.string() }).transform((v) => v.image),\n          z.string(),\n        ]),\n      )\n        .catch({})\n        .transform((services) => Object.values(services)),\n      'runs-on': z\n        .union([z.string().transform((v) => [v]), z.array(z.string())])\n        .catch([]),\n      steps: LooseArray(StepsSchema).catch([]),\n    }),\n  ),\n});\n\nconst ActionsSchema = z.object({\n  runs: z.object({\n    using: z.string(),\n    steps: LooseArray(StepsSchema).optional().catch([]),\n  }),\n});\nexport const WorkflowSchema = Yaml.pipe(\n  z.union([WorkFlowJobsSchema, ActionsSchema, z.null()]),\n).catch(withDebugMessage(null, 'Does not match schema'));\n"]}