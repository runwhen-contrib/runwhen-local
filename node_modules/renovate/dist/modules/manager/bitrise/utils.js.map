{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bitrise/utils.ts"],"names":[],"mappings":";;AAKA,8BA+BC;AAED,oCA8CC;;AApFD,kEAAkC;AAClC,sDAA6D;AAC7D,wDAA8D;AAG9D,SAAgB,SAAS,CACvB,OAAe,EACf,eAAwB;IAExB,IAAI,YAAE,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,2BAAiB,CAAC,EAAE;QAChC,aAAa,EAAE,OAAO;KACvB,CAAC;IAEF,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAElD,MAAM,MAAM,GAAG,YAAY,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IAElD,aAAa;IACb,IAAI,YAAE,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC;QACrC,OAAO;YACL,GAAG,GAAG;YACN,WAAW,EAAE,OAAO;YACpB,UAAU,EAAE,qBAAqB;SAClC,CAAC;IACJ,CAAC;IAED,OAAO;QACL,GAAG,GAAG;QACN,GAAG,MAAM;QACT,YAAY;KACb,CAAC;AACJ,CAAC;AAED,SAAgB,YAAY,CAC1B,GAAW,EACX,eAAwB;IAExB,oBAAoB;IACpB,2FAA2F;IAC3F,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7B,OAAO;YACL,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,UAAU,EAAE,kBAAkB;SAC/B,CAAC;IACJ,CAAC;IAED,wBAAwB;IACxB,2FAA2F;IAC3F,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QAC5B,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO;YACL,WAAW;YACX,UAAU,EAAE,4BAAiB,CAAC,EAAE;SACjC,CAAC;IACJ,CAAC;IAED,0BAA0B;IAC1B,2FAA2F;IAC3F,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAEpC,wCAAwC;IACxC,YAAY;IACZ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC;QAC/B,OAAO;YACL,WAAW;YACX,UAAU,EAAE,2BAAiB,CAAC,EAAE;YAChC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS;SAC9D,CAAC;IACJ,CAAC;IAED,8CAA8C;IAC9C,+DAA+D;IAC/D,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC;IAC5C,OAAO;QACL,WAAW;QACX,UAAU,EAAE,2BAAiB,CAAC,EAAE;QAChC,YAAY,EAAE,CAAC,WAAW,CAAC;KAC5B,CAAC;AACJ,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { BitriseDatasource } from '../../datasource/bitrise';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport type { PackageDependency } from '../types';\n\nexport function parseStep(\n  stepRef: string,\n  defaultRegistry?: string,\n): PackageDependency | null {\n  if (is.emptyString(stepRef)) {\n    return null;\n  }\n\n  const dep: PackageDependency = {\n    datasource: BitriseDatasource.id,\n    replaceString: stepRef,\n  };\n\n  const [ref, currentValue] = stepRef.split('@', 2);\n\n  const refDep = parseStepRef(ref, defaultRegistry);\n\n  // no version\n  if (is.nullOrUndefined(currentValue)) {\n    return {\n      ...dep,\n      packageName: stepRef,\n      skipReason: 'unspecified-version',\n    };\n  }\n\n  return {\n    ...dep,\n    ...refDep,\n    currentValue,\n  };\n}\n\nexport function parseStepRef(\n  ref: string,\n  defaultRegistry?: string,\n): PackageDependency {\n  // handle local path\n  // https://devcenter.bitrise.io/en/references/steps-reference/step-reference-id-format.html\n  if (ref.startsWith('path::')) {\n    return {\n      depName: ref.split('::', 2)[1],\n      skipReason: 'local-dependency',\n    };\n  }\n\n  // handle Git references\n  // https://devcenter.bitrise.io/en/references/steps-reference/step-reference-id-format.html\n  if (ref.startsWith('git::')) {\n    const [, packageName] = ref.split('::');\n    return {\n      packageName,\n      datasource: GitTagsDatasource.id,\n    };\n  }\n\n  // step library references\n  // https://devcenter.bitrise.io/en/references/steps-reference/step-reference-id-format.html\n  const splitted = ref.split('::', 2);\n\n  // reference which uses default registry\n  // - script:\n  if (splitted.length === 1) {\n    const [packageName] = splitted;\n    return {\n      packageName,\n      datasource: BitriseDatasource.id,\n      registryUrls: defaultRegistry ? [defaultRegistry] : undefined,\n    };\n  }\n\n  // reference which overwrites Bitrise registry\n  // https://github.com/bitrise-io/bitrise-steplib.git::script@1:\n  const [registryUrl, packageName] = splitted;\n  return {\n    packageName,\n    datasource: BitriseDatasource.id,\n    registryUrls: [registryUrl],\n  };\n}\n"]}