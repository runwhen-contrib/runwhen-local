{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pip_requirements/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { ensureCacheDir, readLocalFile } from '../../../util/fs';\nimport { escapeRegExp, regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { extrasPattern } from './extract';\n\n/**\n * Create a RegExp that matches the first dependency pattern for\n * the named dependency that is followed by package hashes.\n *\n * The regular expression defines a single named group `depConstraint`\n * that holds the dependency constraint without the hash specifiers.\n * The substring matched by this named group will start with the dependency\n * name and end with a non-whitespace character.\n *\n * @param depName the name of the dependency\n */\nfunction dependencyAndHashPattern(depName: string): RegExp {\n  const escapedDepName = escapeRegExp(depName);\n\n  // extrasPattern covers any whitespace between the dep name and the optional extras specifier,\n  // but it does not cover any whitespace in front of the equal signs.\n  //\n  // Use a non-greedy wildcard for the range pattern; otherwise, we would\n  // include all but the last hash specifier into depConstraint.\n  return regEx(\n    `^\\\\s*(?<depConstraint>${escapedDepName}${extrasPattern}\\\\s*==.*?\\\\S)\\\\s+--hash=`,\n    'm',\n  );\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`pip_requirements.updateArtifacts(${packageFileName})`);\n  if (!is.nonEmptyArray(updatedDeps)) {\n    logger.debug('No updated pip_requirements deps - returning null');\n    return null;\n  }\n  try {\n    const cmd: string[] = [];\n    const rewrittenContent = newPackageFileContent.replace(regEx(/\\\\\\n/g), '');\n    for (const dep of updatedDeps) {\n      if (!dep.depName) {\n        continue;\n      }\n      const depAndHashMatch = dependencyAndHashPattern(dep.depName).exec(\n        rewrittenContent,\n      );\n      if (depAndHashMatch) {\n        // If there's a match, then the regular expression guarantees\n        // that the named subgroup deepConstraint did match as well.\n        const depConstraint = depAndHashMatch.groups!.depConstraint;\n        cmd.push(`hashin ${quote(depConstraint)} -r ${quote(packageFileName)}`);\n      }\n    }\n    if (!cmd.length) {\n      logger.debug('No hashin commands to run - returning');\n      return null;\n    }\n    const execOptions: ExecOptions = {\n      cwdFile: '.',\n      docker: {},\n      toolConstraints: [\n        { toolName: 'python', constraint: config.constraints?.python },\n        { toolName: 'hashin', constraint: config.constraints?.hashin },\n      ],\n      extraEnv: {\n        PIP_CACHE_DIR: await ensureCacheDir('pip'),\n      },\n    };\n    await exec(cmd, execOptions);\n    const newContent = await readLocalFile(packageFileName, 'utf8');\n    if (newContent === newPackageFileContent) {\n      logger.debug(`${packageFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${packageFileName}`);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: packageFileName,\n          contents: newContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, `Failed to update ${packageFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}