{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pip_requirements/extract.ts"],"names":[],"mappings":"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","sourcesContent":["// based on https://www.python.org/dev/peps/pep-0508/#names\nimport { RANGE_PATTERN } from '@renovatebot/pep440';\nimport is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { isSkipComment } from '../../../util/ignore';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { normalizePythonDepName } from '../../datasource/pypi/common';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { extractPackageFileFlags } from './common';\nimport type { PipRequirementsManagerData } from './types';\n\nexport const packagePattern =\n  '[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]';\nexport const extrasPattern = '(?:\\\\s*\\\\[[^\\\\]]+\\\\])?';\nconst packageGitRegex = regEx(\n  /(?<source>(?:git\\+)(?<protocol>git|ssh|https):\\/\\/(?<gitUrl>(?:(?<user>[^@]+)@)?(?<hostname>[\\w.-]+)(?<delimiter>\\/)(?<scmPath>.*\\/(?<depName>[\\w/-]+))(\\.git)?(?:@(?<version>.*))))/,\n);\n\nconst rangePattern: string = RANGE_PATTERN;\nconst specifierPartPattern = `\\\\s*${rangePattern.replace(\n  regEx(/\\?<\\w+>/g),\n  '?:',\n)}`;\nconst specifierPattern = `${specifierPartPattern}(?:\\\\s*,${specifierPartPattern})*`;\nexport const dependencyPattern = `(${packagePattern})(${extrasPattern})(${specifierPattern})`;\n\nexport function extractPackageFile(\n  content: string,\n): PackageFileContent<PipRequirementsManagerData> | null {\n  logger.trace('pip_requirements.extractPackageFile()');\n\n  const pkgRegex = regEx(`^(${packagePattern})$`);\n  const pkgValRegex = regEx(`^${dependencyPattern}$`);\n  const deps = content\n    .split(newlineRegex)\n    .map((rawline) => {\n      let dep: PackageDependency = {};\n      const [line, comment] = rawline.split('#').map((part) => part.trim());\n      if (isSkipComment(comment)) {\n        dep.skipReason = 'ignored';\n      }\n      const [lineNoEnvMarkers] = line.split(';').map((part) => part.trim());\n      const lineNoHashes = lineNoEnvMarkers.split(' \\\\')[0];\n      const packageMatches =\n        pkgValRegex.exec(lineNoHashes) ?? pkgRegex.exec(lineNoHashes);\n      const gitPackageMatches = packageGitRegex.exec(lineNoHashes);\n      if (!packageMatches && !gitPackageMatches) {\n        return null;\n      }\n      if (gitPackageMatches?.groups) {\n        const currentVersion = gitPackageMatches.groups.version;\n        const depName = gitPackageMatches.groups.depName;\n        let packageName: string;\n        if (gitPackageMatches.groups.protocol === 'https') {\n          packageName = 'https://'\n            .concat(gitPackageMatches.groups.gitUrl)\n            .replace(`@${currentVersion}`, '');\n        } else {\n          // we need to replace the / with a :\n          const scmPath = gitPackageMatches.groups.scmPath;\n          const delimiter = gitPackageMatches.groups.delimiter;\n          packageName = gitPackageMatches.groups.gitUrl\n            .replace(`${delimiter}${scmPath}`, `:${scmPath}`)\n            .replace(`@${currentVersion}`, '');\n        }\n        dep = {\n          ...dep,\n          depName,\n          currentValue: currentVersion,\n          currentVersion,\n          packageName,\n          datasource: GitTagsDatasource.id,\n        };\n        return dep;\n      }\n\n      // validated above\n      const [, depName, , currVal] = packageMatches!;\n      const currentValue = currVal?.trim();\n      dep = {\n        ...dep,\n        depName,\n        packageName: normalizePythonDepName(depName),\n        currentValue,\n        datasource: PypiDatasource.id,\n      };\n      if (currentValue?.startsWith('==')) {\n        dep.currentVersion = currentValue.replace(/^==\\s*/, '');\n      }\n      return dep;\n    })\n    .filter(is.truthy);\n\n  const res = extractPackageFileFlags(content);\n  res.deps = deps;\n\n  if (\n    !res.deps.length &&\n    !res.registryUrls?.length &&\n    !res.additionalRegistryUrls?.length &&\n    !res.managerData?.requirementsFiles?.length &&\n    !res.managerData?.constraintsFiles?.length\n  ) {\n    return null;\n  }\n  return res;\n}\n"]}