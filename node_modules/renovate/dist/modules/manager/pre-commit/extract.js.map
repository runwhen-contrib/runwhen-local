{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pre-commit/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport type { SkipReason } from '../../../types';\nimport { detectPlatform } from '../../../util/common';\nimport { find } from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport { pep508ToPackageDependency } from '../pep621/utils';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport {\n  matchesPrecommitConfigHeuristic,\n  matchesPrecommitDependencyHeuristic,\n} from './parsing';\nimport type { PreCommitConfig } from './types';\n\n/**\n * Determines the datasource(id) to be used for this dependency\n * @param repository the full git url, ie git@github.com/user/project.\n *        Used in debug statements to clearly indicate the related dependency.\n * @param hostname the hostname (ie github.com)\n *        Used to determine which renovate datasource should be used.\n *        Is matched literally against `github.com` and `gitlab.com`.\n *        If that doesn't match, `hostRules.find()` is used to find related sources.\n *        In that case, the hostname is passed on as registryUrl to the corresponding datasource.\n */\nfunction determineDatasource(\n  repository: string,\n  hostname: string,\n): { datasource?: string; registryUrls?: string[]; skipReason?: SkipReason } {\n  if (hostname === 'github.com' || detectPlatform(repository) === 'github') {\n    logger.debug({ repository, hostname }, 'Found github dependency');\n    return { datasource: GithubTagsDatasource.id };\n  }\n  if (hostname === 'gitlab.com') {\n    logger.debug({ repository, hostname }, 'Found gitlab dependency');\n    return { datasource: GitlabTagsDatasource.id };\n  }\n  if (detectPlatform(repository) === 'gitlab') {\n    logger.debug(\n      { repository, hostname },\n      'Found gitlab dependency with custom registryUrl',\n    );\n    return {\n      datasource: GitlabTagsDatasource.id,\n      registryUrls: ['https://' + hostname],\n    };\n  }\n  const hostUrl = 'https://' + hostname;\n  const res = find({ url: hostUrl });\n  if (is.emptyObject(res)) {\n    // 1 check, to possibly prevent 3 failures in combined query of hostType & url.\n    logger.debug(\n      { repository, hostUrl },\n      'Provided hostname does not match any hostRules. Ignoring',\n    );\n    return { skipReason: 'unknown-registry', registryUrls: [hostname] };\n  }\n  for (const [hostType, sourceId] of [\n    ['github', GithubTagsDatasource.id],\n    ['gitlab', GitlabTagsDatasource.id],\n  ]) {\n    if (is.nonEmptyObject(find({ hostType, url: hostUrl }))) {\n      logger.debug(\n        { repository, hostUrl, hostType },\n        `Provided hostname matches a ${hostType} hostrule.`,\n      );\n      return { datasource: sourceId, registryUrls: [hostname] };\n    }\n  }\n  logger.debug(\n    { repository, registry: hostUrl },\n    'Provided hostname did not match any of the hostRules of hostType github nor gitlab',\n  );\n  return { skipReason: 'unknown-registry', registryUrls: [hostname] };\n}\n\nfunction extractDependency(\n  tag: string,\n  repository: string,\n): {\n  depName?: string;\n  depType?: string;\n  datasource?: string;\n  packageName?: string;\n  skipReason?: SkipReason;\n  currentValue?: string;\n} {\n  logger.debug(`Found version ${tag}`);\n\n  const urlMatchers = [\n    // This splits \"http://my.github.com/user/repo\" -> \"my.github.com\" \"user/repo\n    regEx('^https?://(?<hostname>[^/]+)/(?<depName>\\\\S*)'),\n    // This splits \"git@private.registry.com:user/repo\" -> \"private.registry.com\" \"user/repo\n    regEx('^git@(?<hostname>[^:]+):(?<depName>\\\\S*)'),\n    // This split \"git://github.com/pre-commit/pre-commit-hooks\" -> \"github.com\" \"pre-commit/pre-commit-hooks\"\n    regEx(/^git:\\/\\/(?<hostname>[^/]+)\\/(?<depName>\\S*)/),\n    // This splits \"ssh://git@github.com/pre-commit/pre-commit-hooks\" -> \"github.com\" \"pre-commit/pre-commit-hooks\"\n    regEx(/^ssh:\\/\\/git@(?<hostname>[^/]+)\\/(?<depName>\\S*)/),\n  ];\n  for (const urlMatcher of urlMatchers) {\n    const match = urlMatcher.exec(repository);\n    if (match?.groups) {\n      const hostname = match.groups.hostname;\n      const depName = match.groups.depName.replace(regEx(/\\.git$/i), ''); // TODO 12071\n      const sourceDef = determineDatasource(repository, hostname);\n      return {\n        ...sourceDef,\n        depName,\n        depType: 'repository',\n        packageName: depName,\n        currentValue: tag,\n      };\n    }\n  }\n  logger.info(\n    { repository },\n    'Could not separate hostname from full dependency url.',\n  );\n  return {\n    depName: undefined,\n    depType: 'repository',\n    datasource: undefined,\n    packageName: undefined,\n    skipReason: 'invalid-url',\n    currentValue: tag,\n  };\n}\n\n/**\n * Find all supported dependencies in the pre-commit yaml object.\n *\n * @param precommitFile the parsed yaml config file\n */\nfunction findDependencies(precommitFile: PreCommitConfig): PackageDependency[] {\n  if (!precommitFile.repos) {\n    logger.debug(`No repos section found, skipping file`);\n    return [];\n  }\n  const packageDependencies: PackageDependency[] = [];\n  precommitFile.repos.forEach((item) => {\n    // meta hooks is defined from pre-commit and doesn't support `additional_dependencies`\n    if (item.repo !== 'meta') {\n      item.hooks?.forEach((hook) => {\n        // normally language are not defined in yaml\n        // only support it when it's explicitly defined.\n        // this avoid to parse hooks from pre-commit-hooks.yaml from git repo\n        if (hook.language === 'python') {\n          hook.additional_dependencies?.map((req) => {\n            const dep = pep508ToPackageDependency('pre-commit-python', req);\n            if (dep) {\n              packageDependencies.push(dep);\n            }\n          });\n        }\n      });\n    }\n\n    if (matchesPrecommitDependencyHeuristic(item)) {\n      logger.trace(item, 'Matched pre-commit dependency spec');\n      const repository = String(item.repo);\n      const tag = String(item.rev);\n      const dep = extractDependency(tag, repository);\n\n      packageDependencies.push(dep);\n    } else {\n      logger.trace(item, 'Did not find pre-commit repo spec');\n    }\n  });\n  return packageDependencies;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  type ParsedContent = Record<string, unknown> | PreCommitConfig;\n  let parsedContent: ParsedContent;\n  try {\n    // TODO: use schema (#9610)\n    parsedContent = parseSingleYaml(content);\n  } catch (err) {\n    logger.debug(\n      { filename: packageFile, err },\n      'Failed to parse pre-commit config YAML',\n    );\n    return null;\n  }\n  if (!is.plainObject<Record<string, unknown>>(parsedContent)) {\n    logger.debug(\n      { packageFile },\n      `Parsing of pre-commit config YAML returned invalid result`,\n    );\n    return null;\n  }\n  if (!matchesPrecommitConfigHeuristic(parsedContent)) {\n    logger.debug(\n      { packageFile },\n      `File does not look like a pre-commit config file`,\n    );\n    return null;\n  }\n  try {\n    const deps = findDependencies(parsedContent);\n    if (deps.length) {\n      logger.trace({ deps }, 'Found dependencies in pre-commit config');\n      return { deps };\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { packageFile, err },\n      'Error scanning parsed pre-commit config',\n    );\n  }\n  return null;\n}\n"]}