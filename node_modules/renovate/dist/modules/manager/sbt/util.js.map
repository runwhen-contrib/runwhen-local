{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/sbt/util.ts"],"names":[],"mappings":";;AAOA,sDA0BC;AAED,4CAWC;;AA9CD,+CAA4C;AAC5C,iDAAuC;AACvC,gFAA0D;AAE1D;;GAEG;AACH,SAAgB,qBAAqB,CAAC,GAAW;IAC/C,qBAAqB;IACrB,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,GAAG,CAAC;IACb,CAAC;IACD,MAAM,UAAU,GAAG,IAAA,gBAAG,EAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAC3C,IAAI,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;QAC9B,qCAAqC;QACrC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC9B,OAAO,GAAG,CAAC;QACb,CAAC;QACD,0CAA0C;QAC1C,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,CAAC;YAC7C,OAAO,GAAG,CAAC;QACb,CAAC;IACH,CAAC;IACD,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACxD,IAAI,IAAA,aAAK,EAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACvC,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,CAAC;QACzD,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,qBAAqB,CAAC,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IACD,uBAAuB;IACvB,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,gBAAgB,CAAC,YAAsB;IACrD,0BAA0B;IAC1B,MAAM,kBAAkB,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC;IAC7C,MAAM,aAAa,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAC1D,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAC3B,CAAC;IACF,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE,CAAC;QACzB,MAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["import { regEx } from '../../../util/regex';\nimport { get } from '../../versioning';\nimport * as mavenVersioning from '../../versioning/maven';\n\n/*\n  https://www.scala-sbt.org/release/docs/Cross-Build.html#Publishing+conventions\n */\nexport function normalizeScalaVersion(str: string): string {\n  // istanbul ignore if\n  if (!str) {\n    return str;\n  }\n  const versioning = get(mavenVersioning.id);\n  if (versioning.isVersion(str)) {\n    // Do not normalize unstable versions\n    if (!versioning.isStable(str)) {\n      return str;\n    }\n    // Do not normalize versions prior to 2.10\n    if (!versioning.isGreaterThan(str, '2.10.0')) {\n      return str;\n    }\n  }\n  const isScala3 = versioning.isGreaterThan(str, '3.0.0');\n  if (regEx(/^\\d+\\.\\d+\\.\\d+$/).test(str)) {\n    if (isScala3) {\n      return str.replace(regEx(/^(\\d+)\\.(\\d+)\\.\\d+$/), '$1');\n    } else {\n      return str.replace(regEx(/^(\\d+)\\.(\\d+)\\.\\d+$/), '$1.$2');\n    }\n  }\n  // istanbul ignore next\n  return str;\n}\n\nexport function sortPackageFiles(packageFiles: string[]): string[] {\n  // process build.sbt first\n  const sortedPackageFiles = [...packageFiles];\n  const buildSbtIndex = sortedPackageFiles.findIndex((file) =>\n    file.endsWith('build.sbt'),\n  );\n  if (buildSbtIndex !== -1) {\n    const buildSbt = sortedPackageFiles.splice(buildSbtIndex, 1)[0];\n    sortedPackageFiles.unshift(buildSbt);\n  }\n  return sortedPackageFiles;\n}\n"]}