{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cocoapods/artifacts.ts"],"names":[],"mappings":";;AAgCA,0CAmHC;;AAnJD,iCAA8B;AAC9B,0DAA0B;AAC1B,sEAAoE;AACpE,4CAAyC;AACzC,+CAAkD;AAClD,6CAA0C;AAE1C,yCAK0B;AAC1B,2CAAkD;AAClD,+CAA0D;AAG1D,MAAM,WAAW,GAAG,IAAA,aAAK,EAAC,8CAA8C,CAAC,CAAC;AAE1E,SAAS,iBAAiB,CAAC,OAAe;IACxC,MAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;IACjC,MAAM,KAAK,GAAa,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;IACpD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACrB,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;YAClB,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;YAChC,MAAM,CAAC,GAAG,CAAC,eAAe,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AACrB,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,qBAAqB,EACrB,MAAM,GACS;IACf,eAAM,CAAC,KAAK,CAAC,0BAA0B,eAAe,GAAG,CAAC,CAAC;IAE3D,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,eAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,YAAY,GAAG,IAAA,uBAAkB,EAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IAEzE,IAAI,CAAC;QACH,MAAM,IAAA,mBAAc,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;IAC/D,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,8BAA8B,CAAC,CAAC;QACrD,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;IACJ,CAAC;IAED,MAAM,uBAAuB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1E,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC7B,eAAM,CAAC,KAAK,CAAC,uBAAuB,YAAY,EAAE,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAG,IAAA,aAAK,EAAC,uCAAuC,CAAC,CAAC,IAAI,CAC/D,uBAAuB,CACxB,CAAC;IACF,MAAM,SAAS,GAAG,KAAK,EAAE,MAAM,EAAE,gBAAgB,IAAI,IAAI,CAAC;IAE1D,MAAM,GAAG,GAAG,CAAC,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,EAAE,aAAa,CAAC,CAAC;IACzE,MAAM,WAAW,GAAgB;QAC/B,OAAO,EAAE,eAAe;QACxB,QAAQ,EAAE;YACR,WAAW,EAAE,MAAM,IAAA,mBAAc,EAAC,WAAW,CAAC;SAC/C;QACD,MAAM,EAAE,EAAE;QACV,eAAe,EAAE;YACf;gBACE,QAAQ,EAAE,MAAM;aACjB;YACD;gBACE,QAAQ,EAAE,WAAW;gBACrB,UAAU,EAAE,SAAS;aACtB;SACF;KACF,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC/B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,KAAK,gCAAe,EAAE,CAAC;YACpC,MAAM,GAAG,CAAC;QACZ,CAAC;QACD,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,OAAO;iBAChD;aACF;SACF,CAAC;IACJ,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAa,GAAE,CAAC;IACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;IAC5D,MAAM,eAAe,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC,CAAC;IAC1D,MAAM,GAAG,GAA4B;QACnC;YACE,IAAI,EAAE;gBACJ,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,eAAe;aAC1B;SACF;KACF,CAAC;IAEF,MAAM,OAAO,GAAG,eAAK,CAAC,IAAI,CAAC,eAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,MAAM,CAAC,CAAC;IACnE,MAAM,oBAAoB,GAAG,eAAK,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAClE,IAAI,MAAM,IAAA,kBAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,EAAE,CAAC;QACtD,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YACzD,IAAI,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC1B,GAAG,CAAC,IAAI,CAAC;oBACP,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,CAAC;wBACP,QAAQ,EAAE,MAAM,IAAA,kBAAa,EAAC,CAAC,CAAC;qBACjC;iBACF,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QACD,KAAK,MAAM,CAAC,IAAI,IAAA,mBAAW,EAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5C,GAAG,CAAC,IAAI,CAAC;gBACP,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,CAAC;iBACR;aACF,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { quote } from 'shlex';\nimport upath from 'upath';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  ensureCacheDir,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nconst pluginRegex = regEx(`^\\\\s*plugin\\\\s*(['\"])(?<plugin>[^'\"]+)(['\"])`);\n\nfunction getPluginCommands(content: string): string[] {\n  const result = new Set<string>();\n  const lines: string[] = content.split(newlineRegex);\n  lines.forEach((line) => {\n    const match = pluginRegex.exec(line);\n    if (match?.groups) {\n      const { plugin } = match.groups;\n      result.add(`gem install ${quote(plugin)}`);\n    }\n  });\n  return [...result];\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`cocoapods.getArtifacts(${packageFileName})`);\n\n  if (updatedDeps.length < 1) {\n    logger.debug('CocoaPods: empty update - returning null');\n    return null;\n  }\n\n  const lockFileName = getSiblingFileName(packageFileName, 'Podfile.lock');\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n  } catch (err) {\n    logger.warn({ err }, 'Podfile could not be written');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug(`Lockfile not found: ${lockFileName}`);\n    return null;\n  }\n\n  const match = regEx(/^COCOAPODS: (?<cocoapodsVersion>.*)$/m).exec(\n    existingLockFileContent,\n  );\n  const cocoapods = match?.groups?.cocoapodsVersion ?? null;\n\n  const cmd = [...getPluginCommands(newPackageFileContent), 'pod install'];\n  const execOptions: ExecOptions = {\n    cwdFile: packageFileName,\n    extraEnv: {\n      CP_HOME_DIR: await ensureCacheDir('cocoapods'),\n    },\n    docker: {},\n    toolConstraints: [\n      {\n        toolName: 'ruby',\n      },\n      {\n        toolName: 'cocoapods',\n        constraint: cocoapods,\n      },\n    ],\n  };\n\n  try {\n    await exec(cmd, execOptions);\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.stderr ?? err.stdout ?? err.message,\n        },\n      },\n    ];\n  }\n\n  const status = await getRepoStatus();\n  if (!status.modified.includes(lockFileName)) {\n    return null;\n  }\n  logger.debug(`Returning updated lockfile: ${lockFileName}`);\n  const lockFileContent = await readLocalFile(lockFileName);\n  const res: UpdateArtifactsResult[] = [\n    {\n      file: {\n        type: 'addition',\n        path: lockFileName,\n        contents: lockFileContent,\n      },\n    },\n  ];\n\n  const podsDir = upath.join(upath.dirname(packageFileName), 'Pods');\n  const podsManifestFileName = upath.join(podsDir, 'Manifest.lock');\n  if (await readLocalFile(podsManifestFileName, 'utf8')) {\n    for (const f of status.modified.concat(status.not_added)) {\n      if (f.startsWith(podsDir)) {\n        res.push({\n          file: {\n            type: 'addition',\n            path: f,\n            contents: await readLocalFile(f),\n          },\n        });\n      }\n    }\n    for (const f of coerceArray(status.deleted)) {\n      res.push({\n        file: {\n          type: 'deletion',\n          path: f,\n        },\n      });\n    }\n  }\n  return res;\n}\n"]}