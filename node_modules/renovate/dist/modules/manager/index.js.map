{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/modules/manager/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RangeStrategy } from '../../types';\nimport managers from './api';\nimport { customManagerList, isCustomManager } from './custom';\nimport customManagers from './custom/api';\nimport type {\n  ExtractConfig,\n  GlobalManagerConfig,\n  ManagerApi,\n  MaybePromise,\n  PackageFile,\n  PackageFileContent,\n  RangeConfig,\n} from './types';\nexport { hashMap } from './fingerprint.generated';\n\nconst managerList = Array.from(managers.keys()); // does not include custom managers\nexport const getManagerList = (): string[] => managerList;\nexport const getManagers = (): Map<string, ManagerApi> => managers;\nexport const allManagersList = [...managerList, ...customManagerList];\n\nexport function get<T extends keyof ManagerApi>(\n  manager: string,\n  name: T,\n): ManagerApi[T] | undefined {\n  return isCustomManager(manager)\n    ? customManagers.get(manager)?.[name]\n    : managers.get(manager)?.[name];\n}\n\nexport async function detectAllGlobalConfig(): Promise<GlobalManagerConfig> {\n  let config: GlobalManagerConfig = {};\n  for (const managerName of allManagersList) {\n    const manager =\n      managers.get(managerName)! ?? customManagers.get(managerName)!;\n    if (manager.detectGlobalConfig) {\n      // This should use mergeChildConfig once more than one manager is supported, but introduces a cyclic dependency\n      config = { ...config, ...(await manager.detectGlobalConfig()) };\n    }\n  }\n  return config;\n}\n\nexport async function extractAllPackageFiles(\n  manager: string,\n  config: ExtractConfig,\n  files: string[],\n): Promise<PackageFile[] | null> {\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager)!;\n  if (m.extractAllPackageFiles) {\n    const res = await m.extractAllPackageFiles(config, files);\n    // istanbul ignore if\n    if (!res) {\n      return null;\n    }\n    return res;\n  }\n  return null;\n}\n\nexport function extractPackageFile(\n  manager: string,\n  content: string,\n  fileName: string,\n  config: ExtractConfig,\n): MaybePromise<PackageFileContent | null> {\n  const m = managers.get(manager)! ?? customManagers.get(manager)!;\n  if (!m) {\n    return null;\n  }\n\n  return m.extractPackageFile\n    ? m.extractPackageFile(content, fileName, config)\n    : null;\n}\n\nexport function getRangeStrategy(config: RangeConfig): RangeStrategy | null {\n  const { manager, rangeStrategy } = config;\n  if (!manager || !managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager)!;\n  if (m.getRangeStrategy) {\n    // Use manager's own function if it exists\n    const managerRangeStrategy = m.getRangeStrategy(config);\n    if (managerRangeStrategy === 'in-range-only') {\n      return 'update-lockfile';\n    }\n    return managerRangeStrategy;\n  }\n  if (rangeStrategy === 'auto') {\n    if (m.updateLockedDependency) {\n      return 'update-lockfile';\n    }\n    // default to 'replace' for auto\n    return 'replace';\n  }\n  if (rangeStrategy === 'in-range-only') {\n    return 'update-lockfile';\n  }\n\n  return config.rangeStrategy;\n}\n\nexport function isKnownManager(mgr: string): boolean {\n  return allManagersList.includes(mgr.replace('custom.', ''));\n}\n\n/**\n * Filter a list of managers based on enabled managers.\n *\n * If enabledManagers is provided, this function returns a subset of allManagersList\n * that matches the enabled manager names, including custom managers. If enabledManagers\n * is not provided or is an empty array, it returns the full list of managers.\n */\nexport function getEnabledManagersList(enabledManagers?: string[]): string[] {\n  if (enabledManagers?.length) {\n    return allManagersList.filter(\n      (manager) =>\n        enabledManagers.includes(manager) ||\n        enabledManagers.includes(`custom.${manager}`),\n    );\n  }\n\n  return allManagersList;\n}\n"]}