{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/hermit/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { localPathIsSymbolicLink, readLocalSymlink } from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport * as p from '../../../util/promises';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport type { ReadContentResult } from './types';\n\n/**\n * updateArtifacts runs hermit install for each updated dependencies\n */\nexport async function updateArtifacts(\n  update: UpdateArtifact,\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName } = update;\n  try {\n    await updateHermitPackage(update);\n  } catch (err) {\n    const execErr: UpdateHermitError = err;\n    logger.debug({ err }, `error updating hermit packages.`);\n    return [\n      {\n        artifactError: {\n          lockFile: `from: ${execErr.from}, to: ${execErr.to}`,\n          stderr: execErr.stderr,\n        },\n      },\n    ];\n  }\n\n  logger.debug(`scanning the changes after update`);\n\n  let updateResult: UpdateArtifactsResult[] | null = null;\n\n  try {\n    updateResult = await getUpdateResult(packageFileName);\n    logger.debug({ updateResult }, `update result for hermit`);\n  } catch (err) {\n    logger.debug({ err }, 'Error getting hermet update results');\n    return [\n      {\n        artifactError: {\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n\n  return updateResult;\n}\n\n/**\n * getContent returns the content of either link or a normal file\n */\nasync function getContent(file: string): Promise<ReadContentResult> {\n  let contents: string | null = '';\n  const isSymlink = await localPathIsSymbolicLink(file);\n\n  if (isSymlink) {\n    contents = await readLocalSymlink(file);\n  }\n\n  if (contents === null) {\n    throw new Error(`error getting content for ${file}`);\n  }\n\n  return {\n    isSymlink,\n    contents,\n  };\n}\n\n/**\n * getAddResult returns the UpdateArtifactsResult for the added files\n */\nfunction getAddResult(\n  path: string,\n  contentRes: ReadContentResult,\n): UpdateArtifactsResult {\n  return {\n    file: {\n      type: 'addition',\n      path,\n      contents: contentRes.contents,\n      isSymlink: contentRes.isSymlink,\n      isExecutable: contentRes.isExecutable,\n    },\n  };\n}\n\n/**\n * getDeleteResult returns the UpdateArtifactsResult for deleted files\n */\nfunction getDeleteResult(path: string): UpdateArtifactsResult {\n  return {\n    file: {\n      type: 'deletion',\n      path,\n    },\n  };\n}\n\n/**\n * getUpdateResult will return the update result after `hermit install`\n * has been performed for all packages\n */\nasync function getUpdateResult(\n  packageFileName: string,\n): Promise<UpdateArtifactsResult[]> {\n  const hermitFolder = `${upath.dirname(packageFileName)}/`;\n  const hermitChanges = await getRepoStatus(hermitFolder);\n  logger.debug(\n    { hermitChanges, hermitFolder },\n    `hermit changes after package update`,\n  );\n\n  // handle added files\n  const added = await p.map(\n    [...hermitChanges.created, ...hermitChanges.not_added],\n    async (path: string): Promise<UpdateArtifactsResult> => {\n      const contents = await getContent(path);\n\n      return getAddResult(path, contents);\n    },\n  );\n\n  const deleted = hermitChanges.deleted.map(getDeleteResult);\n\n  const modified = await p.map(\n    hermitChanges.modified,\n    async (path: string): Promise<UpdateArtifactsResult[]> => {\n      const contents = await getContent(path);\n      return [\n        getDeleteResult(path), // delete existing link\n        getAddResult(path, contents), // add a new link\n      ];\n    },\n  );\n\n  const renamed = await p.map(\n    hermitChanges.renamed,\n    async (renamed): Promise<UpdateArtifactsResult[]> => {\n      const from = renamed.from;\n      const to = renamed.to;\n      const toContents = await getContent(to);\n\n      return [getDeleteResult(from), getAddResult(to, toContents)];\n    },\n  );\n\n  return [\n    // rename will need to go first, because\n    // it needs to create the new link for the new version\n    // for the modified links to use\n    ...renamed.flat(),\n    ...modified.flat(),\n    ...added,\n    ...deleted,\n  ];\n}\n\n/**\n * getHermitPackage returns the hermit package for running the hermit install\n */\nfunction getHermitPackage(name: string, version: string): string {\n  return `${name}-${version}`;\n}\n\n/**\n * updateHermitPackage runs hermit install for the given package\n */\nasync function updateHermitPackage(update: UpdateArtifact): Promise<void> {\n  logger.trace({ update }, `hermit.updateHermitPackage()`);\n\n  const toInstall = [];\n  const from = [];\n  // storing the old package for replacement\n  const toUninstall = [];\n\n  for (const pkg of update.updatedDeps) {\n    if (!pkg.depName || !pkg.currentVersion || !pkg.newValue) {\n      logger.debug(\n        {\n          depName: pkg.depName,\n          currentVersion: pkg.currentVersion,\n          newValue: pkg.newValue,\n        },\n        'missing package update information',\n      );\n\n      throw new UpdateHermitError(\n        getHermitPackage(pkg.depName ?? '', pkg.currentVersion ?? ''),\n        getHermitPackage(pkg.depName ?? '', pkg.newValue ?? ''),\n        'invalid package to update',\n      );\n    }\n\n    const depName = pkg.depName;\n    const newName = pkg.newName;\n    const currentVersion = pkg.currentVersion;\n    const newValue = pkg.newValue;\n    const fromPackage = getHermitPackage(depName, currentVersion);\n    // newName will be available for replacement\n    const toPackage = getHermitPackage(newName ?? depName, newValue);\n    toInstall.push(toPackage);\n    from.push(fromPackage);\n    // skips uninstall for version only replacement\n    if (pkg.updateType === 'replacement' && newName !== depName) {\n      toUninstall.push(depName);\n    }\n  }\n\n  const execOptions: ExecOptions = {\n    docker: {},\n    cwdFile: update.packageFileName,\n  };\n\n  const fromPackages = from.map(quote).join(' ');\n\n  // when a name replacement happens, need to uninstall the old package\n  if (toUninstall.length > 0) {\n    const packagesToUninstall = toUninstall.join(' ');\n    const uninstallCommands = `./hermit uninstall ${packagesToUninstall}`;\n\n    try {\n      const result = await exec(uninstallCommands, execOptions);\n      logger.trace(\n        { stdout: result.stdout },\n        `hermit uninstall command stdout`,\n      );\n    } catch (e) {\n      logger.warn({ err: e }, `error uninstall hermit package for replacement`);\n      throw new UpdateHermitError(\n        fromPackages,\n        packagesToUninstall,\n        e.stderr,\n        e.stdout,\n      );\n    }\n  }\n\n  const packagesToInstall = toInstall.join(' ');\n\n  const execCommands = `./hermit install ${packagesToInstall}`;\n  logger.debug(\n    {\n      packageFile: update.packageFileName,\n      packagesToInstall,\n    },\n    `performing updates`,\n  );\n\n  try {\n    const result = await exec(execCommands, execOptions);\n    logger.trace({ stdout: result.stdout }, `hermit command stdout`);\n  } catch (e) {\n    logger.warn({ err: e }, `error updating hermit package`);\n    throw new UpdateHermitError(\n      fromPackages,\n      packagesToInstall,\n      e.stderr,\n      e.stdout,\n    );\n  }\n}\n\nexport class UpdateHermitError extends Error {\n  stdout: string;\n  stderr: string;\n  from: string;\n  to: string;\n\n  constructor(from: string, to: string, stderr: string, stdout = '') {\n    super();\n    this.stdout = stdout;\n    this.stderr = stderr;\n    this.from = from;\n    this.to = to;\n  }\n}\n"]}