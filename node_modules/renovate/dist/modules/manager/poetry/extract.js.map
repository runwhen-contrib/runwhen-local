{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/poetry/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { filterMap } from '../../../util/filter-map';\nimport {\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../../util/fs';\nimport { Result } from '../../../util/result';\nimport { massage as massageToml } from '../../../util/toml';\nimport { GithubReleasesDatasource } from '../../datasource/github-releases';\nimport type { PackageFileContent } from '../types';\nimport { Lockfile, PoetrySchemaToml } from './schema';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n): Promise<PackageFileContent | null> {\n  logger.trace(`poetry.extractPackageFile(${packageFile})`);\n  const { val: res, err } = Result.parse(\n    massageToml(content),\n    PoetrySchemaToml.transform(({ packageFileContent }) => packageFileContent),\n  ).unwrap();\n  if (err) {\n    logger.debug({ packageFile, err }, `Poetry: error parsing pyproject.toml`);\n    return null;\n  }\n\n  const lockfileName = getSiblingFileName(packageFile, 'poetry.lock');\n  const lockContents = (await readLocalFile(lockfileName, 'utf8'))!;\n  const lockfileMapping = Result.parse(\n    lockContents,\n    Lockfile.transform(({ lock }) => lock),\n  ).unwrapOr({});\n\n  let pythonVersion: string | undefined;\n  filterMap(res.deps, (dep) => {\n    if (dep.depName === 'python') {\n      if (dep.currentValue) {\n        pythonVersion = dep.currentValue;\n      }\n      return {\n        ...dep,\n        // We use containerbase python as source, as there are a lot docker tags which can cause\n        // issues with poetry versioning.\n        packageName: 'containerbase/python-prebuild',\n        datasource: GithubReleasesDatasource.id,\n        commitMessageTopic: 'Python',\n        registryUrls: null,\n      };\n    }\n\n    const packageName = dep.packageName ?? dep.depName;\n    if (packageName && packageName in lockfileMapping) {\n      dep.lockedVersion = lockfileMapping[packageName];\n    }\n\n    return dep;\n  });\n\n  if (!res.deps.length) {\n    return null;\n  }\n\n  const extractedConstraints: Record<string, any> = {};\n\n  if (is.nonEmptyString(pythonVersion)) {\n    extractedConstraints.python = pythonVersion;\n  }\n  res.extractedConstraints = extractedConstraints;\n\n  // Try poetry.lock first\n  let lockFile = getSiblingFileName(packageFile, 'poetry.lock');\n  // istanbul ignore next\n  if (await localPathExists(lockFile)) {\n    res.lockFiles = [lockFile];\n  } else {\n    // Try pyproject.lock next\n    lockFile = getSiblingFileName(packageFile, 'pyproject.lock');\n    if (await localPathExists(lockFile)) {\n      res.lockFiles = [lockFile];\n    }\n  }\n  return res;\n}\n"]}