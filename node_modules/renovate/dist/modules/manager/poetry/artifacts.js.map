{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/poetry/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  deleteLocalFile,\n  ensureCacheDir,\n  getSiblingFileName,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getGitEnvironmentVariables } from '../../../util/git/auth';\nimport { find } from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { Result } from '../../../util/result';\nimport { massage as massageToml, parse as parseToml } from '../../../util/toml';\nimport { parseUrl } from '../../../util/url';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { getGoogleAuthHostRule } from '../../datasource/util';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { Lockfile, PoetrySchemaToml } from './schema';\nimport type { PoetryFile, PoetrySource } from './types';\n\nexport function getPythonConstraint(\n  pyProjectContent: string,\n  existingLockFileContent: string,\n): string | null {\n  // Read Python version from `pyproject.toml` first as it could have been updated\n  const pyprojectPythonConstraint = Result.parse(\n    massageToml(pyProjectContent),\n    PoetrySchemaToml.transform(\n      ({ packageFileContent }) =>\n        packageFileContent.deps.find((dep) => dep.depName === 'python')\n          ?.currentValue,\n    ),\n  ).unwrapOrNull();\n  if (pyprojectPythonConstraint) {\n    logger.debug('Using python version from pyproject.toml');\n    return pyprojectPythonConstraint;\n  }\n\n  const lockfilePythonConstraint = Result.parse(\n    existingLockFileContent,\n    Lockfile.transform(({ pythonVersions }) => pythonVersions),\n  ).unwrapOrNull();\n  if (lockfilePythonConstraint) {\n    logger.debug('Using python version from poetry.lock');\n    return lockfilePythonConstraint;\n  }\n\n  return null;\n}\n\nexport function getPoetryRequirement(\n  pyProjectContent: string,\n  existingLockFileContent: string,\n): undefined | string | null {\n  // Read Poetry version from first line of poetry.lock\n  const firstLine = existingLockFileContent.split('\\n')[0];\n  const poetryVersionMatch = /by Poetry ([\\d\\\\.]+)/.exec(firstLine);\n  if (poetryVersionMatch?.[1]) {\n    const poetryVersion = poetryVersionMatch[1];\n    logger.debug(\n      `Using poetry version ${poetryVersion} from poetry.lock header`,\n    );\n    return poetryVersion;\n  }\n\n  const { val: lockfilePoetryConstraint } = Result.parse(\n    existingLockFileContent,\n    Lockfile.transform(({ poetryConstraint }) => poetryConstraint),\n  ).unwrap();\n  if (lockfilePoetryConstraint) {\n    logger.debug(\n      `Using poetry version ${lockfilePoetryConstraint} from poetry.lock metadata`,\n    );\n    return lockfilePoetryConstraint;\n  }\n\n  const { val: pyprojectPoetryConstraint } = Result.parse(\n    massageToml(pyProjectContent),\n    PoetrySchemaToml.transform(({ poetryRequirement }) => poetryRequirement),\n  ).unwrap();\n  if (pyprojectPoetryConstraint) {\n    logger.debug(\n      `Using poetry version ${pyprojectPoetryConstraint} from pyproject.toml`,\n    );\n    return pyprojectPoetryConstraint;\n  }\n\n  return null;\n}\n\nfunction getPoetrySources(content: string, fileName: string): PoetrySource[] {\n  let pyprojectFile: PoetryFile;\n  try {\n    pyprojectFile = parseToml(massageToml(content)) as PoetryFile;\n  } catch (err) {\n    logger.debug({ err }, 'Error parsing pyproject.toml file');\n    return [];\n  }\n  if (!pyprojectFile.tool?.poetry) {\n    logger.debug(`${fileName} contains no poetry section`);\n    return [];\n  }\n\n  const sources = pyprojectFile.tool?.poetry?.source ?? [];\n  const sourceArray: PoetrySource[] = [];\n  for (const source of sources) {\n    if (source.name && source.url) {\n      sourceArray.push({ name: source.name, url: source.url });\n    }\n  }\n  return sourceArray;\n}\n\nasync function getMatchingHostRule(url: string | undefined): Promise<HostRule> {\n  const scopedMatch = find({ hostType: PypiDatasource.id, url });\n  const hostRule = is.nonEmptyObject(scopedMatch) ? scopedMatch : find({ url });\n  if (hostRule && Object.keys(hostRule).length !== 0) {\n    return hostRule;\n  }\n\n  const parsedUrl = parseUrl(url);\n  if (!parsedUrl) {\n    logger.once.debug(`Failed to parse URL ${url}`);\n    return {};\n  }\n\n  if (parsedUrl.hostname.endsWith('.pkg.dev')) {\n    const hostRule = await getGoogleAuthHostRule();\n    if (hostRule && Object.keys(hostRule).length !== 0) {\n      return hostRule;\n    }\n    logger.once.debug(`Could not get Google access token (url=${url})`);\n  }\n\n  return {};\n}\n\nasync function getSourceCredentialVars(\n  pyprojectContent: string,\n  packageFileName: string,\n): Promise<NodeJS.ProcessEnv> {\n  const poetrySources = getPoetrySources(pyprojectContent, packageFileName);\n  const envVars: NodeJS.ProcessEnv = {};\n\n  for (const source of poetrySources) {\n    const matchingHostRule = await getMatchingHostRule(source.url);\n    const formattedSourceName = source.name\n      .replace(regEx(/(\\.|-)+/g), '_')\n      .toUpperCase();\n    if (matchingHostRule.username) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_USERNAME`] =\n        matchingHostRule.username;\n    }\n    if (matchingHostRule.password) {\n      envVars[`POETRY_HTTP_BASIC_${formattedSourceName}_PASSWORD`] =\n        matchingHostRule.password;\n    }\n  }\n  return envVars;\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`poetry.updateArtifacts(${packageFileName})`);\n  const { isLockFileMaintenance } = config;\n\n  if (!is.nonEmptyArray(updatedDeps) && !isLockFileMaintenance) {\n    logger.debug('No updated poetry deps - returning null');\n    return null;\n  }\n  // Try poetry.lock first\n  let lockFileName = getSiblingFileName(packageFileName, 'poetry.lock');\n  let existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    // Try pyproject.lock next\n    lockFileName = getSiblingFileName(packageFileName, 'pyproject.lock');\n    existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (!existingLockFileContent) {\n      logger.debug(`No lock file found`);\n      return null;\n    }\n  }\n  logger.debug(`Updating ${lockFileName}`);\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    const cmd: string[] = [];\n    if (isLockFileMaintenance) {\n      await deleteLocalFile(lockFileName);\n      cmd.push('poetry update --lock --no-interaction');\n    } else {\n      cmd.push(\n        `poetry update --lock --no-interaction ${updatedDeps\n          .map((dep) => dep.depName)\n          .filter(is.string)\n          .map((dep) => quote(dep))\n          .join(' ')}`,\n      );\n    }\n    const pythonConstraint =\n      config?.constraints?.python ??\n      getPythonConstraint(newPackageFileContent, existingLockFileContent);\n    const poetryConstraint =\n      config.constraints?.poetry ??\n      getPoetryRequirement(newPackageFileContent, existingLockFileContent);\n    const extraEnv = {\n      ...(await getSourceCredentialVars(\n        newPackageFileContent,\n        packageFileName,\n      )),\n      ...getGitEnvironmentVariables(['poetry']),\n      PIP_CACHE_DIR: await ensureCacheDir('pip'),\n    };\n\n    const execOptions: ExecOptions = {\n      cwdFile: packageFileName,\n      extraEnv,\n      docker: {},\n      toolConstraints: [\n        { toolName: 'python', constraint: pythonConstraint },\n        { toolName: 'poetry', constraint: poetryConstraint },\n      ],\n    };\n    await exec(cmd, execOptions);\n    const newPoetryLockContent = await readLocalFile(lockFileName, 'utf8');\n    if (existingLockFileContent === newPoetryLockContent) {\n      logger.debug(`${lockFileName} is unchanged`);\n      return null;\n    }\n    logger.debug(`Returning updated ${lockFileName}`);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newPoetryLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, `Failed to update ${lockFileName} file`);\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}