{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/setup-cfg/extract.ts"],"names":[],"mappings":";;AA6FA,gDAwCC;AArID,2DAA2D;AAC3D,gDAAoD;AACpD,4CAAyC;AACzC,+CAA0D;AAC1D,gDAAuD;AACvD,yDAAsE;AAOtE,SAAS,cAAc,CAAC,GAAW;IACjC,MAAM,CAAC,EAAE,WAAW,CAAC,GAAG,IAAA,aAAK,EAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACxE,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,gBAAgB,CAAC,GAAW;IACnC,MAAM,CAAC,EAAE,aAAa,CAAC,GAAG,IAAA,aAAK,EAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACjE,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,UAAU,CACjB,OAAsB,EACtB,MAAqB;IAErB,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,IAAI,MAAM,KAAK,kBAAkB,EAAE,CAAC;YAClC,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,IAAI,MAAM,KAAK,gBAAgB,EAAE,CAAC;YAChC,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,IAAI,MAAM,KAAK,eAAe,EAAE,CAAC;YAC/B,OAAO,MAAM,CAAC;QAChB,CAAC;IACH,CAAC;IACD,IAAI,OAAO,KAAK,wBAAwB,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,QAAQ,CACf,IAAY,EACZ,OAAsB,EACtB,MAAqB;IAErB,MAAM,cAAc,GAAG,mDAAmD,CAAC;IAC3E,MAAM,aAAa,GAAG,wBAAwB,CAAC;IAE/C,MAAM,YAAY,GAAW,sBAAa,CAAC;IAC3C,MAAM,oBAAoB,GAAG,OAAO,YAAY,CAAC,OAAO,CACtD,IAAA,aAAK,EAAC,UAAU,CAAC,EACjB,IAAI,CACL,EAAE,CAAC;IACJ,MAAM,gBAAgB,GAAG,GAAG,oBAAoB,WAAW,oBAAoB,IAAI,CAAC;IACpF,MAAM,iBAAiB,GAAG,IAAI,cAAc,KAAK,aAAa,KAAK,gBAAgB,GAAG,CAAC;IAEvF,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,KAAK,cAAc,IAAI,CAAC,CAAC;IAChD,MAAM,WAAW,GAAG,IAAA,aAAK,EAAC,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAEpD,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACtE,MAAM,cAAc,GAClB,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAExE,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,EAAE,OAAO,EAAE,AAAD,EAAG,OAAO,CAAC,GAAG,cAAc,CAAC;IAC9C,MAAM,YAAY,GAAG,OAAO,EAAE,IAAI,EAAE,CAAC;IAErC,MAAM,GAAG,GAAsB;QAC7B,OAAO;QACP,WAAW,EAAE,IAAA,+BAAsB,EAAC,OAAO,CAAC;QAC5C,YAAY;QACZ,UAAU,EAAE,qBAAc,CAAC,EAAE;QAC7B,OAAO;KACR,CAAC;IAEF,IAAI,YAAY,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QACnC,GAAG,CAAC,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe;IAEf,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAE/C,IAAI,WAAW,GAAkB,IAAI,CAAC;IACtC,IAAI,aAAa,GAAkB,IAAI,CAAC;IAExC,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,OAAO;SACJ,KAAK,CAAC,oBAAY,CAAC;SACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;SACxD,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACnB,IAAI,IAAI,GAAG,OAAO,CAAC;QACnB,MAAM,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,cAAc,EAAE,CAAC;YACnB,WAAW,GAAG,cAAc,CAAC;QAC/B,CAAC;QACD,IAAI,gBAAgB,EAAE,CAAC;YACrB,aAAa,GAAG,gBAAgB,CAAC;YACjC,qDAAqD;YACrD,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;gBACvD,IAAI,GAAG,EAAE,CAAC;oBACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QACvD,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAC;IAEL,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["// based on https://www.python.org/dev/peps/pep-0508/#names\nimport { RANGE_PATTERN } from '@renovatebot/pep440';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { normalizePythonDepName } from '../../datasource/pypi/common';\nimport type {\n  MaybePromise,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\n\nfunction getSectionName(str: string): string {\n  const [, sectionName] = regEx(/^\\[\\s*([^\\s]+)\\s*]\\s*$/).exec(str) ?? [];\n  return sectionName;\n}\n\nfunction getSectionRecord(str: string): string {\n  const [, sectionRecord] = regEx(/^([^\\s]+)\\s*=/).exec(str) ?? [];\n  return sectionRecord;\n}\n\nfunction getDepType(\n  section: string | null,\n  record: string | null,\n): null | string {\n  if (section === 'options') {\n    if (record === 'install_requires') {\n      return 'install';\n    }\n    if (record === 'setup_requires') {\n      return 'setup';\n    }\n    if (record === 'tests_require') {\n      return 'test';\n    }\n  }\n  if (section === 'options.extras_require') {\n    return 'extra';\n  }\n  return null;\n}\n\nfunction parseDep(\n  line: string,\n  section: string | null,\n  record: string | null,\n): PackageDependency | null {\n  const packagePattern = '[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9]';\n  const extrasPattern = '(?:\\\\s*\\\\[[^\\\\]]+\\\\])?';\n\n  const rangePattern: string = RANGE_PATTERN;\n  const specifierPartPattern = `\\\\s*${rangePattern.replace(\n    regEx(/\\?<\\w+>/g),\n    '?:',\n  )}`;\n  const specifierPattern = `${specifierPartPattern}(?:\\\\s*,${specifierPartPattern})*`;\n  const dependencyPattern = `(${packagePattern})(${extrasPattern})(${specifierPattern})`;\n\n  const pkgRegex = regEx(`^(${packagePattern})$`);\n  const pkgValRegex = regEx(`^${dependencyPattern}$`);\n\n  const depType = getDepType(section, record);\n  if (!depType) {\n    return null;\n  }\n\n  const [lineNoEnvMarkers] = line.split(';').map((part) => part.trim());\n  const packageMatches =\n    pkgValRegex.exec(lineNoEnvMarkers) ?? pkgRegex.exec(lineNoEnvMarkers);\n\n  if (!packageMatches) {\n    return null;\n  }\n\n  const [, depName, , currVal] = packageMatches;\n  const currentValue = currVal?.trim();\n\n  const dep: PackageDependency = {\n    depName,\n    packageName: normalizePythonDepName(depName),\n    currentValue,\n    datasource: PypiDatasource.id,\n    depType,\n  };\n\n  if (currentValue?.startsWith('==')) {\n    dep.currentVersion = currentValue.replace(/^==\\s*/, '');\n  }\n\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n): MaybePromise<PackageFileContent | null> {\n  logger.trace('setup-cfg.extractPackageFile()');\n\n  let sectionName: string | null = null;\n  let sectionRecord: string | null = null;\n\n  const deps: PackageDependency[] = [];\n\n  content\n    .split(newlineRegex)\n    .map((line) => line.replace(regEx(/#.*$/), '').trimEnd())\n    .forEach((rawLine) => {\n      let line = rawLine;\n      const newSectionName = getSectionName(line);\n      const newSectionRecord = getSectionRecord(line);\n      if (newSectionName) {\n        sectionName = newSectionName;\n      }\n      if (newSectionRecord) {\n        sectionRecord = newSectionRecord;\n        // Probably there are also requirements in this line.\n        line = rawLine.replace(regEx(/^[^=]*=\\s*/), '');\n        line.split(';').forEach((part) => {\n          const dep = parseDep(part, sectionName, sectionRecord);\n          if (dep) {\n            deps.push(dep);\n          }\n        });\n        return;\n      }\n\n      const dep = parseDep(line, sectionName, sectionRecord);\n      if (dep) {\n        deps.push(dep);\n      }\n    });\n\n  return deps.length ? { deps } : null;\n}\n"]}