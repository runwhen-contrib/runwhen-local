{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/homebrew/util.ts"],"names":[],"mappings":";;AAAA,oBAaC;AAED,0BAEC;AA4CD,wCAIC;AAjED,SAAgB,IAAI,CAClB,GAAW,EACX,OAAe,EACf,IAA4B;IAE5B,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACtB,OAAO,CAAC,CAAC;QACX,CAAC;QACD,CAAC,IAAI,CAAC,CAAC;IACT,CAAC;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAAgB,OAAO,CAAC,CAAS;IAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAED,uCAAuC;AACvC,SAAS,kBAAkB,CAAC,OAAe;IACzC,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YACd,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QACD,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBACf,OAAO,GAAG,KAAK,CAAC;YAClB,CAAC;QACH,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,UAAU,IAAI,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,8DAA8D;AAC9D,SAAS,uBAAuB,CAAC,OAAe;IAC9C,MAAM,WAAW,GAAG,gBAAgB,CAAC;IACrC,MAAM,SAAS,GAAG,cAAc,CAAC;IACjC,IAAI,UAAU,GAAG,OAAO,CAAC;IACzB,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACvC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACrC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAC5B,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC3B,CAAC,IAAI,CAAC,CAAC;QACT,CAAC;QACD,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC3B,CAAC,IAAI,CAAC,CAAC;QACT,CAAC;QACD,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC;QACnB,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAClE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACnC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,cAAc,CAAC,OAAe;IAC5C,IAAI,UAAU,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAC7C,UAAU,GAAG,uBAAuB,CAAC,UAAU,CAAC,CAAC;IACjD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["export function skip(\n  idx: number,\n  content: string,\n  cond: (s: string) => boolean,\n): number {\n  let i = idx;\n  while (i < content.length) {\n    if (!cond(content[i])) {\n      return i;\n    }\n    i += 1;\n  }\n  return i;\n}\n\nexport function isSpace(c: string): boolean {\n  return /\\s/.test(c);\n}\n\n// Remove line comments starting with #\nfunction removeLineComments(content: string): string {\n  let newContent = '';\n  let comment = false;\n  for (const c of content) {\n    if (c === '#') {\n      comment = true;\n    }\n    if (comment) {\n      if (c === '\\n') {\n        comment = false;\n      }\n    }\n    if (!comment) {\n      newContent += c;\n    }\n  }\n  return newContent;\n}\n\n// Remove multi-line comments enclosed between =begin and =end\nfunction removeMultiLineComments(content: string): string {\n  const beginRegExp = /(^|\\n)=begin\\s/;\n  const endRegExp = /(^|\\n)=end\\s/;\n  let newContent = content;\n  let i = newContent.search(beginRegExp);\n  let j = newContent.search(endRegExp);\n  while (i !== -1 && j !== -1) {\n    if (newContent[i] === '\\n') {\n      i += 1;\n    }\n    if (newContent[j] === '\\n') {\n      j += 1;\n    }\n    j += '=end'.length;\n    newContent = newContent.substring(0, i) + newContent.substring(j);\n    i = newContent.search(beginRegExp);\n    j = newContent.search(endRegExp);\n  }\n  return newContent;\n}\n\nexport function removeComments(content: string): string {\n  let newContent = removeLineComments(content);\n  newContent = removeMultiLineComments(newContent);\n  return newContent;\n}\n"]}