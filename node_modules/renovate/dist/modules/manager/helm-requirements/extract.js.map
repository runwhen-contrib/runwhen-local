{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helm-requirements/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { HelmDatasource } from '../../datasource/helm';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  let deps = [];\n  // TODO: fix type\n  let doc: any;\n  try {\n    doc = parseSingleYaml(content); // TODO #9610\n  } catch {\n    logger.debug({ packageFile }, `Failed to parse helm requirements.yaml`);\n    return null;\n  }\n  if (!(doc && is.array(doc.dependencies))) {\n    logger.debug({ packageFile }, `requirements.yaml has no dependencies`);\n    return null;\n  }\n  deps = doc.dependencies.map((dep: Record<string, any>) => {\n    let currentValue: string | undefined; // Remove when #9610 has been implemented\n    switch (typeof dep.version) {\n      case 'number':\n        currentValue = String(dep.version);\n        break;\n      case 'string':\n        currentValue = dep.version;\n    }\n\n    const res: PackageDependency = {\n      depName: dep.name,\n      currentValue,\n    };\n\n    if (!res.depName) {\n      res.skipReason = 'invalid-name';\n      return res;\n    }\n\n    if (!res.currentValue) {\n      res.skipReason = 'invalid-version';\n      return res;\n    }\n\n    if (!dep.repository) {\n      res.skipReason = 'no-repository';\n      return res;\n    }\n\n    res.registryUrls = [dep.repository];\n    if (dep.repository.startsWith('@') || dep.repository.startsWith('alias:')) {\n      const repoWithPrefixRemoved = dep.repository.slice(\n        dep.repository[0] === '@' ? 1 : 6,\n      );\n      const alias = config.registryAliases?.[repoWithPrefixRemoved];\n      if (alias) {\n        res.registryUrls = [alias];\n        return res;\n      }\n\n      res.skipReason = 'placeholder-url';\n    } else {\n      try {\n        const url = new URL(dep.repository);\n        if (url.protocol === 'file:') {\n          res.skipReason = 'local-dependency';\n        }\n      } catch (err) {\n        logger.debug(\n          { err, packageFile, url: dep.repository },\n          'Error parsing url',\n        );\n        res.skipReason = 'invalid-url';\n      }\n    }\n    return res;\n  });\n  const res = {\n    deps,\n    datasource: HelmDatasource.id,\n  };\n  return res;\n}\n"]}