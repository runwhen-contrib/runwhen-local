{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport * as packageCache from '../../../util/cache/package';\nimport { hashStream } from '../../../util/hash';\nimport { Http } from '../../../util/http';\nimport { map as pMap } from '../../../util/promises';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { findCodeFragment, patchCodeAtFragments, updateCode } from './common';\nimport type { RecordFragment, StringFragment } from './types';\n\nconst http = new Http('bazel');\n\nfunction getUrlFragments(rule: RecordFragment): StringFragment[] {\n  const urls: StringFragment[] = [];\n\n  const urlRecord = rule.children.url;\n  if (urlRecord?.type === 'string') {\n    urls.push(urlRecord);\n  }\n\n  const urlsRecord = rule.children.urls;\n  if (urlsRecord?.type === 'array') {\n    for (const urlRecord of urlsRecord.children) {\n      if (urlRecord.type === 'string') {\n        urls.push(urlRecord);\n      }\n    }\n  }\n\n  return urls;\n}\n\nconst urlMassages = {\n  'bazel-skylib.': 'bazel_skylib-',\n  '/bazel-gazelle/releases/download/0': '/bazel-gazelle/releases/download/v0',\n  '/bazel-gazelle-0': '/bazel-gazelle-v0',\n  '/rules_go/releases/download/0': '/rules_go/releases/download/v0',\n  '/rules_go-0': '/rules_go-v0',\n};\n\nfunction massageUrl(url: string): string {\n  let result = url;\n  for (const [from, to] of Object.entries(urlMassages)) {\n    result = result.replace(from, to);\n  }\n  return result;\n}\n\nfunction replaceAll(input: string, from: string, to: string): string {\n  return input.split(from).join(to);\n}\n\nfunction replaceValues(\n  content: string,\n  from: string | null | undefined,\n  to: string | null | undefined,\n): string {\n  // istanbul ignore if\n  if (!from || !to || from === to) {\n    return content;\n  }\n  const massagedFrom = from.replace(regEx(/^v/), '');\n  const massagedTo = to.replace(regEx(/^v/), '');\n  return replaceAll(content, massagedFrom, massagedTo);\n}\n\nasync function getHashFromUrl(url: string): Promise<string | null> {\n  const cacheNamespace = 'url-sha256';\n  const cachedResult = await packageCache.get<string | null>(\n    cacheNamespace,\n    url,\n  );\n  /* istanbul ignore next line */\n  if (cachedResult) {\n    return cachedResult;\n  }\n  try {\n    const hash = await hashStream(http.stream(url), 'sha256');\n    const cacheMinutes = 3 * 24 * 60; // 3 days\n    await packageCache.set(cacheNamespace, url, hash, cacheMinutes);\n    return hash;\n  } catch /* istanbul ignore next */ {\n    return null;\n  }\n}\n\nasync function getHashFromUrls(urls: string[]): Promise<string | null> {\n  const hashes = (\n    await pMap(urls, (url) => getHashFromUrl(massageUrl(url)))\n  ).filter(is.truthy);\n  if (!hashes.length) {\n    logger.debug({ urls }, 'Could not calculate hash for URLs');\n    return null;\n  }\n\n  const distinctHashes = new Set(hashes);\n  // istanbul ignore if\n  if (distinctHashes.size > 1) {\n    logger.warn({ urls }, 'Found multiple hashes for single def');\n  }\n\n  return hashes[0];\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact,\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName: path, updatedDeps: upgrades } = updateArtifact;\n  let { newPackageFileContent: contents } = updateArtifact;\n  for (const upgrade of upgrades) {\n    const { managerData } = upgrade;\n    const idx = managerData?.idx as number;\n\n    if (upgrade.depType === 'http_file' || upgrade.depType === 'http_archive') {\n      const rule = findCodeFragment(contents, [idx]);\n      // istanbul ignore if\n      if (rule?.type !== 'record') {\n        return null;\n      }\n\n      const urlFragments = getUrlFragments(rule);\n      if (!urlFragments?.length) {\n        logger.debug(`def: ${rule.value}, urls is empty`);\n        return null;\n      }\n\n      const updateValues = (oldUrl: string): string => {\n        let url = oldUrl;\n        url = replaceValues(url, upgrade.currentValue, upgrade.newValue);\n        url = replaceValues(url, upgrade.currentDigest, upgrade.newDigest);\n        return url;\n      };\n\n      const urls = urlFragments.map(({ value }) => updateValues(value));\n      const hash = await getHashFromUrls(urls);\n      if (!hash) {\n        return null;\n      }\n\n      contents = patchCodeAtFragments(contents, urlFragments, updateValues);\n      contents = updateCode(contents, [idx, 'strip_prefix'], updateValues);\n      contents = updateCode(contents, [idx, 'sha256'], hash);\n    }\n  }\n\n  return [\n    {\n      file: {\n        type: 'addition',\n        path,\n        contents,\n      },\n    },\n  ];\n}\n"]}