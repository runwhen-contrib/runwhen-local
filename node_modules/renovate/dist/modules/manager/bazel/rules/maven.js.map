{"version":3,"file":"maven.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel/rules/maven.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,6BAAwB;AACxB,qDAA4D;AAC5D,uDAA8D;AAGjD,QAAA,UAAU,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAU,CAAC;AAEvE,MAAM,YAAY,GAAG,OAAC,CAAC,KAAK,CAAC;IAC3B,OAAC,CAAC,MAAM,CAAC;QACP,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;QACjB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;QACpB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;KACpB,CAAC;IACF,OAAC;SACE,MAAM,CAAC;QACN,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;QACf,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;QACf,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;KAChB,CAAC;SACD,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;CACtE,CAAC,CAAC;AAGU,QAAA,WAAW,GAAG,OAAC;KACzB,MAAM,CAAC;IACN,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,kBAAU,CAAC;IACxB,SAAS,EAAE,OAAC;SACT,KAAK,CAAC,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;SACjC,KAAK,EAAE;SACP,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE;QAChB,MAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;YACnB,IAAI,YAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjB,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAChD,IAAI,KAAK,IAAI,QAAQ,IAAI,OAAO,EAAE,CAAC;oBACjC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IACJ,YAAY,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC7C,CAAC;KACD,SAAS,CACR,CAAC,EACC,IAAI,EAAE,OAAO,EACb,SAAS,EACT,YAAY,EAAE,YAAY,GAC3B,EAAuB,EAAE,CACxB,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7D,UAAU,EAAE,uBAAe,CAAC,EAAE;IAC9B,UAAU,EAAV,WAAU;IACV,OAAO,EAAE,GAAG,KAAK,IAAI,QAAQ,EAAE;IAC/B,YAAY;IACZ,OAAO;IACP,YAAY;CACb,CAAC,CAAC,CACN,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { z } from 'zod';\nimport { MavenDatasource } from '../../../datasource/maven';\nimport { id as versioning } from '../../../versioning/gradle';\nimport type { PackageDependency } from '../../types';\n\nexport const mavenRules = ['maven_install', '_maven_install'] as const;\n\nconst ArtifactSpec = z.union([\n  z.object({\n    group: z.string(),\n    artifact: z.string(),\n    version: z.string(),\n  }),\n  z\n    .object({\n      '0': z.string(),\n      '1': z.string(),\n      '2': z.string(),\n    })\n    .transform((x) => ({ group: x[0], artifact: x[1], version: x[2] })),\n]);\ntype ArtifactSpec = z.infer<typeof ArtifactSpec>;\n\nexport const MavenTarget = z\n  .object({\n    rule: z.enum(mavenRules),\n    artifacts: z\n      .union([z.string(), ArtifactSpec])\n      .array()\n      .transform((xs) => {\n        const result: ArtifactSpec[] = [];\n        for (const x of xs) {\n          if (is.string(x)) {\n            const [group, artifact, version] = x.split(':');\n            if (group && artifact && version) {\n              result.push({ group, artifact, version });\n            }\n          } else {\n            result.push(x);\n          }\n        }\n\n        return result;\n      }),\n    repositories: z.array(z.string()).optional(),\n  })\n  .transform(\n    ({\n      rule: depType,\n      artifacts,\n      repositories: registryUrls,\n    }): PackageDependency[] =>\n      artifacts.map(({ group, artifact, version: currentValue }) => ({\n        datasource: MavenDatasource.id,\n        versioning,\n        depName: `${group}:${artifact}`,\n        currentValue,\n        depType,\n        registryUrls,\n      })),\n  );\n"]}