import { z } from 'zod';
import type { PackageDependency } from '../../types';
export declare const goRules: readonly ["go_repository", "_go_repository"];
export declare const GoTarget: z.ZodEffects<z.ZodEffects<z.ZodObject<{
    rule: z.ZodEnum<["go_repository", "_go_repository"]>;
    name: z.ZodString;
    tag: z.ZodOptional<z.ZodString>;
    commit: z.ZodOptional<z.ZodString>;
    importpath: z.ZodString;
    remote: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    rule: "go_repository" | "_go_repository";
    importpath: string;
    commit?: string | undefined;
    tag?: string | undefined;
    remote?: string | undefined;
}, {
    name: string;
    rule: "go_repository" | "_go_repository";
    importpath: string;
    commit?: string | undefined;
    tag?: string | undefined;
    remote?: string | undefined;
}>, {
    name: string;
    rule: "go_repository" | "_go_repository";
    importpath: string;
    commit?: string | undefined;
    tag?: string | undefined;
    remote?: string | undefined;
}, {
    name: string;
    rule: "go_repository" | "_go_repository";
    importpath: string;
    commit?: string | undefined;
    tag?: string | undefined;
    remote?: string | undefined;
}>, PackageDependency<Record<string, any>>[], {
    name: string;
    rule: "go_repository" | "_go_repository";
    importpath: string;
    commit?: string | undefined;
    tag?: string | undefined;
    remote?: string | undefined;
}>;
