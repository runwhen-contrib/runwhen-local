{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/bazel/rules/http.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { z } from 'zod';\nimport { escapeRegExp, regEx } from '../../../../util/regex';\nimport { parseUrl } from '../../../../util/url';\nimport { GithubReleasesDatasource } from '../../../datasource/github-releases';\nimport { GithubTagsDatasource } from '../../../datasource/github-tags';\nimport { GitlabReleasesDatasource } from '../../../datasource/gitlab-releases';\nimport { GitlabTagsDatasource } from '../../../datasource/gitlab-tags';\nimport type { PackageDependency } from '../../types';\n\n// Source: https://bazel.build/rules/lib/repo/http\nconst archives = [\n  '.zip',\n  '.tar',\n  '.jar',\n  '.war',\n  '.aar',\n  '.ar',\n  '.deb',\n\n  '.gz',\n  '.tar.gz',\n  '.tgz',\n\n  '.bz2',\n  '.tar.bz2',\n  '.tbz2',\n\n  '.xz',\n  '.tar.xz',\n  '.txz',\n\n  '.zst',\n  '.tar.zst',\n  '.tzst',\n];\n\nconst archiveSuffixRegex = regEx(\n  `(?:${archives.map(escapeRegExp).join('|')})$`,\n);\n\nfunction stripArchiveSuffix(value: string): string {\n  return value.replace(archiveSuffixRegex, '');\n}\n\nfunction isHash(value: unknown): value is string {\n  return is.string(value) && regEx(/[0-9a-z]{40}/i).test(value);\n}\n\nexport function parseGithubPath(\n  pathname: string,\n): Partial<PackageDependency> | null {\n  const [p0, p1, p2, p3, p4, p5] = pathname.split('/').slice(1);\n  const packageName = p0 + '/' + p1;\n  let datasource = '';\n  let value: string | null = null;\n  if (p2 === 'releases' && p3 === 'download') {\n    // https://github.com/foo/bar/releases/download/1.2.3/bar-1.2.3.tar.gz\n    datasource = GithubReleasesDatasource.id;\n    value = p4;\n  } else if (p2 === 'archive' && p3 === 'refs' && p4 === 'tags') {\n    // https://github.com/foo/bar/archive/refs/tags/v1.2.3.tar.gz\n    datasource = GithubTagsDatasource.id;\n    value = p5;\n  } else if (p2 === 'archive') {\n    // https://github.com/foo/bar/archive/1.2.3.tar.gz\n    datasource = GithubTagsDatasource.id;\n    value = p3;\n  }\n\n  if (!value) {\n    return null;\n  }\n\n  value = stripArchiveSuffix(value);\n  return isHash(value)\n    ? { datasource, packageName, currentDigest: value }\n    : { datasource, packageName, currentValue: value };\n}\n\nfunction parseGitlabPath(pathname: string): Partial<PackageDependency> | null {\n  // https://gitlab.com/libeigen/eigen/-/archive/3.3.5/eigen-3.3.5.zip\n  // https://gitlab.com/libeigen/eigen/-/archive/90ee821c563fa20db4d64d6991ddca256d5c52f2/eigen-90ee821c563fa20db4d64d6991ddca256d5c52f2.tar.gz\n  const [p0, p1, p2, p3, p4] = pathname.split('/').slice(1);\n  const packageName = p0 + '/' + p1;\n  if (p2 === '-' && p3 === 'archive' && p4) {\n    return isHash(p4)\n      ? {\n          datasource: GitlabTagsDatasource.id,\n          packageName,\n          currentDigest: p4,\n        }\n      : {\n          datasource: GitlabReleasesDatasource.id,\n          packageName,\n          currentValue: p4,\n        };\n  }\n  return null;\n}\n\nexport function parseArchiveUrl(\n  urlString: string | undefined | null,\n): Partial<PackageDependency> | null {\n  if (!urlString) {\n    return null;\n  }\n\n  const url = parseUrl(urlString);\n\n  if (url?.host === 'github.com') {\n    return parseGithubPath(url.pathname);\n  }\n\n  if (url?.host === 'gitlab.com') {\n    return parseGitlabPath(url.pathname);\n  }\n\n  return null;\n}\n\nexport const httpRules = [\n  'http_archive',\n  '_http_archive',\n  'http_file',\n  '_http_file',\n] as const;\n\nexport const HttpTarget = z\n  .object({\n    rule: z.enum(httpRules),\n    name: z.string(),\n    url: z.string().optional(),\n    urls: z.array(z.string()).optional(),\n    sha256: z.string(),\n  })\n  .refine(({ url, urls }) => !!url || !!urls)\n  .transform(({ rule, name, url, urls = [] }): PackageDependency[] => {\n    const parsedUrl = [url, ...urls].map(parseArchiveUrl).find(is.truthy);\n    if (!parsedUrl) {\n      return [];\n    }\n\n    const dep: PackageDependency = {\n      datasource: parsedUrl.datasource,\n      depType: rule,\n      depName: name,\n      packageName: parsedUrl.packageName,\n    };\n\n    // We don't want to set both `currentValue` and `currentDigest`.\n    //\n    // What we want is to provide the first occurrence of `currentValue`,\n    // or, if it's not available, `currentDigest`.\n    //\n    // Auto-replace mechanism will replace this first occurrence,\n    // and artifact update function will do the rest.\n    //\n    // Hence, `if-else-if` is being used here.\n    if (parsedUrl.currentValue) {\n      dep.currentValue = parsedUrl.currentValue;\n    } else if (parsedUrl.currentDigest) {\n      dep.currentDigest = parsedUrl.currentDigest;\n    }\n\n    return [dep];\n  });\n"]}