{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bazel/extract.ts"],"names":[],"mappings":";;AASA,gDA+BC;AAvCD,qCAAiC;AACjC,mCAAkD;AAClD,2CAA6C;AAC7C,qCAAuC;AACvC,mCAAqC;AACrC,qCAAuC;AAGvC,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,MAAM,IAAI,GAAwB,EAAE,CAAC;IAErC,MAAM,SAAS,GAA4B,IAAA,cAAK,EAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACvE,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACnD,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;QAChC,KAAK,MAAM,GAAG,IAAI,IAAA,+BAAuB,EAAC,QAAQ,CAAC,EAAE,CAAC;YACpD,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,EAAE,CAAC;YAE1B,oEAAoE;YACpE,gCAAgC;YAChC,MAAM,KAAK,GAAG,CAAC,GAAG,oBAAW,EAAE,GAAG,cAAQ,EAAE,GAAG,cAAQ,EAAE,GAAG,YAAO,CAAC,CAAC;YACrE,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;YACrC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gBACzD,IAAI,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC;oBAC1C,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;gBACpC,CAAC;YACH,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["import type { PackageDependency, PackageFileContent } from '../types';\nimport { parse } from './parser';\nimport { extractDepsFromFragment } from './rules';\nimport { dockerRules } from './rules/docker';\nimport { gitRules } from './rules/git';\nimport { goRules } from './rules/go';\nimport { ociRules } from './rules/oci';\nimport type { RecordFragment } from './types';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n\n  const fragments: RecordFragment[] | null = parse(content, packageFile);\n  if (!fragments) {\n    return null;\n  }\n\n  for (let idx = 0; idx < fragments.length; idx += 1) {\n    const fragment = fragments[idx];\n    for (const dep of extractDepsFromFragment(fragment)) {\n      dep.managerData = { idx };\n\n      // Selectively provide `replaceString` in order to make auto-replace\n      // functionality work correctly.\n      const rules = [...dockerRules, ...ociRules, ...gitRules, ...goRules];\n      const replaceString = fragment.value;\n      if (rules.some((rule) => replaceString.startsWith(rule))) {\n        if (dep.currentValue && dep.currentDigest) {\n          dep.replaceString = replaceString;\n        }\n      }\n\n      deps.push(dep);\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}