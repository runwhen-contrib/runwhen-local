{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pep723/extract.ts"],"names":[],"mappings":";;AAWA,gDA4BC;AAvCD,4CAAyC;AACzC,+CAA0D;AAE1D,qCAAwC;AAExC,iKAAiK;AACjK,MAAM,KAAK,GAAG,IAAA,aAAK,EACjB,yEAAyE,EACzE,GAAG,CACJ,CAAC;AAEF,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB;IAEnB,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,MAAM,cAAc,GAAG,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;IAE9C,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,gKAAgK;IAChK,MAAM,UAAU,GAAG,cAAc;SAC9B,KAAK,CAAC,oBAAY,CAAC;SACnB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5D,IAAI,CAAC,IAAI,CAAC,CAAC;IAEd,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,qBAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAEhE,IAAI,KAAK,EAAE,CAAC;QACV,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,KAAK,EAAE,EACtB,8CAA8C,CAC/C,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AACtC,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { PackageFileContent } from '../types';\nimport { Pep723Schema } from './schema';\n\n// Adapted regex from the Python reference implementation: https://packaging.python.org/en/latest/specifications/inline-script-metadata/#reference-implementation\nconst regex = regEx(\n  /^# \\/\\/\\/ (?<type>[a-zA-Z0-9-]+)$\\s(?<content>(^#(| .*)$\\s)+)^# \\/\\/\\/$/,\n  'm',\n);\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  const match = regex.exec(content);\n  const matchedContent = match?.groups?.content;\n\n  if (!matchedContent) {\n    return null;\n  }\n\n  // Adapted code from the Python reference implementation: https://packaging.python.org/en/latest/specifications/inline-script-metadata/#reference-implementation\n  const parsedToml = matchedContent\n    .split(newlineRegex)\n    .map((line) => line.substring(line.startsWith('# ') ? 2 : 1))\n    .join('\\n');\n\n  const { data: res, error } = Pep723Schema.safeParse(parsedToml);\n\n  if (error) {\n    logger.debug(\n      { packageFile, error },\n      `Error parsing PEP 723 inline script metadata`,\n    );\n    return null;\n  }\n\n  return res.deps.length ? res : null;\n}\n"]}