{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ocb/extract.ts"],"names":[],"mappings":";;AAYA,gDA+CC;AAED,sCAoBC;;AAjFD,kEAAkC;AAClC,4CAAyC;AACzC,+CAA4C;AAC5C,6CAAqD;AACrD,4CAAmD;AAMnD,qCAAwE;AAExE,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,OAAuB;IAEvB,IAAI,UAAU,GAAqB,IAAI,CAAC;IACxC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,IAAA,sBAAe,EAAC,OAAO,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,wBAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACpB,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,EACpC,4BAA4B,CAC7B,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;IAC3B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,KAAK,EAAE,EACtB,0CAA0C,CAC3C,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC;YACR,UAAU,EAAE,iBAAY,CAAC,EAAE;YAC3B,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,+BAA+B;YACxC,YAAY,EAAE,UAAU,CAAC,IAAI,CAAC,eAAe;YAC7C,cAAc,EAAE,oBAAoB;SACrC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;IACjE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAC7D,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;IACjE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;IACjE,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;IAE/D,OAAO;QACL,kBAAkB,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO;QAC3C,IAAI;KACL,CAAC;AACJ,CAAC;AAED,SAAgB,aAAa,CAC3B,MAAc,EACd,OAAe;IAEf,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,MAAM,OAAO,IAAI,MAAM,EAAE,CAAC;QAC7B,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,IAAI,CAAC;YACR,UAAU,EAAE,iBAAY,CAAC,EAAE;YAC3B,OAAO;YACP,OAAO;YACP,YAAY;SACb,CAAC,CAAC;IACL,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { GoDatasource } from '../../datasource/go';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { type Module, type OCBConfig, OCBConfigSchema } from './schema';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config?: ExtractConfig,\n): PackageFileContent | null {\n  let definition: OCBConfig | null = null;\n  try {\n    const yaml = parseSingleYaml(content);\n    const parsed = OCBConfigSchema.safeParse(yaml);\n    if (!parsed.success) {\n      logger.trace(\n        { packageFile, error: parsed.error },\n        'Failed to parse OCB schema',\n      );\n      return null;\n    }\n\n    definition = parsed.data;\n  } catch (error) {\n    logger.debug(\n      { packageFile, error },\n      'OCB manager failed to parse file as YAML',\n    );\n    return null;\n  }\n\n  const deps: PackageDependency[] = [];\n  if (definition.dist.otelcol_version) {\n    deps.push({\n      datasource: GoDatasource.id,\n      depType: 'collector',\n      depName: 'go.opentelemetry.io/collector',\n      currentValue: definition.dist.otelcol_version,\n      extractVersion: '^v(?<version>\\\\S+)',\n    });\n  }\n\n  deps.push(...processModule(definition.connectors, 'connectors'));\n  deps.push(...processModule(definition.exporters, 'exports'));\n  deps.push(...processModule(definition.extensions, 'extensions'));\n  deps.push(...processModule(definition.processors, 'processors'));\n  deps.push(...processModule(definition.receivers, 'receivers'));\n\n  return {\n    packageFileVersion: definition.dist.version,\n    deps,\n  };\n}\n\nexport function processModule(\n  module: Module,\n  depType: string,\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  if (is.nullOrUndefined(module)) {\n    return deps;\n  }\n\n  for (const element of module) {\n    const [depName, currentValue] = element.gomod.trim().split(regEx(/\\s+/));\n    deps.push({\n      datasource: GoDatasource.id,\n      depType,\n      depName,\n      currentValue,\n    });\n  }\n\n  return deps;\n}\n"]}