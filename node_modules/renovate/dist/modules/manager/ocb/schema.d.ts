import { z } from 'zod';
declare const ModuleSchema: z.ZodOptional<z.ZodArray<z.ZodObject<{
    gomod: z.ZodString;
}, "strip", z.ZodTypeAny, {
    gomod: string;
}, {
    gomod: string;
}>, "many">>;
export type Module = z.infer<typeof ModuleSchema>;
export declare const OCBConfigSchema: z.ZodObject<{
    dist: z.ZodObject<{
        otelcol_version: z.ZodOptional<z.ZodString>;
        module: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        module?: string | undefined;
        version?: string | undefined;
        otelcol_version?: string | undefined;
    }, {
        module?: string | undefined;
        version?: string | undefined;
        otelcol_version?: string | undefined;
    }>;
    extensions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        gomod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        gomod: string;
    }, {
        gomod: string;
    }>, "many">>;
    exporters: z.ZodOptional<z.ZodArray<z.ZodObject<{
        gomod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        gomod: string;
    }, {
        gomod: string;
    }>, "many">>;
    receivers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        gomod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        gomod: string;
    }, {
        gomod: string;
    }>, "many">>;
    processors: z.ZodOptional<z.ZodArray<z.ZodObject<{
        gomod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        gomod: string;
    }, {
        gomod: string;
    }>, "many">>;
    connectors: z.ZodOptional<z.ZodArray<z.ZodObject<{
        gomod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        gomod: string;
    }, {
        gomod: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    dist: {
        module?: string | undefined;
        version?: string | undefined;
        otelcol_version?: string | undefined;
    };
    extensions?: {
        gomod: string;
    }[] | undefined;
    exporters?: {
        gomod: string;
    }[] | undefined;
    receivers?: {
        gomod: string;
    }[] | undefined;
    processors?: {
        gomod: string;
    }[] | undefined;
    connectors?: {
        gomod: string;
    }[] | undefined;
}, {
    dist: {
        module?: string | undefined;
        version?: string | undefined;
        otelcol_version?: string | undefined;
    };
    extensions?: {
        gomod: string;
    }[] | undefined;
    exporters?: {
        gomod: string;
    }[] | undefined;
    receivers?: {
        gomod: string;
    }[] | undefined;
    processors?: {
        gomod: string;
    }[] | undefined;
    connectors?: {
        gomod: string;
    }[] | undefined;
}>;
export type OCBConfig = z.infer<typeof OCBConfigSchema>;
export {};
