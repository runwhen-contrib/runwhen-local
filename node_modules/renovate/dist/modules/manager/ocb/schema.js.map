{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/ocb/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AAExB,MAAM,KAAK,GAAG,OAAC,CAAC,MAAM,CAAC;IACrB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;CAClB,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,OAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAGlC,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QACtC,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC7B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAC/B,CAAC;IACF,UAAU,EAAE,YAAY;IACxB,SAAS,EAAE,YAAY;IACvB,SAAS,EAAE,YAAY;IACvB,UAAU,EAAE,YAAY;IACxB,UAAU,EAAE,YAAY;CACzB,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\n\nconst Entry = z.object({\n  gomod: z.string(),\n});\n\nconst ModuleSchema = z.array(Entry).optional();\nexport type Module = z.infer<typeof ModuleSchema>;\n\nexport const OCBConfigSchema = z.object({\n  dist: z.object({\n    otelcol_version: z.string().optional(),\n    module: z.string().optional(),\n    version: z.string().optional(),\n  }),\n  extensions: ModuleSchema,\n  exporters: ModuleSchema,\n  receivers: ModuleSchema,\n  processors: ModuleSchema,\n  connectors: ModuleSchema,\n});\nexport type OCBConfig = z.infer<typeof OCBConfigSchema>;\n"]}