{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/util.ts"],"names":[],"mappings":";;AAOA,kEAKC;AAGD,kDAGC;AAED,8DAWC;AAED,4CAgBC;AAED,gEAeC;;AAlED,kEAAkC;AAClC,+CAA4C;AAC5C,4EAAkF;AAGlF,0CAA2E;AAE3E,SAAgB,2BAA2B,CACzC,OAAe,EACf,SAAmB;IAEnB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,eAAe,GAAG,IAAA,aAAK,EAAC,kBAAkB,CAAC,CAAC;AAClD,SAAgB,mBAAmB,CAAC,IAAY;IAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,OAAO,CAAC,CAAC,KAAK,CAAC;AACjB,CAAC;AAED,SAAgB,yBAAyB,CAAC,GAAsB;IAC9D,GAAG,CAAC,WAAW,KAAK,GAAG,CAAC,OAAO,CAAC;IAEhC,cAAc;IACd,IAAI,CAAC,GAAG,CAAC,WAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACpC,GAAG,CAAC,WAAW,GAAG,aAAa,GAAG,CAAC,WAAY,EAAE,CAAC;IACpD,CAAC;IAED,sCAAsC;IACtC,cAAc;IACd,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAY,CAAC,WAAW,EAAE,CAAC;AACnD,CAAC;AAED,SAAgB,gBAAgB,CAC9B,GAAsB,EACtB,KAAqB;IAErB,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY;QACrC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,gDAA2B,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACvD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAC1B,CAAC,IAAI,EAAE,EAAE,CACP,IAAI,CAAC,WAAW,KAAK,GAAG,CAAC,WAAW;QACpC,IAAI,CAAC,WAAW,KAAK,cAAc,CACtC,CAAC;IACF,IAAI,SAAS,EAAE,CAAC;QACd,OAAO,SAAS,CAAC,OAAO,CAAC;IAC3B,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,0BAA0B,CAC9C,QAAgB;IAEhB,MAAM,KAAK,GAAmB,EAAE,CAAC;IACjC,MAAM,YAAY,GAAG,MAAM,IAAA,mBAAY,EAAC,QAAQ,CAAC,CAAC;IAClD,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,eAAe,GAAG,MAAM,IAAA,mBAAY,EAAC,YAAY,CAAC,CAAC;QACzD,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,cAAc,GAAG,IAAA,mBAAY,EAAC,eAAe,CAAC,CAAC;YACrD,IAAI,YAAE,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;gBACrC,KAAK,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;YAChC,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport { TerraformProviderDatasource } from '../../datasource/terraform-provider';\nimport type { PackageDependency } from '../types';\nimport type { ProviderLock } from './lockfile/types';\nimport { extractLocks, findLockFile, readLockFile } from './lockfile/util';\n\nexport function checkFileContainsDependency(\n  content: string,\n  checkList: string[],\n): boolean {\n  return checkList.some((check) => content.includes(check));\n}\n\nconst pathStringRegex = regEx(/(.|..)?(\\/[^/])+/);\nexport function checkIfStringIsPath(path: string): boolean {\n  const match = pathStringRegex.exec(path);\n  return !!match;\n}\n\nexport function massageProviderLookupName(dep: PackageDependency): void {\n  dep.packageName ??= dep.depName;\n\n  // TODO #22198\n  if (!dep.packageName!.includes('/')) {\n    dep.packageName = `hashicorp/${dep.packageName!}`;\n  }\n\n  // handle cases like `Telmate/proxmox`\n  // TODO #22198\n  dep.packageName = dep.packageName!.toLowerCase();\n}\n\nexport function getLockedVersion(\n  dep: PackageDependency,\n  locks: ProviderLock[],\n): string | undefined {\n  const depRegistryUrl = dep.registryUrls\n    ? dep.registryUrls[0]\n    : TerraformProviderDatasource.defaultRegistryUrls[0];\n  const foundLock = locks.find(\n    (lock) =>\n      lock.packageName === dep.packageName &&\n      lock.registryUrl === depRegistryUrl,\n  );\n  if (foundLock) {\n    return foundLock.version;\n  }\n  return undefined;\n}\n\nexport async function extractLocksForPackageFile(\n  fileName: string,\n): Promise<ProviderLock[]> {\n  const locks: ProviderLock[] = [];\n  const lockFilePath = await findLockFile(fileName);\n  if (lockFilePath) {\n    const lockFileContent = await readLockFile(lockFilePath);\n    if (lockFileContent) {\n      const extractedLocks = extractLocks(lockFileContent);\n      if (is.nonEmptyArray(extractedLocks)) {\n        locks.push(...extractedLocks);\n      }\n    }\n  }\n  return locks;\n}\n"]}