{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/terraform/lockfile/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport * as p from '../../../../util/promises';\nimport { escapeRegExp, regEx } from '../../../../util/regex';\nimport type { GetPkgReleasesConfig } from '../../../datasource';\nimport { getPkgReleases } from '../../../datasource';\nimport { get as getVersioning } from '../../../versioning';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsResult,\n  Upgrade,\n} from '../../types';\nimport { massageProviderLookupName } from '../util';\nimport { TerraformProviderHash } from './hash';\nimport type { ProviderLock, ProviderLockUpdate } from './types';\nimport {\n  extractLocks,\n  findLockFile,\n  isPinnedVersion,\n  massageNewValue,\n  readLockFile,\n  writeLockUpdates,\n} from './util';\n\nasync function updateAllLocks(\n  locks: ProviderLock[],\n): Promise<ProviderLockUpdate[]> {\n  const updates = await p.map(\n    locks,\n    async (lock) => {\n      const updateConfig: GetPkgReleasesConfig = {\n        versioning: 'hashicorp',\n        datasource: 'terraform-provider',\n        packageName: lock.packageName,\n      };\n      const { releases } = (await getPkgReleases(updateConfig)) ?? {};\n      if (!releases) {\n        return null;\n      }\n      const versioning = getVersioning(updateConfig.versioning);\n      const versionsList = releases.map((release) => release.version);\n      const newVersion = versioning.getSatisfyingVersion(\n        versionsList,\n        lock.constraints,\n      );\n\n      // if the new version is the same as the last, signal that no update is needed\n      if (!newVersion || newVersion === lock.version) {\n        return null;\n      }\n      const update: ProviderLockUpdate = {\n        newVersion,\n        newConstraint: lock.constraints,\n        newHashes:\n          (await TerraformProviderHash.createHashes(\n            lock.registryUrl,\n            lock.packageName,\n            newVersion,\n          )) ?? [],\n        ...lock,\n      };\n      return update;\n    },\n    { concurrency: 4 },\n  );\n\n  return updates.filter(is.truthy);\n}\n\nexport function getNewConstraint(\n  dep: Upgrade<Record<string, unknown>>,\n  oldConstraint: string | undefined,\n): string | undefined {\n  const {\n    currentValue,\n    currentVersion,\n    newValue: rawNewValue,\n    newVersion,\n    packageName,\n  } = dep;\n\n  const newValue = massageNewValue(rawNewValue);\n\n  if (oldConstraint && currentValue && newValue && currentValue === newValue) {\n    logger.debug(\n      `Leaving constraints \"${oldConstraint}\" unchanged for \"${packageName}\" as current and new values are the same`,\n    );\n    return oldConstraint;\n  }\n\n  if (\n    oldConstraint &&\n    currentValue &&\n    newValue &&\n    oldConstraint.includes(currentValue)\n  ) {\n    logger.debug(\n      `Updating constraint \"${oldConstraint}\" to replace \"${currentValue}\" with \"${newValue}\" for \"${packageName}\"`,\n    );\n    //remove surplus .0 version\n    return oldConstraint.replace(\n      regEx(`(,\\\\s|^)${escapeRegExp(currentValue)}(\\\\.0)*`),\n      `$1${newValue}`,\n    );\n  }\n\n  if (\n    oldConstraint &&\n    currentVersion &&\n    newVersion &&\n    oldConstraint.includes(currentVersion)\n  ) {\n    logger.debug(\n      `Updating constraint \"${oldConstraint}\" to replace \"${currentVersion}\" with \"${newVersion}\" for \"${packageName}\"`,\n    );\n    return oldConstraint.replace(currentVersion, newVersion);\n  }\n\n  if (isPinnedVersion(newValue)) {\n    logger.debug(`Pinning constraint for \"${packageName}\" to \"${newVersion}\"`);\n    return newVersion;\n  }\n\n  logger.debug(\n    `Could not detect constraint to update for \"${packageName}\" so setting to newValue \"${newValue}\"`,\n  );\n  return newValue;\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`terraform.updateArtifacts(${packageFileName})`);\n\n  const lockFilePath = await findLockFile(packageFileName);\n\n  if (!lockFilePath) {\n    logger.debug('No .terraform.lock.hcl found');\n    return null;\n  }\n\n  try {\n    const lockFileContent = await readLockFile(lockFilePath);\n    if (!lockFileContent) {\n      logger.debug('No .terraform.lock.hcl found');\n      return null;\n    }\n    const locks = extractLocks(lockFileContent);\n    if (!locks) {\n      logger.debug('No Locks in .terraform.lock.hcl found');\n      return null;\n    }\n\n    const updates: ProviderLockUpdate[] = [];\n    if (config.isLockFileMaintenance) {\n      // update all locks in the file during maintenance --> only update version in constraints\n      const maintenanceUpdates = await updateAllLocks(locks);\n      updates.push(...maintenanceUpdates);\n    } else {\n      const providerDeps = updatedDeps.filter((dep) =>\n        // TODO #22198\n        ['provider', 'required_provider'].includes(dep.depType!),\n      );\n      logger.debug(`Found ${providerDeps.length} provider deps`);\n      for (const dep of providerDeps) {\n        massageProviderLookupName(dep);\n        const { registryUrls, newVersion, packageName } = dep;\n\n        const updateLock = locks.find(\n          (value) => value.packageName === packageName,\n        );\n        // istanbul ignore if: needs test\n        if (!updateLock) {\n          logger.debug(`Skipping. No lock found for \"${packageName}\"`);\n          continue;\n        }\n        if (dep.isLockfileUpdate) {\n          const versioning = getVersioning(dep.versioning);\n          const satisfyingVersion = versioning.getSatisfyingVersion(\n            [dep.newVersion!],\n            updateLock.constraints,\n          );\n\n          if (!satisfyingVersion) {\n            logger.debug(\n              `Skipping. Lockfile update with \"${newVersion}\" does not statisfy constraints \"${updateLock.constraints}\" for \"${packageName}\"`,\n            );\n            continue;\n          }\n        }\n\n        // use registryURL defined in the update and fall back to the one defined in the lockfile\n        const registryUrl = registryUrls?.[0] ?? updateLock.registryUrl;\n\n        const newConstraint = getNewConstraint(dep, updateLock.constraints);\n        const update: ProviderLockUpdate = {\n          // TODO #22198\n          newVersion: newVersion!,\n          newConstraint: newConstraint!,\n          newHashes:\n            (await TerraformProviderHash.createHashes(\n              registryUrl,\n              updateLock.packageName,\n              newVersion!,\n            )) ?? /* istanbul ignore next: needs test */ [],\n          ...updateLock,\n        };\n        updates.push(update);\n      }\n    }\n    // if no updates have been found or there are failed hashes abort\n    if (\n      updates.length === 0 ||\n      updates.some((value) => !value.newHashes?.length)\n    ) {\n      logger.debug('No updates found or hash creation failed');\n      return null;\n    }\n    logger.debug(`Writing updates to ${lockFilePath}`);\n    const res = writeLockUpdates(updates, lockFilePath, lockFileContent);\n    return [res];\n  } catch (err) {\n    /* istanbul ignore next */\n    return [\n      {\n        artifactError: {\n          lockFile: lockFilePath,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}