{"version":3,"file":"hash.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/terraform/lockfile/hash.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'node:crypto';\nimport extract from 'extract-zip';\nimport upath from 'upath';\nimport { logger } from '../../../../logger';\nimport {\n  coerceArray,\n  deduplicateArray,\n  isNotNullOrUndefined,\n} from '../../../../util/array';\nimport { cache } from '../../../../util/cache/package/decorator';\nimport * as fs from '../../../../util/fs';\nimport { ensureCacheDir } from '../../../../util/fs';\nimport { Http } from '../../../../util/http';\nimport * as p from '../../../../util/promises';\nimport { TerraformProviderDatasource } from '../../../datasource/terraform-provider';\nimport type { TerraformBuild } from '../../../datasource/terraform-provider/types';\n\nexport class TerraformProviderHash {\n  static http = new Http(TerraformProviderDatasource.id);\n\n  static terraformDatasource = new TerraformProviderDatasource();\n\n  static hashCacheTTL = 10080; // in minutes == 1 week\n\n  private static async hashElementList(\n    basePath: string,\n    fileSystemEntries: string[],\n  ): Promise<string> {\n    const rootHash = crypto.createHash('sha256');\n\n    for (const entryPath of fileSystemEntries) {\n      const absolutePath = upath.resolve(basePath, entryPath);\n      if (!(await fs.cachePathIsFile(absolutePath))) {\n        continue;\n      }\n\n      // build for every file a line looking like \"aaaaaaaaaaaaaaa  file.txt\\n\"\n\n      // get hash of specific file\n      const hash = crypto.createHash('sha256');\n      const fileBuffer = await fs.readCacheFile(absolutePath);\n      hash.update(fileBuffer);\n\n      const line = `${hash.digest('hex')}  ${upath.normalize(entryPath)}\\n`;\n      rootHash.update(line);\n    }\n\n    return rootHash.digest('base64');\n  }\n\n  /**\n   * This is a reimplementation of the Go H1 hash algorithm found at https://github.com/golang/mod/blob/master/sumdb/dirhash/hash.go\n   * The package provides two function HashDir and HashZip where the first is for hashing the contents of a directory\n   * and the second for doing the same but implicitly extracting the contents first.\n   *\n   * The problem starts with that there is a bug which leads to the fact that HashDir and HashZip do not return the same\n   * hash if there are folders inside the content which should be hashed.\n   *\n   * In a folder structure such as\n   * .\n   * ├── Readme.md\n   * └── readme-assets/\n   *     └── image.jpg\n   *\n   * HashDir will create a list of following entries which in turn will hash again\n   * aaaaaaaaaaa  Readme.md\\n\n   * ccccccccccc  readme-assets/image.jpg\\n\n   *\n   * HashZip in contrast will not filter out the directory itself but rather includes it in the hash list\n   * aaaaaaaaaaa  Readme.md\\n\n   * bbbbbbbbbbb  readme-assets/\\n\n   * ccccccccccc  readme-assets/image.jpg\\n\n   *\n   * As the resulting string is used to generate the final hash it will differ based on which function has been used.\n   * The issue is tracked here: https://github.com/golang/go/issues/53448\n   *\n   * This implementation follows the intended implementation and filters out folder entries.\n   * Terraform seems NOT to use HashZip for provider validation, but rather extracts it and then do the hash calculation\n   * even as both are set up in their code base.\n   * https://github.com/hashicorp/terraform/blob/3fdfbd69448b14a4982b3c62a5d36835956fcbaa/internal/getproviders/hash.go#L283-L305\n   *\n   * @param zipFilePath path to the zip file\n   * @param extractPath path to where to temporarily extract the data\n   */\n  static async hashOfZipContent(\n    zipFilePath: string,\n    extractPath: string,\n  ): Promise<string> {\n    await extract(zipFilePath, {\n      dir: extractPath,\n    });\n    const hash = await this.hashOfDir(extractPath);\n    // delete extracted files\n    await fs.rmCache(extractPath);\n\n    return hash;\n  }\n\n  static async hashOfDir(dirPath: string): Promise<string> {\n    const elements = await fs.listCacheDir(dirPath, { recursive: true });\n\n    const sortedFileSystemObjects = elements.sort();\n    return await TerraformProviderHash.hashElementList(\n      dirPath,\n      sortedFileSystemObjects,\n    );\n  }\n\n  @cache({\n    namespace: `terraform-provider-hash`,\n    key: (build: TerraformBuild) => `calculateSingleHash:${build.url}`,\n    ttlMinutes: TerraformProviderHash.hashCacheTTL,\n  })\n  static async calculateSingleHash(\n    build: TerraformBuild,\n    cacheDir: string,\n  ): Promise<string> {\n    const downloadFileName = upath.join(cacheDir, build.filename);\n    const extractPath = upath.join(cacheDir, 'extract', build.filename);\n    logger.trace(\n      `Downloading archive and generating hash for ${build.name}-${build.version}...`,\n    );\n    const startTime = Date.now();\n    const readStream = TerraformProviderHash.http.stream(build.url);\n    const writeStream = fs.createCacheWriteStream(downloadFileName);\n\n    try {\n      await fs.pipeline(readStream, writeStream);\n\n      const hash = await this.hashOfZipContent(downloadFileName, extractPath);\n      logger.debug(\n        `Hash generation for ${build.url} took ${Date.now() - startTime}ms for ${build.name}-${build.version}`,\n      );\n      return hash;\n    } finally {\n      // delete zip file\n      await fs.rmCache(downloadFileName);\n    }\n  }\n\n  static async calculateHashScheme1Hashes(\n    builds: TerraformBuild[],\n  ): Promise<string[]> {\n    logger.debug(`Calculating hashes for ${builds.length} builds`);\n    const cacheDir = await ensureCacheDir('./others/terraform');\n\n    // for each build download ZIP, extract content and generate hash for all containing files\n    return p.map(builds, (build) => this.calculateSingleHash(build, cacheDir), {\n      concurrency: 4,\n    });\n  }\n\n  static async createHashes(\n    registryURL: string,\n    repository: string,\n    version: string,\n  ): Promise<string[] | null> {\n    logger.debug(\n      `Creating hashes for ${repository}@${version} (${registryURL})`,\n    );\n    const builds = await TerraformProviderHash.terraformDatasource.getBuilds(\n      registryURL,\n      repository,\n      version,\n    );\n    if (!builds) {\n      return null;\n    }\n\n    // check if the publisher uses one shasum file for all builds or separate ones\n    // we deduplicate to reduce the number of API calls\n    const shaUrls = deduplicateArray(\n      builds.map((build) => build.shasums_url).filter(isNotNullOrUndefined),\n    );\n\n    logger.debug(\n      `Getting zip hashes for ${shaUrls.length} shasum URL(s) for ${repository}@${version}`,\n    );\n\n    const zhHashes: string[] = [];\n    for (const shaUrl of shaUrls) {\n      const hashes =\n        await TerraformProviderHash.terraformDatasource.getZipHashes(shaUrl);\n\n      zhHashes.push(...coerceArray(hashes));\n    }\n\n    logger.debug(\n      `Got ${zhHashes.length} zip hashes for ${repository}@${version}`,\n    );\n\n    const h1Hashes =\n      await TerraformProviderHash.calculateHashScheme1Hashes(builds);\n\n    const hashes = [];\n    hashes.push(...h1Hashes.map((hash) => `h1:${hash}`));\n    hashes.push(...zhHashes.map((hash) => `zh:${hash}`));\n\n    // sorting the hash alphabetically as terraform does this as well\n    return hashes.sort();\n  }\n}\n"]}