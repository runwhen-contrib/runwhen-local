{"version":3,"file":"required-provider.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/terraform/extractors/terraform-block/required-provider.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAElC,qCAAwD;AAOxD,MAAa,yBAA0B,SAAQ,iCAA0B;IACvE,YAAY;QACV,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,CACL,OAAgC,EAChC,KAAqB;QAErB,MAAM,eAAe,GAAG,OAAO,EAAE,SAAS,CAAC;QAC3C,IAAI,YAAE,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC;YACxC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,YAAY,GAAwB,EAAE,CAAC;QAC7C,KAAK,MAAM,cAAc,IAAI,eAAe,EAAE,CAAC;YAC7C,MAAM,iBAAiB,GAAG,cAAc,CAAC,kBAAkB,CAAC;YAC5D,IAAI,YAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC1C,SAAS;YACX,CAAC;YAED,MAAM,OAAO,GACX,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5C,KAAK,MAAM,CAAC,oBAAoB,EAAE,KAAK,CAAC,IAAI,OAAO,EAAE,CAAC;gBACpD,oCAAoC;gBACpC,IAAI,GAAsB,CAAC;gBAC3B,IAAI,YAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,GAAG,GAAG;wBACJ,YAAY,EAAE,KAAK;wBACnB,WAAW,EAAE;4BACX,UAAU,EAAE,oBAAoB;yBACjC;qBACF,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,gEAAgE;oBAChE,GAAG,GAAG;wBACJ,YAAY,EAAE,KAAK,CAAC,OAAO;wBAC3B,WAAW,EAAE;4BACX,UAAU,EAAE,oBAAoB;4BAChC,MAAM,EAAE,KAAK,CAAC,MAAM;yBACrB;qBACF,CAAC;gBACJ,CAAC;gBACD,YAAY,CAAC,IAAI,CACf,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAC/D,CAAC;YACJ,CAAC;QACH,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AAlDD,8DAkDC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageDependency } from '../../../types';\nimport { TerraformProviderExtractor } from '../../base';\nimport type {\n  TerraformDefinitionFile,\n  TerraformRequiredProvider,\n} from '../../hcl/types';\nimport type { ProviderLock } from '../../lockfile/types';\n\nexport class RequiredProviderExtractor extends TerraformProviderExtractor {\n  getCheckList(): string[] {\n    return ['required_providers'];\n  }\n\n  extract(\n    hclRoot: TerraformDefinitionFile,\n    locks: ProviderLock[],\n  ): PackageDependency[] {\n    const terraformBlocks = hclRoot?.terraform;\n    if (is.nullOrUndefined(terraformBlocks)) {\n      return [];\n    }\n\n    const dependencies: PackageDependency[] = [];\n    for (const terraformBlock of terraformBlocks) {\n      const requiredProviders = terraformBlock.required_providers;\n      if (is.nullOrUndefined(requiredProviders)) {\n        continue;\n      }\n\n      const entries: [string, TerraformRequiredProvider | string][] =\n        requiredProviders.flatMap(Object.entries);\n      for (const [requiredProviderName, value] of entries) {\n        // name = version declaration method\n        let dep: PackageDependency;\n        if (is.string(value)) {\n          dep = {\n            currentValue: value,\n            managerData: {\n              moduleName: requiredProviderName,\n            },\n          };\n        } else {\n          // block declaration aws = { source = 'aws', version = '2.0.0' }\n          dep = {\n            currentValue: value.version,\n            managerData: {\n              moduleName: requiredProviderName,\n              source: value.source,\n            },\n          };\n        }\n        dependencies.push(\n          this.analyzeTerraformProvider(dep, locks, 'required_provider'),\n        );\n      }\n    }\n    return dependencies;\n  }\n}\n"]}