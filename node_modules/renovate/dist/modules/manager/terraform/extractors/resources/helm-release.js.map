{"version":3,"file":"helm-release.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/terraform/extractors/resources/helm-release.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,kDAA+C;AAC/C,iDAAuD;AACvD,sDAA6D;AAC7D,yDAAqD;AACrD,6CAAqE;AAErE,qCAAiD;AAGjD,qCAAiD;AAEjD,MAAa,oBAAqB,SAAQ,0BAAmB;IAC3D,YAAY;QACV,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC5B,CAAC;IAEQ,OAAO,CACd,MAA+B,EAC/B,MAAsB,EACtB,MAAqB;QAErB,MAAM,YAAY,GAAG,EAAE,CAAC;QAExB,MAAM,YAAY,GAAG,MAAM,EAAE,QAAQ,EAAE,YAAY,CAAC;QACpD,IAAI,YAAE,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC;YACrC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qBAAqB;QACrB,IAAI,CAAC,YAAE,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,CAAC;YAClC,eAAM,CAAC,KAAK,CACV,EAAE,YAAY,EAAE,EAChB,4CAA4C,CAC7C,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7D,MAAM,GAAG,GAAsB;gBAC7B,YAAY,EAAE,WAAW,CAAC,OAAO;gBACjC,OAAO,EAAE,cAAc;gBACvB,OAAO,EAAE,WAAW,CAAC,KAAK;gBAC1B,UAAU,EAAE,qBAAc,CAAC,EAAE;aAC9B,CAAC;YAEF,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEvB,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC1C,GAAG,CAAC,UAAU,GAAG,cAAc,CAAC;YAClC,CAAC;iBAAM,IAAI,IAAA,mBAAa,EAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5C,qEAAqE;gBACrE,GAAG,CAAC,OAAO,GAAG,IAAA,qBAAe,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACjD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;YAC5C,CAAC;iBAAM,IAAI,IAAA,0BAAmB,EAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClD,GAAG,CAAC,UAAU,GAAG,aAAa,CAAC;YACjC,CAAC;iBAAM,IAAI,YAAE,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;gBACrD,IAAI,IAAA,mBAAa,EAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC1C,qEAAqE;oBACrE,IAAI,CAAC,UAAU,CACb,IAAA,kBAAY,EACV,IAAA,qBAAe,EAAC,WAAW,CAAC,UAAU,CAAC,EACvC,WAAW,CAAC,KAAK,CAClB,EACD,MAAM,EACN,GAAG,CACJ,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,GAAG,CAAC,YAAY,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,UAAU,CAChB,OAAe,EACf,MAAqB,EACrB,GAAsB;QAEtB,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,IAAA,gBAAM,EACxC,OAAO,EACP,KAAK,EACL,MAAM,CAAC,eAAe,CACvB,CAAC;QACF,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;QAC9B,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;CACF;AA7ED,oDA6EC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport { joinUrlParts } from '../../../../../util/url';\nimport { HelmDatasource } from '../../../../datasource/helm';\nimport { getDep } from '../../../dockerfile/extract';\nimport { isOCIRegistry, removeOCIPrefix } from '../../../helmv3/oci';\nimport type { ExtractConfig, PackageDependency } from '../../../types';\nimport { DependencyExtractor } from '../../base';\nimport type { TerraformDefinitionFile } from '../../hcl/types';\nimport type { ProviderLock } from '../../lockfile/types';\nimport { checkIfStringIsPath } from '../../util';\n\nexport class HelmReleaseExtractor extends DependencyExtractor {\n  getCheckList(): string[] {\n    return [`\"helm_release\"`];\n  }\n\n  override extract(\n    hclMap: TerraformDefinitionFile,\n    _locks: ProviderLock[],\n    config: ExtractConfig,\n  ): PackageDependency[] {\n    const dependencies = [];\n\n    const helmReleases = hclMap?.resource?.helm_release;\n    if (is.nullOrUndefined(helmReleases)) {\n      return [];\n    }\n\n    // istanbul ignore if\n    if (!is.plainObject(helmReleases)) {\n      logger.debug(\n        { helmReleases },\n        'Terraform: unexpected `helmReleases` value',\n      );\n      return [];\n    }\n\n    for (const helmRelease of Object.values(helmReleases).flat()) {\n      const dep: PackageDependency = {\n        currentValue: helmRelease.version,\n        depType: 'helm_release',\n        depName: helmRelease.chart,\n        datasource: HelmDatasource.id,\n      };\n\n      dependencies.push(dep);\n\n      if (!is.nonEmptyString(helmRelease.chart)) {\n        dep.skipReason = 'invalid-name';\n      } else if (isOCIRegistry(helmRelease.chart)) {\n        // For oci charts, we remove the oci:// and use the docker datasource\n        dep.depName = removeOCIPrefix(helmRelease.chart);\n        this.processOCI(dep.depName, config, dep);\n      } else if (checkIfStringIsPath(helmRelease.chart)) {\n        dep.skipReason = 'local-chart';\n      } else if (is.nonEmptyString(helmRelease.repository)) {\n        if (isOCIRegistry(helmRelease.repository)) {\n          // For oci charts, we remove the oci:// and use the docker datasource\n          this.processOCI(\n            joinUrlParts(\n              removeOCIPrefix(helmRelease.repository),\n              helmRelease.chart,\n            ),\n            config,\n            dep,\n          );\n        } else {\n          dep.registryUrls = [helmRelease.repository];\n        }\n      }\n    }\n\n    return dependencies;\n  }\n\n  private processOCI(\n    depName: string,\n    config: ExtractConfig,\n    dep: PackageDependency,\n  ): void {\n    const { packageName, datasource } = getDep(\n      depName,\n      false,\n      config.registryAliases,\n    );\n    dep.packageName = packageName;\n    dep.datasource = datasource;\n  }\n}\n"]}