{"version":3,"file":"providers.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/terraform/extractors/others/providers.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,kDAA+C;AAE/C,qCAAwD;AAIxD,MAAa,kBAAmB,SAAQ,iCAA0B;IAChE,YAAY;QACV,OAAO,CAAC,UAAU,CAAC,CAAC;IACtB,CAAC;IAED,OAAO,CACL,OAAgC,EAChC,KAAqB;QAErB,MAAM,aAAa,GAAG,OAAO,EAAE,QAAQ,CAAC;QACxC,IAAI,YAAE,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC;YACtC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qBAAqB;QACrB,IAAI,CAAC,YAAE,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,CAAC;YACnC,eAAM,CAAC,KAAK,CACV,EAAE,aAAa,EAAE,EACjB,6CAA6C,CAC9C,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,KAAK,MAAM,gBAAgB,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC1D,KAAK,MAAM,mBAAmB,IAAI,aAAa,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBAClE,MAAM,GAAG,GAAG,IAAI,CAAC,wBAAwB,CACvC;oBACE,YAAY,EAAE,mBAAmB,CAAC,OAAO;oBACzC,WAAW,EAAE;wBACX,UAAU,EAAE,gBAAgB;qBAC7B;iBACF,EACD,KAAK,EACL,UAAU,CACX,CAAC;gBACF,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AAzCD,gDAyCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport type { PackageDependency } from '../../../types';\nimport { TerraformProviderExtractor } from '../../base';\nimport type { TerraformDefinitionFile } from '../../hcl/types';\nimport type { ProviderLock } from '../../lockfile/types';\n\nexport class ProvidersExtractor extends TerraformProviderExtractor {\n  getCheckList(): string[] {\n    return ['provider'];\n  }\n\n  extract(\n    hclRoot: TerraformDefinitionFile,\n    locks: ProviderLock[],\n  ): PackageDependency[] {\n    const providerTypes = hclRoot?.provider;\n    if (is.nullOrUndefined(providerTypes)) {\n      return [];\n    }\n\n    // istanbul ignore if\n    if (!is.plainObject(providerTypes)) {\n      logger.debug(\n        { providerTypes },\n        'Terraform: unexpected `providerTypes` value',\n      );\n      return [];\n    }\n\n    const dependencies = [];\n    for (const providerTypeName of Object.keys(providerTypes)) {\n      for (const providerTypeElement of providerTypes[providerTypeName]) {\n        const dep = this.analyzeTerraformProvider(\n          {\n            currentValue: providerTypeElement.version,\n            managerData: {\n              moduleName: providerTypeName,\n            },\n          },\n          locks,\n          'provider',\n        );\n        dependencies.push(dep);\n      }\n    }\n    return dependencies;\n  }\n}\n"]}