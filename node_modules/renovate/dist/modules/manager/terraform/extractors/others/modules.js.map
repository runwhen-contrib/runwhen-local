{"version":3,"file":"modules.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/terraform/extractors/others/modules.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,kDAA+C;AAC/C,qDAAkD;AAClD,0EAAgF;AAChF,8DAAoE;AACpE,oEAA0E;AAC1E,8EAAoF;AAEpF,qCAAiD;AAGpC,QAAA,mBAAmB,GAAG,IAAA,aAAK,EACtC,iGAAiG,CAClG,CAAC;AACW,QAAA,sBAAsB,GAAG,IAAA,aAAK,EACzC,sLAAsL,CACvL,CAAC;AACW,QAAA,oBAAoB,GAAG,IAAA,aAAK,EACvC,mIAAmI,CACpI,CAAC;AACW,QAAA,2BAA2B,GAAG,IAAA,aAAK,EAC9C,8KAA8K,CAC/K,CAAC;AACW,QAAA,kBAAkB,GAAG,IAAA,aAAK,EACrC,sDAAsD,CACvD,CAAC;AAEF,MAAa,eAAgB,SAAQ,0BAAmB;IACtD,YAAY;QACV,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpB,CAAC;IAED,OAAO,CAAC,OAAgC;QACtC,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAC/B,IAAI,YAAE,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;YAChC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qBAAqB;QACrB,IAAI,CAAC,YAAE,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;YAC7B,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,uCAAuC,CAAC,CAAC;YACnE,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,KAAK,MAAM,CAAC,OAAO,EAAE,cAAc,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,KAAK,MAAM,aAAa,IAAI,cAAc,EAAE,CAAC;gBAC3C,MAAM,GAAG,GAAG;oBACV,OAAO;oBACP,OAAO,EAAE,QAAQ;oBACjB,YAAY,EAAE,aAAa,CAAC,OAAO;oBACnC,WAAW,EAAE;wBACX,MAAM,EAAE,aAAa,CAAC,MAAM;qBAC7B;iBACF,CAAC;gBACF,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,sBAAsB,CAAC,GAAsB;QACnD,cAAc;QACd,MAAM,MAAM,GAAG,GAAG,CAAC,WAAY,CAAC,MAAgB,CAAC;QACjD,MAAM,cAAc,GAAG,2BAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,iBAAiB,GAAG,8BAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,4BAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,sBAAsB,GAAG,mCAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAExE,IAAI,cAAc,EAAE,MAAM,EAAE,CAAC;YAC3B,GAAG,CAAC,WAAW,GAAG,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CACrD,IAAA,aAAK,EAAC,QAAQ,CAAC,EACf,EAAE,CACH,CAAC;YACF,GAAG,CAAC,OAAO,GAAG,aAAa,GAAG,GAAG,CAAC,WAAW,CAAC;YAC9C,GAAG,CAAC,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC;YAC7C,GAAG,CAAC,UAAU,GAAG,kCAAoB,CAAC,EAAE,CAAC;QAC3C,CAAC;aAAM,IAAI,iBAAiB,EAAE,MAAM,EAAE,CAAC;YACrC,GAAG,CAAC,OAAO;gBACT,iBAAiB,CAAC,MAAM,CAAC,SAAS;oBAClC,GAAG;oBACH,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC;YACnC,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC;YAC9B,GAAG,CAAC,YAAY,GAAG,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC;YAChD,GAAG,CAAC,UAAU,GAAG,wCAAuB,CAAC,EAAE,CAAC;QAC9C,CAAC;aAAM,IAAI,sBAAsB,EAAE,MAAM,EAAE,CAAC;YAC1C,GAAG,CAAC,OAAO,GAAG,GAAG,sBAAsB,CAAC,MAAM,CAAC,YAAY,IAAI,sBAAsB,CAAC,MAAM,CAAC,OAAO,IAAI,sBAAsB,CAAC,MAAM,CAAC,UAAU,GAAG,sBAAsB,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC9L,GAAG,CAAC,WAAW,GAAG,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC;YACpD,GAAG,CAAC,YAAY,GAAG,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC;YACrD,GAAG,CAAC,UAAU,GAAG,4BAAiB,CAAC,EAAE,CAAC;QACxC,CAAC;aAAM,IAAI,eAAe,EAAE,MAAM,EAAE,CAAC;YACnC,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC/C,eAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBACvD,GAAG,CAAC,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM,cAAc,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9D,GAAG,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;YACjE,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC9D,GAAG,CAAC,WAAW,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC;YAC/C,CAAC;YACD,GAAG,CAAC,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC;YAC9C,GAAG,CAAC,UAAU,GAAG,4BAAiB,CAAC,EAAE,CAAC;QACxC,CAAC;aAAM,IAAI,MAAM,EAAE,CAAC;YAClB,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrD,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBACtD,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC;YAC3B,CAAC;iBAAM,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;gBACnC,MAAM,aAAa,GAAG,0BAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACtD,IAAI,aAAa,EAAE,MAAM,EAAE,CAAC;oBAC1B,GAAG,CAAC,YAAY,GAAG,CAAC,WAAW,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAClE,CAAC;gBACD,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACpC,GAAG,CAAC,UAAU,GAAG,4CAAyB,CAAC,EAAE,CAAC;YAChD,CAAC;QACH,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,6BAA6B,CAAC,CAAC;YACrD,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC;QAC/B,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA/FD,0CA+FC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport { regEx } from '../../../../../util/regex';\nimport { BitbucketTagsDatasource } from '../../../../datasource/bitbucket-tags';\nimport { GitTagsDatasource } from '../../../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../../../datasource/github-tags';\nimport { TerraformModuleDatasource } from '../../../../datasource/terraform-module';\nimport type { PackageDependency } from '../../../types';\nimport { DependencyExtractor } from '../../base';\nimport type { TerraformDefinitionFile } from '../../hcl/types';\n\nexport const githubRefMatchRegex = regEx(\n  /github\\.com([/:])(?<project>[^/]+\\/[a-z0-9-_.]+).*\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/i,\n);\nexport const bitbucketRefMatchRegex = regEx(\n  /(?:git::)?(?<url>(?:http|https|ssh)?(?::\\/\\/)?(?:.*@)?(?<path>bitbucket\\.org\\/(?<workspace>.*)\\/(?<project>.*)\\.git\\/?(?<subfolder>.*)))\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/,\n);\nexport const gitTagsRefMatchRegex = regEx(\n  /(?:git::)?(?<url>(?:(?:http|https|ssh):\\/\\/)?(?:.*@)?(?<path>.*\\/(?<project>.*\\/.*)))\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/,\n);\nexport const azureDevOpsSshRefMatchRegex = regEx(\n  /(?:git::)?(?<url>git@ssh\\.dev\\.azure\\.com:v3\\/(?<organization>[^/]*)\\/(?<project>[^/]*)\\/(?<repository>[^/]*))(?<modulepath>.*)?\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/,\n);\nexport const hostnameMatchRegex = regEx(\n  /^(?<hostname>[a-zA-Z\\d]([a-zA-Z\\d-]*\\.)+[a-zA-Z\\d]+)/,\n);\n\nexport class ModuleExtractor extends DependencyExtractor {\n  getCheckList(): string[] {\n    return ['module'];\n  }\n\n  extract(hclRoot: TerraformDefinitionFile): PackageDependency[] {\n    const modules = hclRoot.module;\n    if (is.nullOrUndefined(modules)) {\n      return [];\n    }\n\n    // istanbul ignore if\n    if (!is.plainObject(modules)) {\n      logger.debug({ modules }, 'Terraform: unexpected `modules` value');\n      return [];\n    }\n\n    const dependencies = [];\n    for (const [depName, moduleElements] of Object.entries(modules)) {\n      for (const moduleElement of moduleElements) {\n        const dep = {\n          depName,\n          depType: 'module',\n          currentValue: moduleElement.version,\n          managerData: {\n            source: moduleElement.source,\n          },\n        };\n        dependencies.push(this.analyseTerraformModule(dep));\n      }\n    }\n\n    return dependencies;\n  }\n\n  private analyseTerraformModule(dep: PackageDependency): PackageDependency {\n    // TODO #22198\n    const source = dep.managerData!.source as string;\n    const githubRefMatch = githubRefMatchRegex.exec(source);\n    const bitbucketRefMatch = bitbucketRefMatchRegex.exec(source);\n    const gitTagsRefMatch = gitTagsRefMatchRegex.exec(source);\n    const azureDevOpsSshRefMatch = azureDevOpsSshRefMatchRegex.exec(source);\n\n    if (githubRefMatch?.groups) {\n      dep.packageName = githubRefMatch.groups.project.replace(\n        regEx(/\\.git$/),\n        '',\n      );\n      dep.depName = 'github.com/' + dep.packageName;\n      dep.currentValue = githubRefMatch.groups.tag;\n      dep.datasource = GithubTagsDatasource.id;\n    } else if (bitbucketRefMatch?.groups) {\n      dep.depName =\n        bitbucketRefMatch.groups.workspace +\n        '/' +\n        bitbucketRefMatch.groups.project;\n      dep.packageName = dep.depName;\n      dep.currentValue = bitbucketRefMatch.groups.tag;\n      dep.datasource = BitbucketTagsDatasource.id;\n    } else if (azureDevOpsSshRefMatch?.groups) {\n      dep.depName = `${azureDevOpsSshRefMatch.groups.organization}/${azureDevOpsSshRefMatch.groups.project}/${azureDevOpsSshRefMatch.groups.repository}${azureDevOpsSshRefMatch.groups.modulepath}`;\n      dep.packageName = azureDevOpsSshRefMatch.groups.url;\n      dep.currentValue = azureDevOpsSshRefMatch.groups.tag;\n      dep.datasource = GitTagsDatasource.id;\n    } else if (gitTagsRefMatch?.groups) {\n      if (gitTagsRefMatch.groups.path.includes('//')) {\n        logger.debug('Terraform module contains subdirectory');\n        dep.depName = gitTagsRefMatch.groups.path.split('//')[0];\n        const tempLookupName = gitTagsRefMatch.groups.url.split('//');\n        dep.packageName = tempLookupName[0] + '//' + tempLookupName[1];\n      } else {\n        dep.depName = gitTagsRefMatch.groups.path.replace('.git', '');\n        dep.packageName = gitTagsRefMatch.groups.url;\n      }\n      dep.currentValue = gitTagsRefMatch.groups.tag;\n      dep.datasource = GitTagsDatasource.id;\n    } else if (source) {\n      const moduleParts = source.split('//')[0].split('/');\n      if (moduleParts[0] === '.' || moduleParts[0] === '..') {\n        dep.skipReason = 'local';\n      } else if (moduleParts.length >= 3) {\n        const hostnameMatch = hostnameMatchRegex.exec(source);\n        if (hostnameMatch?.groups) {\n          dep.registryUrls = [`https://${hostnameMatch.groups.hostname}`];\n        }\n        dep.depName = moduleParts.join('/');\n        dep.datasource = TerraformModuleDatasource.id;\n      }\n    } else {\n      logger.debug({ dep }, 'terraform dep has no source');\n      dep.skipReason = 'no-source';\n    }\n\n    return dep;\n  }\n}\n"]}