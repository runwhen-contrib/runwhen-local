{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/base.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,+CAA4C;AAC5C,4EAAkF;AAIlF,iCAAqE;AAErE,MAAsB,mBAAmB;CAiBxC;AAjBD,kDAiBC;AAED,MAAsB,0BAA2B,SAAQ,mBAAmB;IAC1E,qBAAqB,GAAG,IAAA,aAAK,EAC3B,mGAAmG,CACpG,CAAC;IAEQ,wBAAwB,CAChC,GAAsB,EACtB,KAAqB,EACrB,OAAe;QAEf,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;QACtB,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC;QAC1C,GAAG,CAAC,UAAU,GAAG,gDAA2B,CAAC,EAAE,CAAC;QAEhD,IAAI,YAAE,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC;YAC/C,cAAc;YACd,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACvE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC;gBACpB,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;gBACnC,OAAO,GAAG,CAAC;YACb,CAAC;YAED,2DAA2D;YAC3D,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,KAAK,qBAAqB,EAAE,CAAC;gBACtD,GAAG,CAAC,YAAY,GAAG,CAAC,gCAAgC,CAAC,CAAC;YACxD,CAAC;iBAAM,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAClC,GAAG,CAAC,YAAY,GAAG,CAAC,WAAW,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACzD,GAAG,CAAC,WAAW,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACvE,CAAC;iBAAM,CAAC;gBACN,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC;YAC5C,CAAC;QACH,CAAC;QACD,IAAA,gCAAyB,EAAC,GAAG,CAAC,CAAC;QAE/B,GAAG,CAAC,aAAa,GAAG,IAAA,uBAAgB,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAEjD,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACtB,GAAG,CAAC,UAAU,GAAG,qBAAqB,CAAC;QACzC,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA1CD,gEA0CC","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport { TerraformProviderDatasource } from '../../datasource/terraform-provider';\nimport type { ExtractConfig, PackageDependency } from '../types';\nimport type { TerraformDefinitionFile } from './hcl/types';\nimport type { ProviderLock } from './lockfile/types';\nimport { getLockedVersion, massageProviderLookupName } from './util';\n\nexport abstract class DependencyExtractor {\n  /**\n   * Get a list of signals which can be used to scan for potential processable content\n   * @return a list of content signals\n   */\n  abstract getCheckList(): string[];\n\n  /**\n   * Extract dependencies from a HCL object\n   * @param hclRoot HCL parsing artifact.\n   * @param locks currently existing locks\n   */\n  abstract extract(\n    hclRoot: TerraformDefinitionFile,\n    locks: ProviderLock[],\n    config: ExtractConfig,\n  ): PackageDependency[];\n}\n\nexport abstract class TerraformProviderExtractor extends DependencyExtractor {\n  sourceExtractionRegex = regEx(\n    /^(?:(?<hostname>(?:[a-zA-Z0-9-_]+\\.+)+[a-zA-Z0-9-_]+)\\/)?(?:(?<namespace>[^/]+)\\/)?(?<type>[^/]+)/,\n  );\n\n  protected analyzeTerraformProvider(\n    dep: PackageDependency,\n    locks: ProviderLock[],\n    depType: string,\n  ): PackageDependency {\n    dep.depType = depType;\n    dep.depName = dep.managerData?.moduleName;\n    dep.datasource = TerraformProviderDatasource.id;\n\n    if (is.nonEmptyString(dep.managerData?.source)) {\n      // TODO #22198\n      const source = this.sourceExtractionRegex.exec(dep.managerData.source);\n      if (!source?.groups) {\n        dep.skipReason = 'unsupported-url';\n        return dep;\n      }\n\n      // buildin providers https://github.com/terraform-providers\n      if (source.groups.namespace === 'terraform-providers') {\n        dep.registryUrls = [`https://releases.hashicorp.com`];\n      } else if (source.groups.hostname) {\n        dep.registryUrls = [`https://${source.groups.hostname}`];\n        dep.packageName = `${source.groups.namespace}/${source.groups.type}`;\n      } else {\n        dep.packageName = dep.managerData?.source;\n      }\n    }\n    massageProviderLookupName(dep);\n\n    dep.lockedVersion = getLockedVersion(dep, locks);\n\n    if (!dep.currentValue) {\n      dep.skipReason = 'unspecified-version';\n    }\n\n    return dep;\n  }\n}\n"]}