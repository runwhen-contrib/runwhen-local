{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terraform/extract.ts"],"names":[],"mappings":";;AAeA,gDA4CC;;AA3DD,kEAAkC;AAClC,4CAAyC;AAOzC,6CAAkD;AAClD,mDAA6B;AAC7B,iCAGgB;AAET,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB,EACnB,MAAqB;IAErB,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,gCAAgC,WAAW,GAAG,CAAC,CAAC;IAE1E,MAAM,gBAAgB,GAA0B,EAAE,CAAC;IACnD,KAAK,MAAM,SAAS,IAAI,+BAAkB,EAAE,CAAC;QAC3C,IAAI,IAAA,kCAA2B,EAAC,OAAO,EAAE,SAAS,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC;YACnE,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAC7B,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,4DAA4D,CAC7D,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,mDAAmD,gBAAgB;SAChE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;SACtC,QAAQ,EAAE,GAAG,CACjB,CAAC;IAEF,MAAM,YAAY,GAAwB,EAAE,CAAC;IAC7C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACxD,IAAI,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,0BAA0B,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAG,MAAM,IAAA,iCAA0B,EAAC,WAAW,CAAC,CAAC;IAE5D,KAAK,MAAM,SAAS,IAAI,gBAAgB,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACtD,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,CAAC,WAAW,CAAC,CAAC;IAC1D,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC7D,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport type { DependencyExtractor } from './base';\nimport { resourceExtractors } from './extractors';\nimport * as hcl from './hcl';\nimport {\n  checkFileContainsDependency,\n  extractLocksForPackageFile,\n} from './util';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  logger.trace({ content }, `terraform.extractPackageFile(${packageFile})`);\n\n  const passedExtractors: DependencyExtractor[] = [];\n  for (const extractor of resourceExtractors) {\n    if (checkFileContainsDependency(content, extractor.getCheckList())) {\n      passedExtractors.push(extractor);\n    }\n  }\n\n  if (!passedExtractors.length) {\n    logger.debug(\n      { packageFile },\n      'preflight content check has not found any relevant content',\n    );\n    return null;\n  }\n  logger.trace(\n    { packageFile },\n    `preflight content check passed for extractors: [${passedExtractors\n      .map((value) => value.constructor.name)\n      .toString()}]`,\n  );\n\n  const dependencies: PackageDependency[] = [];\n  const hclMap = await hcl.parseHCL(content, packageFile);\n  if (is.nullOrUndefined(hclMap)) {\n    logger.debug({ packageFile }, 'failed to parse HCL file');\n    return null;\n  }\n\n  const locks = await extractLocksForPackageFile(packageFile);\n\n  for (const extractor of passedExtractors) {\n    const deps = extractor.extract(hclMap, locks, config);\n    dependencies.push(...deps);\n  }\n\n  dependencies.forEach((value) => delete value.managerData);\n  return dependencies.length ? { deps: dependencies } : null;\n}\n"]}