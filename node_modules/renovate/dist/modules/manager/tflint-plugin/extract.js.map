{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/tflint-plugin/extract.ts"],"names":[],"mappings":";;AAeA,gDA0CC;AAzDD,4CAAyC;AACzC,+CAA0D;AAM1D,uCAAgD;AAEhD,iCAAkD;AAElD,MAAM,8BAA8B,GAAG,IAAA,aAAK,EAC1C,6CAA6C,CAC9C,CAAC;AAEF,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,OAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,6BAA6B,WAAW,GAAG,CAAC,CAAC;IACvE,IAAI,CAAC,IAAA,+BAAwB,EAAC,OAAO,CAAC,EAAE,CAAC;QACvC,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,4DAA4D,CAC7D,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,IAAI,GAAwB,EAAE,CAAC;IAEnC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;QAE1C,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE,CAAC;YACpE,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/B,MAAM,YAAY,GAAG,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,YAAY,EAAE,MAAM,EAAE,CAAC;gBACzB,eAAM,CAAC,KAAK,CAAC,iCAAiC,UAAU,EAAE,CAAC,CAAC;gBAC5D,IAAI,MAAM,GAA4B,IAAI,CAAC;gBAC3C,MAAM,GAAG,IAAA,6BAAmB,EAC1B,UAAU,EACV,KAAK,EACL,YAAY,CAAC,MAAM,CAAC,UAAU,CAC/B,CAAC;gBACF,IAAI,MAAM,EAAE,CAAC;oBACX,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;oBAC/B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;oBACxC,MAAM,GAAG,IAAI,CAAC;gBAChB,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;QACxC,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,iCAAiC,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACvC,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { extractTFLintPlugin } from './plugins';\nimport type { ExtractionResult } from './types';\nimport { checkFileContainsPlugins } from './util';\n\nconst dependencyBlockExtractionRegex = regEx(\n  /^\\s*plugin\\s+\"(?<pluginName>[^\"]+)\"\\s+{\\s*$/,\n);\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config: ExtractConfig,\n): PackageFileContent | null {\n  logger.trace({ content }, `tflint.extractPackageFile(${packageFile})`);\n  if (!checkFileContainsPlugins(content)) {\n    logger.debug(\n      { packageFile },\n      'preflight content check has not found any relevant content',\n    );\n    return null;\n  }\n\n  let deps: PackageDependency[] = [];\n\n  try {\n    const lines = content.split(newlineRegex);\n\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n      const line = lines[lineNumber];\n      const tfLintPlugin = dependencyBlockExtractionRegex.exec(line);\n      if (tfLintPlugin?.groups) {\n        logger.trace(`Matched TFLint plugin on line ${lineNumber}`);\n        let result: ExtractionResult | null = null;\n        result = extractTFLintPlugin(\n          lineNumber,\n          lines,\n          tfLintPlugin.groups.pluginName,\n        );\n        if (result) {\n          lineNumber = result.lineNumber;\n          deps = deps.concat(result.dependencies);\n          result = null;\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, packageFile }, 'Error extracting TFLint plugins');\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}