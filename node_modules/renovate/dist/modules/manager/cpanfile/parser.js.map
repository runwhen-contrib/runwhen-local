{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cpanfile/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { query as q } from 'good-enough-parser';\nimport { CpanDatasource } from '../../datasource/cpan';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport * as perlVersioning from '../../versioning/perl';\nimport type { PackageDependency } from '../types';\nimport { cpanfile } from './language';\n\ninterface Ctx {\n  deps: PackageDependency[];\n\n  perlVersion?: string;\n\n  phase?: string;\n  tempPhase?: string;\n\n  depName?: string;\n  currentValue?: string;\n}\n\n// requires perl, '5.36.1';\n// requires 'perl' => 5.036001;\nconst perlVersionMatch = q\n  .sym<Ctx>('requires')\n  .alt(q.sym('perl'), q.str('perl'))\n  .alt(q.op(','), q.op('=>'))\n  .alt(\n    q.num<Ctx>((ctx, { value: perlVersion }) => ({ ...ctx, perlVersion })),\n    q.str<Ctx>((ctx, { value: perlVersion }) => ({ ...ctx, perlVersion })),\n  )\n  .op(';')\n  .handler((ctx) => {\n    if (ctx.perlVersion) {\n      ctx.deps.push({\n        depName: 'perl',\n        packageName: 'Perl/perl5',\n        currentValue: ctx.perlVersion,\n        datasource: GithubTagsDatasource.id,\n        versioning: perlVersioning.id,\n        extractVersion: '^v(?<version>\\\\S+)',\n      });\n    }\n    return ctx;\n  });\n\nconst requirementMatch = q.sym<Ctx>(/^(?:requires|recommends|suggests)$/);\n\nconst phasedRequiresMatch = q.sym<Ctx>(\n  /^(?:configure|build|test|author)_requires$/,\n  (ctx, { value: phase }) => {\n    ctx.tempPhase = phase.replace(/_requires/, '').replace(/author/, 'develop');\n    return ctx;\n  },\n);\n\n// requires 'Foo::Bar';\n//\n// requires 'Foo::Bar', '1.23';\n// recommends 'Foo::Bar', '1.23';\n// suggests 'Foo::Bar', '1.23';\n//\n// configure_requires 'Foo::Bar' => 1.023;\n// build_requires 'Foo::Bar' => 1.023;\n// test_requires 'Foo::Bar' => 1.023;\n// author_requires 'Foo::Bar' => 1.023;\nconst moduleMatch = q\n  .alt(requirementMatch, phasedRequiresMatch)\n  .str((ctx, { value: depName }) => ({ ...ctx, depName }))\n  .opt(\n    q.alt<Ctx>(q.op(','), q.op('=>')).alt(\n      q.num<Ctx>((ctx, { value: currentValue }) => ({ ...ctx, currentValue })),\n      q.str<Ctx>((ctx, { value }) => {\n        const currentValue = value.replace(/^(?:\\s*(?:==|>=|>))?\\s*v?/, '');\n        return { ...ctx, currentValue };\n      }),\n    ),\n  )\n  .op(';')\n  .handler((ctx) => {\n    const { phase, tempPhase, depName, currentValue } = ctx;\n\n    delete ctx.tempPhase;\n    delete ctx.depName;\n    delete ctx.currentValue;\n\n    if (depName) {\n      const dep: PackageDependency = {\n        depName,\n      };\n      if (currentValue) {\n        dep.currentValue = currentValue;\n      } else {\n        dep.skipReason = 'unspecified-version';\n      }\n      if (phase) {\n        dep.depType = phase;\n      } else if (tempPhase) {\n        dep.depType = tempPhase;\n      }\n\n      dep.datasource = CpanDatasource.id;\n      ctx.deps.push(dep);\n    }\n\n    return ctx;\n  });\n\nconst phaseRegex = /^(?:configure|build|test|runtime|develop)/;\n\nconst phaseMatch = q.alt<Ctx>(\n  q.sym(phaseRegex, (ctx, { value: phase }) => ({ ...ctx, phase })),\n  q.str(phaseRegex, (ctx, { value: phase }) => ({ ...ctx, phase })),\n);\n\n// on 'configure' => sub {\n// on build => sub {\n// on 'test' => sub {\n// on runtime => sub {\n// on 'develop' => sub {\nconst onMatch = q\n  .sym<Ctx>('on')\n  .join(phaseMatch)\n  .op('=>')\n  .sym('sub')\n  .tree({\n    type: 'wrapped-tree',\n    maxDepth: 1,\n    search: moduleMatch,\n  })\n  .handler((ctx) => {\n    delete ctx.phase;\n    return ctx;\n  });\n\nconst query = q.tree<Ctx>({\n  type: 'root-tree',\n  maxDepth: 4,\n  search: q.alt<Ctx>(perlVersionMatch, moduleMatch, onMatch),\n});\n\nexport function parse(\n  content: string,\n): Pick<Ctx, 'deps' | 'perlVersion'> | null {\n  return cpanfile.query(content, query, {\n    deps: [],\n  });\n}\n"]}