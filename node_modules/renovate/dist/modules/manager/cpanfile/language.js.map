{"version":3,"file":"language.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cpanfile/language.ts"],"names":[],"mappings":";;;AACA,2DAA0C;AAE1C;;GAEG;AACH,MAAM,QAAQ,GAAG,MAAM,CAAC;AACxB,MAAM,QAAQ,GAAG,OAAO,CAAC;AACzB,MAAM,KAAK,GAAG,OAAO,CAAC;AACtB,MAAM,YAAY,GAAG,OAAO,CAAC;AAC7B,MAAM,QAAQ,GAAG,MAAM,KAAK,YAAY,CAAC;AAEzC,MAAM,UAAU,GAAG,gBAAgB,QAAQ,KAAK,CAAC;AACjD,MAAM,UAAU,GAAG,YAAY,QAAQ,KAAK,CAAC;AAC7C,MAAM,UAAU,GAAG,gBAAgB,QAAQ,KAAK,CAAC;AACjD,MAAM,UAAU,GAAG,MAAM,YAAY,QAAQ,KAAK,gBAAgB,CAAC;AACnE,MAAM,OAAO,GAAG,MAAM,UAAU,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,GAAG,CAAC;AAE9E,MAAM,SAAS,GAAG,MAAM,KAAK,QAAQ,KAAK,KAAK,CAAC;AAChD,MAAM,QAAQ,GAAG,SAAS,SAAS,GAAG,CAAC;AACvC,MAAM,QAAQ,GAAG,eAAe,SAAS,GAAG,CAAC;AAC7C,MAAM,UAAU,GAAG,MAAM,SAAS,IAAI,QAAQ,IAAI,SAAS,MAAM,CAAC;AAClE,MAAM,aAAa,GAAG,SAAS,SAAS,IAAI,UAAU,IAAI,QAAQ,GAAG,CAAC;AACtE,MAAM,WAAW,GAAG,MAAM,UAAU,IAAI,aAAa,GAAG,CAAC;AAEzD,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,MAAM,WAAW,IAAI,OAAO,GAAG,CAAC,CAAC;AAE5D,MAAM,KAAK,GAAkB;IAC3B,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;IACrD,OAAO,EAAE,wBAAwB;IACjC,OAAO;IACP,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;IAC5C,QAAQ,EAAE;QACR,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAClC,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;KACnC;IACD,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;CACpD,CAAC;AAEF,MAAM,MAAM,GAAmB;IAC7B,eAAe,EAAE,KAAK;CACvB,CAAC;AAEW,QAAA,QAAQ,GAAG,yBAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC","sourcesContent":["import type { lexer as l, parser as p } from 'good-enough-parser';\nimport { lang } from 'good-enough-parser';\n\n/**\n * @see https://perldoc.perl.org/perldata#Scalar-value-constructors\n */\nconst bindigit = '[01]';\nconst octdigit = '[0-7]';\nconst digit = '[0-9]';\nconst nonzerodigit = '[1-9]';\nconst hexdigit = `(?:${digit}|[a-fA-F])`;\n\nconst bininteger = `(?:0[bB](?:_?${bindigit})+)`;\nconst octinteger = `(?:0(?:_?${octdigit})+)`;\nconst hexinteger = `(?:0[xX](?:_?${hexdigit})+)`;\nconst decinteger = `(?:${nonzerodigit}(?:_?${digit})*|0+(?:_?0)*)`;\nconst integer = `(?:${decinteger}|${bininteger}|${octinteger}|${hexinteger})`;\n\nconst digitpart = `(?:${digit}(?:_?${digit})*)`;\nconst fraction = `(?:\\\\.${digitpart})`;\nconst exponent = `(?:[eE][-+]?${digitpart})`;\nconst pointfloat = `(?:${digitpart}?${fraction}|${digitpart}\\\\.)`;\nconst exponentfloat = `(?:(?:${digitpart}|${pointfloat})${exponent})`;\nconst floatnumber = `(?:${pointfloat}|${exponentfloat})`;\n\nconst numbers = new RegExp(`(?:${floatnumber}|${integer})`);\n\nconst lexer: l.LexerConfig = {\n  joinLines: null,\n  comments: [{ type: 'line-comment', startsWith: '#' }],\n  symbols: /[_a-zA-Z][_a-zA-Z0-9]*/,\n  numbers,\n  operators: ['==', '>=', '>', '=>', ',', ';'],\n  brackets: [\n    { startsWith: '{', endsWith: '}' },\n    { startsWith: '(', endsWith: ')' },\n  ],\n  strings: [{ startsWith: \"'\" }, { startsWith: '\"' }],\n};\n\nconst parser: p.ParserConfig = {\n  useIndentBlocks: false,\n};\n\nexport const cpanfile = lang.createLang({ lexer, parser });\n"]}