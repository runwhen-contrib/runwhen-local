{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/flux/artifacts.ts"],"names":[],"mappings":";;AASA,0CAiEC;AA1ED,iCAA8B;AAC9B,4CAAyC;AACzC,6CAA0C;AAE1C,yCAAiD;AAEjD,qCAA4C;AAGrC,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,WAAW,EACX,MAAM,GAC0B;IAChC,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IACjC,IAAI,CAAC,IAAA,yBAAgB,EAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,CAAC;QACjE,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,mBAAmB,GAAG,MAAM,IAAA,kBAAa,EAAC,eAAe,CAAC,CAAC;IACjE,IAAI,CAAC;QACH,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAa,CAAC,UAAU,CAAC,CAAC;QACpC,IAAI,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAA,aAAK,EAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QACrE,CAAC;QACD,MAAM,GAAG,GAAG,gBAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAA,aAAK,EAAC,eAAe,CAAC,EAAE,CAAC;QACzE,MAAM,WAAW,GAAgB;YAC/B,MAAM,EAAE,EAAE;YACV,eAAe,EAAE;gBACf;oBACE,QAAQ,EAAE,MAAM;oBAChB,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU;iBACtC;aACF;SACF,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAE5C,MAAM,cAAc,GAAG,MAAM,IAAA,kBAAa,EAAC,eAAe,CAAC,CAAC;QAC5D,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,eAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YAClD,OAAO;gBACL;oBACE,aAAa,EAAE;wBACb,QAAQ,EAAE,eAAe;wBACzB,MAAM,EAAE,MAAM,CAAC,MAAM;qBACtB;iBACF;aACF,CAAC;QACJ,CAAC;QACD,IAAI,cAAc,KAAK,mBAAmB,EAAE,CAAC;YAC3C,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,eAAe;oBACrB,QAAQ,EAAE,cAAc;iBACzB;aACF;SACF,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,4CAA4C,CAAC,CAAC;QACpE,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,eAAe;oBACzB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { quote } from 'shlex';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { readLocalFile } from '../../../util/fs';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { isSystemManifest } from './common';\nimport type { FluxManagerData } from './types';\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  config,\n}: UpdateArtifact<FluxManagerData>): Promise<UpdateArtifactsResult[] | null> {\n  const systemDep = updatedDeps[0];\n  if (!isSystemManifest(packageFileName) || !systemDep?.newVersion) {\n    return null;\n  }\n  const existingFileContent = await readLocalFile(packageFileName);\n  try {\n    logger.debug(`Updating Flux system manifests`);\n    const args: string[] = ['--export'];\n    if (systemDep.managerData?.components) {\n      args.push('--components', quote(systemDep.managerData.components));\n    }\n    const cmd = `flux install ${args.join(' ')} > ${quote(packageFileName)}`;\n    const execOptions: ExecOptions = {\n      docker: {},\n      toolConstraints: [\n        {\n          toolName: 'flux',\n          constraint: updatedDeps[0].newVersion,\n        },\n      ],\n    };\n    const result = await exec(cmd, execOptions);\n\n    const newFileContent = await readLocalFile(packageFileName);\n    if (!newFileContent) {\n      logger.debug('Cannot read new flux file content');\n      return [\n        {\n          artifactError: {\n            lockFile: packageFileName,\n            stderr: result.stderr,\n          },\n        },\n      ];\n    }\n    if (newFileContent === existingFileContent) {\n      logger.debug('Flux contents are unchanged');\n      return null;\n    }\n\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: packageFileName,\n          contents: newFileContent,\n        },\n      },\n    ];\n  } catch (err) {\n    logger.debug({ err }, 'Error generating new Flux system manifests');\n    return [\n      {\n        artifactError: {\n          lockFile: packageFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}