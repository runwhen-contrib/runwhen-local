{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/modules/manager/cake/index.ts"],"names":[],"mappings":"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","sourcesContent":["import moo from 'moo';\nimport type { Category } from '../../../constants';\nimport { regEx } from '../../../util/regex';\nimport { isHttpUrl } from '../../../util/url';\nimport { NugetDatasource } from '../../datasource/nuget';\nimport type { PackageDependency, PackageFileContent } from '../types';\n\nexport const url = 'https://cakebuild.net/docs';\nexport const categories: Category[] = ['dotnet'];\n\nexport const defaultConfig = {\n  fileMatch: ['\\\\.cake$'],\n};\n\nexport const supportedDatasources = [NugetDatasource.id];\n\nconst lexer = moo.states({\n  main: {\n    lineComment: { match: /\\/\\/.*?$/ }, // TODO #12870\n    multiLineComment: { match: /\\/\\*[^]*?\\*\\//, lineBreaks: true }, // TODO #12870\n    dependency: {\n      match: /^#(?:addin|tool|module|load|l)\\s+(?:nuget|dotnet):.*$/, // TODO #12870\n    },\n    dependencyQuoted: {\n      match: /^#(?:addin|tool|module|load|l)\\s+\"(?:nuget|dotnet):[^\"]+\"\\s*$/, // TODO #12870\n      value: (s: string) => s.trim().slice(1, -1),\n    },\n    unknown: moo.fallback,\n  },\n});\n\nfunction parseDependencyLine(line: string): PackageDependency | null {\n  try {\n    let url = line.replace(regEx(/^[^:]*:/), '');\n    const isEmptyHost = url.startsWith('?');\n    url = isEmptyHost ? `http://localhost/${url}` : url;\n\n    const parsedUrl = new URL(url);\n    const { origin, pathname, searchParams } = parsedUrl;\n\n    const registryUrl = `${origin}${pathname}`;\n\n    const depName = searchParams.get('package')!;\n    const currentValue = searchParams.get('version') ?? undefined;\n\n    const result: PackageDependency = {\n      datasource: NugetDatasource.id,\n      depName,\n      currentValue,\n    };\n\n    if (!isEmptyHost) {\n      if (isHttpUrl(parsedUrl)) {\n        result.registryUrls = [registryUrl];\n      } else {\n        result.skipReason = 'unsupported-url';\n      }\n    }\n\n    return result;\n  } catch {\n    return null;\n  }\n}\n\nexport function extractPackageFile(content: string): PackageFileContent {\n  const deps: PackageDependency[] = [];\n  lexer.reset(content);\n  let token = lexer.next();\n  while (token) {\n    const { type, value } = token;\n    if (type === 'dependency' || type === 'dependencyQuoted') {\n      const dep = parseDependencyLine(value);\n      if (dep) {\n        deps.push(dep);\n      }\n    }\n    token = lexer.next();\n  }\n  return { deps };\n}\n"]}