{"version":3,"file":"line-parser.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/line-parser.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { regEx } from '../../../util/regex';\nimport { GoDatasource } from '../../datasource/go';\nimport { GolangVersionDatasource } from '../../datasource/golang-version';\nimport { isVersion } from '../../versioning/semver';\nimport type { PackageDependency } from '../types';\n\nfunction trimQuotes(str: string): string {\n  return str.replace(regEx(/^\"(.*)\"$/), '$1');\n}\n\nconst requireRegex = regEx(\n  /^(?<keyword>require)?\\s+(?<module>[^\\s]+\\/?[^\\s]+)\\s+(?<version>[^\\s]+)(?:\\s*\\/\\/\\s*(?<comment>[^\\s]+)\\s*)?$/,\n);\n\nconst replaceRegex = regEx(\n  /^(?<keyword>replace)?\\s+(?<module>[^\\s]+\\/[^\\s]+)\\s*=>\\s*(?<replacement>[^\\s]+)(?:\\s+(?<version>[^\\s]+))?(?:\\s*\\/\\/\\s*(?<comment>[^\\s]+)\\s*)?$/,\n);\n\nconst toolRegex = regEx(/^(?<keyword>tool)?\\s+(?<module>[^\\s]+\\/?[^\\s]+)\\s*$/);\n\nconst goVersionRegex = regEx(/^\\s*go\\s+(?<version>[^\\s]+)\\s*$/);\n\nconst toolchainVersionRegex = regEx(/^\\s*toolchain\\s+go(?<version>[^\\s]+)\\s*$/);\n\nconst pseudoVersionRegex = regEx(GoDatasource.pversionRegexp);\n\nfunction extractDigest(input: string): string | undefined {\n  const match = pseudoVersionRegex.exec(input);\n  return match?.groups?.digest;\n}\n\nexport function parseLine(input: string): PackageDependency | null {\n  const goVersionMatches = goVersionRegex.exec(input)?.groups;\n  if (goVersionMatches) {\n    const { version: currentValue } = goVersionMatches;\n\n    const dep: PackageDependency = {\n      datasource: GolangVersionDatasource.id,\n      versioning: 'go-mod-directive',\n      depType: 'golang',\n      depName: 'go',\n      currentValue,\n    };\n\n    if (!semver.validRange(currentValue)) {\n      dep.skipReason = 'invalid-version';\n    }\n\n    return dep;\n  }\n\n  const toolchainMatches = toolchainVersionRegex.exec(input)?.groups;\n  if (toolchainMatches) {\n    const { version: currentValue } = toolchainMatches;\n\n    const dep: PackageDependency = {\n      datasource: GolangVersionDatasource.id,\n      depType: 'toolchain',\n      depName: 'go',\n      currentValue,\n    };\n\n    if (!semver.valid(currentValue)) {\n      dep.skipReason = 'invalid-version';\n    }\n\n    return dep;\n  }\n\n  const requireMatches = requireRegex.exec(input)?.groups;\n  if (requireMatches) {\n    const { keyword, module, version: currentValue, comment } = requireMatches;\n\n    const depName = trimQuotes(module);\n\n    const dep: PackageDependency = {\n      datasource: GoDatasource.id,\n      depType: 'require',\n      depName,\n      currentValue,\n    };\n\n    if (isVersion(currentValue)) {\n      const digest = extractDigest(currentValue);\n      if (digest) {\n        dep.currentDigest = digest;\n        dep.digestOneAndOnly = true;\n        dep.versioning = 'loose';\n      }\n    } else {\n      dep.skipReason = 'invalid-version';\n    }\n\n    if (comment === 'indirect') {\n      dep.depType = 'indirect';\n      dep.enabled = false;\n    }\n\n    if (!keyword) {\n      dep.managerData = { multiLine: true };\n    }\n\n    return dep;\n  }\n\n  const replaceMatches = replaceRegex.exec(input)?.groups;\n  if (replaceMatches) {\n    const {\n      keyword,\n      replacement,\n      version: currentValue,\n      comment,\n    } = replaceMatches;\n\n    const depName = trimQuotes(replacement);\n\n    const dep: PackageDependency = {\n      datasource: GoDatasource.id,\n      depType: 'replace',\n      depName,\n      currentValue,\n    };\n\n    if (isVersion(currentValue)) {\n      const digest = extractDigest(currentValue);\n      if (digest) {\n        dep.currentDigest = digest;\n        dep.digestOneAndOnly = true;\n        dep.versioning = 'loose';\n      }\n    } else if (currentValue) {\n      dep.skipReason = 'invalid-version';\n    } else {\n      dep.skipReason = 'unspecified-version';\n      delete dep.currentValue;\n    }\n\n    if (comment === 'indirect') {\n      dep.depType = 'indirect';\n      dep.enabled = false;\n    }\n\n    if (!keyword) {\n      dep.managerData = { multiLine: true };\n    }\n\n    if (depName.startsWith('/') || depName.startsWith('.')) {\n      dep.skipReason = 'local-dependency';\n    }\n\n    return dep;\n  }\n\n  const toolMatches = toolRegex.exec(input)?.groups;\n  if (toolMatches) {\n    const { keyword, module } = toolMatches;\n\n    const depName = trimQuotes(module);\n\n    const dep: PackageDependency = {\n      datasource: GoDatasource.id,\n      depType: 'tool',\n      depName,\n      skipReason: 'unversioned-reference',\n    };\n\n    if (!keyword) {\n      dep.managerData = { multiLine: true };\n    }\n\n    return dep;\n  }\n\n  return null;\n}\n"]}