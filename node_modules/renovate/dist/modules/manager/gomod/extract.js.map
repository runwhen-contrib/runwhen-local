{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gomod/extract.ts"],"names":[],"mappings":";;AAwBA,gDAmCC;AA3DD,+CAAmD;AAEnD,+CAA0C;AAE1C,SAAS,kBAAkB,CACzB,IAAuB,EACvB,IAAyB;IAEzB,IAAI,SAAwC,CAAC;IAC7C,MAAM,cAAc,GAAG,IAAI,CAAC,OAAQ,GAAG,GAAG,CAAC;IAE3C,wEAAwE;IACxE,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IACE,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,OAAQ,GAAG,GAAG,CAAC;YAC7C,GAAG,CAAC,OAAQ,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,OAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,EACvD,CAAC;YACD,SAAS,GAAG,GAAG,CAAC;QAClB,CAAC;IACH,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAe;IAChD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,MAAM,KAAK,GAAwB,EAAE,CAAC;IAEtC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC;IAC1C,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC,EAAE,CAAC;QACpE,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAC/B,MAAM,GAAG,GAAG,IAAA,uBAAS,EAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,SAAS;QACX,CAAC;QAED,IAAI,GAAG,CAAC,OAAO,KAAK,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,SAAS;QACX,CAAC;QAED,GAAG,CAAC,WAAW,KAAK,EAAE,CAAC;QACvB,GAAG,CAAC,WAAW,CAAC,UAAU,GAAG,UAAU,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,IAAI,KAAK,EAAE,OAAO,KAAK,UAAU,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC,OAAO,CAAC;QACvB,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import { newlineRegex } from '../../../util/regex';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { parseLine } from './line-parser';\n\nfunction findMatchingModule(\n  tool: PackageDependency,\n  deps: PackageDependency[],\n): PackageDependency | undefined {\n  let bestMatch: PackageDependency | undefined;\n  const normalizedTool = tool.depName! + '/';\n\n  // Find the longest matching prefix for the tool within the dependencies\n  for (const dep of deps) {\n    if (\n      normalizedTool.startsWith(dep.depName! + '/') &&\n      dep.depName!.length > (bestMatch?.depName!.length ?? 0)\n    ) {\n      bestMatch = dep;\n    }\n  }\n\n  return bestMatch;\n}\n\nexport function extractPackageFile(content: string): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  const tools: PackageDependency[] = [];\n\n  const lines = content.split(newlineRegex);\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {\n    const line = lines[lineNumber];\n    const dep = parseLine(line);\n    if (!dep) {\n      continue;\n    }\n\n    if (dep.depType === 'tool') {\n      tools.push(dep);\n      continue;\n    }\n\n    dep.managerData ??= {};\n    dep.managerData.lineNumber = lineNumber;\n\n    deps.push(dep);\n  }\n\n  for (const tool of tools) {\n    const match = findMatchingModule(tool, deps);\n    if (match?.depType === 'indirect') {\n      delete match.enabled;\n    }\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n"]}