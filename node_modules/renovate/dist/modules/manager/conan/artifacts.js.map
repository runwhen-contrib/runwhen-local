{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/conan/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  findLocalSiblingOrParent,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getGitEnvironmentVariables } from '../../../util/git/auth';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nasync function conanLockUpdate(\n  conanFilePath: string,\n  isLockFileMaintenance: boolean | undefined,\n): Promise<void> {\n  const command =\n    `conan lock create ${quote(conanFilePath)}` +\n    (isLockFileMaintenance ? ' --lockfile=\"\"' : '');\n\n  const execOptions: ExecOptions = {\n    extraEnv: { ...getGitEnvironmentVariables(['conan']) },\n    docker: {},\n  };\n\n  await exec(command, execOptions);\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact,\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName, updatedDeps, newPackageFileContent, config } =\n    updateArtifact;\n\n  logger.trace(`conan.updateArtifacts(${packageFileName})`);\n\n  const { isLockFileMaintenance } = config;\n\n  if (updatedDeps.length === 0 && !isLockFileMaintenance) {\n    logger.trace('No conan.lock dependencies to update');\n    return null;\n  }\n\n  const lockFileName = await findLocalSiblingOrParent(\n    packageFileName,\n    'conan.lock',\n  );\n  if (!lockFileName) {\n    logger.trace('No conan.lock found');\n    return null;\n  }\n\n  const existingLockFileContent = await readLocalFile(lockFileName);\n  if (!existingLockFileContent) {\n    logger.debug(`${lockFileName} read operation failed`);\n    return null;\n  }\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    logger.trace(`Updating ${lockFileName}`);\n    await conanLockUpdate(packageFileName, isLockFileMaintenance);\n\n    const newLockFileContent = await readLocalFile(lockFileName);\n    if (!newLockFileContent) {\n      logger.debug(`New ${lockFileName} read operation failed`);\n      return null;\n    }\n\n    if (existingLockFileContent === newLockFileContent) {\n      logger.trace(`${lockFileName} is unchanged`);\n      return null;\n    }\n\n    logger.trace(`Returning updated ${lockFileName}`);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: newLockFileContent,\n        },\n      },\n    ];\n  } catch (err) {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n\n    logger.debug(\n      { err, packageFileName, lockFileName },\n      'Lockfile update failed',\n    );\n\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}