{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/conan/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../util/regex';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { isComment } from './common';\n\nconst regex = regEx(\n  `(?<name>[-_a-zA-Z0-9]+)/(?<version>[^@#\\n{*\"']+)(?<userChannel>@[-_a-zA-Z0-9]+(?:/[^#\\n.{*\"' ]+|))?#?(?<revision>[-_a-f0-9]+[^\\n{*\"'])?`,\n);\n\nfunction setDepType(content: string, originalType: string): string {\n  let depType = originalType;\n  if (content.includes('python_requires')) {\n    depType = 'python_requires';\n  } else if (content.includes('build_require')) {\n    depType = 'build_requires';\n  } else if (content.includes('requires')) {\n    depType = 'requires';\n  }\n  return depType;\n}\n\nexport function extractPackageFile(content: string): PackageFileContent | null {\n  // only process sections where requirements are defined\n  const sections = content.split(/def |\\n\\[/).filter(\n    (part) =>\n      part.includes('python_requires') || // only matches python_requires\n      part.includes('build_require') || // matches [build_requires], build_requirements(), and build_requires\n      part.includes('require'), // matches [requires], requirements(), and requires\n  );\n\n  const deps: PackageDependency[] = [];\n  for (const section of sections) {\n    let depType = setDepType(section, 'requires');\n    const rawLines = section.split('\\n').filter(is.nonEmptyString);\n\n    for (const rawLine of rawLines) {\n      if (!isComment(rawLine)) {\n        depType = setDepType(rawLine, depType);\n        // extract all dependencies from each line\n        const lines = rawLine.split(/[\"'],/);\n        for (const line of lines) {\n          const matches = regex.exec(line.trim());\n          if (matches?.groups) {\n            let dep: PackageDependency = {};\n            const depName = matches.groups?.name;\n            const currentValue = matches.groups?.version.trim();\n\n            let replaceString = `${depName}/${currentValue}`;\n            // conan uses @_/_ as a placeholder for no userChannel\n            let userAndChannel = '@_/_';\n\n            if (matches.groups.userChannel) {\n              userAndChannel = matches.groups.userChannel;\n              replaceString = `${depName}/${currentValue}${userAndChannel}`;\n              if (!userAndChannel.includes('/')) {\n                userAndChannel = `${userAndChannel}/_`;\n              }\n            }\n            const packageName = `${depName}/${currentValue}${userAndChannel}`;\n\n            dep = {\n              ...dep,\n              depName,\n              packageName,\n              currentValue,\n              replaceString,\n              depType,\n            };\n            if (matches.groups.revision) {\n              dep.currentDigest = matches.groups.revision;\n              dep.autoReplaceStringTemplate = `{{depName}}/{{newValue}}${userAndChannel}{{#if newDigest}}#{{newDigest}}{{/if}}`;\n              dep.replaceString = `${replaceString}#${dep.currentDigest}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n"]}