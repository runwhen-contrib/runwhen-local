{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nix/artifacts.ts"],"names":[],"mappings":";;AAYA,0CA0EC;;AAtFD,kEAAkC;AAClC,iCAA8B;AAC9B,4CAAyC;AACzC,2DAA4D;AAC5D,6CAA0C;AAE1C,yCAAiD;AACjD,2CAAkD;AAClD,4EAAsD;AACtD,+CAA4C;AAGrC,KAAK,UAAU,eAAe,CAAC,EACpC,eAAe,EACf,MAAM,EACN,WAAW,GACI;IACf,MAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;IACvE,MAAM,uBAAuB,GAAG,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAC1E,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC7B,eAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,GAAG,GAAG,yDAAyD,CAAC;IAEpE,MAAM,KAAK,GAAG,IAAA,6BAAe,EAC3B,SAAS,CAAC,IAAI,CAAC;QACb,QAAQ,EAAE,QAAQ;QAClB,GAAG,EAAE,yBAAyB;KAC/B,CAAC,CACH,CAAC;IAEF,IAAI,KAAK,EAAE,CAAC;QACV,GAAG,IAAI,oCAAoC,KAAK,GAAG,CAAC;IACtD,CAAC;IAED,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC;QACjC,GAAG,IAAI,cAAc,CAAC;IACxB,CAAC;SAAM,CAAC;QACN,MAAM,MAAM,GAAG,WAAW;aACvB,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC;aAC7B,MAAM,CAAC,YAAE,CAAC,8BAA8B,CAAC;aACzC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,kBAAkB,IAAA,aAAK,EAAC,OAAO,CAAC,EAAE,CAAC;aACpD,IAAI,CAAC,GAAG,CAAC,CAAC;QACb,GAAG,IAAI,cAAc,MAAM,EAAE,CAAC;IAChC,CAAC;IACD,MAAM,WAAW,GAAgB;QAC/B,OAAO,EAAE,eAAe;QACxB,eAAe,EAAE;YACf;gBACE,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG;aACpC;SACF;QACD,MAAM,EAAE,EAAE;KACX,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,IAAA,WAAI,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAa,GAAE,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC;QACd,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAC7C,OAAO;YACL;gBACE,IAAI,EAAE;oBACJ,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,YAAY;oBAClB,QAAQ,EAAE,MAAM,IAAA,kBAAa,EAAC,YAAY,CAAC;iBAC5C;aACF;SACF,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAClD,OAAO;YACL;gBACE,aAAa,EAAE;oBACb,QAAQ,EAAE,YAAY;oBACtB,MAAM,EAAE,GAAG,CAAC,OAAO;iBACpB;aACF;SACF,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { logger } from '../../../logger';\nimport { findGithubToken } from '../../../util/check-token';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { readLocalFile } from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport * as hostRules from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nexport async function updateArtifacts({\n  packageFileName,\n  config,\n  updatedDeps,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  const lockFileName = packageFileName.replace(regEx(/\\.nix$/), '.lock');\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No flake.lock found');\n    return null;\n  }\n\n  let cmd = `nix --extra-experimental-features 'nix-command flakes' `;\n\n  const token = findGithubToken(\n    hostRules.find({\n      hostType: 'github',\n      url: 'https://api.github.com/',\n    }),\n  );\n\n  if (token) {\n    cmd += `--extra-access-tokens github.com=${token} `;\n  }\n\n  if (config.isLockFileMaintenance) {\n    cmd += 'flake update';\n  } else {\n    const inputs = updatedDeps\n      .map(({ depName }) => depName)\n      .filter(is.nonEmptyStringAndNotWhitespace)\n      .map((depName) => `--update-input ${quote(depName)}`)\n      .join(' ');\n    cmd += `flake lock ${inputs}`;\n  }\n  const execOptions: ExecOptions = {\n    cwdFile: packageFileName,\n    toolConstraints: [\n      {\n        toolName: 'nix',\n        constraint: config.constraints?.nix,\n      },\n    ],\n    docker: {},\n  };\n\n  try {\n    await exec(cmd, execOptions);\n\n    const status = await getRepoStatus();\n    if (!status.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated flake.lock');\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: await readLocalFile(lockFileName),\n        },\n      },\n    ];\n  } catch (err) {\n    logger.warn({ err }, 'Error updating flake.lock');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}