{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nix/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAkD;AAElD,MAAM,SAAS,GAAG,OAAC,CAAC,IAAI,CAAC;IACvB,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,UAAU;IACV,MAAM;IACN,WAAW;IACX,SAAS;CACV,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC1B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;IACf,IAAI,EAAE,SAAS;CAChB,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,OAAC,CAAC,MAAM,CAAC;IAC7B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC1B,IAAI,EAAE,SAAS;IACf,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC3B,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAG,OAAC,CAAC,MAAM,CAAC;IACxB,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IAC3E,MAAM,EAAE,WAAW,CAAC,QAAQ,EAAE;IAC9B,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEU,QAAA,YAAY,GAAG,mBAAI,CAAC,IAAI,CACnC,OAAC,CAAC,MAAM,CAAC;IACP,KAAK,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,QAAQ,CAAC;IACrC,OAAO,EAAE,OAAC,CAAC,OAAO,CAAC,CAAC,CAAC;CACtB,CAAC,CACH,CAAC","sourcesContent":["import { z } from 'zod';\nimport { Json } from '../../../util/schema-utils';\n\nconst InputType = z.enum([\n  'git',\n  'github',\n  'gitlab',\n  'indirect',\n  'path',\n  'sourcehut',\n  'tarball',\n]);\n\nconst LockedInput = z.object({\n  ref: z.string().optional(),\n  rev: z.string(),\n  type: InputType,\n});\n\nconst OriginalInput = z.object({\n  host: z.string().optional(),\n  owner: z.string().optional(),\n  repo: z.string().optional(),\n  ref: z.string().optional(),\n  type: InputType,\n  url: z.string().optional(),\n});\n\nconst NixInput = z.object({\n  inputs: z.record(z.string(), z.string().or(z.array(z.string()))).optional(),\n  locked: LockedInput.optional(),\n  original: OriginalInput.optional(),\n});\n\nexport const NixFlakeLock = Json.pipe(\n  z.object({\n    nodes: z.record(z.string(), NixInput),\n    version: z.literal(7),\n  }),\n);\n\nexport type NixFlakeLock = z.infer<typeof NixFlakeLock>;\n"]}