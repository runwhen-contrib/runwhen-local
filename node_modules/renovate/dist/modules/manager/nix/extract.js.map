{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nix/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { getSiblingFileName, readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { GitRefsDatasource } from '../../datasource/git-refs';\nimport { id as nixpkgsVersioning } from '../../versioning/nixpkgs';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport { NixFlakeLock } from './schema';\n\nconst nixpkgsRegex = regEx(/\"github:nixos\\/nixpkgs(\\/(?<ref>[a-z0-9-.]+))?\"/i);\n\n// as documented upstream\n// https://github.com/NixOS/nix/blob/master/doc/manual/source/protocols/tarball-fetcher.md#gitea-and-forgejo-support\nconst lockableHTTPTarballProtocol = regEx(\n  '^https://(?<domain>[^/]+)/(?<owner>[^/]+)/(?<repo>[^/]+)/archive/(?<rev>.+).tar.gz$',\n);\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n): Promise<PackageFileContent | null> {\n  const packageLockFile = getSiblingFileName(packageFile, 'flake.lock');\n  const lockContents = await readLocalFile(packageLockFile, 'utf8');\n\n  logger.trace(`nix.extractPackageFile(${packageLockFile})`);\n\n  const deps: PackageDependency[] = [];\n\n  const match = nixpkgsRegex.exec(content);\n  if (match?.groups) {\n    const { ref } = match.groups;\n    deps.push({\n      depName: 'nixpkgs',\n      currentValue: ref,\n      datasource: GitRefsDatasource.id,\n      packageName: 'https://github.com/NixOS/nixpkgs',\n      versioning: nixpkgsVersioning,\n    });\n  }\n\n  const flakeLockParsed = NixFlakeLock.safeParse(lockContents);\n  if (!flakeLockParsed.success) {\n    logger.debug(\n      { packageLockFile, error: flakeLockParsed.error },\n      `invalid flake.lock file`,\n    );\n    return null;\n  }\n\n  const flakeLock = flakeLockParsed.data;\n  const rootInputs = flakeLock.nodes.root.inputs;\n\n  if (!rootInputs) {\n    logger.debug(\n      { packageLockFile, error: flakeLockParsed.error },\n      `flake.lock is missing \"root\" node`,\n    );\n\n    if (deps.length) {\n      return { deps };\n    }\n    return null;\n  }\n\n  for (const [depName, flakeInput] of Object.entries(flakeLock.nodes)) {\n    // the root input is a magic string for the entrypoint and only references other flake inputs\n    if (depName === 'root') {\n      continue;\n    }\n\n    // skip all locked and transitivie nodes as they cannot be updated by regular means\n    if (!(depName in rootInputs)) {\n      continue;\n    }\n\n    const flakeLocked = flakeInput.locked;\n    const flakeOriginal = flakeInput.original;\n\n    // istanbul ignore if: if we are not in a root node then original and locked always exist which cannot be easily expressed in the type\n    if (flakeLocked === undefined || flakeOriginal === undefined) {\n      logger.debug(\n        { packageLockFile, flakeInput },\n        `Found empty flake input, skipping`,\n      );\n      continue;\n    }\n\n    // indirect inputs cannot be reliable updated because they depend on the flake registry\n    if (flakeOriginal.type === 'indirect') {\n      continue;\n    }\n\n    switch (flakeLocked.type) {\n      case 'github':\n        deps.push({\n          depName,\n          currentValue: flakeOriginal.ref,\n          currentDigest: flakeLocked.rev,\n          datasource: GitRefsDatasource.id,\n          packageName: `https://${flakeOriginal.host ?? 'github.com'}/${flakeOriginal.owner}/${flakeOriginal.repo}`,\n        });\n        break;\n      case 'gitlab':\n        deps.push({\n          depName,\n          currentValue: flakeOriginal.ref,\n          currentDigest: flakeLocked.rev,\n          datasource: GitRefsDatasource.id,\n          packageName: `https://${flakeOriginal.host ?? 'gitlab.com'}/${decodeURIComponent(flakeOriginal.owner!)}/${flakeOriginal.repo}`,\n        });\n        break;\n      case 'git':\n        deps.push({\n          depName,\n          currentValue: flakeOriginal.ref,\n          currentDigest: flakeLocked.rev,\n          datasource: GitRefsDatasource.id,\n          packageName: flakeOriginal.url,\n        });\n        break;\n      case 'sourcehut':\n        deps.push({\n          depName,\n          currentValue: flakeOriginal.ref,\n          currentDigest: flakeLocked.rev,\n          datasource: GitRefsDatasource.id,\n          packageName: `https://${flakeOriginal.host ?? 'git.sr.ht'}/${flakeOriginal.owner}/${flakeOriginal.repo}`,\n        });\n        break;\n      case 'tarball':\n        deps.push({\n          depName,\n          currentValue: flakeLocked.ref,\n          currentDigest: flakeLocked.rev,\n          datasource: GitRefsDatasource.id,\n          // type tarball always contains this link\n          packageName: flakeOriginal.url!.replace(\n            lockableHTTPTarballProtocol,\n            'https://$<domain>/$<owner>/$<repo>',\n          ),\n        });\n        break;\n      // istanbul ignore next: just a safeguard\n      default:\n        logger.debug(\n          { packageLockFile },\n          `Unknown flake.lock type \"${flakeLocked.type}\", skipping`,\n        );\n        break;\n    }\n  }\n\n  if (deps.length) {\n    return { deps };\n  }\n\n  return null;\n}\n"]}