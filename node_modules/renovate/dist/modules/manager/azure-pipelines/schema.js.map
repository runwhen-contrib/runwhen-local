{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/azure-pipelines/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAA8D;AAEjD,QAAA,IAAI,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;CACjB,CAAC,CAAC;AAGU,QAAA,GAAG,GAAG,OAAC,CAAC,MAAM,CAAC;IAC1B,KAAK,EAAE,IAAA,yBAAU,EAAC,YAAI,CAAC;CACxB,CAAC,CAAC;AAGU,QAAA,MAAM,GAAG,OAAC;KACpB,MAAM,CAAC;IACN,MAAM,EAAE,WAAG;IACX,SAAS,EAAE,WAAG;IACd,YAAY,EAAE,WAAG;IACjB,gBAAgB,EAAE,WAAG;IACrB,EAAE,EAAE,OAAC;SACF,MAAM,CAAC;QACN,OAAO,EAAE,WAAG;QACZ,OAAO,EAAE,WAAG;KACb,CAAC;SACD,OAAO,EAAE;CACb,CAAC;KACD,OAAO,EAAE,CAAC;AAGA,QAAA,UAAU,GAAG,OAAC;KACxB,MAAM,CAAC;IACN,QAAQ,EAAE,OAAC;SACR,MAAM,CAAC;QACN,OAAO,EAAE,cAAM;QACf,OAAO,EAAE,cAAM;QACf,MAAM,EAAE,cAAM;KACf,CAAC;SACD,OAAO,EAAE;CACb,CAAC;KACD,OAAO,EAAE,CAAC;AAGA,QAAA,IAAI,GAAG,IAAA,yBAAU,EAAC,OAAC,CAAC,KAAK,CAAC,CAAC,WAAG,EAAE,kBAAU,CAAC,CAAC,CAAC,CAAC;AAG9C,QAAA,KAAK,GAAG,OAAC,CAAC,MAAM,CAAC;IAC5B,IAAI,EAAE,YAAI;CACX,CAAC,CAAC;AAGU,QAAA,SAAS,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;CAClB,CAAC,CAAC;AAGU,QAAA,UAAU,GAAG,OAAC,CAAC,MAAM,CAAC;IACjC,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC5C,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC3B,CAAC,CAAC;AAGU,QAAA,SAAS,GAAG,OAAC;KACvB,MAAM,CAAC;IACN,YAAY,EAAE,IAAA,yBAAU,EAAC,kBAAU,CAAC;IACpC,UAAU,EAAE,IAAA,yBAAU,EAAC,iBAAS,CAAC;CAClC,CAAC;KACD,OAAO,EAAE,CAAC;AAGA,QAAA,cAAc,GAAG,OAAC;KAC5B,MAAM,CAAC;IACN,SAAS,EAAE,iBAAS;IACpB,MAAM,EAAE,IAAA,yBAAU,EAAC,aAAK,CAAC;IACzB,IAAI,EAAE,YAAI;IACV,KAAK,EAAE,IAAA,yBAAU,EAAC,YAAI,CAAC;CACxB,CAAC;KACD,OAAO,EAAE,CAAC;AAGA,QAAA,kBAAkB,GAAG,mBAAI,CAAC,IAAI,CAAC,sBAAc,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, Yaml } from '../../../util/schema-utils';\n\nexport const Step = z.object({\n  task: z.string(),\n});\nexport type Step = z.infer<typeof Step>;\n\nexport const Job = z.object({\n  steps: LooseArray(Step),\n});\nexport type Job = z.infer<typeof Job>;\n\nexport const Deploy = z\n  .object({\n    deploy: Job,\n    preDeploy: Job,\n    routeTraffic: Job,\n    postRouteTraffic: Job,\n    on: z\n      .object({\n        failure: Job,\n        success: Job,\n      })\n      .partial(),\n  })\n  .partial();\nexport type Deploy = z.infer<typeof Deploy>;\n\nexport const Deployment = z\n  .object({\n    strategy: z\n      .object({\n        runOnce: Deploy,\n        rolling: Deploy,\n        canary: Deploy,\n      })\n      .partial(),\n  })\n  .partial();\nexport type Deployment = z.infer<typeof Deployment>;\n\nexport const Jobs = LooseArray(z.union([Job, Deployment]));\nexport type Jobs = z.infer<typeof Jobs>;\n\nexport const Stage = z.object({\n  jobs: Jobs,\n});\nexport type Stage = z.infer<typeof Stage>;\n\nexport const Container = z.object({\n  image: z.string(),\n});\nexport type Container = z.infer<typeof Container>;\n\nexport const Repository = z.object({\n  type: z.enum(['git', 'github', 'bitbucket']),\n  name: z.string(),\n  ref: z.string().optional(),\n});\nexport type Repository = z.infer<typeof Repository>;\n\nexport const Resources = z\n  .object({\n    repositories: LooseArray(Repository),\n    containers: LooseArray(Container),\n  })\n  .partial();\nexport type Resources = z.infer<typeof Resources>;\n\nexport const AzurePipelines = z\n  .object({\n    resources: Resources,\n    stages: LooseArray(Stage),\n    jobs: Jobs,\n    steps: LooseArray(Step),\n  })\n  .partial();\nexport type AzurePipelines = z.infer<typeof AzurePipelines>;\n\nexport const AzurePipelinesYaml = Yaml.pipe(AzurePipelines);\n"]}