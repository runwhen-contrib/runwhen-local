{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/devbox/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,4CAAyC;AACzC,6DAKoC;AACpC,oDAA2D;AAC3D,oDAAkE;AAGlE,MAAM,WAAW,GAAG,OAAC;KAClB,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;KACjB,GAAG,CAAC,CAAC,CAAC;KACN,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,EAAE,EAAE;IACrC,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,yBAAgB,CAAC,EAAE;QAC/B,OAAO;KACR,CAAC;IAEF,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,EACX,iEAAiE,CAClE,CAAC;QACF,GAAG,CAAC,UAAU,GAAG,eAAe,CAAC;QACjC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;IAEhC,IAAI,CAAC,YAAgB,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;QAC5C,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,EACX,iEAAiE,CAClE,CAAC;QACF,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;QACnC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC,CAAC;AAEQ,QAAA,YAAY,GAAG,oBAAK,CAAC,IAAI,CACpC,OAAC,CAAC,MAAM,CAAC;IACP,QAAQ,EAAE,OAAC;SACR,KAAK,CAAC;QACL,IAAA,yBAAU,EAAC,OAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,IAAA,0BAAW,EACT,OAAC,CAAC,KAAK,CAAC;YACN,OAAC,CAAC,MAAM,EAAE;YACV,OAAC;iBACE,MAAM,CAAC,EAAE,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC;iBAC/B,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC;SACvC,CAAC,CACH,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC1C,CAAC;SACD,IAAI,CAAC,IAAA,yBAAU,EAAC,WAAW,CAAC,CAAC;CACjC,CAAC,CACH;KACE,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC;KACrC,KAAK,CAAC,IAAA,+BAAgB,EAAC,EAAE,EAAE,+BAA+B,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { logger } from '../../../logger';\nimport {\n  Jsonc,\n  LooseArray,\n  LooseRecord,\n  withDebugMessage,\n} from '../../../util/schema-utils';\nimport { DevboxDatasource } from '../../datasource/devbox';\nimport { api as devboxVersioning } from '../../versioning/devbox';\nimport type { PackageDependency } from '../types';\n\nconst DevboxEntry = z\n  .array(z.string())\n  .min(1)\n  .transform(([depName, currentValue]) => {\n    const dep: PackageDependency = {\n      datasource: DevboxDatasource.id,\n      depName,\n    };\n\n    if (!currentValue) {\n      logger.trace(\n        { depName },\n        'Devbox: skipping invalid devbox dependency in devbox JSON file.',\n      );\n      dep.skipReason = 'not-a-version';\n      return dep;\n    }\n\n    dep.currentValue = currentValue;\n\n    if (!devboxVersioning.isValid(currentValue)) {\n      logger.debug(\n        { depName },\n        'Devbox: skipping invalid devbox dependency in devbox JSON file.',\n      );\n      dep.skipReason = 'invalid-version';\n      return dep;\n    }\n\n    return dep;\n  });\n\nexport const DevboxSchema = Jsonc.pipe(\n  z.object({\n    packages: z\n      .union([\n        LooseArray(z.string().transform((pkg) => pkg.split('@'))),\n        LooseRecord(\n          z.union([\n            z.string(),\n            z\n              .object({ version: z.string() })\n              .transform(({ version }) => version),\n          ]),\n        ).transform((obj) => Object.entries(obj)),\n      ])\n      .pipe(LooseArray(DevboxEntry)),\n  }),\n)\n  .transform(({ packages }) => packages)\n  .catch(withDebugMessage([], 'Devbox: does not match schema'));\n"]}