{"version":3,"file":"package-file.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/npm/extract/common/package-file.ts"],"names":[],"mappings":"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","sourcesContent":["import { parsePkgAndParentSelector } from '@pnpm/parse-overrides';\nimport is from '@sindresorhus/is';\nimport { CONFIG_VALIDATION } from '../../../../../constants/error-messages';\nimport { logger } from '../../../../../logger';\nimport { regEx } from '../../../../../util/regex';\nimport type { PackageDependency, PackageFileContent } from '../../../types';\nimport type { NpmManagerData } from '../../types';\nimport type { NpmPackage, NpmPackageDependency } from '../types';\nimport {\n  extractDependency,\n  getExtractedConstraints,\n  parseDepName,\n} from './dependency';\nimport { setNodeCommitTopic } from './node';\nimport { extractOverrideDepsRec } from './overrides';\n\nexport function extractPackageJson(\n  packageJson: NpmPackage,\n  packageFile: string,\n): PackageFileContent<NpmManagerData> | null {\n  logger.trace(`npm.extractPackageJson(${packageFile})`);\n  const deps: PackageDependency[] = [];\n\n  if (packageJson._id && packageJson._args && packageJson._from) {\n    logger.debug({ packageFile }, 'Ignoring vendorised package.json');\n    return null;\n  }\n  if (packageFile !== 'package.json' && packageJson.renovate) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = packageFile;\n    error.validationError =\n      'Nested package.json must not contain Renovate configuration. Please use `packageRules` with `matchFileNames` in your main config instead.';\n    throw error;\n  }\n  const packageJsonName = packageJson.name;\n  logger.debug(\n    `npm file ${packageFile} has name ${JSON.stringify(packageJsonName)}`,\n  );\n  const packageFileVersion = packageJson.version;\n\n  const depTypes = {\n    dependencies: 'dependency',\n    devDependencies: 'devDependency',\n    optionalDependencies: 'optionalDependency',\n    peerDependencies: 'peerDependency',\n    engines: 'engine',\n    volta: 'volta',\n    resolutions: 'resolutions',\n    packageManager: 'packageManager',\n    overrides: 'overrides',\n    pnpm: 'pnpm',\n  };\n\n  for (const depType of Object.keys(depTypes) as (keyof typeof depTypes)[]) {\n    let dependencies = packageJson[depType];\n    if (dependencies) {\n      try {\n        if (depType === 'packageManager') {\n          const match = regEx('^(?<name>.+)@(?<range>.+)$').exec(\n            dependencies as string,\n          );\n          // istanbul ignore next\n          if (!match?.groups) {\n            break;\n          }\n          dependencies = { [match.groups.name]: match.groups.range };\n        }\n        for (const [key, val] of Object.entries(\n          dependencies as NpmPackageDependency,\n        )) {\n          const depName = parseDepName(depType, key);\n          let dep: PackageDependency = {\n            depType,\n            depName,\n          };\n          if (depName !== key) {\n            dep.managerData = { key };\n          }\n          if (depType === 'overrides' && !is.string(val)) {\n            // TODO: fix type #22198\n            deps.push(\n              ...extractOverrideDepsRec(\n                [depName],\n                val as unknown as NpmManagerData,\n              ),\n            );\n          } else if (depType === 'pnpm' && depName === 'overrides') {\n            // pnpm overrides\n            // https://pnpm.io/package_json#pnpmoverrides\n            for (const [overridesKey, overridesVal] of Object.entries(\n              val as unknown as NpmPackageDependency,\n            )) {\n              if (is.string(overridesVal)) {\n                // Newer flat syntax: `parent>parent>child`\n                const packageName =\n                  parsePkgAndParentSelector(overridesKey).targetPkg.name;\n                dep = {\n                  depName: overridesKey,\n                  packageName,\n                  depType: 'pnpm.overrides',\n                  ...extractDependency(depName, packageName, overridesVal),\n                };\n                setNodeCommitTopic(dep);\n                // TODO: Is this expected? It's always 'overrides'.\n                dep.prettyDepType = depTypes[depName];\n                deps.push(dep);\n              } else if (is.object(overridesVal)) {\n                // Older nested object syntax: `parent: { parent: { child: version } }`\n                deps.push(\n                  ...extractOverrideDepsRec(\n                    [overridesKey],\n                    overridesVal as unknown as NpmManagerData,\n                  ),\n                );\n              }\n            }\n          } else {\n            // TODO: fix type #22198\n            dep = { ...dep, ...extractDependency(depType, depName, val!) };\n            setNodeCommitTopic(dep);\n            dep.prettyDepType = depTypes[depType];\n            deps.push(dep);\n          }\n        }\n      } catch (err) /* istanbul ignore next */ {\n        logger.debug(\n          { fileName: packageFile, depType, err },\n          'Error parsing package.json',\n        );\n        return null;\n      }\n    }\n  }\n\n  const extractedConstraints = getExtractedConstraints(deps);\n\n  return {\n    deps,\n    extractedConstraints,\n    packageFileVersion,\n    managerData: {\n      packageJsonName,\n      hasPackageManager: is.nonEmptyStringAndNotWhitespace(\n        packageJson.packageManager,\n      ),\n      workspaces: packageJson.workspaces,\n    },\n  };\n}\n"]}