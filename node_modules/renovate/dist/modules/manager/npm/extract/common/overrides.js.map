{"version":3,"file":"overrides.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/npm/extract/common/overrides.ts"],"names":[],"mappings":";;AAYA,wDAiCC;;AA7CD,kEAAkC;AAGlC,6CAAiD;AACjD,iCAA4C;AAE5C;;;;;GAKG;AACH,SAAgB,sBAAsB,CACpC,OAAiB,EACjB,KAAqB;IAErB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI,CAAC,KAAK,IAAI,YAAE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QACjE,IAAI,YAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;YAC5B,oDAAoD;YACpD,wDAAwD;YACxD,MAAM,WAAW,GACf,YAAY,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;YACpE,MAAM,GAAG,GAAsC;gBAC7C,OAAO,EAAE,WAAW;gBACpB,OAAO,EAAE,WAAW;gBACpB,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,6BAA6B;aACzE,CAAC;YACF,IAAA,yBAAkB,EAAC,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC;gBACR,GAAG,GAAG;gBACN,GAAG,IAAA,8BAAiB,EAAC,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;aAC7D,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,8CAA8C;YAC9C,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,MAAM,YAAY,GAAG,sBAAsB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACnE,IAAI,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IACD,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { PackageDependency } from '../../../types';\nimport type { NpmManagerData } from '../../types';\nimport { extractDependency } from './dependency';\nimport { setNodeCommitTopic } from './node';\n\n/**\n * Used when there is a json object as a value in overrides block.\n * @param parents\n * @param child\n * @returns PackageDependency array\n */\nexport function extractOverrideDepsRec(\n  parents: string[],\n  child: NpmManagerData,\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  if (!child || is.emptyObject(child)) {\n    return deps;\n  }\n  for (const [overrideName, versionValue] of Object.entries(child)) {\n    if (is.string(versionValue)) {\n      // special handling for \".\" override dependency name\n      // \".\" means the constraint is applied to the parent dep\n      const currDepName =\n        overrideName === '.' ? parents[parents.length - 1] : overrideName;\n      const dep: PackageDependency<NpmManagerData> = {\n        depName: currDepName,\n        depType: 'overrides',\n        managerData: { parents: parents.slice() }, // set parents for dependency\n      };\n      setNodeCommitTopic(dep);\n      deps.push({\n        ...dep,\n        ...extractDependency('overrides', currDepName, versionValue),\n      });\n    } else {\n      // versionValue is an object, run recursively.\n      parents.push(overrideName);\n      const depsOfObject = extractOverrideDepsRec(parents, versionValue);\n      deps.push(...depsOfObject);\n    }\n  }\n  parents.pop();\n  return deps;\n}\n"]}