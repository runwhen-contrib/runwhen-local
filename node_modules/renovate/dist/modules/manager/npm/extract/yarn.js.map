{"version":3,"file":"yarn.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/extract/yarn.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { miscUtils, structUtils } from '@yarnpkg/core';\nimport { parseSyml } from '@yarnpkg/parsers';\nimport { logger } from '../../../../logger';\nimport {\n  getSiblingFileName,\n  localPathExists,\n  readLocalFile,\n} from '../../../../util/fs';\nimport type { LockFile } from './types';\n\nexport async function getYarnLock(filePath: string): Promise<LockFile> {\n  // TODO #22198\n  const yarnLockRaw = (await readLocalFile(filePath, 'utf8'))!;\n  try {\n    const parsed = parseSyml(yarnLockRaw);\n    const lockedVersions: Record<string, string> = {};\n    let lockfileVersion: number | undefined;\n\n    for (const [key, val] of Object.entries(parsed)) {\n      if (key === '__metadata') {\n        // yarn 2\n        lockfileVersion = parseInt(val.cacheKey, 10);\n        logger.once.debug(\n          `yarn.lock ${filePath} has __metadata.cacheKey=${lockfileVersion}`,\n        );\n      } else {\n        for (const entry of key.split(', ')) {\n          try {\n            const { scope, name, range } = structUtils.parseDescriptor(entry);\n            const packageName = scope ? `@${scope}/${name}` : name;\n            const { selector } = structUtils.parseRange(range);\n\n            logger.trace({ entry, version: val.version });\n            lockedVersions[packageName + '@' + selector] = parsed[key].version;\n          } catch (err) {\n            logger.debug(\n              { entry, err },\n              'Invalid descriptor or range found in yarn.lock',\n            );\n          }\n        }\n      }\n    }\n    const isYarn1 = !('__metadata' in parsed);\n    if (isYarn1) {\n      logger.once.debug(\n        `yarn.lock ${filePath} is has no __metadata so is yarn 1`,\n      );\n    } else {\n      logger.once.debug(\n        `yarn.lock ${filePath} is has __metadata so is yarn 2+`,\n      );\n    }\n    return {\n      isYarn1,\n      lockfileVersion,\n      lockedVersions,\n    };\n  } catch (err) {\n    logger.debug({ filePath, err }, 'Warning: Exception parsing yarn.lock');\n    return { isYarn1: true, lockedVersions: {} };\n  }\n}\n\nexport function getZeroInstallPaths(yarnrcYml: string): string[] {\n  let conf: any;\n  try {\n    conf = parseSyml(yarnrcYml);\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error parsing .yarnrc.yml');\n  }\n  const paths = [\n    conf?.cacheFolder ?? './.yarn/cache',\n    '.pnp.cjs',\n    '.pnp.js',\n    '.pnp.loader.mjs',\n  ];\n  if (\n    conf &&\n    miscUtils.tryParseOptionalBoolean(conf.pnpEnableInlining) === false\n  ) {\n    paths.push(conf.pnpDataPath ?? './.pnp.data.json');\n  }\n  return paths;\n}\n\nexport async function isZeroInstall(yarnrcYmlPath: string): Promise<boolean> {\n  const yarnrcYml = await readLocalFile(yarnrcYmlPath, 'utf8');\n  if (is.string(yarnrcYml)) {\n    const paths = getZeroInstallPaths(yarnrcYml);\n    for (const p of paths) {\n      if (await localPathExists(getSiblingFileName(yarnrcYmlPath, p))) {\n        logger.debug(`Detected Yarn zero-install in ${p}`);\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function getYarnVersionFromLock(lockfile: LockFile): string {\n  const { lockfileVersion, isYarn1 } = lockfile;\n  if (isYarn1) {\n    return '^1.22.18';\n  }\n  if (lockfileVersion && lockfileVersion >= 12) {\n    // This will probably be v5\n    return '>=4.0.0';\n  }\n  if (lockfileVersion && lockfileVersion >= 10) {\n    return '^4.0.0';\n  }\n  if (lockfileVersion && lockfileVersion >= 8) {\n    // https://github.com/yarnpkg/berry/commit/9bcd27ae34aee77a567dd104947407532fa179b3\n    return '^3.0.0';\n  } else if (lockfileVersion && lockfileVersion >= 6) {\n    // https://github.com/yarnpkg/berry/commit/f753790380cbda5b55d028ea84b199445129f9ba\n    return '^2.2.0';\n  }\n\n  return '^2.0.0';\n}\n"]}