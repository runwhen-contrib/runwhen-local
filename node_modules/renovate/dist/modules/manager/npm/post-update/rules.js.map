{"version":3,"file":"rules.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/rules.ts"],"names":[],"mappings":";;AAaA,4CAmGC;;AAhHD,kEAAkC;AAClC,+CAA4C;AAC5C,+EAAyD;AACzD,kDAA+C;AAC/C,oDAAmD;AACnD,8CAAiD;AAQjD,SAAgB,gBAAgB;IAC9B,MAAM,mBAAmB,GAAkB,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC;IAEjE,oEAAoE;IACpE,MAAM,sBAAsB,GAAG,EAAE,CAAC;IAClC,MAAM,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC;QACrC,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;IACH,eAAM,CAAC,KAAK,CAAC,SAAS,YAAY,CAAC,MAAM,mBAAmB,CAAC,CAAC;IAC9D,kHAAkH;IAClH,MAAM,eAAe,GAAG,SAAS;SAC9B,MAAM,EAAE;SACR,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;IAC3E,eAAM,CAAC,KAAK,CACV,SAAS,eAAe,CAAC,MAAM,iCAAiC,CACjE,CAAC;IACF,oGAAoG;IACpG,MAAM,gCAAgC,GAAG,eAAe,CAAC,MAAM,CAC7D,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC,CAC1E,CAAC;IACF,eAAM,CAAC,KAAK,CACV,SAAS,gCAAgC,CAAC,MAAM,2DAA2D,CAC5G,CAAC;IACF,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAC5C,gCAAgC,CACjC,CAAC;IACF,eAAM,CAAC,KAAK,CACV,SAAS,kBAAkB,CAAC,MAAM,iDAAiD,CACpF,CAAC;IACF,KAAK,MAAM,QAAQ,IAAI,kBAAkB,EAAE,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;YAC3B,eAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;YACzD,SAAS;QACX,CAAC;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC;QACvC,sFAAsF;QACtF,uBAAuB;QACvB,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,eAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACrD,SAAS;QACX,CAAC;QAED,MAAM,GAAG,GAAG,KAAK,WAAW,GAAG,CAAC;QAChC,IAAI,UAAU,GAAG,GAAG,CAAC;QACrB,IAAI,IAAA,eAAS,EAAC,WAAW,CAAC,EAAE,CAAC;YAC3B,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACnB,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC;YACnE,eAAM,CAAC,KAAK,CAAC,0BAA0B,UAAU,aAAa,GAAG,EAAE,CAAC,CAAC;YACrE,sBAAsB,CAAC,IAAI,CAAC,GAAG,UAAU,IAAI,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YAEtE,IAAI,QAAQ,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;gBAClC,MAAM,QAAQ,GAAG;oBACf,YAAY,EAAE,QAAQ,CAAC,KAAK;iBAC7B,CAAC;gBACF,mBAAmB,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;gBACzD,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;gBAElD,SAAS;YACX,CAAC;YAED,MAAM,QAAQ,GAAG;gBACf,YAAY,EAAE,QAAQ,CAAC,KAAK;aAC7B,CAAC;YACF,mBAAmB,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;YACzD,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;YAElD,SAAS;QACX,CAAC;QAED,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,YAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjE,eAAM,CAAC,KAAK,CACV,0BAA0B,UAAU,yBAAyB,CAC9D,CAAC;YACF,MAAM,QAAQ,GAAG,IAAA,iBAAQ,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC7C,sBAAsB,CAAC,IAAI,CACzB,GAAG,UAAU,aAAa,QAAQ,CAAC,QAAQ,EAAE,CAC9C,CAAC;YACF,sBAAsB,CAAC,IAAI,CAAC,GAAG,UAAU,cAAc,QAAQ,EAAE,CAAC,CAAC;YAEnE,MAAM,UAAU,GAAG;gBACjB,YAAY,EAAE,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE;aAC1D,CAAC;YACF,mBAAmB,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;YAC3D,mBAAmB,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;QACtD,CAAC;IACH,CAAC;IAED,MAAM,sBAAsB,GAC1B,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5D,OAAO;QACL,sBAAsB;QACtB,mBAAmB,EAAE,sBAAsB;YACzC,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,SAAS;KACd,CAAC;AACJ,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport * as hostRules from '../../../../util/host-rules';\nimport { regEx } from '../../../../util/regex';\nimport { toBase64 } from '../../../../util/string';\nimport { isHttpUrl } from '../../../../util/url';\nimport type { YarnRcYmlFile } from './types';\n\nexport interface HostRulesResult {\n  additionalNpmrcContent: string[];\n  additionalYarnRcYml?: any;\n}\n\nexport function processHostRules(): HostRulesResult {\n  const additionalYarnRcYml: YarnRcYmlFile = { npmRegistries: {} };\n\n  // Determine the additional npmrc content to add based on host rules\n  const additionalNpmrcContent = [];\n  const npmHostRules = hostRules.findAll({\n    hostType: 'npm',\n  });\n  logger.debug(`Found ${npmHostRules.length} npm host rule(s)`);\n  // Include host rules without specific type to mimic the behavior used when determining dependencies with updates.\n  const noTypeHostRules = hostRules\n    .getAll()\n    .filter((rule) => rule.hostType === null || rule.hostType === undefined);\n  logger.debug(\n    `Found ${noTypeHostRules.length} host rule(s) without host type`,\n  );\n  // Drop duplicates for the same matchHost while prefering the more specific rules with hostType npm.\n  const noTypeHostRulesWithoutDuplicates = noTypeHostRules.filter(\n    (rule) => !npmHostRules.some((elem) => elem.matchHost === rule.matchHost),\n  );\n  logger.debug(\n    `Found ${noTypeHostRulesWithoutDuplicates.length} host rule(s) without host type after dropping duplicates`,\n  );\n  const effectiveHostRules = npmHostRules.concat(\n    noTypeHostRulesWithoutDuplicates,\n  );\n  logger.trace(\n    `Found ${effectiveHostRules.length} effective npm host rule(s) after deduplication`,\n  );\n  for (const hostRule of effectiveHostRules) {\n    if (!hostRule.resolvedHost) {\n      logger.debug('Skipping host rule without resolved host');\n      continue;\n    }\n\n    const matchedHost = hostRule.matchHost;\n    // Should never be necessary as if we have a resolvedHost, there has to be a matchHost\n    // istanbul ignore next\n    if (!matchedHost) {\n      logger.debug('Skipping host rule without matchHost');\n      continue;\n    }\n\n    const uri = `//${matchedHost}/`;\n    let cleanedUri = uri;\n    if (isHttpUrl(matchedHost)) {\n      cleanedUri = matchedHost.replace(regEx(/^https?:/), '');\n    }\n\n    if (hostRule.token) {\n      const key = hostRule.authType === 'Basic' ? '_auth' : '_authToken';\n      logger.debug(`Adding npmrc entry for ${cleanedUri} with key ${key}`);\n      additionalNpmrcContent.push(`${cleanedUri}:${key}=${hostRule.token}`);\n\n      if (hostRule.authType === 'Basic') {\n        const registry = {\n          npmAuthIdent: hostRule.token,\n        };\n        additionalYarnRcYml.npmRegistries[cleanedUri] = registry;\n        additionalYarnRcYml.npmRegistries[uri] = registry;\n\n        continue;\n      }\n\n      const registry = {\n        npmAuthToken: hostRule.token,\n      };\n      additionalYarnRcYml.npmRegistries[cleanedUri] = registry;\n      additionalYarnRcYml.npmRegistries[uri] = registry;\n\n      continue;\n    }\n\n    if (is.string(hostRule.username) && is.string(hostRule.password)) {\n      logger.debug(\n        `Adding npmrc entry for ${cleanedUri} with username/password`,\n      );\n      const password = toBase64(hostRule.password);\n      additionalNpmrcContent.push(\n        `${cleanedUri}:username=${hostRule.username}`,\n      );\n      additionalNpmrcContent.push(`${cleanedUri}:_password=${password}`);\n\n      const registries = {\n        npmAuthIdent: `${hostRule.username}:${hostRule.password}`,\n      };\n      additionalYarnRcYml.npmRegistries[cleanedUri] = registries;\n      additionalYarnRcYml.npmRegistries[uri] = registries;\n    }\n  }\n\n  const hasYarnRcNpmRegistries =\n    Object.keys(additionalYarnRcYml.npmRegistries).length > 0;\n  return {\n    additionalNpmrcContent,\n    additionalYarnRcYml: hasYarnRcNpmRegistries\n      ? additionalYarnRcYml\n      : undefined,\n  };\n}\n"]}