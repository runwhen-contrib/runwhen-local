{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/npm/post-update/utils.ts"],"names":[],"mappings":";;AAQA,kDAIC;AAID,0CAYC;AAED,4DAsBC;;AApDD,4DAA4B;AAC5B,0DAA0B;AAC1B,+CAA4C;AAC5C,4CAAoD;AACpD,gDAA6C;AAE7C,sCAAwC;AAExC,SAAgB,mBAAmB,CACjC,WAAmB;IAEnB,OAAO,IAAI,WAAI,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;AACtD,CAAC;AAIM,KAAK,UAAU,eAAe,CACnC,WAAmB;IAEnB,MAAM,IAAI,GAAG,MAAM,IAAA,kBAAa,EAC9B,eAAK,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,EACvC,MAAM,CACP,CAAC;IACF,MAAM,GAAG,GAAG,oBAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACxC,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,GAAG,CAAC,IAAI,CAAC;IAClB,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,SAAgB,wBAAwB,CACtC,IAAY,EACZ,GAAsB;IAEtB,IAAI,GAAG,CAAC,cAAc,EAAE,IAAI,KAAK,IAAI,EAAE,CAAC;QACtC,MAAM,OAAO,GAAG,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC;QAC3C,eAAM,CAAC,KAAK,CACV,SAAS,IAAI,+CAA+C,OAAO,EAAE,CACtE,CAAC;QACF,IAAI,gBAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC;YAC1B,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACxB,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,eAAM,CAAC,KAAK,CACV,SAAS,IAAI,wCAAwC,OAAO,EAAE,CAC/D,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import semver from 'semver';\nimport upath from 'upath';\nimport { logger } from '../../../../logger';\nimport { readLocalFile } from '../../../../util/fs';\nimport { Lazy } from '../../../../util/lazy';\nimport type { PackageJsonSchema } from '../schema';\nimport { PackageJson } from '../schema';\n\nexport function lazyLoadPackageJson(\n  lockFileDir: string,\n): Lazy<Promise<PackageJsonSchema>> {\n  return new Lazy(() => loadPackageJson(lockFileDir));\n}\n\nexport type LazyPackageJson = ReturnType<typeof lazyLoadPackageJson>;\n\nexport async function loadPackageJson(\n  lockFileDir: string,\n): Promise<PackageJsonSchema> {\n  const json = await readLocalFile(\n    upath.join(lockFileDir, 'package.json'),\n    'utf8',\n  );\n  const res = PackageJson.safeParse(json);\n  if (res.success) {\n    return res.data;\n  }\n  return {};\n}\n\nexport function getPackageManagerVersion(\n  name: string,\n  pkg: PackageJsonSchema,\n): string | null {\n  if (pkg.packageManager?.name === name) {\n    const version = pkg.packageManager.version;\n    logger.debug(\n      `Found ${name} constraint in package.json packageManager: ${version}`,\n    );\n    if (semver.valid(version)) {\n      return version;\n    }\n    return null;\n  }\n  if (pkg.engines?.[name]) {\n    const version = pkg.engines[name];\n    logger.debug(\n      `Found ${name} constraint in package.json engines: ${version}`,\n    );\n    return version;\n  }\n  return null;\n}\n"]}