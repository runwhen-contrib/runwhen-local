{"version":3,"file":"pnpm.js","sourceRoot":"","sources":["../../../../../../lib/modules/manager/npm/update/dependency/pnpm.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { Document } from 'yaml';\nimport { CST, isCollection, isPair, isScalar, parseDocument } from 'yaml';\nimport { logger } from '../../../../../logger';\nimport type { UpdateDependencyConfig } from '../../../types';\nimport { PnpmCatalogsSchema } from '../../schema';\nimport { getNewGitValue, getNewNpmAliasValue } from './common';\n\nexport function updatePnpmCatalogDependency({\n  fileContent,\n  upgrade,\n}: UpdateDependencyConfig): string | null {\n  const { depType, managerData, depName } = upgrade;\n\n  const catalogName = depType?.split('.').at(-1);\n\n  // istanbul ignore if\n  if (!is.string(catalogName)) {\n    logger.error(\n      'No catalogName was found; this is likely an extraction error.',\n    );\n    return null;\n  }\n\n  let { newValue } = upgrade;\n\n  newValue = getNewGitValue(upgrade) ?? newValue;\n  newValue = getNewNpmAliasValue(newValue, upgrade) ?? newValue;\n\n  logger.trace(\n    `npm.updatePnpmCatalogDependency(): ${depType}:${managerData?.catalogName}.${depName} = ${newValue}`,\n  );\n\n  let document;\n  let parsedContents;\n\n  try {\n    // In order to preserve the original formatting as much as possible, we want\n    // manipulate the CST directly. Using the AST (the result of parseDocument)\n    // does not guarantee that formatting would be the same after\n    // stringification. However, the CST is more annoying to query for certain\n    // values. Thus, we use both an annotated AST and a JS representation; the\n    // former for manipulation, and the latter for querying/validation.\n    document = parseDocument(fileContent, { keepSourceTokens: true });\n    parsedContents = PnpmCatalogsSchema.parse(document.toJS());\n  } catch (err) {\n    logger.debug({ err }, 'Could not parse pnpm-workspace YAML file.');\n    return null;\n  }\n\n  // In pnpm-workspace.yaml, the default catalog can be either `catalog` or\n  // `catalog.default`, but not both (pnpm throws outright with a config error).\n  // Thus, we must check which entry is being used, to reference it from / set\n  // it in the right place.\n  const usesImplicitDefaultCatalog = parsedContents.catalog !== undefined;\n\n  const oldVersion =\n    catalogName === 'default' && usesImplicitDefaultCatalog\n      ? parsedContents.catalog?.[depName!]\n      : parsedContents.catalogs?.[catalogName]?.[depName!];\n\n  if (oldVersion === newValue) {\n    logger.trace('Version is already updated');\n    return fileContent;\n  }\n\n  // Update the value\n  const path = getDepPath({\n    depName: depName!,\n    catalogName,\n    usesImplicitDefaultCatalog,\n  });\n\n  const modifiedDocument = changeDependencyIn(document, path, {\n    newValue,\n    newName: upgrade.newName,\n  });\n\n  if (!modifiedDocument) {\n    // Case where we are explicitly unable to substitute the key/value, for\n    // example if the value was an alias.\n    return null;\n  }\n\n  // istanbul ignore if: this should not happen in practice, but we must satisfy th etypes\n  if (!modifiedDocument.contents?.srcToken) {\n    return null;\n  }\n\n  return CST.stringify(modifiedDocument.contents.srcToken);\n}\n\n/**\n * Change the scalar name and/or value of a collection item in a YAML document,\n * while keeping formatting consistent. Mutates the given document.\n */\nfunction changeDependencyIn(\n  document: Document,\n  path: string[],\n  { newName, newValue }: { newName?: string; newValue?: string },\n): Document | null {\n  const parentPath = path.slice(0, -1);\n  const relevantItemKey = path.at(-1);\n\n  const parentNode = document.getIn(parentPath);\n\n  if (!parentNode || !isCollection(parentNode)) {\n    return null;\n  }\n\n  const relevantNode = parentNode.items.find(\n    (item) =>\n      isPair(item) && isScalar(item.key) && item.key.value === relevantItemKey,\n  );\n\n  if (!relevantNode || !isPair(relevantNode)) {\n    return null;\n  }\n\n  if (newName) {\n    // istanbul ignore if: the try..catch block above already throws if a key is an alias\n    if (!CST.isScalar(relevantNode.srcToken?.key)) {\n      return null;\n    }\n    CST.setScalarValue(relevantNode.srcToken.key, newName);\n  }\n\n  if (newValue) {\n    // We only support scalar values when substituting. This explicitly avoids\n    // substituting aliases, since those can be resolved from a shared location,\n    // and replacing either the referrent anchor or the alias would be wrong in\n    // the general case. We leave this up to the user, e.g. via a Regex custom\n    // manager.\n    if (!CST.isScalar(relevantNode.srcToken?.value)) {\n      return null;\n    }\n    CST.setScalarValue(relevantNode.srcToken.value, newValue);\n  }\n\n  return document;\n}\n\nfunction getDepPath({\n  catalogName,\n  depName,\n  usesImplicitDefaultCatalog,\n}: {\n  usesImplicitDefaultCatalog: boolean;\n  catalogName: string;\n  depName: string;\n}): string[] {\n  if (catalogName === 'default' && usesImplicitDefaultCatalog) {\n    return ['catalog', depName];\n  } else {\n    return ['catalogs', catalogName, depName];\n  }\n}\n"]}