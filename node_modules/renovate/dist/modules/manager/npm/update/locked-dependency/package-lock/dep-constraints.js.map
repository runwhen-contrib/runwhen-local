{"version":3,"file":"dep-constraints.js","sourceRoot":"","sources":["../../../../../../../lib/modules/manager/npm/update/locked-dependency/package-lock/dep-constraints.ts"],"names":[],"mappings":";;AAOA,gDA8EC;AApFD,qDAAkD;AAClD,wDAAqD;AACrD,uDAA8D;AAG9D,mEAAmE;AACnE,SAAgB,kBAAkB,CAChC,WAAwB,EACxB,SAA6B,EAC7B,OAAe,EACf,cAAsB,EACtB,UAAkB,EAClB,aAAsB;IAEtB,IAAI,OAAO,GAAuB,EAAE,CAAC;IACrC,IAAI,qBAAqB,GAAG,WAAW,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC;IAChE,IACE,qBAAqB;QACrB,SAAM,CAAC,OAAO,CAAC,cAAc,EAAE,qBAAqB,CAAC,EACrD,CAAC;QACD,OAAO,CAAC,IAAI,CAAC;YACX,OAAO,EAAE,cAAc;YACvB,UAAU,EAAE,qBAAqB;SAClC,CAAC,CAAC;IACL,CAAC;IACD,qBAAqB,GAAG,WAAW,CAAC,eAAe,EAAE,CAAC,OAAO,CAAC,CAAC;IAC/D,IACE,qBAAqB;QACrB,SAAM,CAAC,OAAO,CAAC,cAAc,EAAE,qBAAqB,CAAC,EACrD,CAAC;QACD,OAAO,CAAC,IAAI,CAAC;YACX,OAAO,EAAE,iBAAiB;YAC1B,UAAU,EAAE,qBAAqB;SAClC,CAAC,CAAC;IACL,CAAC;IACD,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;IACtD,IAAI,aAAa,IAAI,QAAQ,EAAE,CAAC;QAC9B,IAAI,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,UAAU,EAAE,CAAC;YACf,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;YAC3D,uBAAuB;YACvB,IAAI,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC/B,IAAI,SAAM,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE,CAAC;oBAC/C,IAAI,UAAU,KAAK,cAAc,EAAE,CAAC;wBAClC,yGAAyG;wBACzG,QAAQ,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC;oBACjC,CAAC;oBACD,OAAO,CAAC,IAAI,CAAC;wBACX,aAAa;wBACb,aAAa,EAAE,OAAO;wBACtB,UAAU;qBACX,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,eAAM,CAAC,IAAI,CACT,EAAE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,EACtD,8BAA8B,CAC/B,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IACD,IAAI,YAAY,EAAE,CAAC;QACjB,KAAK,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;YACrE,OAAO,GAAG,OAAO,CAAC,MAAM,CACtB,kBAAkB,CAChB,WAAW,EACX,UAAU,EACV,OAAO,EACP,cAAc,EACd,UAAU,EACV,WAAW,CACZ,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IACD,SAAS;IACT,MAAM,GAAG,GAAuB,EAAE,CAAC;IACnC,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;QAC1B,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,EAAE,CAAC;YAC3D,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;IACH,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import type { PackageJson } from 'type-fest';\nimport { logger } from '../../../../../../logger';\nimport { regEx } from '../../../../../../util/regex';\nimport { api as semver } from '../../../../../versioning/npm';\nimport type { PackageLockOrEntry, ParentDependency } from './types';\n\n// Finds all parent dependencies for a given depName@currentVersion\nexport function findDepConstraints(\n  packageJson: PackageJson,\n  lockEntry: PackageLockOrEntry,\n  depName: string,\n  currentVersion: string,\n  newVersion: string,\n  parentDepName?: string,\n): ParentDependency[] {\n  let parents: ParentDependency[] = [];\n  let packageJsonConstraint = packageJson.dependencies?.[depName];\n  if (\n    packageJsonConstraint &&\n    semver.matches(currentVersion, packageJsonConstraint)\n  ) {\n    parents.push({\n      depType: 'dependencies',\n      constraint: packageJsonConstraint,\n    });\n  }\n  packageJsonConstraint = packageJson.devDependencies?.[depName];\n  if (\n    packageJsonConstraint &&\n    semver.matches(currentVersion, packageJsonConstraint)\n  ) {\n    parents.push({\n      depType: 'devDependencies',\n      constraint: packageJsonConstraint,\n    });\n  }\n  const { dependencies, requires, version } = lockEntry;\n  if (parentDepName && requires) {\n    let constraint = requires[depName];\n    if (constraint) {\n      constraint = constraint.replace(regEx(/(\\d)rc$/), '$1-rc');\n      // istanbul ignore else\n      if (semver.isValid(constraint)) {\n        if (semver.matches(currentVersion, constraint)) {\n          if (constraint === currentVersion) {\n            // Workaround for old versions of npm which wrote the exact version in requires instead of the constraint\n            requires[depName] = newVersion;\n          }\n          parents.push({\n            parentDepName,\n            parentVersion: version,\n            constraint,\n          });\n        }\n      } else {\n        logger.warn(\n          { parentDepName, depName, currentVersion, constraint },\n          'Parent constraint is invalid',\n        );\n      }\n    }\n  }\n  if (dependencies) {\n    for (const [packageName, dependency] of Object.entries(dependencies)) {\n      parents = parents.concat(\n        findDepConstraints(\n          packageJson,\n          dependency,\n          depName,\n          currentVersion,\n          newVersion,\n          packageName,\n        ),\n      );\n    }\n  }\n  // dedupe\n  const res: ParentDependency[] = [];\n  for (const req of parents) {\n    const reqStringified = JSON.stringify(req);\n    if (!res.find((i) => JSON.stringify(i) === reqStringified)) {\n      res.push(req);\n    }\n  }\n  return res;\n}\n"]}