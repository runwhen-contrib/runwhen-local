{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/modules/manager/npm/update/locked-dependency/yarn-lock/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseSyml } from '@yarnpkg/parsers';\nimport { logger } from '../../../../../../logger';\nimport { api as semver } from '../../../../../versioning/npm';\nimport type { UpdateLockedConfig, UpdateLockedResult } from '../../../../types';\nimport { getLockedDependencies } from './get-locked';\nimport { replaceConstraintVersion } from './replace';\nimport type { YarnLock, YarnLockEntryUpdate } from './types';\n\nexport function updateLockedDependency(\n  config: UpdateLockedConfig,\n): UpdateLockedResult {\n  const { depName, currentVersion, newVersion, lockFile, lockFileContent } =\n    config;\n  logger.debug(\n    `npm.updateLockedDependency: ${depName}@${currentVersion} -> ${newVersion} [${lockFile}]`,\n  );\n  let yarnLock: YarnLock;\n  try {\n    // TODO #22198\n    yarnLock = parseSyml(lockFileContent!);\n  } catch (err) {\n    logger.warn({ err }, 'Failed to parse yarn files');\n    return { status: 'update-failed' };\n  }\n  try {\n    const lockedDeps = getLockedDependencies(yarnLock, depName, currentVersion);\n    if (!lockedDeps.length) {\n      const newLockedDeps = getLockedDependencies(\n        yarnLock,\n        depName,\n        newVersion,\n      );\n      if (newLockedDeps.length) {\n        logger.debug(\n          `${depName}@${currentVersion} not found in ${lockFile} but ${depName}@${newVersion} was - looks like it's already updated`,\n        );\n        return { status: 'already-updated' };\n      }\n      logger.debug(\n        `${depName}@${currentVersion} not found in ${lockFile} - cannot update`,\n      );\n      return { status: 'update-failed' };\n    }\n    if ('__metadata' in yarnLock) {\n      logger.debug(\n        'Cannot patch Yarn 2+ lock file directly - falling back to using yarn',\n      );\n      return { status: 'unsupported' };\n    }\n    logger.debug(\n      `Found matching dependencies with length ${lockedDeps.length}`,\n    );\n    const updateLockedDeps: YarnLockEntryUpdate[] = [];\n    for (const lockedDep of lockedDeps) {\n      if (semver.matches(newVersion, lockedDep.constraint)) {\n        logger.debug(\n          `Dependency ${depName} can be updated from ${newVersion} to ${newVersion} in range ${lockedDep.constraint}`,\n        );\n        updateLockedDeps.push({ ...lockedDep, newVersion });\n        continue;\n      }\n      logger.debug(\n        `Dependency ${depName} cannot be updated from ${newVersion} to ${newVersion} in range ${lockedDep.constraint}`,\n      );\n      return { status: 'update-failed' };\n    }\n    // TODO #22198\n    let newLockFileContent = lockFileContent!;\n    for (const dependency of updateLockedDeps) {\n      const { depName, constraint, newVersion } = dependency;\n      newLockFileContent = replaceConstraintVersion(\n        newLockFileContent,\n        depName,\n        constraint,\n        newVersion,\n      );\n    }\n    // istanbul ignore if: cannot test\n    if (newLockFileContent === lockFileContent) {\n      logger.debug('Failed to make any changes to lock file');\n      return { status: 'update-failed' };\n    }\n    return { status: 'updated', files: { [lockFile]: newLockFileContent } };\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'updateLockedDependency() error');\n    return { status: 'update-failed' };\n  }\n}\n"]}