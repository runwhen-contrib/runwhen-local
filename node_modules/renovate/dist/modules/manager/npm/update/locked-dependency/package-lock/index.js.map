{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/modules/manager/npm/update/locked-dependency/package-lock/index.ts"],"names":[],"mappings":"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","sourcesContent":["import detectIndent from 'detect-indent';\nimport type { PackageJson } from 'type-fest';\nimport { logger } from '../../../../../../logger';\nimport { api as semver } from '../../../../../versioning/npm';\nimport type { UpdateLockedConfig, UpdateLockedResult } from '../../../../types';\nimport { updateDependency } from '../../dependency';\nimport { findFirstParentVersion } from '../common/parent-version';\nimport { findDepConstraints } from './dep-constraints';\nimport { getLockedDependencies } from './get-locked';\nimport type { PackageLockOrEntry } from './types';\n\nexport async function updateLockedDependency(\n  config: UpdateLockedConfig,\n  isParentUpdate = false,\n): Promise<UpdateLockedResult> {\n  const {\n    depName,\n    currentVersion,\n    newVersion,\n    packageFile,\n    packageFileContent,\n    lockFile,\n    lockFileContent,\n    allowParentUpdates = true,\n    allowHigherOrRemoved = false,\n  } = config;\n  logger.debug(\n    `npm.updateLockedDependency: ${depName}@${currentVersion} -> ${newVersion} [${lockFile}]`,\n  );\n  try {\n    let packageJson: PackageJson;\n    let packageLockJson: PackageLockOrEntry;\n    // TODO #22198\n    const detectedIndent = detectIndent(lockFileContent!).indent || '  ';\n    let newPackageJsonContent: string | null | undefined;\n    try {\n      // TODO #22198\n      packageJson = JSON.parse(packageFileContent!);\n      packageLockJson = JSON.parse(lockFileContent!);\n    } catch (err) {\n      logger.warn({ err }, 'Failed to parse files');\n      return { status: 'update-failed' };\n    }\n    const { lockfileVersion } = packageLockJson;\n    const lockedDeps = getLockedDependencies(\n      packageLockJson,\n      depName,\n      currentVersion,\n    );\n    if (lockedDeps.some((dep) => dep.bundled)) {\n      logger.debug(\n        `Package ${depName}@${currentVersion} is bundled and cannot be updated`,\n      );\n      return { status: 'update-failed' };\n    }\n    if (!lockedDeps.length) {\n      const newLockedDeps = getLockedDependencies(\n        packageLockJson,\n        depName,\n        newVersion,\n      );\n      let status: 'update-failed' | 'already-updated';\n      if (newLockedDeps.length) {\n        logger.debug(\n          `${depName}@${currentVersion} not found in ${lockFile} but ${depName}@${newVersion} was - looks like it's already updated`,\n        );\n        status = 'already-updated';\n      } else {\n        if (lockfileVersion !== 1) {\n          logger.debug(\n            // TODO: types (#22198)\n            `Found lockfileVersion ${packageLockJson.lockfileVersion!}`,\n          );\n          status = 'update-failed';\n        } else if (allowHigherOrRemoved) {\n          // it's acceptable if the package is no longer present\n          const anyVersionLocked = getLockedDependencies(\n            packageLockJson,\n            depName,\n            null,\n          );\n          if (anyVersionLocked.length) {\n            if (\n              anyVersionLocked.every((dep) =>\n                semver.isGreaterThan(dep.version, newVersion),\n              )\n            ) {\n              logger.debug(\n                `${depName} found in ${lockFile} with higher version - looks like it's already updated`,\n              );\n              status = 'already-updated';\n            } else {\n              logger.debug(\n                { anyVersionLocked },\n                `Found alternative versions of qs`,\n              );\n              status = 'update-failed';\n            }\n          } else {\n            logger.debug(\n              `${depName} not found in ${lockFile} - looks like it's already removed`,\n            );\n            status = 'already-updated';\n          }\n        } else {\n          logger.debug(\n            `${depName}@${currentVersion} not found in ${lockFile} - cannot update`,\n          );\n          status = 'update-failed';\n        }\n      }\n      // Don't return {} if we're a parent update or else the whole update will fail\n      // istanbul ignore if: too hard to replicate\n      if (isParentUpdate) {\n        const files: Record<string, string> = {};\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        files[packageFile!] = packageFileContent!;\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        files[lockFile!] = lockFileContent!;\n        return { status, files };\n      }\n      return { status };\n    }\n    logger.debug(\n      `Found matching dependencies with length ${lockedDeps.length}`,\n    );\n    const constraints = findDepConstraints(\n      packageJson,\n      packageLockJson,\n      depName,\n      currentVersion,\n      newVersion,\n    );\n    logger.trace({ deps: lockedDeps, constraints }, 'Matching details');\n    if (!constraints.length) {\n      logger.info(\n        { depName, currentVersion, newVersion },\n        'Could not find constraints for the locked dependency - cannot remediate',\n      );\n      return { status: 'update-failed' };\n    }\n    const parentUpdates: Partial<UpdateLockedConfig>[] = [];\n    for (const {\n      parentDepName,\n      parentVersion,\n      constraint,\n      depType,\n    } of constraints) {\n      if (semver.matches(newVersion, constraint)) {\n        // Parent dependency is compatible with the new version we want\n        logger.debug(\n          `${depName} can be updated to ${newVersion} in-range with matching constraint \"${constraint}\" in ${\n            // TODO: types (#22198)\n            parentDepName\n              ? `${parentDepName}@${parentVersion!}`\n              : /* istanbul ignore next: hard to test */ packageFile\n          }`,\n        );\n      } else if (parentDepName && parentVersion) {\n        if (!allowParentUpdates) {\n          logger.debug(\n            `Cannot update ${depName} to ${newVersion} without an update to ${parentDepName}`,\n          );\n          return { status: 'update-failed' };\n        }\n        // Parent dependency needs updating too\n        const parentNewVersion = await findFirstParentVersion(\n          parentDepName,\n          parentVersion,\n          depName,\n          newVersion,\n        );\n        if (parentNewVersion) {\n          if (parentNewVersion === parentVersion) {\n            logger.debug(\n              `Update of ${depName} to ${newVersion} already achieved in parent ${parentDepName}@${parentNewVersion}`,\n            );\n          } else {\n            // Update the parent dependency so that we can update this dependency\n            logger.debug(\n              `Update of ${depName} to ${newVersion} can be achieved due to parent ${parentDepName}`,\n            );\n            const parentUpdate: Partial<UpdateLockedConfig> = {\n              depName: parentDepName,\n              currentVersion: parentVersion,\n              newVersion: parentNewVersion,\n            };\n            parentUpdates.push(parentUpdate);\n          }\n        } else {\n          // For some reason it's not possible to update the parent to a version compatible with our desired dep version\n          logger.debug(\n            `Update of ${depName} to ${newVersion} cannot be achieved due to parent ${parentDepName}`,\n          );\n          return { status: 'update-failed' };\n        }\n      } else if (depType) {\n        // TODO: `newValue` can probably null\n        // The constraint comes from the package.json file, so we need to update it\n        const newValue = semver.getNewValue({\n          currentValue: constraint,\n          rangeStrategy: 'replace',\n          currentVersion,\n          newVersion,\n        })!;\n        newPackageJsonContent = updateDependency({\n          // TODO #22198\n          fileContent: packageFileContent!,\n          upgrade: { depName, depType, newValue },\n        });\n      }\n    }\n    for (const dependency of lockedDeps) {\n      // Remove resolved and integrity fields for npm to fill in\n      dependency.version = newVersion;\n      delete dependency.resolved;\n      delete dependency.integrity;\n    }\n    let newLockFileContent = JSON.stringify(\n      packageLockJson,\n      null,\n      detectedIndent,\n    );\n    // iterate through the parent updates first\n    for (const parentUpdate of parentUpdates) {\n      const parentUpdateConfig = {\n        ...config,\n        ...parentUpdate,\n        lockFileContent: newLockFileContent,\n        packageFileContent: newPackageJsonContent ?? packageFileContent,\n      };\n      const parentUpdateResult = await updateLockedDependency(\n        parentUpdateConfig,\n        true,\n      );\n      // istanbul ignore if: hard to test due to recursion\n      if (!parentUpdateResult.files) {\n        logger.debug(\n          // TODO: types (#22198)\n          `Update of ${depName} to ${newVersion} impossible due to failed update of parent ${parentUpdate.depName} to ${parentUpdate.newVersion}`,\n        );\n        return { status: 'update-failed' };\n      }\n      newPackageJsonContent =\n        parentUpdateResult.files[packageFile] || newPackageJsonContent;\n      newLockFileContent =\n        parentUpdateResult.files[lockFile] ||\n        /* istanbul ignore next: hard to test */ newLockFileContent;\n    }\n    const files: Record<string, string> = {};\n    if (newLockFileContent) {\n      files[lockFile] = newLockFileContent;\n    }\n    if (newPackageJsonContent) {\n      files[packageFile] = newPackageJsonContent;\n    } else if (lockfileVersion !== 1) {\n      logger.debug(\n        'Remediations which change package-lock.json only are not supported unless lockfileVersion=1',\n      );\n      return { status: 'unsupported' };\n    }\n    return { status: 'updated', files };\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, 'updateLockedDependency() error');\n    return { status: 'update-failed' };\n  }\n}\n"]}