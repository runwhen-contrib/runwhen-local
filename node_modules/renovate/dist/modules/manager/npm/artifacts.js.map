{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/npm/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import upath from 'upath';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport { readLocalFile, writeLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport { getNodeToolConstraint } from './post-update/node-version';\nimport { processHostRules } from './post-update/rules';\nimport { lazyLoadPackageJson } from './post-update/utils';\nimport {\n  getNpmrcContent,\n  resetNpmrcContent,\n  updateNpmrcContent,\n} from './utils';\n\n// eg. 8.15.5+sha256.4b4efa12490e5055d59b9b9fc9438b7d581a6b7af3b5675eb5c5f447cee1a589\nconst versionWithHashRegString = '^(?<version>.*)\\\\+(?<hash>.*)';\n\n// Execute 'corepack use' command for npm manager updates\n// This step is necessary because Corepack recommends attaching a hash after the version\n// The hash is generated only after running 'corepack use' and cannot be fetched from the npm registry\nexport async function updateArtifacts({\n  packageFileName,\n  config,\n  updatedDeps,\n  newPackageFileContent: existingPackageFileContent,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`npm.updateArtifacts(${packageFileName})`);\n  const packageManagerUpdate = updatedDeps.find(\n    (dep) => dep.depType === 'packageManager',\n  );\n\n  if (!packageManagerUpdate) {\n    logger.debug('No packageManager updates - returning null');\n    return null;\n  }\n\n  const { currentValue, depName, newVersion } = packageManagerUpdate;\n\n  // Execute 'corepack use' command only if the currentValue already has hash in it\n  if (!currentValue || !regEx(versionWithHashRegString).test(currentValue)) {\n    return null;\n  }\n\n  // write old updates before executing corepack update so that they are not removed from package file\n  await writeLocalFile(packageFileName, existingPackageFileContent);\n\n  // Asumming that corepack only needs to modify the package.json file in the root folder\n  // As it should not be regular practice to have different package managers in different workspaces\n  const pkgFileDir = upath.dirname(packageFileName);\n  const { additionalNpmrcContent } = processHostRules();\n  const npmrcContent = await getNpmrcContent(pkgFileDir);\n  const lazyPkgJson = lazyLoadPackageJson(pkgFileDir);\n  const cmd = `corepack use ${depName}@${newVersion}`;\n\n  const nodeConstraints = await getNodeToolConstraint(\n    config,\n    updatedDeps,\n    pkgFileDir,\n    lazyPkgJson,\n  );\n\n  const execOptions: ExecOptions = {\n    cwdFile: packageFileName,\n    toolConstraints: [\n      nodeConstraints,\n      {\n        toolName: 'corepack',\n        constraint: config.constraints?.corepack,\n      },\n    ],\n    docker: {},\n  };\n\n  await updateNpmrcContent(pkgFileDir, npmrcContent, additionalNpmrcContent);\n  try {\n    await exec(cmd, execOptions);\n    await resetNpmrcContent(pkgFileDir, npmrcContent);\n    const newPackageFileContent = await readLocalFile(packageFileName, 'utf8');\n    if (\n      !newPackageFileContent ||\n      existingPackageFileContent === newPackageFileContent\n    ) {\n      return null;\n    }\n    logger.debug('Returning updated package.json');\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: packageFileName,\n          contents: newPackageFileContent,\n        },\n      },\n    ];\n  } catch (err) {\n    logger.warn({ err }, 'Error updating package.json');\n    await resetNpmrcContent(pkgFileDir, npmrcContent);\n    return [\n      {\n        artifactError: {\n          fileName: packageFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}