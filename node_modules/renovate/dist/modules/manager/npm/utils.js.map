{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/npm/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import detectIndent from 'detect-indent';\nimport upath from 'upath';\nimport { logger } from '../../../logger';\nimport {\n  deleteLocalFile,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport type { LockFile, ParseLockFileResult } from './types';\n\nexport function parseLockFile(lockFile: string): ParseLockFileResult {\n  const detectedIndent = detectIndent(lockFile).indent || '  ';\n\n  let lockFileParsed: LockFile | undefined;\n  try {\n    lockFileParsed = JSON.parse(lockFile);\n  } catch (err) {\n    logger.warn({ err }, 'Error parsing npm lock file');\n  }\n\n  return { detectedIndent, lockFileParsed };\n}\n\nexport function composeLockFile(lockFile: LockFile, indent: string): string {\n  return JSON.stringify(lockFile, null, indent) + '\\n';\n}\n\nexport async function getNpmrcContent(dir: string): Promise<string | null> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  let originalNpmrcContent: string | null = null;\n  try {\n    originalNpmrcContent = await readLocalFile(npmrcFilePath, 'utf8');\n  } catch /* istanbul ignore next */ {\n    originalNpmrcContent = null;\n  }\n  if (originalNpmrcContent) {\n    logger.debug(`npmrc file ${npmrcFilePath} found in repository`);\n  }\n  return originalNpmrcContent;\n}\n\nexport async function updateNpmrcContent(\n  dir: string,\n  originalContent: string | null,\n  additionalLines: string[],\n): Promise<void> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  const newNpmrc = originalContent\n    ? [originalContent, ...additionalLines]\n    : additionalLines;\n  try {\n    const newContent = newNpmrc.join('\\n');\n    if (newContent !== originalContent) {\n      logger.debug(`Writing updated .npmrc file to ${npmrcFilePath}`);\n      await writeLocalFile(npmrcFilePath, `${newContent}\\n`);\n    }\n  } catch /* istanbul ignore next */ {\n    logger.warn('Unable to write custom npmrc file');\n  }\n}\n\nexport async function resetNpmrcContent(\n  dir: string,\n  originalContent: string | null,\n): Promise<void> {\n  const npmrcFilePath = upath.join(dir, '.npmrc');\n  if (originalContent) {\n    try {\n      await writeLocalFile(npmrcFilePath, originalContent);\n    } catch /* istanbul ignore next */ {\n      logger.warn('Unable to reset npmrc to original contents');\n    }\n  } else {\n    try {\n      await deleteLocalFile(npmrcFilePath);\n    } catch /* istanbul ignore next */ {\n      logger.warn('Unable to delete custom npmrc');\n    }\n  }\n}\n"]}