{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { join } from 'upath';\nimport { TEMPORARY_ERROR } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  ensureDir,\n  getLocalFiles,\n  getSiblingFileName,\n  outputCacheFile,\n  privateCacheDir,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getFiles } from '../../../util/git';\nimport { regEx } from '../../../util/regex';\nimport type {\n  UpdateArtifact,\n  UpdateArtifactsConfig,\n  UpdateArtifactsResult,\n} from '../types';\nimport { createNuGetConfigXml } from './config-formatter';\nimport {\n  MSBUILD_CENTRAL_FILE,\n  NUGET_CENTRAL_FILE,\n  getDependentPackageFiles,\n} from './package-tree';\nimport {\n  findGlobalJson,\n  getConfiguredRegistries,\n  getDefaultRegistries,\n} from './util';\n\nasync function createCachedNuGetConfigFile(\n  nugetCacheDir: string,\n  packageFileName: string,\n): Promise<string> {\n  const registries =\n    (await getConfiguredRegistries(packageFileName)) ?? getDefaultRegistries();\n\n  const contents = createNuGetConfigXml(registries);\n\n  const cachedNugetConfigFile = join(nugetCacheDir, `nuget.config`);\n  await ensureDir(nugetCacheDir);\n  await outputCacheFile(cachedNugetConfigFile, contents);\n\n  return cachedNugetConfigFile;\n}\n\nasync function runDotnetRestore(\n  packageFileName: string,\n  dependentPackageFileNames: string[],\n  config: UpdateArtifactsConfig,\n): Promise<void> {\n  const nugetCacheDir = join(privateCacheDir(), 'nuget');\n\n  const nugetConfigFile = await createCachedNuGetConfigFile(\n    nugetCacheDir,\n    packageFileName,\n  );\n\n  const dotnetVersion =\n    config.constraints?.dotnet ??\n    (await findGlobalJson(packageFileName))?.sdk?.version;\n  const execOptions: ExecOptions = {\n    docker: {},\n    extraEnv: {\n      NUGET_PACKAGES: join(nugetCacheDir, 'packages'),\n      MSBUILDDISABLENODEREUSE: '1',\n    },\n    toolConstraints: [{ toolName: 'dotnet', constraint: dotnetVersion }],\n  };\n\n  const cmds = [\n    ...dependentPackageFileNames.map(\n      (fileName) =>\n        `dotnet restore ${quote(\n          fileName,\n        )} --force-evaluate --configfile ${quote(nugetConfigFile)}`,\n    ),\n  ];\n  await exec(cmds, execOptions);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  newPackageFileContent,\n  config,\n  updatedDeps,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`nuget.updateArtifacts(${packageFileName})`);\n\n  // https://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions\n  // https://github.com/microsoft/MSBuildSdks/tree/main/src/CentralPackageVersions\n  const isCentralManagement =\n    packageFileName === NUGET_CENTRAL_FILE ||\n    packageFileName === MSBUILD_CENTRAL_FILE ||\n    packageFileName.endsWith(`/${NUGET_CENTRAL_FILE}`) ||\n    packageFileName.endsWith(`/${MSBUILD_CENTRAL_FILE}`);\n\n  if (\n    !isCentralManagement &&\n    !regEx(/(?:cs|vb|fs)proj$/i).test(packageFileName)\n  ) {\n    // This could be implemented in the future if necessary.\n    // It's not that easy though because the questions which\n    // project file to restore how to determine which lock files\n    // have been changed in such cases.\n    logger.debug(\n      { packageFileName },\n      'Not updating lock file for non project files',\n    );\n    return null;\n  }\n\n  const deps = await getDependentPackageFiles(\n    packageFileName,\n    isCentralManagement,\n  );\n  const packageFiles = deps.filter((d) => d.isLeaf).map((d) => d.name);\n\n  logger.trace(\n    { packageFiles },\n    `Found ${packageFiles.length} dependent package files`,\n  );\n\n  const lockFileNames = deps.map((f) =>\n    getSiblingFileName(f.name, 'packages.lock.json'),\n  );\n\n  const existingLockFileContentMap = await getFiles(lockFileNames);\n\n  const hasLockFileContent = Object.values(existingLockFileContentMap).some(\n    (val) => !!val,\n  );\n  if (!hasLockFileContent) {\n    logger.debug(\n      { packageFileName },\n      'No lock file found for package or dependents',\n    );\n    return null;\n  }\n\n  try {\n    if (updatedDeps.length === 0 && config.isLockFileMaintenance !== true) {\n      logger.debug(\n        `Not updating lock file because no deps changed and no lock file maintenance.`,\n      );\n      return null;\n    }\n\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    await runDotnetRestore(packageFileName, packageFiles, config);\n\n    const newLockFileContentMap = await getLocalFiles(lockFileNames);\n\n    const retArray: UpdateArtifactsResult[] = [];\n    for (const lockFileName of lockFileNames) {\n      if (\n        existingLockFileContentMap[lockFileName] ===\n        newLockFileContentMap[lockFileName]\n      ) {\n        logger.trace(`Lock file ${lockFileName} is unchanged`);\n      } else if (newLockFileContentMap[lockFileName]) {\n        retArray.push({\n          file: {\n            type: 'addition',\n            path: lockFileName,\n            contents: newLockFileContentMap[lockFileName],\n          },\n        });\n      }\n      // TODO: else should we return an artifact error if new content is missing?\n    }\n\n    return retArray.length > 0 ? retArray : null;\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.debug({ err }, 'Failed to generate lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileNames.join(', '),\n          // error is written to stdout\n          stderr: err.stdout ?? err.message,\n        },\n      },\n    ];\n  }\n}\n"]}