{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAAmD;AAEnD;;;;GAIG;AACH,MAAM,iBAAiB,GAAG,OAAC,CAAC,IAAI,CAAC;IAC/B,OAAO;IACP,SAAS;IACT,OAAO;IACP,OAAO;IACP,aAAa;IACb,eAAe;IACf,aAAa;IACb,aAAa;IACb,SAAS;CACV,CAAC,CAAC;AAGH;;;;GAIG;AACU,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC;;OAEG;IACH,GAAG,EAAE,OAAC;SACH,MAAM,CAAC;QACN;;;;WAIG;QACH,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC9B;;;;WAIG;QACH,WAAW,EAAE,iBAAiB,CAAC,QAAQ,EAAE;QACzC;;;;WAIG;QACH,eAAe,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;KACxC,CAAC;SACD,QAAQ,EAAE;IAEb;;;;OAIG;IACH,cAAc,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;CAChD,CAAC,CAAC;AAEU,QAAA,UAAU,GAAG,oBAAK,CAAC,IAAI,CAAC,wBAAgB,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { Jsonc } from '../../../util/schema-utils';\n\n/**\n * The roll-forward policy to use when selecting an SDK version, either as a fallback when a specific SDK version is missing or as a directive to use a later version. A version must be specified with a rollForward value, unless you're setting it to latestMajor. The default roll forward behavior is determined by the matching rules.\n *\n * https://learn.microsoft.com/de-de/dotnet/core/tools/global-json#rollforward\n */\nconst RollForwardSchema = z.enum([\n  'patch',\n  'feature',\n  'minor',\n  'major',\n  'latestPatch',\n  'latestFeature',\n  'latestMinor',\n  'latestMajor',\n  'disable',\n]);\nexport type RollForward = z.infer<typeof RollForwardSchema>;\n\n/**\n * global.json schema\n *\n * https://learn.microsoft.com/en-us/dotnet/core/tools/global-json#allowprerelease\n */\nexport const GlobalJsonSchema = z.object({\n  /**\n   * Specifies information about the .NET SDK to select.\n   */\n  sdk: z\n    .object({\n      /**\n       * The version of the .NET SDK to use.\n       *\n       * https://learn.microsoft.com/de-de/dotnet/core/tools/global-json#version\n       */\n      version: z.string().optional(),\n      /**\n       * The roll-forward policy to use when selecting an SDK version, either as a fallback when a specific SDK version is missing or as a directive to use a later version. A version must be specified with a rollForward value, unless you're setting it to latestMajor. The default roll forward behavior is determined by the matching rules.\n       *\n       * https://learn.microsoft.com/de-de/dotnet/core/tools/global-json#rollforward\n       */\n      rollForward: RollForwardSchema.optional(),\n      /**\n       * Indicates whether the SDK resolver should consider prerelease versions when selecting the SDK version to use.\n       *\n       * https://learn.microsoft.com/de-de/dotnet/core/tools/global-json#allowprerelease\n       */\n      allowPrerelease: z.boolean().optional(),\n    })\n    .optional(),\n\n  /**\n   * Lets you control the project SDK version in one place rather than in each individual project. For more information, see How project SDKs are resolved.\n   *\n   * https://learn.microsoft.com/de-de/dotnet/core/tools/global-json#msbuild-sdks\n   */\n  'msbuild-sdks': z.record(z.string()).optional(),\n});\n\nexport const GlobalJson = Jsonc.pipe(GlobalJsonSchema);\nexport type GlobalJson = z.infer<typeof GlobalJson>;\n"]}