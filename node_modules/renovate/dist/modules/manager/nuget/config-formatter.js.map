{"version":3,"file":"config-formatter.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/config-formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as hostRules from '../../../util/host-rules';\nimport { regEx } from '../../../util/regex';\nimport { NugetDatasource } from '../../datasource/nuget';\nimport { parseRegistryUrl } from '../../datasource/nuget/common';\nimport type { ParsedRegistryUrl } from '../../datasource/nuget/types';\nimport type {\n  PackageSourceCredential,\n  PackageSourceMap,\n  Registry,\n} from './types';\n\nexport function createNuGetConfigXml(registries: Registry[]): string {\n  let contents = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<configuration>\\n<packageSources>\\n`;\n  let unnamedRegistryCount = 0;\n\n  const credentials: PackageSourceCredential[] = [];\n  const packageSourceMaps: PackageSourceMap[] = [];\n\n  for (const registry of registries) {\n    const registryName =\n      registry.name ?? `Package source ${++unnamedRegistryCount}`;\n    const registryInfo = parseRegistryUrl(registry.url);\n\n    contents += formatPackageSourceElement(registryInfo, registryName);\n\n    const { password, username } = hostRules.find({\n      hostType: NugetDatasource.id,\n      url: registry.url,\n    });\n\n    if (is.nonEmptyString(password) || is.nonEmptyString(username)) {\n      credentials.push({\n        name: registryName,\n        password,\n        username,\n      });\n    }\n\n    if (registry.sourceMappedPackagePatterns) {\n      packageSourceMaps.push({\n        name: registryName,\n        patterns: registry.sourceMappedPackagePatterns,\n      });\n    }\n  }\n\n  contents += '</packageSources>\\n';\n\n  if (credentials.length > 0) {\n    contents += '<packageSourceCredentials>\\n';\n\n    for (const credential of credentials) {\n      contents += formatPackageSourceCredentialElement(credential);\n    }\n\n    contents += '</packageSourceCredentials>\\n';\n  }\n\n  if (packageSourceMaps.length > 0) {\n    contents += '<packageSourceMapping>\\n';\n    for (const packageSourceMap of packageSourceMaps) {\n      contents += formatPackageSource(packageSourceMap);\n    }\n    contents += '</packageSourceMapping>';\n  }\n\n  contents += '</configuration>\\n';\n\n  return contents;\n}\n\nfunction formatPackageSourceElement(\n  registryInfo: ParsedRegistryUrl,\n  name: string,\n): string {\n  let element = `<add key=\"${name}\" value=\"${registryInfo.feedUrl}\" `;\n\n  if (registryInfo.protocolVersion) {\n    element += `protocolVersion=\"${registryInfo.protocolVersion}\" `;\n  }\n\n  return `${element}/>\\n`;\n}\n\nfunction formatPackageSourceCredentialElement(\n  credential: PackageSourceCredential,\n): string {\n  const escapedName = escapeName(credential.name);\n\n  let packageSourceCredential = `<${escapedName}>\\n`;\n\n  if (credential.username) {\n    packageSourceCredential += `<add key=\"Username\" value=\"${credential.username}\" />\\n`;\n  }\n\n  if (credential.password) {\n    packageSourceCredential += `<add key=\"ClearTextPassword\" value=\"${credential.password}\" />\\n`;\n  }\n\n  packageSourceCredential += `<add key=\"ValidAuthenticationTypes\" value=\"basic\" />`;\n\n  packageSourceCredential += `</${escapedName}>\\n`;\n\n  return packageSourceCredential;\n}\n\nfunction formatPackageSource(packageSourceMap: PackageSourceMap): string {\n  let packageSource = `<packageSource key=\"${packageSourceMap.name}\">\\n`;\n\n  for (const pattern of packageSourceMap.patterns) {\n    packageSource += `<package pattern=\"${pattern}\" />\\n`;\n  }\n\n  return `${packageSource}</packageSource>\\n`;\n}\n\nconst charactersToEscape = regEx(/[^A-Za-z0-9\\-_.]/);\n\nfunction escapeName(name: string): string {\n  let escapedName = '';\n  for (const char of name) {\n    if (char.match(charactersToEscape)) {\n      escapedName += `__x${char\n        .codePointAt(0)!\n        .toString(16)\n        .padStart(4, '0')}__`;\n    } else {\n      escapedName += char;\n    }\n  }\n\n  return escapedName;\n}\n"]}