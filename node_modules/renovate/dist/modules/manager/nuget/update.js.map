{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/update.ts"],"names":[],"mappings":";;AAQA,gDAmEC;;AA1ED,4DAA4B;AAC5B,mCAAqC;AACrC,4CAAyC;AACzC,iDAAiD;AAEjD,iCAAqC;AAErC,SAAgB,kBAAkB,CAChC,OAAe,EACf,YAAoB,EACpB,WAAwB;IAExB,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,YAAY,EAAE,EAC7B,4CAA4C,CAC7C,CAAC;IACF,IAAI,aAAa,GAAG,OAAO,CAAC;IAE5B,IAAI,CAAC,gBAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;QAChC,eAAM,CAAC,IAAI,CACT,EAAE,YAAY,EAAE,EAChB,oDAAoD,CACrD,CAAC;QACF,OAAO,EAAE,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,OAAO,CAAC,CAAC;QACzC,MAAM,WAAW,GAAG,IAAA,kBAAW,EAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,eAAM,CAAC,IAAI,CACT,6DAA6D,CAC9D,CAAC;YACF,OAAO,EAAE,aAAa,EAAE,CAAC;QAC3B,CAAC;QAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,GAAG,CAAC;QAC3C,IAAI,kBAAkB,KAAK,YAAY,EAAE,CAAC;YACxC,eAAM,CAAC,IAAI,CACT,EAAE,YAAY,EAAE,kBAAkB,EAAE,EACpC,uEAAuE,CACxE,CAAC;YACF,OAAO,EAAE,aAAa,EAAE,CAAC;QAC3B,CAAC;QAED,MAAM,gBAAgB,GAAG,WAAW,CAAC,gBAAgB,CAAC;QACtD,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CACrC,kBAAkB,EAClB,gBAAgB,CACjB,CAAC;QAEF,MAAM,cAAc,GAAG,gBAAM,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC7D,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,mBAAmB,cAAc,EAAE,CAAC,CAAC;QAClD,aAAa,GAAG,IAAA,kBAAS,EACvB,OAAO,EACP,eAAe,EACf,YAAY,EACZ,cAAc,CACf,CAAC;IACJ,CAAC;IAAC,MAAM,CAAC;QACP,eAAM,CAAC,IAAI,CACT;YACE,OAAO;YACP,YAAY;YACZ,WAAW;SACZ,EACD,uBAAuB,CACxB,CAAC;IACJ,CAAC;IACD,OAAO,EAAE,aAAa,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import type { ReleaseType } from 'semver';\nimport semver from 'semver';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { replaceAt } from '../../../util/string';\nimport type { BumpPackageVersionResult } from '../types';\nimport { findVersion } from './util';\n\nexport function bumpPackageVersion(\n  content: string,\n  currentValue: string,\n  bumpVersion: ReleaseType,\n): BumpPackageVersionResult {\n  logger.debug(\n    { bumpVersion, currentValue },\n    'Checking if we should bump project version',\n  );\n  let bumpedContent = content;\n\n  if (!semver.valid(currentValue)) {\n    logger.warn(\n      { currentValue },\n      'Unable to bump project version, not a valid semver',\n    );\n    return { bumpedContent };\n  }\n\n  try {\n    const project = new XmlDocument(content);\n    const versionNode = findVersion(project);\n    if (!versionNode) {\n      logger.warn(\n        \"Couldn't find Version or VersionPrefix in any PropertyGroup\",\n      );\n      return { bumpedContent };\n    }\n\n    const currentProjVersion = versionNode.val;\n    if (currentProjVersion !== currentValue) {\n      logger.warn(\n        { currentValue, currentProjVersion },\n        \"currentValue passed to bumpPackageVersion() doesn't match value found\",\n      );\n      return { bumpedContent };\n    }\n\n    const startTagPosition = versionNode.startTagPosition;\n    const versionPosition = content.indexOf(\n      currentProjVersion,\n      startTagPosition,\n    );\n\n    const newProjVersion = semver.inc(currentValue, bumpVersion);\n    if (!newProjVersion) {\n      throw new Error('semver inc failed');\n    }\n\n    logger.debug(`newProjVersion: ${newProjVersion}`);\n    bumpedContent = replaceAt(\n      content,\n      versionPosition,\n      currentValue,\n      newProjVersion,\n    );\n  } catch {\n    logger.warn(\n      {\n        content,\n        currentValue,\n        bumpVersion,\n      },\n      'Failed to bumpVersion',\n    );\n  }\n  return { bumpedContent };\n}\n"]}