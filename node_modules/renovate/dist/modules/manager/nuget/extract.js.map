{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/nuget/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { XmlNode } from 'xmldoc';\nimport { XmlDocument, XmlElement } from 'xmldoc';\nimport { logger } from '../../../logger';\nimport { getSiblingFileName, localPathExists } from '../../../util/fs';\nimport { NugetDatasource } from '../../datasource/nuget';\nimport { getDep } from '../dockerfile/extract';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { extractMsbuildGlobalManifest } from './extract/global-manifest';\nimport type { DotnetToolsManifest, NugetPackageDependency } from './types';\nimport { applyRegistries, findVersion, getConfiguredRegistries } from './util';\n\n/**\n * https://docs.microsoft.com/en-us/nuget/concepts/package-versioning\n * This article mentions that  Nuget 3.x and later tries to restore the lowest possible version\n * regarding to given version range.\n * 1.3.4 equals [1.3.4,)\n */\nconst elemNames = new Set([\n  'PackageReference',\n  'PackageVersion',\n  'DotNetCliToolReference',\n  'GlobalPackageReference',\n]);\n\nfunction isXmlElem(node: XmlNode): node is XmlElement {\n  return node instanceof XmlElement;\n}\n\nfunction extractDepsFromXml(xmlNode: XmlDocument): NugetPackageDependency[] {\n  const results: NugetPackageDependency[] = [];\n  const vars = new Map<string, string>();\n  const todo: XmlElement[] = [xmlNode];\n  while (todo.length) {\n    const child = todo.pop()!;\n    const { name, attr } = child;\n\n    if (name === 'ContainerBaseImage') {\n      const { depName, ...dep } = getDep(child.val, true);\n\n      if (is.nonEmptyStringAndNotWhitespace(depName)) {\n        results.push({ ...dep, depName, depType: 'docker' });\n      }\n    } else if (elemNames.has(name)) {\n      const depName = attr?.Include || attr?.Update;\n\n      if (!depName) {\n        continue;\n      }\n\n      const dep: NugetPackageDependency = {\n        datasource: NugetDatasource.id,\n        depType: 'nuget',\n        depName,\n      };\n\n      let currentValue: string | undefined =\n        attr?.Version ??\n        attr?.version ??\n        child.valueWithPath('Version') ??\n        attr?.VersionOverride ??\n        child.valueWithPath('VersionOverride');\n\n      if (!is.nonEmptyStringAndNotWhitespace(currentValue)) {\n        dep.skipReason = 'invalid-version';\n      }\n\n      let sharedVariableName: string | undefined;\n\n      currentValue = currentValue\n        ?.trim()\n        ?.replace(/^\\$\\((\\w+)\\)$/, (match, key) => {\n          sharedVariableName = key;\n          const val = vars.get(key);\n          if (val) {\n            return val;\n          }\n          return match;\n        });\n\n      if (sharedVariableName) {\n        if (currentValue === `$(${sharedVariableName})`) {\n          // this means that be failed to find/replace the variable\n          dep.skipReason = 'contains-variable';\n        } else {\n          dep.sharedVariableName = sharedVariableName;\n        }\n      }\n\n      dep.currentValue = currentValue;\n      results.push(dep);\n    } else if (name === 'Sdk') {\n      const depName = attr?.Name;\n      const version = attr?.Version;\n      // if sdk element is present it will always have the Name field but the Version is an optional field\n      if (depName && version) {\n        results.push({\n          depName,\n          currentValue: version,\n          depType: 'msbuild-sdk',\n          datasource: NugetDatasource.id,\n        });\n      }\n    } else if (name === 'Import') {\n      const depName = attr?.Sdk;\n      const version = attr?.Version;\n      if (depName && version) {\n        results.push({\n          depName,\n          currentValue: version,\n          depType: 'msbuild-sdk',\n          datasource: NugetDatasource.id,\n        });\n      }\n    } else {\n      if (name === 'Project') {\n        if (attr?.Sdk) {\n          const str = attr?.Sdk;\n          const [name, version] = str.split('/');\n          if (name && version) {\n            results.push({\n              depName: name,\n              depType: 'msbuild-sdk',\n              currentValue: version,\n              datasource: NugetDatasource.id,\n            });\n          }\n        }\n\n        const propertyGroup = child.childNamed('PropertyGroup');\n        if (propertyGroup) {\n          for (const propChild of propertyGroup.children) {\n            if (isXmlElem(propChild)) {\n              const { name, val } = propChild;\n              if (!['Version', 'TargetFramework'].includes(name)) {\n                vars.set(name, val);\n              }\n            }\n          }\n        }\n      }\n\n      todo.push(...child.children.filter(isXmlElem));\n    }\n  }\n  return results;\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  _config: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  logger.trace(`nuget.extractPackageFile(${packageFile})`);\n\n  const registries = await getConfiguredRegistries(packageFile);\n\n  if (packageFile.endsWith('dotnet-tools.json')) {\n    const deps: PackageDependency[] = [];\n    let manifest: DotnetToolsManifest;\n\n    try {\n      manifest = JSON.parse(content);\n    } catch {\n      logger.debug({ packageFile }, `Invalid JSON`);\n      return null;\n    }\n\n    if (manifest.version !== 1) {\n      logger.debug({ packageFile }, 'Unsupported dotnet tools version');\n      return null;\n    }\n\n    for (const depName of Object.keys(manifest.tools ?? {})) {\n      const tool = manifest.tools[depName];\n      const currentValue = tool.version;\n      const dep: NugetPackageDependency = {\n        depType: 'nuget',\n        depName,\n        currentValue,\n        datasource: NugetDatasource.id,\n      };\n\n      applyRegistries(dep, registries);\n\n      deps.push(dep);\n    }\n\n    return deps.length ? { deps } : null;\n  }\n\n  if (packageFile.endsWith('global.json')) {\n    return extractMsbuildGlobalManifest(content, packageFile, registries);\n  }\n\n  let deps: PackageDependency[] = [];\n  let packageFileVersion: string | undefined;\n  try {\n    const parsedXml = new XmlDocument(content);\n    deps = extractDepsFromXml(parsedXml).map((dep) =>\n      applyRegistries(dep, registries),\n    );\n    packageFileVersion = findVersion(parsedXml)?.val;\n  } catch (err) {\n    logger.debug({ err, packageFile }, `Failed to parse XML`);\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  const res: PackageFileContent = { deps, packageFileVersion };\n  const lockFileName = getSiblingFileName(packageFile, 'packages.lock.json');\n  // istanbul ignore if\n  if (await localPathExists(lockFileName)) {\n    res.lockFiles = [lockFileName];\n  }\n  return res;\n}\n"]}