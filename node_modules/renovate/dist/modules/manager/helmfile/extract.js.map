{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { coerceArray } from '../../../util/array';\nimport { regEx } from '../../../util/regex';\nimport { parseYaml } from '../../../util/yaml';\nimport { DockerDatasource } from '../../datasource/docker';\nimport { HelmDatasource } from '../../datasource/helm';\nimport { isOCIRegistry } from '../helmv3/oci';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport type { Doc, HelmRepository } from './schema';\nimport { Doc as documentSchema } from './schema';\nimport {\n  kustomizationsKeysUsed,\n  localChartHasKustomizationsYaml,\n} from './utils';\n\nfunction isValidChartName(name: string | undefined, oci: boolean): boolean {\n  if (oci) {\n    return !!name && !regEx(/[!@#$%^&*(),.?\":{}|<>A-Z]/).test(name);\n  } else {\n    return !!name && !regEx(/[!@#$%^&*(),.?\":{}/|<>A-Z]/).test(name);\n  }\n}\n\nfunction isLocalPath(possiblePath: string): boolean {\n  return ['./', '../', '/'].some((localPrefix) =>\n    possiblePath.startsWith(localPrefix),\n  );\n}\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): Promise<PackageFileContent | null> {\n  const deps: PackageDependency[] = [];\n  let registryData: Record<string, HelmRepository> = {};\n  // Record kustomization usage for all deps, since updating artifacts is run on the helmfile.yaml as a whole.\n  let needKustomize = false;\n  const docs: Doc[] = parseYaml(content, {\n    customSchema: documentSchema,\n    failureBehaviour: 'filter',\n    removeTemplates: true,\n  });\n\n  for (const doc of docs) {\n    // Always check for repositories in the current document and override the existing ones if any (as YAML does)\n    if (doc.repositories) {\n      registryData = {};\n      for (const repo of doc.repositories) {\n        if (repo.url?.startsWith('git+')) {\n          logger.debug(\n            { repo, packageFile },\n            `Skipping unsupported helm-git repository.`,\n          );\n          continue;\n        }\n        registryData[repo.name] = repo;\n      }\n      logger.debug(\n        { registryAliases: registryData, packageFile },\n        `repositories discovered.`,\n      );\n    }\n\n    for (const dep of coerceArray(doc.releases)) {\n      let depName = dep.chart;\n      let repoName: string | null = null;\n\n      // If it starts with ./ ../ or / then it's a local path\n      if (isLocalPath(dep.chart)) {\n        if (\n          kustomizationsKeysUsed(dep) ||\n          (await localChartHasKustomizationsYaml(dep, packageFile))\n        ) {\n          needKustomize = true;\n        }\n        deps.push({\n          depName: dep.name,\n          skipReason: 'local-chart',\n        });\n        continue;\n      }\n\n      if (isOCIRegistry(dep.chart)) {\n        const v = dep.chart.substring(6).split('/');\n        depName = v.pop()!;\n        repoName = v.join('/');\n      } else if (dep.chart.includes('/')) {\n        const v = dep.chart.split('/');\n        repoName = v.shift()!;\n        depName = v.join('/');\n      } else {\n        repoName = dep.chart;\n      }\n\n      if (!is.string(dep.version)) {\n        deps.push({\n          depName,\n          skipReason: 'invalid-version',\n        });\n        continue;\n      }\n\n      const res: PackageDependency = {\n        depName,\n        currentValue: dep.version,\n        registryUrls: [registryData[repoName]?.url]\n          .concat([config.registryAliases?.[repoName]] as string[])\n          .filter(is.string),\n      };\n      if (kustomizationsKeysUsed(dep)) {\n        needKustomize = true;\n      }\n\n      if (isOCIRegistry(dep.chart)) {\n        res.datasource = DockerDatasource.id;\n        res.packageName = `${repoName}/${depName}`;\n      } else if (registryData[repoName]?.oci) {\n        res.datasource = DockerDatasource.id;\n        const alias = registryData[repoName]?.url;\n        if (alias) {\n          res.packageName = `${alias}/${depName}`;\n        }\n      }\n\n      // By definition on helm the chart name should be lowercase letter + number + -\n      // However helmfile support templating of that field\n      if (\n        !isValidChartName(\n          res.depName,\n          isOCIRegistry(dep.chart) || (registryData[repoName]?.oci ?? false),\n        )\n      ) {\n        res.skipReason = 'unsupported-chart-type';\n      }\n\n      // Skip in case we cannot locate the registry\n      if (\n        res.datasource !== DockerDatasource.id &&\n        is.emptyArray(res.registryUrls)\n      ) {\n        res.skipReason = 'unknown-registry';\n      }\n\n      deps.push(res);\n    }\n  }\n\n  return deps.length\n    ? {\n        deps,\n        datasource: HelmDatasource.id,\n        ...(needKustomize && { managerData: { needKustomize } }),\n      }\n    : null;\n}\n"]}