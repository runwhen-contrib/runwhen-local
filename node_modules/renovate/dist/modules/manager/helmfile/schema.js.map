{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helmfile/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAA8D;AAEjD,QAAA,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IACrC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE;IACf,GAAG,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;CAC5B,CAAC,CAAC;AAGU,QAAA,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAClC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;IAChB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;IACjB,OAAO,EAAE,OAAC;SACP,MAAM,EAAE;SACR,EAAE,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;SACd,QAAQ,EAAE;SACV,QAAQ,EAAE;SACV,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAChE,qBAAqB,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IAC7C,WAAW,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;IACnC,YAAY,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;CACrC,CAAC,CAAC;AAGU,QAAA,GAAG,GAAG,OAAC,CAAC,MAAM,CAAC;IAC1B,QAAQ,EAAE,IAAA,yBAAU,EAAC,mBAAW,CAAC,CAAC,QAAQ,EAAE;IAC5C,YAAY,EAAE,IAAA,yBAAU,EAAC,sBAAc,CAAC,CAAC,QAAQ,EAAE;CACpD,CAAC,CAAC;AAGU,QAAA,WAAW,GAAG,mBAAI,CAAC,IAAI,CAClC,OAAC,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,CACtE,CAAC","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, Yaml } from '../../../util/schema-utils';\n\nexport const HelmRepository = z.object({\n  name: z.string(),\n  url: z.string(),\n  oci: z.boolean().optional(),\n});\nexport type HelmRepository = z.infer<typeof HelmRepository>;\n\nexport const HelmRelease = z.object({\n  name: z.string(),\n  chart: z.string(),\n  version: z\n    .string()\n    .or(z.number())\n    .optional()\n    .nullable()\n    .transform((version) => (version ? version.toString() : null)),\n  strategicMergePatches: z.unknown().optional(),\n  jsonPatches: z.unknown().optional(),\n  transformers: z.unknown().optional(),\n});\nexport type HelmRelease = z.infer<typeof HelmRelease>;\n\nexport const Doc = z.object({\n  releases: LooseArray(HelmRelease).optional(),\n  repositories: LooseArray(HelmRepository).optional(),\n});\nexport type Doc = z.infer<typeof Doc>;\n\nexport const LockVersion = Yaml.pipe(\n  z.object({ version: z.string() }).transform(({ version }) => version),\n);\nexport type LockVersion = z.infer<typeof LockVersion>;\n"]}