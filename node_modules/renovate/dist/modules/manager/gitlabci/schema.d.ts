import { z } from 'zod';
export declare const MultiDocumentLocalIncludes: z.ZodEffects<z.ZodEffects<z.ZodArray<z.ZodAny, "many">, string[][], any[]>, string[], any[]>;
export declare const Job: z.ZodObject<{
    image: z.ZodCatch<z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, {
        type: "image";
        value: string;
    }, string>, z.ZodEffects<z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>, {
        type: "image-name";
        value: string;
    }, {
        name: string;
    }>]>>>;
    services: z.ZodCatch<z.ZodEffects<z.ZodArray<z.ZodAny, "many">, string[], any[]>>;
}, "strip", z.ZodTypeAny, {
    services: string[];
    image?: {
        type: "image";
        value: string;
    } | {
        type: "image-name";
        value: string;
    } | undefined;
}, {
    image?: unknown;
    services?: unknown;
}>;
export declare const Jobs: z.ZodEffects<z.ZodCatch<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodAny>, Record<string, {
    services: string[];
    image?: {
        type: "image";
        value: string;
    } | {
        type: "image-name";
        value: string;
    } | undefined;
}>, Record<string, any>>>, {
    services: string[];
    image?: {
        type: "image";
        value: string;
    } | {
        type: "image-name";
        value: string;
    } | undefined;
}[], unknown>;
export declare const GitlabDocument: z.ZodEffects<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodUnknown>, {
    include: unknown;
    children: unknown[];
}, Record<string, unknown>>, string[], Record<string, unknown>>;
