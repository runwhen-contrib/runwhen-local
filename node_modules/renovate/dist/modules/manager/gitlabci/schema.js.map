{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { toArray } from '../../../util/array';\nimport { LooseArray, LooseRecord } from '../../../util/schema-utils';\nimport { trimLeadingSlash } from '../../../util/url';\n\nconst LocalInclude = z\n  .union([\n    z.string(),\n    z.object({ local: z.string() }).transform(({ local }) => local),\n  ])\n  .transform(trimLeadingSlash);\n\nconst DocumentLocalIncludes = z\n  .object({\n    include: z.union([\n      LooseArray(LocalInclude),\n      LocalInclude.transform(toArray),\n    ]),\n  })\n  .transform(({ include }) => include);\n\nexport const MultiDocumentLocalIncludes = LooseArray(\n  DocumentLocalIncludes,\n).transform((includes) => includes.flat());\n\nexport const Job = z.object({\n  image: z\n    .union([\n      z.string().transform((image) => ({\n        type: 'image' as const,\n        value: image,\n      })),\n      z.object({ name: z.string() }).transform(({ name }) => ({\n        type: 'image-name' as const,\n        value: name,\n      })),\n    ])\n    .optional()\n    .catch(undefined),\n  services: LooseArray(\n    z.union([\n      z.string(),\n      z.object({ name: z.string() }).transform(({ name }) => name),\n    ]),\n  ).catch([]),\n});\n\nexport const Jobs = LooseRecord(z.string(), Job)\n  .catch({})\n  .transform((x) => Object.values(x));\n\nconst GitlabInclude = z\n  .object({ component: z.string() })\n  .transform(({ component }) => component);\n\nconst GitlabIncludes = z\n  .union([LooseArray(GitlabInclude), GitlabInclude.transform(toArray)])\n  .catch([]);\n\nexport const GitlabDocument = z\n  .record(z.unknown())\n  .transform((obj) => {\n    const { include, ...rest } = obj;\n    const children = Object.values(rest);\n    return { include, children };\n  })\n  .transform(({ include, children }): string[] => [\n    ...GitlabDocumentArray.parse(children),\n    ...GitlabIncludes.parse(include),\n  ]);\n\nconst GitlabDocumentArray = LooseArray(GitlabDocument).transform((x) =>\n  x.flat(),\n);\n"]}