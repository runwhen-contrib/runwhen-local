{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/gitlabci/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { readLocalFile } from '../../../util/fs';\nimport { regEx } from '../../../util/regex';\nimport { Result } from '../../../util/result';\nimport { parseYaml } from '../../../util/yaml';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFile,\n  PackageFileContent,\n} from '../types';\nimport {\n  GitlabDocument,\n  Job,\n  Jobs,\n  MultiDocumentLocalIncludes,\n} from './schema';\nimport { getGitlabDep } from './utils';\n\n// See https://docs.gitlab.com/ee/ci/components/index.html#use-a-component\nconst componentReferenceRegex = regEx(\n  /(?<fqdn>[^/]+)\\/(?<projectPath>.+)\\/(?:.+)@(?<specificVersion>.+)/,\n);\nconst componentReferenceLatestVersion = '~latest';\n\nfunction extractDepFromIncludeComponent(\n  component: string,\n  registryAliases?: Record<string, string>,\n): PackageDependency | null {\n  let componentUrl = component;\n  if (registryAliases) {\n    for (const key in registryAliases) {\n      componentUrl = componentUrl.replace(key, registryAliases[key]);\n    }\n  }\n  const componentReference = componentReferenceRegex.exec(componentUrl)?.groups;\n  if (!componentReference) {\n    logger.debug(\n      { componentReference: componentUrl },\n      'Ignoring malformed component reference',\n    );\n    return null;\n  }\n  const projectPathParts = componentReference.projectPath.split('/');\n  if (projectPathParts.length < 2) {\n    logger.debug(\n      { componentReference: componentUrl },\n      'Ignoring component reference with incomplete project path',\n    );\n    return null;\n  }\n\n  const dep: PackageDependency = {\n    datasource: GitlabTagsDatasource.id,\n    depName: componentReference.projectPath,\n    depType: 'repository',\n    currentValue: componentReference.specificVersion,\n    registryUrls: [`https://${componentReference.fqdn}`],\n  };\n  if (dep.currentValue === componentReferenceLatestVersion) {\n    logger.debug(\n      { componentVersion: dep.currentValue },\n      'Ignoring component version',\n    );\n    dep.skipReason = 'unsupported-version';\n  }\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  const deps: PackageDependency[] = [];\n  try {\n    const docs = parseYaml(content, { uniqueKeys: false });\n\n    for (const doc of docs) {\n      const topLevel = Job.parse(doc);\n      const jobs = Jobs.parse(doc);\n\n      for (const job of [topLevel, ...jobs]) {\n        const { image, services } = job;\n\n        if (image) {\n          const dep = getGitlabDep(image.value, config.registryAliases);\n          dep.depType = image.type;\n          deps.push(dep);\n        }\n\n        for (const service of services) {\n          const dep = getGitlabDep(service, config.registryAliases);\n          dep.depType = 'service-image';\n          deps.push(dep);\n        }\n      }\n\n      const includedComponents = GitlabDocument.parse(doc);\n      for (const includedComponent of includedComponents) {\n        const dep = extractDepFromIncludeComponent(\n          includedComponent,\n          config.registryAliases,\n        );\n        if (dep) {\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug(\n        { err, packageFile },\n        'YAML exception extracting GitLab CI includes',\n      );\n    } else {\n      logger.debug(\n        { err, packageFile },\n        'Error extracting GitLab CI dependencies',\n      );\n    }\n  }\n\n  return deps.length ? { deps } : null;\n}\n\nexport async function extractAllPackageFiles(\n  config: ExtractConfig,\n  packageFiles: string[],\n): Promise<PackageFile[] | null> {\n  const filesToExamine = [...packageFiles];\n  const seen = new Set<string>(packageFiles);\n  const results: PackageFile[] = [];\n\n  // extract all includes from the files\n  while (filesToExamine.length > 0) {\n    const file = filesToExamine.pop()!;\n\n    const content = await readLocalFile(file, 'utf8');\n    if (!content) {\n      logger.debug(\n        { packageFile: file },\n        `Empty or non existent gitlabci file`,\n      );\n      continue;\n    }\n\n    const { val: docs, err } = Result.wrap(() =>\n      parseYaml(content, { uniqueKeys: false }),\n    ).unwrap();\n\n    if (err) {\n      logger.debug(\n        { err, packageFile: file },\n        'Error extracting GitLab CI dependencies',\n      );\n      continue;\n    }\n\n    const localIncludes = MultiDocumentLocalIncludes.parse(docs);\n    for (const file of localIncludes) {\n      if (!seen.has(file)) {\n        seen.add(file);\n        filesToExamine.push(file);\n      }\n    }\n\n    const result = extractPackageFile(content, file, config);\n    if (result !== null) {\n      results.push({\n        packageFile: file,\n        deps: result.deps,\n      });\n    }\n  }\n\n  logger.trace(\n    { packageFiles, files: filesToExamine.entries() },\n    'extracted all GitLab CI files',\n  );\n\n  if (!results.length) {\n    return null;\n  }\n\n  return results;\n}\n"]}