{"version":3,"file":"pdm.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/pep621/processors/pdm.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { exec } from '../../../../util/exec';\nimport type { ExecOptions, ToolConstraint } from '../../../../util/exec/types';\nimport { getSiblingFileName, readLocalFile } from '../../../../util/fs';\nimport { getGitEnvironmentVariables } from '../../../../util/git/auth';\nimport { Result } from '../../../../util/result';\nimport { PypiDatasource } from '../../../datasource/pypi';\nimport type {\n  PackageDependency,\n  UpdateArtifact,\n  UpdateArtifactsResult,\n  Upgrade,\n} from '../../types';\nimport { PdmLockfileSchema, type PyProject } from '../schema';\nimport type { Pep621ManagerData } from '../types';\nimport { depTypes, parseDependencyGroupRecord } from '../utils';\nimport type { PyProjectProcessor } from './types';\n\nconst pdmUpdateCMD = 'pdm update --no-sync --update-eager';\n\nexport class PdmProcessor implements PyProjectProcessor {\n  process(\n    project: PyProject,\n    deps: PackageDependency[],\n  ): PackageDependency<Pep621ManagerData>[] {\n    const pdm = project.tool?.pdm;\n    if (is.nullOrUndefined(pdm)) {\n      return deps;\n    }\n\n    deps.push(\n      ...parseDependencyGroupRecord(\n        depTypes.pdmDevDependencies,\n        pdm['dev-dependencies'],\n      ),\n    );\n\n    const pdmSource = pdm.source;\n    if (is.nullOrUndefined(pdmSource)) {\n      return deps;\n    }\n\n    // add pypi default url, if there is no source declared with the name `pypi`. https://daobook.github.io/pdm/pyproject/tool-pdm/#specify-other-sources-for-finding-packages\n    const containsPyPiUrl = pdmSource.some((value) => value.name === 'pypi');\n    const registryUrls: string[] = [];\n    if (!containsPyPiUrl) {\n      registryUrls.push(PypiDatasource.defaultURL);\n    }\n    for (const source of pdmSource) {\n      registryUrls.push(source.url);\n    }\n    for (const dep of deps) {\n      if (dep.datasource === PypiDatasource.id) {\n        dep.registryUrls = [...registryUrls];\n      }\n    }\n\n    return deps;\n  }\n\n  async extractLockedVersions(\n    project: PyProject,\n    deps: PackageDependency[],\n    packageFile: string,\n  ): Promise<PackageDependency[]> {\n    if (\n      is.nullOrUndefined(project.tool?.pdm) &&\n      project['build-system']?.['build-backend'] !== 'pdm.backend'\n    ) {\n      return Promise.resolve(deps);\n    }\n\n    const lockFileName = getSiblingFileName(packageFile, 'pdm.lock');\n    const lockFileContent = await readLocalFile(lockFileName, 'utf8');\n    if (lockFileContent) {\n      const lockFileMapping = Result.parse(\n        lockFileContent,\n        PdmLockfileSchema.transform(({ lock }) => lock),\n      ).unwrapOr({});\n\n      for (const dep of deps) {\n        const packageName = dep.packageName;\n        if (packageName && packageName in lockFileMapping) {\n          dep.lockedVersion = lockFileMapping[packageName];\n        }\n      }\n    }\n\n    return Promise.resolve(deps);\n  }\n\n  async updateArtifacts(\n    updateArtifact: UpdateArtifact,\n    project: PyProject,\n  ): Promise<UpdateArtifactsResult[] | null> {\n    const { config, updatedDeps, packageFileName } = updateArtifact;\n\n    const { isLockFileMaintenance } = config;\n\n    // abort if no lockfile is defined\n    const lockFileName = getSiblingFileName(packageFileName, 'pdm.lock');\n    try {\n      const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n      if (is.nullOrUndefined(existingLockFileContent)) {\n        logger.debug('No pdm.lock found');\n        return null;\n      }\n\n      const pythonConstraint: ToolConstraint = {\n        toolName: 'python',\n        constraint:\n          config.constraints?.python ?? project.project?.['requires-python'],\n      };\n      const pdmConstraint: ToolConstraint = {\n        toolName: 'pdm',\n        constraint: config.constraints?.pdm,\n      };\n\n      const extraEnv = {\n        ...getGitEnvironmentVariables(['pep621']),\n      };\n      const execOptions: ExecOptions = {\n        cwdFile: packageFileName,\n        extraEnv,\n        docker: {},\n        toolConstraints: [pythonConstraint, pdmConstraint],\n      };\n\n      // on lockFileMaintenance do not specify any packages and update the complete lock file\n      // else only update specific packages\n      const cmds: string[] = [];\n      if (isLockFileMaintenance) {\n        cmds.push(pdmUpdateCMD);\n      } else {\n        cmds.push(...generateCMDs(updatedDeps));\n      }\n      await exec(cmds, execOptions);\n\n      // check for changes\n      const fileChanges: UpdateArtifactsResult[] = [];\n      const newLockContent = await readLocalFile(lockFileName, 'utf8');\n      const isLockFileChanged = existingLockFileContent !== newLockContent;\n      if (isLockFileChanged) {\n        fileChanges.push({\n          file: {\n            type: 'addition',\n            path: lockFileName,\n            contents: newLockContent,\n          },\n        });\n      } else {\n        logger.debug('pdm.lock is unchanged');\n      }\n\n      return fileChanges.length ? fileChanges : null;\n    } catch (err) {\n      // istanbul ignore if\n      if (err.message === TEMPORARY_ERROR) {\n        throw err;\n      }\n      logger.debug({ err }, 'Failed to update PDM lock file');\n      return [\n        {\n          artifactError: {\n            lockFile: lockFileName,\n            stderr: err.message,\n          },\n        },\n      ];\n    }\n  }\n}\n\nfunction generateCMDs(updatedDeps: Upgrade<Pep621ManagerData>[]): string[] {\n  const cmds: string[] = [];\n  const packagesByCMD: Record<string, string[]> = {};\n  for (const dep of updatedDeps) {\n    switch (dep.depType) {\n      case depTypes.optionalDependencies: {\n        if (is.nullOrUndefined(dep.managerData?.depGroup)) {\n          logger.once.warn(\n            { dep: dep.depName },\n            'Unexpected optional dependency without group',\n          );\n          continue;\n        }\n        addPackageToCMDRecord(\n          packagesByCMD,\n          `${pdmUpdateCMD} -G ${quote(dep.managerData.depGroup)}`,\n          dep.packageName!,\n        );\n        break;\n      }\n      case depTypes.dependencyGroups:\n      case depTypes.pdmDevDependencies: {\n        if (is.nullOrUndefined(dep.managerData?.depGroup)) {\n          logger.once.warn(\n            { dep: dep.depName },\n            'Unexpected dev dependency without group',\n          );\n          continue;\n        }\n        addPackageToCMDRecord(\n          packagesByCMD,\n          `${pdmUpdateCMD} -dG ${quote(dep.managerData.depGroup)}`,\n          dep.packageName!,\n        );\n        break;\n      }\n      case depTypes.buildSystemRequires:\n        // build requirements are not locked in the lock files, no need to update.\n        // Reference: https://github.com/pdm-project/pdm/discussions/2869\n        break;\n      default: {\n        addPackageToCMDRecord(packagesByCMD, pdmUpdateCMD, dep.packageName!);\n      }\n    }\n  }\n\n  for (const commandPrefix in packagesByCMD) {\n    const packageList = packagesByCMD[commandPrefix].map(quote).join(' ');\n    const cmd = `${commandPrefix} ${packageList}`;\n    cmds.push(cmd);\n  }\n\n  return cmds;\n}\n\nfunction addPackageToCMDRecord(\n  packagesByCMD: Record<string, string[]>,\n  commandPrefix: string,\n  packageName: string,\n): void {\n  if (is.nullOrUndefined(packagesByCMD[commandPrefix])) {\n    packagesByCMD[commandPrefix] = [];\n  }\n  packagesByCMD[commandPrefix].push(packageName);\n}\n"]}