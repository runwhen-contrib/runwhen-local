{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pep621/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { LooseArray, LooseRecord, Toml } from '../../../util/schema-utils';\nimport { normalizePythonDepName } from '../../datasource/pypi/common';\nimport { PixiConfigSchema } from '../pixi/schema';\n\nexport type PyProject = z.infer<typeof PyProjectSchema>;\n\nconst DependencyListSchema = z.array(z.string()).optional();\nconst DependencyRecordSchema = z\n  .record(z.string(), z.array(z.string()))\n  .optional();\n\nconst PdmSchema = z.object({\n  'dev-dependencies': DependencyRecordSchema,\n  source: z\n    .array(\n      z.object({\n        url: z.string(),\n        name: z.string(),\n        verify_ssl: z.boolean().optional(),\n      }),\n    )\n    .optional(),\n});\n\nconst HatchSchema = z.object({\n  envs: z\n    .record(\n      z.string(),\n      z\n        .object({\n          dependencies: DependencyListSchema,\n          'extra-dependencies': DependencyListSchema,\n        })\n        .optional(),\n    )\n    .optional(),\n});\n\nconst UvIndexSource = z.object({\n  index: z.string(),\n});\n\nconst UvGitSource = z.object({\n  git: z.string(),\n  rev: z.string().optional(),\n  tag: z.string().optional(),\n  branch: z.string().optional(),\n});\nexport type UvGitSource = z.infer<typeof UvGitSource>;\n\nconst UvUrlSource = z.object({\n  url: z.string(),\n});\n\nconst UvPathSource = z.object({\n  path: z.string(),\n});\n\nconst UvWorkspaceSource = z.object({\n  workspace: z.literal(true),\n});\n\n// https://docs.astral.sh/uv/concepts/dependencies/#dependency-sources\nconst UvSource = z.union([\n  UvIndexSource,\n  UvGitSource,\n  UvUrlSource,\n  UvPathSource,\n  UvWorkspaceSource,\n]);\n\nconst UvSchema = z.object({\n  'dev-dependencies': DependencyListSchema,\n  sources: LooseRecord(\n    // uv applies the same normalization as for Python dependencies on sources\n    z.string().transform((source) => normalizePythonDepName(source)),\n    UvSource,\n  ).optional(),\n  index: z\n    .array(\n      z.object({\n        name: z.string().optional(),\n        url: z.string(),\n        default: z.boolean().default(false),\n        explicit: z.boolean().default(false),\n      }),\n    )\n    .optional(),\n});\n\nexport const PyProjectSchema = z.object({\n  project: z\n    .object({\n      version: z.string().optional().catch(undefined),\n      'requires-python': z.string().optional(),\n      dependencies: DependencyListSchema,\n      'optional-dependencies': DependencyRecordSchema,\n    })\n    .optional(),\n  'build-system': z\n    .object({\n      requires: DependencyListSchema,\n      'build-backend': z.string().optional(),\n    })\n    .optional(),\n  'dependency-groups': z\n    .record(\n      z.string(),\n      // Skip non-string entries, like `{include-group = \"typing\"}`, as they are not dependencies.\n      LooseArray(z.string()),\n    )\n    .optional(),\n  tool: z\n    .object({\n      pixi: PixiConfigSchema.optional(),\n      pdm: PdmSchema.optional(),\n      hatch: HatchSchema.optional(),\n      uv: UvSchema.optional(),\n    })\n    .optional(),\n});\n\nexport const PdmLockfileSchema = Toml.pipe(\n  z.object({\n    package: LooseArray(\n      z.object({\n        name: z.string(),\n        version: z.string(),\n      }),\n    ),\n  }),\n)\n  .transform(({ package: pkg }) =>\n    Object.fromEntries(\n      pkg.map(({ name, version }): [string, string] => [name, version]),\n    ),\n  )\n  .transform((lock) => ({ lock }));\n\nexport const UvLockfileSchema = Toml.pipe(\n  z.object({\n    package: LooseArray(\n      z.object({\n        name: z.string(),\n        version: z.string(),\n      }),\n    ),\n  }),\n).transform(({ package: pkg }) =>\n  Object.fromEntries(\n    pkg.map(({ name, version }): [string, string] => [name, version]),\n  ),\n);\n"]}