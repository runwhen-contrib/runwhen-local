{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pep621/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { regEx } from '../../../util/regex';\nimport { massage as massageToml, parse as parseToml } from '../../../util/toml';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport { normalizePythonDepName } from '../../datasource/pypi/common';\nimport type { PackageDependency } from '../types';\nimport type { PyProject } from './schema';\nimport { PyProjectSchema } from './schema';\nimport type { Pep508ParseResult, Pep621ManagerData } from './types';\n\nconst pep508Regex = regEx(\n  /^(?<packageName>[A-Z0-9._-]+)\\s*(\\[(?<extras>[A-Z0-9\\s,._-]+)\\])?\\s*(?<currentValue>[^;]+)?(;\\s*(?<marker>.*))?/i,\n);\n\nexport const depTypes = {\n  dependencies: 'project.dependencies',\n  optionalDependencies: 'project.optional-dependencies',\n  dependencyGroups: 'dependency-groups',\n  pdmDevDependencies: 'tool.pdm.dev-dependencies',\n  uvDevDependencies: 'tool.uv.dev-dependencies',\n  uvSources: 'tool.uv.sources',\n  buildSystemRequires: 'build-system.requires',\n};\n\nexport function parsePEP508(\n  value: string | null | undefined,\n): Pep508ParseResult | null {\n  if (is.nullOrUndefined(value)) {\n    return null;\n  }\n\n  const regExpExec = pep508Regex.exec(value);\n  if (\n    is.nullOrUndefined(regExpExec) ||\n    is.nullOrUndefined(regExpExec?.groups)\n  ) {\n    logger.trace(`Pep508 could not be extracted`);\n    return null;\n  }\n\n  const result: Pep508ParseResult = {\n    packageName: regExpExec.groups.packageName,\n  };\n  if (is.nonEmptyString(regExpExec.groups.currentValue)) {\n    if (\n      regExpExec.groups.currentValue.startsWith('(') &&\n      regExpExec.groups.currentValue.endsWith(')')\n    ) {\n      result.currentValue = regExpExec.groups.currentValue.slice(1, -1).trim();\n    } else {\n      result.currentValue = regExpExec.groups.currentValue;\n    }\n  }\n\n  if (is.nonEmptyString(regExpExec.groups.marker)) {\n    result.marker = regExpExec.groups.marker;\n  }\n  if (is.nonEmptyString(regExpExec.groups.extras)) {\n    // trim to remove allowed whitespace between brackets\n    result.extras = regExpExec.groups.extras.split(',').map((e) => e.trim());\n  }\n\n  return result;\n}\n\nexport function pep508ToPackageDependency(\n  depType: string,\n  value: string,\n): PackageDependency | null {\n  const parsed = parsePEP508(value);\n  if (is.nullOrUndefined(parsed)) {\n    return null;\n  }\n\n  const dep: PackageDependency = {\n    packageName: normalizePythonDepName(parsed.packageName),\n    depName: parsed.packageName,\n    datasource: PypiDatasource.id,\n    depType,\n  };\n\n  if (is.nullOrUndefined(parsed.currentValue)) {\n    dep.skipReason = 'unspecified-version';\n  } else {\n    dep.currentValue = parsed.currentValue;\n\n    if (parsed.currentValue.startsWith('==')) {\n      dep.currentVersion = parsed.currentValue.replace(regEx(/^==\\s*/), '');\n    }\n  }\n  return dep;\n}\n\nexport function parseDependencyGroupRecord(\n  depType: string,\n  records: Record<string, string[]> | null | undefined,\n): PackageDependency[] {\n  if (is.nullOrUndefined(records)) {\n    return [];\n  }\n\n  const deps: PackageDependency<Pep621ManagerData>[] = [];\n  for (const [depGroup, pep508Strings] of Object.entries(records)) {\n    for (const dep of parseDependencyList(depType, pep508Strings)) {\n      deps.push({\n        ...dep,\n        depName: dep.packageName!,\n        managerData: { depGroup },\n      });\n    }\n  }\n  return deps;\n}\n\nexport function parseDependencyList(\n  depType: string,\n  list: string[] | null | undefined,\n): PackageDependency[] {\n  if (is.nullOrUndefined(list)) {\n    return [];\n  }\n\n  const deps: PackageDependency[] = [];\n  for (const element of list) {\n    const dep = pep508ToPackageDependency(depType, element);\n    if (is.truthy(dep)) {\n      deps.push(dep);\n    }\n  }\n  return deps;\n}\n\nexport function parsePyProject(\n  packageFile: string,\n  content: string,\n): PyProject | null {\n  try {\n    const jsonMap = parseToml(massageToml(content));\n    return PyProjectSchema.parse(jsonMap);\n  } catch (err) {\n    logger.debug(\n      { packageFile, err },\n      `Failed to parse and validate pyproject file`,\n    );\n    return null;\n  }\n}\n"]}