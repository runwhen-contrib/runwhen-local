{"version":3,"file":"modules.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terragrunt/modules.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { detectPlatform } from '../../../util/common';\nimport { regEx } from '../../../util/regex';\nimport { BitbucketTagsDatasource } from '../../datasource/bitbucket-tags';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GiteaTagsDatasource } from '../../datasource/gitea-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { GitlabTagsDatasource } from '../../datasource/gitlab-tags';\nimport { TerraformModuleDatasource } from '../../datasource/terraform-module';\nimport type { PackageDependency } from '../types';\nimport { extractTerragruntProvider } from './providers';\nimport type { ExtractionResult, TerraformManagerData } from './types';\n\nexport const githubRefMatchRegex = regEx(\n  /github\\.com([/:])(?<project>[^/]+\\/[a-z0-9-_.]+).*\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/i,\n);\nexport const gitTagsRefMatchRegex = regEx(\n  /(?:git::)?(?<url>(?:http|https|ssh):\\/\\/(?:.*@)?(?<host>[^/]*)\\/(?<path>.*))\\?(depth=\\d+&)?ref=(?<tag>.*?)(&depth=\\d+)?$/,\n);\nexport const tfrVersionMatchRegex = regEx(\n  /tfr:\\/\\/(?<registry>.*?)\\/(?<org>[^/]+?)\\/(?<name>[^/]+?)\\/(?<cloud>[^/?]+).*\\?(?:ref|version)=(?<currentValue>.*?)$/,\n);\nconst hostnameMatchRegex = regEx(\n  /^(?<hostname>[a-zA-Z\\d]([a-zA-Z\\d-]*\\.)+[a-zA-Z\\d]+)/,\n);\n\nexport function extractTerragruntModule(\n  startingLine: number,\n  lines: string[],\n): ExtractionResult {\n  const moduleName = 'terragrunt';\n  const result = extractTerragruntProvider(startingLine, lines, moduleName);\n  result.dependencies.forEach((dep) => {\n    // TODO #22198\n    dep.managerData!.terragruntDependencyType = 'terraform';\n  });\n  return result;\n}\n\nfunction detectGitTagDatasource(registryUrl: string): string {\n  const platform = detectPlatform(registryUrl);\n  switch (platform) {\n    case 'gitlab':\n      return GitlabTagsDatasource.id;\n    case 'bitbucket':\n      return BitbucketTagsDatasource.id;\n    case 'gitea':\n      return GiteaTagsDatasource.id;\n    default:\n      return GitTagsDatasource.id;\n  }\n}\n\nexport function analyseTerragruntModule(\n  dep: PackageDependency<TerraformManagerData>,\n): void {\n  // TODO #22198\n  const source = dep.managerData!.source;\n  const githubRefMatch = githubRefMatchRegex.exec(source ?? '');\n  const gitTagsRefMatch = gitTagsRefMatchRegex.exec(source ?? '');\n  const tfrVersionMatch = tfrVersionMatchRegex.exec(source ?? '');\n\n  if (githubRefMatch?.groups) {\n    dep.depType = 'github';\n    dep.packageName = githubRefMatch.groups.project.replace(\n      regEx(/\\.git$/),\n      '',\n    );\n    dep.depName = 'github.com/' + dep.packageName;\n    dep.currentValue = githubRefMatch.groups.tag;\n    dep.datasource = GithubTagsDatasource.id;\n  } else if (gitTagsRefMatch?.groups) {\n    const { url, tag } = gitTagsRefMatch.groups;\n    const { hostname, host, pathname, protocol } = new URL(url);\n    const containsSubDirectory = pathname.includes('//');\n    if (containsSubDirectory) {\n      logger.debug('Terragrunt module contains subdirectory');\n    }\n    dep.depType = 'gitTags';\n    // We don't want to have leading slash, .git or subdirectory in the repository path\n    const repositoryPath = pathname\n      .replace(regEx(/^\\//), '')\n      .split('//')[0]\n      .replace(regEx('.git$'), '');\n    dep.depName = `${hostname}/${repositoryPath}`;\n    dep.currentValue = tag;\n    dep.datasource = detectGitTagDatasource(url);\n    if (dep.datasource === GitTagsDatasource.id) {\n      if (containsSubDirectory) {\n        const tempLookupName = url.split('//');\n        dep.packageName = tempLookupName[0] + '//' + tempLookupName[1];\n      } else {\n        dep.packageName = url;\n      }\n    } else {\n      // The packageName should only contain the path to the repository\n      dep.packageName = repositoryPath;\n      dep.registryUrls = [\n        protocol === 'https:' ? `https://${host}` : `https://${hostname}`,\n      ];\n    }\n  } else if (tfrVersionMatch?.groups) {\n    dep.depType = 'terragrunt';\n    dep.depName =\n      tfrVersionMatch.groups.org +\n      '/' +\n      tfrVersionMatch.groups.name +\n      '/' +\n      tfrVersionMatch.groups.cloud;\n    dep.currentValue = tfrVersionMatch.groups.currentValue;\n    dep.datasource = TerraformModuleDatasource.id;\n    if (tfrVersionMatch.groups.registry) {\n      dep.registryUrls = [`https://${tfrVersionMatch.groups.registry}`];\n    }\n  } else if (source) {\n    const moduleParts = source.split('//')[0].split('/');\n    if (moduleParts[0] === '..') {\n      dep.skipReason = 'local';\n    } else if (moduleParts.length >= 3) {\n      const hostnameMatch = hostnameMatchRegex.exec(source);\n      if (hostnameMatch?.groups) {\n        dep.registryUrls = [`https://${hostnameMatch.groups.hostname}`];\n      }\n      dep.depType = 'terragrunt';\n      dep.depName = moduleParts.join('/');\n      dep.datasource = TerraformModuleDatasource.id;\n    }\n  } else {\n    logger.debug({ dep }, 'terragrunt dep has no source');\n    dep.skipReason = 'no-source';\n  }\n}\n"]}