{"version":3,"file":"providers.js","sourceRoot":"","sources":["../../../../lib/modules/manager/terragrunt/providers.ts"],"names":[],"mappings":";;;AAyBA,8DA6BC;AAtDD,+CAA0D;AAG1D,iCAAiD;AAEpC,QAAA,qBAAqB,GAAG,IAAA,aAAK,EACxC,+FAA+F,CAChG,CAAC;AAEF,SAAS,oBAAoB,CAAC,OAAe;IAC3C,MAAM,KAAK,GAAa,EAAE,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,KAAK,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACnC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACvB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;aAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAC9B,KAAK,CAAC,GAAG,EAAE,CAAC;YACZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,MAAM;YACR,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAAgB,yBAAyB,CACvC,YAAoB,EACpB,KAAe,EACf,UAAkB;IAElB,MAAM,UAAU,GAAG,YAAY,CAAC;IAChC,IAAI,IAAY,CAAC;IACjB,MAAM,IAAI,GAA8C,EAAE,CAAC;IAC3D,MAAM,WAAW,GAAyB;QACxC,UAAU;QACV,wBAAwB,EAAE,WAAW;KACtC,CAAC;IACF,MAAM,GAAG,GAA4C,EAAE,WAAW,EAAE,CAAC;IACrE,MAAM,eAAe,GAAG,KAAK;SAC1B,KAAK,CAAC,UAAU,CAAC;SACjB,IAAI,CAAC,IAAI,CAAC;SACV,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACtE,KAAK,CAAC,oBAAY,CAAC,CAAC;IAEvB,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,eAAe,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC;QAClE,IAAI,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,QAAQ,GAAG,8BAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC;QAC5D,IAAI,QAAQ,EAAE,CAAC;YACb,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC;YACpC,WAAW,CAAC,UAAU,GAAG,UAAU,GAAG,MAAM,CAAC;QAC/C,CAAC;IACH,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;AAC5C,CAAC","sourcesContent":["import { newlineRegex, regEx } from '../../../util/regex';\nimport type { PackageDependency } from '../types';\nimport type { ExtractionResult, TerraformManagerData } from './types';\nimport { keyValueExtractionRegex } from './util';\n\nexport const sourceExtractionRegex = regEx(\n  /^(?:(?<hostname>(?:[a-zA-Z0-9]+\\.+)+[a-zA-Z0-9]+)\\/)?(?:(?<namespace>[^/]+)\\/)?(?<type>[^/]+)/,\n);\n\nfunction extractBracesContent(content: string): number {\n  const stack: string[] = [];\n  let i = 0;\n  for (i; i < content.length; i += 1) {\n    if (content[i] === '{') {\n      stack.push(content[i]);\n    } else if (content[i] === '}') {\n      stack.pop();\n      if (stack.length === 0) {\n        break;\n      }\n    }\n  }\n  return i;\n}\n\nexport function extractTerragruntProvider(\n  startingLine: number,\n  lines: string[],\n  moduleName: string,\n): ExtractionResult {\n  const lineNumber = startingLine;\n  let line: string;\n  const deps: PackageDependency<TerraformManagerData>[] = [];\n  const managerData: TerraformManagerData = {\n    moduleName,\n    terragruntDependencyType: 'terraform',\n  };\n  const dep: PackageDependency<TerraformManagerData> = { managerData };\n  const teraformContent = lines\n    .slice(lineNumber)\n    .join('\\n')\n    .substring(0, extractBracesContent(lines.slice(lineNumber).join('\\n')))\n    .split(newlineRegex);\n\n  for (let lineNo = 0; lineNo < teraformContent.length; lineNo += 1) {\n    line = teraformContent[lineNo];\n    const kvGroups = keyValueExtractionRegex.exec(line)?.groups;\n    if (kvGroups) {\n      managerData.source = kvGroups.value;\n      managerData.sourceLine = lineNumber + lineNo;\n    }\n  }\n  deps.push(dep);\n  return { lineNumber, dependencies: deps };\n}\n"]}