{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/mix/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { findLocalSiblingOrParent, readLocalFile } from '../../../util/fs';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { GitTagsDatasource } from '../../datasource/git-tags';\nimport { GithubTagsDatasource } from '../../datasource/github-tags';\nimport { HexDatasource } from '../../datasource/hex';\nimport type { PackageDependency, PackageFileContent } from '../types';\n\nconst depSectionRegExp = regEx(/defp\\s+deps.*do/g);\nconst depMatchRegExp = regEx(\n  /{:(?<app>\\w+)(\\s*,\\s*\"(?<requirement>[^\"]+)\")?(\\s*,\\s*(?<opts>[^}]+))?}/gm,\n);\nconst gitRegexp = regEx(/git:\\s*\"(?<value>[^\"]+)\"/);\nconst githubRegexp = regEx(/github:\\s*\"(?<value>[^\"]+)\"/);\nconst refRegexp = regEx(/ref:\\s*\"(?<value>[^\"]+)\"/);\nconst branchOrTagRegexp = regEx(/(?:branch|tag):\\s*\"(?<value>[^\"]+)\"/);\nconst organizationRegexp = regEx(/organization:\\s*\"(?<value>[^\"]+)\"/);\nconst commentMatchRegExp = regEx(/#.*$/);\nconst lockedVersionRegExp = regEx(\n  /^\\s+\"(?<app>\\w+)\".*?\"(?<lockedVersion>\\d+\\.\\d+\\.\\d+)\"/,\n);\nconst hexRegexp = regEx(/hex:\\s*(?:\"(?<strValue>[^\"]+)\"|:(?<atomValue>\\w+))/);\nconst onlyValueRegexp = regEx(/only:\\s*(?<only>\\[[^\\]]*\\]|:\\w+)/);\nconst onlyEnvironmentsRegexp = regEx(/:(\\w+)/gm);\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n): Promise<PackageFileContent | null> {\n  logger.trace(`mix.extractPackageFile(${packageFile})`);\n  const deps = new Map<string, PackageDependency>();\n  const contentArr = content\n    .split(newlineRegex)\n    .map((line) => line.replace(commentMatchRegExp, ''));\n  for (let lineNumber = 0; lineNumber < contentArr.length; lineNumber += 1) {\n    if (contentArr[lineNumber].match(depSectionRegExp)) {\n      let depBuffer = '';\n      do {\n        depBuffer += contentArr[lineNumber] + '\\n';\n        lineNumber += 1;\n      } while (contentArr[lineNumber].trim() !== 'end');\n      let depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      while (depMatchGroups) {\n        const { app, requirement, opts } = depMatchGroups;\n        const github = githubRegexp.exec(opts)?.groups?.value;\n        const git = gitRegexp.exec(opts)?.groups?.value;\n        const ref = refRegexp.exec(opts)?.groups?.value;\n        const branchOrTag = branchOrTagRegexp.exec(opts)?.groups?.value;\n        const organization = organizationRegexp.exec(opts)?.groups?.value;\n        const hexGroups = hexRegexp.exec(opts)?.groups;\n        const hex = hexGroups?.strValue ?? hexGroups?.atomValue;\n\n        const onlyValue = onlyValueRegexp.exec(opts)?.groups?.only;\n        const onlyEnvironments = [];\n        let match;\n        if (onlyValue) {\n          while ((match = onlyEnvironmentsRegexp.exec(onlyValue)) !== null) {\n            onlyEnvironments.push(match[1]);\n          }\n        }\n\n        const dep: PackageDependency = {\n          depName: app,\n          depType: 'prod',\n        };\n\n        if (git ?? github) {\n          dep.currentDigest = ref;\n          dep.currentValue = branchOrTag;\n          dep.datasource = git ? GitTagsDatasource.id : GithubTagsDatasource.id;\n          dep.packageName = git ?? github;\n        } else {\n          dep.currentValue = requirement;\n          dep.datasource = HexDatasource.id;\n          if (organization) {\n            dep.packageName = `${app}:${organization}`;\n          } else if (hex) {\n            dep.packageName = hex;\n          } else {\n            dep.packageName = app;\n          }\n\n          if (requirement?.startsWith('==')) {\n            dep.currentVersion = requirement.replace(regEx(/^==\\s*/), '');\n          }\n        }\n\n        if (onlyValue !== undefined && !onlyEnvironments.includes('prod')) {\n          dep.depType = 'dev';\n        }\n\n        deps.set(app, dep);\n        logger.trace({ dep }, `setting ${app}`);\n        depMatchGroups = depMatchRegExp.exec(depBuffer)?.groups;\n      }\n    }\n  }\n  const lockFileName =\n    (await findLocalSiblingOrParent(packageFile, 'mix.lock')) ?? 'mix.lock';\n  const lockFileContent = await readLocalFile(lockFileName, 'utf8');\n\n  if (lockFileContent) {\n    const lockFileLines = lockFileContent.split(newlineRegex).slice(1, -1);\n\n    for (const line of lockFileLines) {\n      const groups = lockedVersionRegExp.exec(line)?.groups;\n      if (groups?.app && groups?.lockedVersion) {\n        const dep = deps.get(groups.app);\n        if (!dep) {\n          continue;\n        }\n        dep.lockedVersion = groups.lockedVersion;\n        logger.trace(`Found ${groups.lockedVersion} for ${groups.app}`);\n      }\n    }\n  }\n  const depsArray = Array.from(deps.values());\n  if (depsArray.length === 0) {\n    return null;\n  }\n  return {\n    deps: depsArray,\n    lockFiles: lockFileContent ? [lockFileName] : undefined,\n  };\n}\n"]}