{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/dockerfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { DockerDatasource } from '../../datasource/docker';\nimport * as debianVersioning from '../../versioning/debian';\nimport * as ubuntuVersioning from '../../versioning/ubuntu';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\n\nconst variableMarker = '$';\n\nexport function extractVariables(image: string): Record<string, string> {\n  const variables: Record<string, string> = {};\n  const variableRegex = regEx(\n    /(?<fullvariable>\\\\?\\$(?<simplearg>\\w+)|\\\\?\\${(?<complexarg>\\w+)(?::.+?)?}+)/gi,\n  );\n\n  let match: RegExpExecArray | null;\n  do {\n    match = variableRegex.exec(image);\n    if (match?.groups?.fullvariable) {\n      variables[match.groups.fullvariable] =\n        match.groups?.simplearg || match.groups?.complexarg;\n    }\n  } while (match);\n\n  return variables;\n}\n\nfunction getAutoReplaceTemplate(dep: PackageDependency): string | undefined {\n  let template = dep.replaceString;\n\n  if (dep.currentValue) {\n    let placeholder = '{{#if newValue}}{{newValue}}{{/if}}';\n    if (!dep.currentDigest) {\n      placeholder += '{{#if newDigest}}@{{newDigest}}{{/if}}';\n    }\n    template = template?.replace(dep.currentValue, placeholder);\n  }\n\n  if (dep.currentDigest) {\n    template = template?.replace(\n      dep.currentDigest,\n      '{{#if newDigest}}{{newDigest}}{{/if}}',\n    );\n  }\n\n  return template;\n}\n\nfunction processDepForAutoReplace(\n  dep: PackageDependency,\n  lineNumberRanges: number[][],\n  lines: string[],\n  linefeed: string,\n): void {\n  const lineNumberRangesToReplace: number[][] = [];\n  for (const lineNumberRange of lineNumberRanges) {\n    for (const lineNumber of lineNumberRange) {\n      if (\n        (is.string(dep.currentValue) &&\n          lines[lineNumber].includes(dep.currentValue)) ||\n        (is.string(dep.currentDigest) &&\n          lines[lineNumber].includes(dep.currentDigest))\n      ) {\n        lineNumberRangesToReplace.push(lineNumberRange);\n      }\n    }\n  }\n\n  lineNumberRangesToReplace.sort((a, b) => {\n    return a[0] - b[0];\n  });\n\n  const minLine = lineNumberRangesToReplace[0]?.[0];\n  const maxLine =\n    lineNumberRangesToReplace[lineNumberRangesToReplace.length - 1]?.[1];\n  if (\n    lineNumberRanges.length === 1 ||\n    minLine === undefined ||\n    maxLine === undefined\n  ) {\n    return;\n  }\n\n  const unfoldedLineNumbers = Array.from(\n    { length: maxLine - minLine + 1 },\n    (_v, k) => k + minLine,\n  );\n\n  dep.replaceString = unfoldedLineNumbers\n    .map((lineNumber) => lines[lineNumber])\n    .join(linefeed);\n\n  if (!dep.currentDigest) {\n    dep.replaceString += linefeed;\n  }\n\n  dep.autoReplaceStringTemplate = getAutoReplaceTemplate(dep);\n}\n\nexport function splitImageParts(currentFrom: string): PackageDependency {\n  let isVariable = false;\n  let cleanedCurrentFrom = currentFrom;\n\n  // Check if we have a variable in format of \"${VARIABLE:-<image>:<defaultVal>@<digest>}\"\n  // If so, remove everything except the image, defaultVal and digest.\n  if (cleanedCurrentFrom?.includes(variableMarker)) {\n    const defaultValueRegex = regEx(/^\\${.+?:-\"?(?<value>.*?)\"?}$/);\n    const defaultValueMatch =\n      defaultValueRegex.exec(cleanedCurrentFrom)?.groups;\n    if (defaultValueMatch?.value) {\n      isVariable = true;\n      cleanedCurrentFrom = defaultValueMatch.value;\n    }\n\n    if (cleanedCurrentFrom?.includes(variableMarker)) {\n      // If cleanedCurrentFrom contains a variable, after cleaning, e.g. \"$REGISTRY/alpine\", we do not support this.\n      return {\n        skipReason: 'contains-variable',\n      };\n    }\n  }\n\n  const [currentDepTag, currentDigest] = cleanedCurrentFrom.split('@');\n  const depTagSplit = currentDepTag.split(':');\n  let depName: string;\n  let currentValue: string | undefined;\n  if (\n    depTagSplit.length === 1 ||\n    depTagSplit[depTagSplit.length - 1].includes('/')\n  ) {\n    depName = currentDepTag;\n  } else {\n    currentValue = depTagSplit.pop();\n    depName = depTagSplit.join(':');\n  }\n\n  const dep: PackageDependency = {\n    depName,\n    packageName: depName,\n    currentValue,\n    currentDigest,\n  };\n\n  if (isVariable) {\n    dep.replaceString = cleanedCurrentFrom;\n\n    if (!dep.currentValue) {\n      delete dep.currentValue;\n    }\n\n    if (!dep.currentDigest) {\n      delete dep.currentDigest;\n    }\n  }\n\n  return dep;\n}\n\nconst quayRegex = regEx(/^quay\\.io(?::[1-9][0-9]{0,4})?/i);\n\nexport function getDep(\n  currentFrom: string | null | undefined,\n  specifyReplaceString = true,\n  registryAliases?: Record<string, string>,\n): PackageDependency {\n  if (\n    !is.string(currentFrom) ||\n    !is.nonEmptyStringAndNotWhitespace(currentFrom)\n  ) {\n    return {\n      skipReason: 'invalid-value',\n    };\n  }\n\n  // Resolve registry aliases first so that we don't need special casing later on:\n  for (const [name, value] of Object.entries(registryAliases ?? {})) {\n    if (currentFrom.startsWith(`${name}/`)) {\n      const depName = currentFrom.substring(name.length + 1);\n      const dep = {\n        ...getDep(`${value}/${depName}`, false),\n        replaceString: currentFrom,\n      };\n      // retain depName, not sure if condition is necessary\n      if (dep.depName?.startsWith(value)) {\n        dep.packageName = dep.depName;\n        dep.depName = `${name}/${dep.depName.substring(value.length + 1)}`;\n      }\n      if (specifyReplaceString) {\n        dep.autoReplaceStringTemplate = getAutoReplaceTemplate(dep);\n      }\n      return dep;\n    }\n  }\n\n  const dep = splitImageParts(currentFrom);\n  if (specifyReplaceString) {\n    dep.replaceString ??= currentFrom;\n    dep.autoReplaceStringTemplate =\n      '{{depName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  }\n  dep.datasource = DockerDatasource.id;\n\n  // Pretty up special prefixes\n  if (dep.depName) {\n    const specialPrefixes = ['amd64', 'arm64', 'library'];\n    for (const prefix of specialPrefixes) {\n      if (dep.depName.startsWith(`${prefix}/`)) {\n        dep.depName = dep.depName.replace(`${prefix}/`, '');\n        if (specifyReplaceString) {\n          dep.autoReplaceStringTemplate =\n            '{{packageName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n        }\n      }\n    }\n  }\n\n  if (dep.depName === 'ubuntu' || dep.depName?.endsWith('/ubuntu')) {\n    dep.versioning = ubuntuVersioning.id;\n  }\n\n  if (\n    (dep.depName === 'debian' || dep.depName?.endsWith('/debian')) &&\n    debianVersioning.api.isVersion(dep.currentValue)\n  ) {\n    dep.versioning = debianVersioning.id;\n  }\n\n  // Don't display quay.io ports\n  if (dep.depName && quayRegex.test(dep.depName)) {\n    const depName = dep.depName.replace(quayRegex, 'quay.io');\n    if (depName !== dep.depName) {\n      dep.depName = depName;\n      dep.autoReplaceStringTemplate =\n        '{{packageName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n    }\n  }\n\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n  _packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  const sanitizedContent = content.replace(regEx(/^\\uFEFF/), ''); // remove bom marker\n  const deps: PackageDependency[] = [];\n  const stageNames: string[] = [];\n  const args: Record<string, string> = {};\n  const argsLines: Record<string, number[]> = {};\n\n  let escapeChar = '\\\\\\\\';\n  let lookForEscapeChar = true;\n  let lookForSyntaxDirective = true;\n\n  const lineFeed = sanitizedContent.includes('\\r\\n') ? '\\r\\n' : '\\n';\n  const lines = sanitizedContent.split(newlineRegex);\n  for (let lineNumber = 0; lineNumber < lines.length; ) {\n    const lineNumberInstrStart = lineNumber;\n    let instruction = lines[lineNumber];\n\n    if (lookForEscapeChar) {\n      const directivesMatch = regEx(\n        /^[ \\t]*#[ \\t]*(?<directive>syntax|escape)[ \\t]*=[ \\t]*(?<escapeChar>\\S)/i,\n      ).exec(instruction);\n      if (!directivesMatch) {\n        lookForEscapeChar = false;\n      } else if (directivesMatch.groups?.directive.toLowerCase() === 'escape') {\n        if (directivesMatch.groups?.escapeChar === '`') {\n          escapeChar = '`';\n        }\n        lookForEscapeChar = false;\n      }\n    }\n\n    if (lookForSyntaxDirective) {\n      const syntaxRegex = regEx(\n        '^#[ \\\\t]*syntax[ \\\\t]*=[ \\\\t]*(?<image>\\\\S+)',\n        'im',\n      );\n      const syntaxMatch = instruction.match(syntaxRegex);\n      if (syntaxMatch?.groups?.image) {\n        const syntaxImage = syntaxMatch.groups.image;\n        const lineNumberRanges: number[][] = [\n          [lineNumberInstrStart, lineNumber],\n        ];\n        const dep = getDep(syntaxImage, true, config.registryAliases);\n        dep.depType = 'syntax';\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile # syntax',\n        );\n        deps.push(dep);\n      }\n      lookForSyntaxDirective = false;\n    }\n\n    const lineContinuationRegex = regEx(escapeChar + '[ \\\\t]*$|^[ \\\\t]*#', 'm');\n    let lineLookahead = instruction;\n    while (\n      !lookForEscapeChar &&\n      !instruction.trimStart().startsWith('#') &&\n      lineContinuationRegex.test(lineLookahead)\n    ) {\n      lineLookahead = lines[++lineNumber] || '';\n      instruction += '\\n' + lineLookahead;\n    }\n\n    const argRegex = regEx(\n      '^[ \\\\t]*ARG(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n)+(?<name>\\\\w+)[ =](?<value>\\\\S*)',\n      'im',\n    );\n    const argMatch = argRegex.exec(instruction);\n    if (argMatch?.groups?.name) {\n      argsLines[argMatch.groups.name] = [lineNumberInstrStart, lineNumber];\n      let argMatchValue = argMatch.groups?.value;\n\n      if (argMatchValue.startsWith('\"') && argMatchValue.endsWith('\"')) {\n        argMatchValue = argMatchValue.slice(1, -1);\n      }\n\n      args[argMatch.groups.name] = argMatchValue || '';\n    }\n\n    const fromRegex = new RegExp(\n      '^[ \\\\t]*FROM(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n|--platform=\\\\S+)+(?<image>\\\\S+)(?:(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n)+as[ \\\\t]+(?<name>\\\\S+))?',\n      'im',\n    ); // TODO #12875 complex for re2 has too many not supported groups\n    const fromMatch = instruction.match(fromRegex);\n    if (fromMatch?.groups?.image) {\n      let fromImage = fromMatch.groups.image;\n      const lineNumberRanges: number[][] = [[lineNumberInstrStart, lineNumber]];\n\n      if (fromImage.includes(variableMarker)) {\n        const variables = extractVariables(fromImage);\n        for (const [fullVariable, argName] of Object.entries(variables)) {\n          const resolvedArgValue = args[argName];\n          if (resolvedArgValue || resolvedArgValue === '') {\n            fromImage = fromImage.replace(fullVariable, resolvedArgValue);\n            lineNumberRanges.push(argsLines[argName]);\n          }\n        }\n      }\n\n      if (fromMatch.groups?.name) {\n        logger.debug(\n          `Found a multistage build stage name: ${fromMatch.groups.name}`,\n        );\n        stageNames.push(fromMatch.groups.name);\n      }\n      if (fromImage === 'scratch') {\n        logger.debug('Skipping scratch');\n      } else if (fromImage && stageNames.includes(fromImage)) {\n        logger.debug(`Skipping alias FROM image:${fromImage}`);\n      } else {\n        const dep = getDep(fromImage, true, config.registryAliases);\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.trace(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile FROM',\n        );\n        deps.push(dep);\n      }\n    }\n\n    const copyFromRegex = new RegExp(\n      '^[ \\\\t]*COPY(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n|--[a-z]+(?:=[a-zA-Z0-9_.:-]+?)?)+--from=(?<image>\\\\S+)',\n      'im',\n    ); // TODO #12875 complex for re2 has too many not supported groups\n    const copyFromMatch = instruction.match(copyFromRegex);\n    if (copyFromMatch?.groups?.image) {\n      if (stageNames.includes(copyFromMatch.groups.image)) {\n        logger.debug(\n          { image: copyFromMatch.groups.image },\n          'Skipping alias COPY --from',\n        );\n      } else if (Number.isNaN(Number(copyFromMatch.groups.image))) {\n        const dep = getDep(\n          copyFromMatch.groups.image,\n          true,\n          config.registryAliases,\n        );\n        const lineNumberRanges: number[][] = [\n          [lineNumberInstrStart, lineNumber],\n        ];\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.debug(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile COPY --from',\n        );\n        deps.push(dep);\n      } else {\n        logger.debug(\n          { image: copyFromMatch.groups.image },\n          'Skipping index reference COPY --from',\n        );\n      }\n    }\n\n    const runMountFromRegex = regEx(\n      '^[ \\\\t]*RUN(?:' +\n        escapeChar +\n        '[ \\\\t]*\\\\r?\\\\n| |\\\\t|#.*?\\\\r?\\\\n|--[a-z]+(?:=[a-zA-Z0-9_.:-]+?)?)+--mount=(?:\\\\S*=\\\\S*,)*from=(?<image>[^, ]+)',\n      'im',\n    );\n    const runMountFromMatch = instruction.match(runMountFromRegex);\n    if (runMountFromMatch?.groups?.image) {\n      if (stageNames.includes(runMountFromMatch.groups.image)) {\n        logger.debug(\n          { image: runMountFromMatch.groups.image },\n          'Skipping alias RUN --mount=from',\n        );\n      } else {\n        const dep = getDep(\n          runMountFromMatch.groups.image,\n          true,\n          config.registryAliases,\n        );\n        const lineNumberRanges: number[][] = [\n          [lineNumberInstrStart, lineNumber],\n        ];\n        processDepForAutoReplace(dep, lineNumberRanges, lines, lineFeed);\n        logger.debug(\n          {\n            depName: dep.depName,\n            currentValue: dep.currentValue,\n            currentDigest: dep.currentDigest,\n          },\n          'Dockerfile RUN --mount=from',\n        );\n        deps.push(dep);\n      }\n    }\n\n    lineNumber += 1;\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n  for (const d of deps) {\n    d.depType ??= 'stage';\n  }\n  deps[deps.length - 1].depType = 'final';\n  return { deps };\n}\n"]}