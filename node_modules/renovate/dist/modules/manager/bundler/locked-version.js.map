{"version":3,"file":"locked-version.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/locked-version.ts"],"names":[],"mappings":";;AAKA,wDAoCC;AAzCD,4CAAyC;AACzC,+CAAmD;AACnD,gDAAkD;AAElD,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,2CAA2C;AAC9F,SAAgB,sBAAsB,CACpC,eAAuB;IAEvB,MAAM,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;IAC1C,IAAI,CAAC;QACH,IAAI,iBAAiB,GAAG,KAAK,CAAC;QAC9B,eAAe,CAAC,KAAK,CAAC,oBAAY,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACvD,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YACrD,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACpD,IAAI,iBAAiB,KAAK,KAAK,IAAI,UAAU,KAAK,CAAC,IAAI,SAAS,EAAE,CAAC;gBACjE,iBAAiB,GAAG,SAAS,CAAC;YAChC,CAAC;YACD,IAAI,iBAAiB,KAAK,IAAI,IAAI,UAAU,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjE,iBAAiB,GAAG,KAAK,CAAC;YAC5B,CAAC;YACD,sFAAsF;YACtF,IAAI,UAAU,KAAK,CAAC,IAAI,iBAAiB,EAAE,CAAC;gBAC1C,uDAAuD;gBACvD,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3C,IAAI,SAAS,EAAE,CAAC;oBACd,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM,OAAO,GAAG,QAAQ;yBACrB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;yBACrB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;yBACjB,IAAI,EAAE,CAAC;oBACV,MAAM,cAAc,GAAG,IAAA,gBAAS,EAAC,QAAQ,CAAC,CAAC;oBAC3C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,cAAc,EAAE,CAAC;wBAC5C,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;oBACjC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;IAC3D,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { newlineRegex } from '../../../util/regex';\nimport { isVersion } from '../../versioning/ruby';\n\nconst DEP_REGEX = new RegExp('(?<=\\\\().*(?=\\\\))'); // TODO #12872  (?<=re)\tafter text matching\nexport function extractLockFileEntries(\n  lockFileContent: string,\n): Map<string, string> {\n  const gemLock = new Map<string, string>();\n  try {\n    let parsingGemSection = false;\n    lockFileContent.split(newlineRegex).forEach((eachLine) => {\n      const whitespace = eachLine.indexOf(eachLine.trim());\n      const isGemLine = eachLine.trim().startsWith('GEM');\n      if (parsingGemSection === false && whitespace === 0 && isGemLine) {\n        parsingGemSection = isGemLine;\n      }\n      if (parsingGemSection === true && whitespace === 0 && !isGemLine) {\n        parsingGemSection = false;\n      }\n      // as per original ruby lockfile parser,a line whitespace 2,4,6 contains dependencies.\n      if (whitespace === 4 && parsingGemSection) {\n        // checking if the dependency string has version or not\n        const depString = DEP_REGEX.exec(eachLine);\n        if (depString) {\n          const depValue = depString[0];\n          const depName = eachLine\n            .replace(depValue, '')\n            .replace('()', '')\n            .trim();\n          const isValidVersion = isVersion(depValue);\n          if (!gemLock.get(depName) && isValidVersion) {\n            gemLock.set(depName, depValue);\n          }\n        }\n      }\n    });\n  } catch (err) {\n    logger.warn({ err }, `Failed to parse Bundler lockfile`);\n  }\n  return gemLock;\n}\n"]}