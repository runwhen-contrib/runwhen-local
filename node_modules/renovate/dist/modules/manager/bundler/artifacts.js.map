{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../../lib/modules/manager/bundler/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { quote } from 'shlex';\nimport {\n  BUNDLER_INVALID_CREDENTIALS,\n  TEMPORARY_ERROR,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { HostRule } from '../../../types';\nimport * as memCache from '../../../util/cache/memory';\nimport { exec } from '../../../util/exec';\nimport type { ExecOptions } from '../../../util/exec/types';\nimport {\n  ensureCacheDir,\n  readLocalFile,\n  writeLocalFile,\n} from '../../../util/fs';\nimport { getRepoStatus } from '../../../util/git';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\nimport {\n  getBundlerConstraint,\n  getLockFilePath,\n  getRubyConstraint,\n} from './common';\nimport {\n  findAllAuthenticatable,\n  getAuthenticationHeaderValue,\n} from './host-rules';\n\nconst hostConfigVariablePrefix = 'BUNDLE_';\n\nfunction buildBundleHostVariable(hostRule: HostRule): Record<string, string> {\n  // istanbul ignore if: doesn't happen in practice\n  if (!hostRule.resolvedHost) {\n    return {};\n  }\n  const varName = hostConfigVariablePrefix.concat(\n    hostRule.resolvedHost\n      .toUpperCase()\n      .split('.')\n      .join('__')\n      .split('-')\n      .join('___'),\n  );\n  return {\n    [varName]: `${getAuthenticationHeaderValue(hostRule)}`,\n  };\n}\n\nconst resolvedPkgRegex = regEx(\n  /(?<pkg>\\S+)(?:\\s*\\([^)]+\\)\\s*)? was resolved to/,\n);\n\nfunction getResolvedPackages(input: string): string[] {\n  const lines = input.split(newlineRegex);\n  const result: string[] = [];\n  for (const line of lines) {\n    const resolveMatchGroups = line.match(resolvedPkgRegex)?.groups;\n    if (resolveMatchGroups) {\n      const { pkg } = resolveMatchGroups;\n      result.push(pkg);\n    }\n  }\n\n  return [...new Set(result)];\n}\n\nexport async function updateArtifacts(\n  updateArtifact: UpdateArtifact,\n  recursionLimit = 10,\n): Promise<UpdateArtifactsResult[] | null> {\n  const { packageFileName, updatedDeps, newPackageFileContent, config } =\n    updateArtifact;\n  logger.debug(`bundler.updateArtifacts(${packageFileName})`);\n  const existingError = memCache.get<string>('bundlerArtifactsError');\n  // istanbul ignore if\n  if (existingError) {\n    logger.debug('Aborting Bundler artifacts due to previous failed attempt');\n    throw new Error(existingError);\n  }\n  const lockFileName = await getLockFilePath(packageFileName);\n  const existingLockFileContent = await readLocalFile(lockFileName, 'utf8');\n  if (!existingLockFileContent) {\n    logger.debug('No Gemfile.lock found');\n    return null;\n  }\n\n  const updatedDepNames: string[] = updatedDeps\n    .map(({ depName }) => depName)\n    .filter(is.nonEmptyStringAndNotWhitespace);\n\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n\n    const commands: string[] = [];\n\n    if (config.isLockFileMaintenance) {\n      commands.push('bundler lock --update');\n    } else {\n      const bundlerUpgraded = updatedDeps\n        .map((dep) => dep.depName)\n        .includes('bundler');\n      if (bundlerUpgraded) {\n        commands.push('bundler lock --update --bundler');\n      }\n\n      const updateTypes = {\n        patch: '--patch ',\n        minor: '--minor ',\n        major: '',\n      };\n      for (const [updateType, updateArg] of Object.entries(updateTypes)) {\n        const deps = updatedDeps\n          .filter((dep) => (dep.updateType ?? 'major') === updateType)\n          .map((dep) => dep.depName)\n          .filter(is.string)\n          .filter((dep) => dep !== 'ruby' && dep !== 'bundler');\n        let additionalArgs = '';\n        if (config.postUpdateOptions?.includes('bundlerConservative')) {\n          additionalArgs = '--conservative ';\n        }\n        if (deps.length) {\n          const cmd = `bundler lock ${updateArg}${additionalArgs}--update ${deps\n            .map(quote)\n            .join(' ')}`;\n          commands.push(cmd);\n        }\n      }\n\n      const rubyUpgraded = updatedDeps\n        .map((dep) => dep.depName)\n        .includes('ruby');\n      if (rubyUpgraded) {\n        commands.push('bundler lock');\n      }\n    }\n\n    const bundlerHostRules = findAllAuthenticatable({\n      hostType: 'rubygems',\n    });\n\n    const bundlerHostRulesVariables = bundlerHostRules.reduce(\n      (variables, hostRule) => ({\n        ...variables,\n        ...buildBundleHostVariable(hostRule),\n      }),\n      {} as Record<string, string>,\n    );\n\n    const bundler = getBundlerConstraint(\n      updateArtifact,\n      existingLockFileContent,\n    );\n    const preCommands = ['ruby --version'];\n\n    const execOptions: ExecOptions = {\n      cwdFile: lockFileName,\n      extraEnv: {\n        ...bundlerHostRulesVariables,\n        GEM_HOME: await ensureCacheDir('bundler'),\n      },\n      docker: {},\n      toolConstraints: [\n        {\n          toolName: 'ruby',\n          constraint: await getRubyConstraint(updateArtifact),\n        },\n        {\n          toolName: 'bundler',\n          constraint: bundler,\n        },\n      ],\n      preCommands,\n    };\n    await exec(commands, execOptions);\n\n    const status = await getRepoStatus();\n    if (!status.modified.includes(lockFileName)) {\n      return null;\n    }\n    logger.debug('Returning updated Gemfile.lock');\n    const lockFileContent = await readLocalFile(lockFileName);\n    return [\n      {\n        file: {\n          type: 'addition',\n          path: lockFileName,\n          contents: lockFileContent,\n        },\n      },\n    ];\n  } catch (err) {\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    const output = `${String(err.stdout)}\\n${String(err.stderr)}`;\n    if (\n      err.message.includes('fatal: Could not parse object') ||\n      output.includes('but that version could not be found')\n    ) {\n      return [\n        {\n          artifactError: {\n            lockFile: lockFileName,\n            stderr: output,\n          },\n        },\n      ];\n    }\n    if (\n      err.stdout?.includes('Please supply credentials for this source') ||\n      err.stderr?.includes('Authentication is required') ||\n      err.stderr?.includes(\n        'Please make sure you have the correct access rights',\n      )\n    ) {\n      logger.debug(\n        { err },\n        'Gemfile.lock update failed due to missing credentials - skipping branch',\n      );\n      // Do not generate these PRs because we don't yet support Bundler authentication\n      memCache.set('bundlerArtifactsError', BUNDLER_INVALID_CREDENTIALS);\n      throw new Error(BUNDLER_INVALID_CREDENTIALS);\n    }\n    const resolveMatches: string[] = getResolvedPackages(output).filter(\n      (depName) => !updatedDepNames.includes(depName),\n    );\n    if (\n      recursionLimit > 0 &&\n      resolveMatches.length &&\n      !config.isLockFileMaintenance\n    ) {\n      logger.debug(\n        { resolveMatches, updatedDeps },\n        'Found new resolve matches - reattempting recursively',\n      );\n      const newUpdatedDeps = [\n        ...new Set([\n          ...updatedDeps,\n          ...resolveMatches.map((match) => ({ depName: match })),\n        ]),\n      ];\n      return updateArtifacts(\n        {\n          packageFileName,\n          updatedDeps: newUpdatedDeps,\n          newPackageFileContent,\n          config,\n        },\n        recursionLimit - 1,\n      );\n    }\n\n    logger.info({ err }, 'Gemfile.lock update failed due to an unknown reason');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: `${String(err.stdout)}\\n${String(err.stderr)}`,\n        },\n      },\n    ];\n  }\n}\n"]}