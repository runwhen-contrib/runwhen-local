{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/helm-values/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../logger';\nimport { parseYaml } from '../../../util/yaml';\nimport { id as dockerVersioning } from '../../versioning/docker';\nimport { getDep } from '../dockerfile/extract';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport type { HelmDockerImageDependency } from './types';\nimport {\n  matchesHelmValuesDockerHeuristic,\n  matchesHelmValuesInlineImage,\n} from './util';\n\nfunction getHelmDep(\n  registry: string,\n  repository: string,\n  tag: string,\n  registryAliases: Record<string, string> | undefined,\n): PackageDependency {\n  const dep = getDep(`${registry}${repository}:${tag}`, false, registryAliases);\n  dep.replaceString = tag;\n  dep.versioning = dockerVersioning;\n  dep.autoReplaceStringTemplate =\n    '{{newValue}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  return dep;\n}\n\n/**\n * Recursively find all supported dependencies in the yaml object.\n *\n * @param parsedContent\n */\nexport function findDependencies(\n  parsedContent: Record<string, unknown> | HelmDockerImageDependency,\n  registryAliases: Record<string, string> | undefined,\n): PackageDependency[] {\n  return findDependenciesInternal(parsedContent, [], registryAliases);\n}\nexport function findDependenciesInternal(\n  parsedContent: Record<string, unknown> | HelmDockerImageDependency,\n  packageDependencies: PackageDependency[],\n  registryAliases: Record<string, string> | undefined,\n): PackageDependency[] {\n  if (!parsedContent || typeof parsedContent !== 'object') {\n    return packageDependencies;\n  }\n\n  Object.entries(parsedContent).forEach(([key, value]) => {\n    if (matchesHelmValuesDockerHeuristic(key, value)) {\n      const currentItem = value;\n\n      let registry = currentItem.registry;\n      registry = registry ? `${registry}/` : '';\n      const repository = String(currentItem.repository);\n      const tag = `${currentItem.tag ?? currentItem.version}`;\n      packageDependencies.push(\n        getHelmDep(registry, repository, tag, registryAliases),\n      );\n    } else if (matchesHelmValuesInlineImage(key, value)) {\n      packageDependencies.push(getDep(value, true, registryAliases));\n    } else {\n      findDependenciesInternal(\n        value as Record<string, unknown>,\n        packageDependencies,\n        registryAliases,\n      );\n    }\n  });\n  return packageDependencies;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): PackageFileContent | null {\n  let parsedContent: Record<string, unknown>[] | HelmDockerImageDependency[];\n  try {\n    // a parser that allows extracting line numbers would be preferable, with\n    // the current approach we need to match anything we find again during the update\n    // TODO: fix me (#9610)\n    parsedContent = parseYaml(content) as any;\n  } catch (err) {\n    logger.debug({ err, packageFile }, 'Failed to parse helm-values YAML');\n    return null;\n  }\n  try {\n    const deps: PackageDependency<Record<string, any>>[] = [];\n\n    for (const con of parsedContent) {\n      deps.push(...findDependencies(con, config.registryAliases));\n    }\n\n    if (deps.length) {\n      return { deps };\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { err, packageFile },\n      'Error parsing helm-values parsed content',\n    );\n  }\n  return null;\n}\n"]}