{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/circleci/schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,6DAIoC;AAEvB,QAAA,cAAc,GAAG,OAAC;KAC5B,MAAM,CAAC,EAAE,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,CAAC;KAC7B,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;AAEtB,QAAA,WAAW,GAAG,OAAC;KACzB,MAAM,CAAC;IACN,MAAM,EAAE,IAAA,yBAAU,EAAC,sBAAc,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;CAC7C,CAAC;KACD,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;AAGrC,MAAM,eAAe,GAAG,IAAA,0BAAW,EAAC,mBAAW,CAAC;KAC7C,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;KACzC,KAAK,CAAC,EAAE,CAAC,CAAC;AAEb,MAAM,OAAO,GAAG,OAAC,CAAC,MAAM,CAAC;IACvB,SAAS,EAAE,eAAe;IAC1B,IAAI,EAAE,eAAe;CACtB,CAAC,CAAC;AAMU,QAAA,WAAW,GAAmB,OAAO,CAAC,MAAM,CAAC;IACxD,IAAI,EAAE,IAAA,0BAAW,EAAC,OAAC,CAAC,KAAK,CAAC,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,mBAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;CAC9E,CAAU,CAAC;AAGC,QAAA,YAAY,GAAG,0BAAW,CAAC,IAAI,CAC1C,OAAO,CAAC,MAAM,CAAC;IACb,OAAO,EAAE,IAAA,yBAAU,EAAC,sBAAc,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;IAC7C,IAAI,EAAE,IAAA,0BAAW,EAAC,OAAC,CAAC,KAAK,CAAC,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,mBAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;CAChE,CAAC,CACH,CAAC","sourcesContent":["import { z } from 'zod';\nimport {\n  LooseArray,\n  LooseRecord,\n  NotCircular,\n} from '../../../util/schema-utils';\n\nexport const CircleCiDocker = z\n  .object({ image: z.string() })\n  .transform(({ image }) => image);\n\nexport const CircleCiJob = z\n  .object({\n    docker: LooseArray(CircleCiDocker).catch([]),\n  })\n  .transform(({ docker }) => docker);\nexport type CircleCiJob = z.infer<typeof CircleCiJob>;\n\nconst CircleCiJobList = LooseRecord(CircleCiJob)\n  .transform((x) => Object.values(x).flat())\n  .catch([]);\n\nconst BaseOrb = z.object({\n  executors: CircleCiJobList,\n  jobs: CircleCiJobList,\n});\n\ntype Orb = z.infer<typeof BaseOrb> & {\n  orbs: Record<string, string | Orb>;\n};\n\nexport const CircleCiOrb: z.ZodType<Orb> = BaseOrb.extend({\n  orbs: LooseRecord(z.union([z.string(), z.lazy(() => CircleCiOrb)])).catch({}),\n}) as never;\nexport type CircleCiOrb = z.infer<typeof CircleCiOrb>;\n\nexport const CircleCiFile = NotCircular.pipe(\n  BaseOrb.extend({\n    aliases: LooseArray(CircleCiDocker).catch([]),\n    orbs: LooseRecord(z.union([z.string(), CircleCiOrb])).catch({}),\n  }),\n);\nexport type CircleCiFile = z.infer<typeof CircleCiFile>;\n"]}