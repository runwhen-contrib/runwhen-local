{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/circleci/extract.ts"],"names":[],"mappings":";;AA6CA,gDA8BC;;AA3ED,4CAAyC;AACzC,iDAA8C;AAC9C,6CAAqD;AACrD,8CAAqD;AACrD,4EAAsD;AACtD,mDAA+C;AAM/C,qCAA0D;AAE1D,SAAS,iBAAiB,CACxB,IAAyB,EACzB,UAAsC,EACtC,eAAuC;IAEvC,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QACzD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC5B,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEnD,IAAI,CAAC,IAAI,CAAC;gBACR,OAAO,EAAE,GAAG;gBACZ,WAAW;gBACX,OAAO,EAAE,KAAK;gBACd,YAAY;gBACZ,UAAU,EAAE,aAAa,CAAC,EAAE;gBAC5B,UAAU,EAAE,mBAAa,CAAC,EAAE;aAC7B,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,uBAAuB;IACvB,MAAM,YAAY,GAAG,CAAC,GAAG,UAAU,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACnE,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC;YACR,GAAG,IAAA,gBAAM,EAAC,WAAW,EAAE,IAAI,EAAE,eAAe,CAAC;YAC7C,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAoB,EACpB,MAAsB;IAEtB,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,eAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAC5C,qBAAY,CAAC,KAAK,CAAC,IAAA,sBAAe,EAAC,OAAO,CAAC,CAAC,CAC7C,CAAC,MAAM,EAAE,CAAC;IAEX,IAAI,GAAG,EAAE,CAAC;QACR,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,kCAAkC,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,eAAe,GAAG,MAAM,EAAE,eAAe,IAAI,EAAE,CAAC;IACtD,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,iBAAiB,CAAC,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;IAEjD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC;YACR,GAAG,IAAA,gBAAM,EAAC,KAAK,EAAE,IAAI,EAAE,eAAe,CAAC;YACvC,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC","sourcesContent":["import { logger } from '../../../logger';\nimport { Result } from '../../../util/result';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { OrbDatasource } from '../../datasource/orb';\nimport * as npmVersioning from '../../versioning/npm';\nimport { getDep } from '../dockerfile/extract';\nimport type {\n  ExtractConfig,\n  PackageDependency,\n  PackageFileContent,\n} from '../types';\nimport { CircleCiFile, type CircleCiOrb } from './schema';\n\nfunction extractDefinition(\n  deps: PackageDependency[],\n  definition: CircleCiOrb | CircleCiFile,\n  registryAliases: Record<string, string>,\n): void {\n  for (const [key, orb] of Object.entries(definition.orbs)) {\n    if (typeof orb === 'string') {\n      const [packageName, currentValue] = orb.split('@');\n\n      deps.push({\n        depName: key,\n        packageName,\n        depType: 'orb',\n        currentValue,\n        versioning: npmVersioning.id,\n        datasource: OrbDatasource.id,\n      });\n    } else {\n      extractDefinition(deps, orb, registryAliases);\n    }\n  }\n\n  // extract environments\n  const environments = [...definition.executors, ...definition.jobs];\n  for (const dockerImage of environments) {\n    deps.push({\n      ...getDep(dockerImage, true, registryAliases),\n      depType: 'docker',\n    });\n  }\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile?: string,\n  config?: ExtractConfig,\n): PackageFileContent | null {\n  const { val: parsed, err } = Result.wrap(() =>\n    CircleCiFile.parse(parseSingleYaml(content)),\n  ).unwrap();\n\n  if (err) {\n    logger.debug({ err, packageFile }, 'Error extracting circleci images');\n    return null;\n  }\n\n  const registryAliases = config?.registryAliases ?? {};\n  const deps: PackageDependency[] = [];\n  extractDefinition(deps, parsed, registryAliases);\n\n  for (const alias of parsed.aliases) {\n    deps.push({\n      ...getDep(alias, true, registryAliases),\n      depType: 'docker',\n    });\n  }\n\n  if (!deps.length) {\n    return null;\n  }\n\n  return { deps };\n}\n"]}