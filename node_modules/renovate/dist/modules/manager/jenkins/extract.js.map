{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../../lib/modules/manager/jenkins/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport { isSkipComment } from '../../../util/ignore';\nimport { newlineRegex, regEx } from '../../../util/regex';\nimport { parseSingleYaml } from '../../../util/yaml';\nimport { JenkinsPluginsDatasource } from '../../datasource/jenkins-plugins';\nimport * as mavenVersioning from '../../versioning/maven';\nimport type { PackageDependency, PackageFileContent } from '../types';\nimport type { JenkinsPlugin, JenkinsPlugins } from './types';\n\nconst YamlExtension = regEx(/\\.ya?ml$/);\n\nfunction getDependency(plugin: JenkinsPlugin): PackageDependency {\n  const dep: PackageDependency = {\n    datasource: JenkinsPluginsDatasource.id,\n    versioning: mavenVersioning.id,\n    depName: plugin.artifactId,\n  };\n\n  if (plugin.source?.version) {\n    dep.currentValue = plugin.source.version.toString();\n    if (!is.string(plugin.source.version)) {\n      dep.skipReason = 'invalid-version';\n      logger.warn(\n        { dep },\n        'Jenkins plugin dependency version is not a string and will be ignored',\n      );\n    }\n  } else {\n    dep.skipReason = 'unspecified-version';\n  }\n\n  if (\n    plugin.source?.version === 'latest' ||\n    plugin.source?.version === 'experimental' ||\n    plugin.groupId\n  ) {\n    dep.skipReason = 'unsupported-version';\n  }\n\n  if (plugin.source?.url) {\n    dep.skipReason = 'internal-package';\n  }\n\n  if (!dep.skipReason && plugin.renovate?.ignore) {\n    dep.skipReason = 'ignored';\n  }\n\n  logger.debug({ dep }, 'Jenkins plugin dependency');\n  return dep;\n}\n\nfunction extractYaml(\n  content: string,\n  packageFile: string,\n): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n\n  try {\n    // TODO: use schema (#9610)\n    const doc = parseSingleYaml<JenkinsPlugins>(content);\n    if (is.nonEmptyArray(doc?.plugins)) {\n      for (const plugin of doc.plugins) {\n        if (plugin.artifactId) {\n          const dep = getDependency(plugin);\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err, packageFile }, 'Error parsing Jenkins plugins');\n  }\n  return deps;\n}\n\nfunction extractText(content: string): PackageDependency[] {\n  const deps: PackageDependency[] = [];\n  const regex = regEx(\n    /^\\s*(?<depName>[\\d\\w-]+):(?<currentValue>[^#\\s]+)[#\\s]*(?<comment>.*)$/,\n  );\n\n  for (const line of content.split(newlineRegex)) {\n    const match = regex.exec(line);\n    if (match?.groups) {\n      const { depName, currentValue, comment } = match.groups;\n      const plugin: JenkinsPlugin = {\n        artifactId: depName,\n        source: {\n          version: currentValue,\n        },\n        renovate: {\n          ignore: isSkipComment(comment),\n        },\n      };\n      const dep = getDependency(plugin);\n      deps.push(dep);\n    }\n  }\n  return deps;\n}\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n): PackageFileContent | null {\n  logger.trace(`jenkins.extractPackageFile(${packageFile})`);\n  const deps: PackageDependency[] = [];\n\n  if (YamlExtension.test(packageFile)) {\n    deps.push(...extractYaml(content, packageFile));\n  } else {\n    deps.push(...extractText(content));\n  }\n\n  if (deps.length === 0) {\n    return null;\n  }\n  return { deps };\n}\n"]}