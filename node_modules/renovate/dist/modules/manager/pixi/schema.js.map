{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../lib/modules/manager/pixi/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { LooseRecord, Toml, Yaml } from '../../../util/schema-utils';\nimport { CondaDatasource } from '../../datasource/conda/';\nimport { GitRefsDatasource } from '../../datasource/git-refs';\nimport { PypiDatasource } from '../../datasource/pypi';\nimport * as condaVersion from '../../versioning/conda/';\nimport { id as gitRefVersionID } from '../../versioning/git';\nimport { id as pep440VersionID } from '../../versioning/pep440/';\nimport type { PackageDependency } from '../types';\n\nexport type Channels = z.infer<typeof Channel>[];\n\nconst Channel = z.union([\n  z.string(),\n  z.object({ channel: z.string(), priority: z.number() }),\n]);\n\nexport interface PixiPackageDependency extends PackageDependency {\n  channel?: string;\n  channels?: Channels;\n}\n\nfunction collectNamedPackages(\n  packages: Record<string, PackageDependency>,\n): PackageDependency[] {\n  return Object.entries(packages).map(([depName, config]) => {\n    return {\n      ...config,\n      depName,\n    };\n  });\n}\n\nconst PypiDependency = z\n  .union([\n    z.string().transform((version) => ({ version })),\n    z.object({ version: z.string() }),\n  ])\n  .transform(({ version }) => {\n    return {\n      currentValue: version,\n      versioning: pep440VersionID,\n      datasource: PypiDatasource.id,\n      depType: 'pypi-dependencies',\n    } satisfies PixiPackageDependency;\n  });\n\nconst PypiGitDependency = z\n  .object({ git: z.string(), rev: z.optional(z.string()) })\n  .transform(({ git, rev }) => {\n    // empty ref default to HEAD, so do we not need to do anything\n    if (!rev) {\n      return {\n        currentValue: rev,\n        packageName: git,\n        datasource: GitRefsDatasource.id,\n        depType: 'pypi-dependencies',\n        versioning: gitRefVersionID,\n        skipStage: 'extract',\n        skipReason: 'unspecified-version',\n      } satisfies PixiPackageDependency;\n    }\n\n    return {\n      currentValue: rev,\n      packageName: git,\n      datasource: GitRefsDatasource.id,\n      depType: 'pypi-dependencies',\n      versioning: gitRefVersionID,\n    } satisfies PixiPackageDependency;\n  });\n\nconst PypiDependencies = LooseRecord(\n  z.string(),\n  z.union([PypiDependency, PypiGitDependency]),\n).transform(collectNamedPackages);\n\nconst CondaDependency = z\n  .union([\n    z.string().transform((version) => ({ version, channel: undefined })),\n    z.object({ version: z.string(), channel: z.optional(z.string()) }),\n  ])\n  .transform(({ version, channel }) => {\n    return {\n      currentValue: version,\n      versioning: condaVersion.id,\n      datasource: CondaDatasource.id,\n      depType: 'dependencies',\n      channel,\n    } satisfies PixiPackageDependency;\n  });\n\nconst CondaDependencies = LooseRecord(z.string(), CondaDependency).transform(\n  collectNamedPackages,\n);\n\nconst Targets = LooseRecord(\n  z.string(),\n  z.object({\n    dependencies: z.optional(CondaDependencies).default({}),\n    'pypi-dependencies': z.optional(PypiDependencies).default({}),\n  }),\n).transform((val) => {\n  const conda: PixiPackageDependency[] = [];\n  const pypi: PixiPackageDependency[] = [];\n  for (const value of Object.values(val)) {\n    pypi.push(...value['pypi-dependencies']);\n\n    conda.push(...value.dependencies);\n  }\n\n  return { pypi, conda };\n});\n\nconst Project = z.object({\n  channels: z.array(Channel).default([]),\n  'requires-pixi': z.string().optional(),\n  'channel-priority': z\n    .union([z.literal('strict'), z.literal('disabled')])\n    .default('strict'),\n});\n\nconst DependenciesMixin = z\n  .object({\n    dependencies: z.optional(CondaDependencies).default({}),\n    'pypi-dependencies': z.optional(PypiDependencies).default({}),\n    target: z.optional(Targets).default({}),\n  })\n  .transform(\n    (\n      val,\n    ): { pypi: PixiPackageDependency[]; conda: PixiPackageDependency[] } => {\n      return {\n        conda: [...val.dependencies, ...val.target.conda],\n        pypi: [...val['pypi-dependencies'], ...val.target.pypi],\n      };\n    },\n  );\n\nconst Features = LooseRecord(\n  z.string(),\n  z\n    .object({\n      channels: z.array(Channel).optional(),\n    })\n    .and(DependenciesMixin),\n).transform(\n  (\n    features,\n  ): {\n    conda: PixiPackageDependency[];\n    pypi: PixiPackageDependency[];\n  } => {\n    const pypi: PixiPackageDependency[] = [];\n    const conda: PixiPackageDependency[] = [];\n\n    for (const feature of Object.values(features)) {\n      conda.push(\n        ...feature.conda.map((item) => {\n          return {\n            ...item,\n            channels: feature.channels,\n          };\n        }),\n      );\n\n      pypi.push(...feature.pypi);\n    }\n\n    return { pypi, conda };\n  },\n);\n\nconst PixiWorkspace = z\n  .object({\n    workspace: Project,\n  })\n  .transform((val) => {\n    return { project: val.workspace };\n  });\n\nconst PixiProject = z.object({\n  project: Project,\n});\n\n/**\n * `$` of `pixi.toml` or `$.tool.pixi` of `pyproject.toml`\n */\nexport const PixiConfigSchema = z\n  .union([PixiWorkspace, PixiProject])\n  .and(z.object({ feature: Features.default({}) }))\n  .and(DependenciesMixin);\n\nexport type PixiConfig = z.infer<typeof PixiConfigSchema>;\n\nexport const PixiToml = Toml.pipe(PixiConfigSchema);\n\nexport const LockfileYaml = Yaml.pipe(\n  z.object({\n    version: z.number(),\n  }),\n);\n"]}