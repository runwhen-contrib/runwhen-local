{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/custom/jsonata/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport jsonata from 'jsonata';\nimport { migrateDatasource } from '../../../../config/migrations/custom/datasource-migration';\nimport { logger } from '../../../../logger';\nimport * as template from '../../../../util/template';\nimport { parseUrl } from '../../../../util/url';\nimport type { PackageDependency } from '../../types';\nimport type { ValidMatchFields } from '../utils';\nimport { checkIsValidDependency, validMatchFields } from '../utils';\nimport { QueryResultZodSchema } from './schema';\nimport type { JSONataManagerTemplates, JsonataExtractConfig } from './types';\n\nexport async function handleMatching(\n  json: unknown,\n  packageFile: string,\n  config: JsonataExtractConfig,\n): Promise<PackageDependency[]> {\n  let results: Record<string, string>[] = [];\n  const { matchStrings: jsonataQueries } = config;\n  for (const query of jsonataQueries) {\n    // won't fail as this is verified during config validation\n    const jsonataExpression = jsonata(query);\n    // this does not throw error, just returns undefined if no matches\n    const queryResult = await jsonataExpression.evaluate(json);\n\n    // allows empty dep object cause templates can be used to configure the required fields\n    // if some issues arise then the isValidDependency call will catch them later on\n    if (!queryResult || is.emptyArray(queryResult)) {\n      logger.debug(\n        {\n          jsonataQuery: query,\n          packageFile,\n        },\n        'The jsonata query returned no matches. Possible error, please check your query. Skipping',\n      );\n      return [];\n    }\n\n    const parsed = QueryResultZodSchema.safeParse(queryResult);\n    if (parsed.success) {\n      results = results.concat(parsed.data);\n    } else {\n      logger.warn(\n        { err: parsed.error, jsonataQuery: query, packageFile, queryResult },\n        'Query results failed schema validation',\n      );\n      return [];\n    }\n  }\n\n  return results\n    .map((dep) => createDependency(dep, config))\n    .filter(is.truthy)\n    .filter((dep) =>\n      checkIsValidDependency(dep, packageFile, 'custom.jsonata'),\n    );\n}\n\nexport function createDependency(\n  queryResult: Record<string, string>,\n  config: JsonataExtractConfig,\n): PackageDependency | null {\n  const dependency: PackageDependency = {};\n\n  for (const field of validMatchFields) {\n    const fieldTemplate = `${field}Template` as keyof JSONataManagerTemplates;\n    const tmpl = config[fieldTemplate];\n    if (tmpl) {\n      try {\n        const compiled = template.compile(tmpl, queryResult, false);\n        updateDependency(field, compiled, dependency);\n      } catch {\n        logger.debug(\n          { template: tmpl },\n          'Error compiling template for JSONata manager',\n        );\n        return null;\n      }\n    } else if (queryResult[field]) {\n      updateDependency(field, queryResult[field], dependency);\n    }\n  }\n  return dependency;\n}\n\nfunction updateDependency(\n  field: ValidMatchFields,\n  value: string,\n  dependency: PackageDependency,\n): PackageDependency {\n  switch (field) {\n    case 'registryUrl': {\n      const url = parseUrl(value)?.toString();\n      if (!url) {\n        logger.debug({ url: value }, 'Invalid JSONata manager registryUrl');\n        break;\n      }\n      dependency.registryUrls = [url];\n      break;\n    }\n    case 'datasource':\n      dependency.datasource = migrateDatasource(value);\n      break;\n    default:\n      dependency[field] = value;\n      break;\n  }\n\n  return dependency;\n}\n"]}