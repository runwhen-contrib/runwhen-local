{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/custom/jsonata/index.ts"],"names":[],"mappings":";;;AAmBA,gDAmDC;;AAtED,kEAAkC;AAElC,+CAA4C;AAC5C,oDAAoD;AACpD,gDAA2D;AAC3D,gDAAkD;AAElD,oCAA4C;AAE5C,mCAAyC;AAE5B,QAAA,UAAU,GAAe,CAAC,QAAQ,CAAC,CAAC;AAEpC,QAAA,aAAa,GAAG;IAC3B,UAAU,EAAE,KAAK;CAClB,CAAC;AACW,QAAA,oBAAoB,GAAG,CAAC,GAAG,CAAC,CAAC;AAC7B,QAAA,WAAW,GAAG,SAAS,CAAC;AAE9B,KAAK,UAAU,kBAAkB,CACtC,OAAe,EACf,WAAmB,EACnB,MAA4B;IAE5B,IAAI,IAAa,CAAC;IAClB,IAAI,CAAC;QACH,QAAQ,MAAM,CAAC,UAAU,EAAE,CAAC;YAC1B,KAAK,MAAM;gBACT,IAAI,GAAG,IAAA,kBAAS,EAAC,OAAO,EAAE,WAAW,CAAC,CAAC;gBACvC,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,GAAG,IAAA,gBAAS,EAAC,OAAO,CAAC,CAAC;gBAC1B,MAAM;YACR,KAAK,MAAM;gBACT,IAAI,GAAG,IAAA,YAAS,EAAC,OAAO,CAAC,CAAC;gBAC1B,MAAM;QACV,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,EAC7D,0BAA0B,CAC3B,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,YAAE,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,IAAA,sBAAc,EAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;IAC7D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,GAAG,GAAiD;QACxD,IAAI;QACJ,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,UAAU,EAAE,MAAM,CAAC,UAAU;KAC9B,CAAC;IAEF,sCAAsC;IACtC,KAAK,MAAM,KAAK,IAAI,wBAAgB,CAAC,GAAG,CACtC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,UAA2C,CACvD,EAAE,CAAC;QACF,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAClB,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { Category } from '../../../../constants';\nimport { logger } from '../../../../logger';\nimport { parseJson } from '../../../../util/common';\nimport { parse as parseToml } from '../../../../util/toml';\nimport { parseYaml } from '../../../../util/yaml';\nimport type { PackageFileContent } from '../../types';\nimport { validMatchFields } from '../utils';\nimport type { JSONataManagerTemplates, JsonataExtractConfig } from './types';\nimport { handleMatching } from './utils';\n\nexport const categories: Category[] = ['custom'];\n\nexport const defaultConfig = {\n  pinDigests: false,\n};\nexport const supportedDatasources = ['*'];\nexport const displayName = 'JSONata';\n\nexport async function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: JsonataExtractConfig,\n): Promise<PackageFileContent | null> {\n  let json: unknown;\n  try {\n    switch (config.fileFormat) {\n      case 'json':\n        json = parseJson(content, packageFile);\n        break;\n      case 'yaml':\n        json = parseYaml(content);\n        break;\n      case 'toml':\n        json = parseToml(content);\n        break;\n    }\n  } catch (err) {\n    logger.debug(\n      { err, fileName: packageFile, fileFormat: config.fileFormat },\n      'Error while parsing file',\n    );\n    return null;\n  }\n\n  if (is.nullOrUndefined(json)) {\n    return null;\n  }\n\n  const deps = await handleMatching(json, packageFile, config);\n  if (!deps.length) {\n    return null;\n  }\n\n  const res: PackageFileContent & JSONataManagerTemplates = {\n    deps,\n    matchStrings: config.matchStrings,\n    fileFormat: config.fileFormat,\n  };\n\n  // copy over templates for autoreplace\n  for (const field of validMatchFields.map(\n    (f) => `${f}Template` as keyof JSONataManagerTemplates,\n  )) {\n    if (config[field]) {\n      res[field] = config[field];\n    }\n  }\n\n  return res;\n}\n"]}