import { z } from 'zod';
export declare const QueryResultZodSchema: z.ZodEffects<z.ZodUnion<[z.ZodArray<z.ZodObject<{
    currentValue: z.ZodOptional<z.ZodString>;
    datasource: z.ZodOptional<z.ZodString>;
    depName: z.ZodOptional<z.ZodString>;
    packageName: z.ZodOptional<z.ZodString>;
    currentDigest: z.ZodOptional<z.ZodString>;
    versioning: z.ZodOptional<z.ZodString>;
    depType: z.ZodOptional<z.ZodString>;
    registryUrl: z.ZodOptional<z.ZodString>;
    extractVersion: z.ZodOptional<z.ZodString>;
    indentation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}, {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}>, "many">, z.ZodObject<{
    currentValue: z.ZodOptional<z.ZodString>;
    datasource: z.ZodOptional<z.ZodString>;
    depName: z.ZodOptional<z.ZodString>;
    packageName: z.ZodOptional<z.ZodString>;
    currentDigest: z.ZodOptional<z.ZodString>;
    versioning: z.ZodOptional<z.ZodString>;
    depType: z.ZodOptional<z.ZodString>;
    registryUrl: z.ZodOptional<z.ZodString>;
    extractVersion: z.ZodOptional<z.ZodString>;
    indentation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}, {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}>]>, {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}[], {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
} | {
    datasource?: string | undefined;
    registryUrl?: string | undefined;
    packageName?: string | undefined;
    currentValue?: string | undefined;
    depName?: string | undefined;
    currentDigest?: string | undefined;
    depType?: string | undefined;
    versioning?: string | undefined;
    extractVersion?: string | undefined;
    indentation?: string | undefined;
}[]>;
