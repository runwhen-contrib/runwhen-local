{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/custom/regex/index.ts"],"names":[],"mappings":";;;AAqBA,gDAwDC;;AA7ED,kEAAkC;AAElC,+CAA4C;AAO5C,oCAA4C;AAC5C,6CAA6E;AAGhE,QAAA,UAAU,GAAe,CAAC,QAAQ,CAAC,CAAC;AAEpC,QAAA,aAAa,GAAG;IAC3B,UAAU,EAAE,KAAK;CAClB,CAAC;AACW,QAAA,oBAAoB,GAAG,CAAC,GAAG,CAAC,CAAC;AAC7B,QAAA,WAAW,GAAG,OAAO,CAAC;AAEnC,SAAgB,kBAAkB,CAChC,OAAe,EACf,WAAmB,EACnB,MAAqB;IAErB,IAAI,IAAyB,CAAC;IAC9B,QAAQ,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACpC,QAAQ;QACR,KAAK,KAAK;YACR,IAAI,GAAG,IAAA,sBAAS,EAAC,OAAO,EAAE,WAAW,EAAE,MAA4B,CAAC,CAAC;YACrE,MAAM;QACR,KAAK,aAAa;YAChB,IAAI,GAAG,IAAA,8BAAiB,EACtB,OAAO,EACP,WAAW,EACX,MAA4B,CAC7B,CAAC;YACF,MAAM;QACR,KAAK,WAAW;YACd,IAAI,GAAG,IAAA,4BAAe,EACpB,OAAO,EACP,WAAW,EACX,MAA4B,CAC7B,CAAC;YACF,MAAM;IACV,CAAC;IAED,yBAAyB;IACzB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,YAAE,CAAC,MAAM,CAAC,CAAC;IAC9B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,MAAM,GAAG,GAA+C;YACtD,IAAI;YACJ,YAAY,EAAE,MAAM,CAAC,YAAY;SAClC,CAAC;QACF,IAAI,MAAM,CAAC,oBAAoB,EAAE,CAAC;YAChC,GAAG,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACzD,CAAC;QACD,sCAAsC;QACtC,KAAK,MAAM,KAAK,IAAI,wBAAgB,CAAC,GAAG,CACtC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,UAAyC,CACrD,EAAE,CAAC;YACF,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClB,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QACD,IAAI,MAAM,CAAC,yBAAyB,EAAE,CAAC;YACrC,GAAG,CAAC,yBAAyB,GAAG,MAAM,CAAC,yBAAyB,CAAC;QACnE,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IACD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,EACf,wDAAwD,CACzD,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { Category } from '../../../../constants';\nimport { logger } from '../../../../logger';\nimport type {\n  ExtractConfig,\n  MaybePromise,\n  PackageDependency,\n  PackageFileContent,\n} from '../../types';\nimport { validMatchFields } from '../utils';\nimport { handleAny, handleCombination, handleRecursive } from './strategies';\nimport type { RegexManagerConfig, RegexManagerTemplates } from './types';\n\nexport const categories: Category[] = ['custom'];\n\nexport const defaultConfig = {\n  pinDigests: false,\n};\nexport const supportedDatasources = ['*'];\nexport const displayName = 'Regex';\n\nexport function extractPackageFile(\n  content: string,\n  packageFile: string,\n  config: ExtractConfig,\n): MaybePromise<PackageFileContent | null> {\n  let deps: PackageDependency[];\n  switch (config.matchStringsStrategy) {\n    default:\n    case 'any':\n      deps = handleAny(content, packageFile, config as RegexManagerConfig);\n      break;\n    case 'combination':\n      deps = handleCombination(\n        content,\n        packageFile,\n        config as RegexManagerConfig,\n      );\n      break;\n    case 'recursive':\n      deps = handleRecursive(\n        content,\n        packageFile,\n        config as RegexManagerConfig,\n      );\n      break;\n  }\n\n  // filter all null values\n  deps = deps.filter(is.truthy);\n  if (deps.length) {\n    const res: PackageFileContent & RegexManagerTemplates = {\n      deps,\n      matchStrings: config.matchStrings,\n    };\n    if (config.matchStringsStrategy) {\n      res.matchStringsStrategy = config.matchStringsStrategy;\n    }\n    // copy over templates for autoreplace\n    for (const field of validMatchFields.map(\n      (f) => `${f}Template` as keyof RegexManagerTemplates,\n    )) {\n      if (config[field]) {\n        res[field] = config[field];\n      }\n    }\n    if (config.autoReplaceStringTemplate) {\n      res.autoReplaceStringTemplate = config.autoReplaceStringTemplate;\n    }\n    return res;\n  }\n  logger.debug(\n    { packageFile },\n    'No dependencies found in file for custom regex manager',\n  );\n\n  return null;\n}\n"]}