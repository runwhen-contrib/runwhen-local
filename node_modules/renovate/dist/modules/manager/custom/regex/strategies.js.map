{"version":3,"file":"strategies.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/custom/regex/strategies.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { regEx } from '../../../../util/regex';\nimport type { PackageDependency } from '../../types';\nimport { checkIsValidDependency } from '../utils';\nimport type { RecursionParameter, RegexManagerConfig } from './types';\nimport {\n  createDependency,\n  mergeExtractionTemplate,\n  mergeGroups,\n  regexMatchAll,\n} from './utils';\n\nexport function handleAny(\n  content: string,\n  packageFile: string,\n  config: RegexManagerConfig,\n): PackageDependency[] {\n  return config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)) // match all regex to content, get all matches, reduce to single array\n    .map((matchResult) =>\n      createDependency(\n        {\n          groups:\n            matchResult.groups ??\n            /* istanbul ignore next: can this happen? */ {},\n          replaceString: matchResult[0],\n        },\n        config,\n      ),\n    )\n    .filter(is.truthy)\n    .filter((dep: PackageDependency) =>\n      checkIsValidDependency(dep, packageFile, 'regex'),\n    );\n}\n\nexport function handleCombination(\n  content: string,\n  packageFile: string,\n  config: RegexManagerConfig,\n): PackageDependency[] {\n  const matches = config.matchStrings\n    .map((matchString) => regEx(matchString, 'g'))\n    .flatMap((regex) => regexMatchAll(regex, content)); // match all regex to content, get all matches, reduce to single array\n\n  if (!matches.length) {\n    return [];\n  }\n\n  const extraction = matches\n    .map((match) => ({\n      groups: match.groups ?? /* istanbul ignore next: can this happen? */ {},\n      replaceString:\n        (match?.groups?.currentValue ?? match?.groups?.currentDigest)\n          ? match[0]\n          : undefined,\n    }))\n    .reduce((base, addition) => mergeExtractionTemplate(base, addition));\n  return [createDependency(extraction, config)]\n    .filter(is.truthy)\n    .filter((dep: PackageDependency) =>\n      checkIsValidDependency(dep, packageFile, 'regex'),\n    );\n}\n\nexport function handleRecursive(\n  content: string,\n  packageFile: string,\n  config: RegexManagerConfig,\n): PackageDependency[] {\n  const regexes = config.matchStrings.map((matchString) =>\n    regEx(matchString, 'g'),\n  );\n\n  return processRecursive({\n    content,\n    packageFile,\n    config,\n    index: 0,\n    combinedGroups: {},\n    regexes,\n  })\n    .filter(is.truthy)\n    .filter((dep: PackageDependency) =>\n      checkIsValidDependency(dep, packageFile, 'regex'),\n    );\n}\n\nfunction processRecursive(parameters: RecursionParameter): PackageDependency[] {\n  const {\n    content,\n    index,\n    combinedGroups,\n    regexes,\n    config,\n  }: RecursionParameter = parameters;\n  // abort if we have no matchString anymore\n  if (regexes.length === index) {\n    const result = createDependency(\n      {\n        groups: combinedGroups,\n        replaceString: content,\n      },\n      config,\n    );\n    return result ? [result] : /* istanbul ignore next: can this happen? */ [];\n  }\n  return regexMatchAll(regexes[index], content).flatMap((match) => {\n    return processRecursive({\n      ...parameters,\n      content: match[0],\n      index: index + 1,\n      combinedGroups: mergeGroups(combinedGroups, match.groups ?? {}),\n    });\n  });\n}\n"]}