{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../lib/modules/manager/custom/regex/utils.ts"],"names":[],"mappings":";;AAyCA,4CA4BC;AAED,sCAmBC;AAED,kCAKC;AAED,0DAQC;;AA3GD,uCAA+B;AAC/B,kEAAkC;AAClC,oGAA8F;AAC9F,+CAA4C;AAC5C,4EAAsD;AAGtD,oCAA4C;AAO5C,SAAS,gBAAgB,CACvB,UAA6B,EAC7B,KAAuB,EACvB,KAAa;IAEb,QAAQ,KAAK,EAAE,CAAC;QACd,KAAK,aAAa;YAChB,iDAAiD;YACjD,IAAI,CAAC;gBACH,MAAM,GAAG,GAAG,IAAI,cAAG,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACtC,UAAU,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,CAAC;YAAC,MAAM,CAAC;gBACP,eAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,mCAAmC,CAAC,CAAC;YAC9D,CAAC;YACD,MAAM;QACR,KAAK,YAAY;YACf,UAAU,CAAC,UAAU,GAAG,IAAA,wCAAiB,EAAC,KAAK,CAAC,CAAC;YACjD,MAAM;QACR,KAAK,aAAa;YAChB,UAAU,CAAC,WAAW,GAAG,YAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACxE,MAAM;QACR;YACE,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;YAC1B,MAAM;IACV,CAAC;AACH,CAAC;AAED,SAAgB,gBAAgB,CAC9B,kBAAsC,EACtC,MAA0B,EAC1B,GAAuB;IAEvB,MAAM,UAAU,GAAG,GAAG,IAAI,EAAE,CAAC;IAC7B,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,kBAAkB,CAAC;IAErD,KAAK,MAAM,KAAK,IAAI,wBAAgB,EAAE,CAAC;QACrC,MAAM,aAAa,GAAG,GAAG,KAAK,UAAyC,CAAC;QACxE,MAAM,IAAI,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACnC,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBACvD,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAChD,CAAC;YAAC,MAAM,CAAC;gBACP,eAAM,CAAC,IAAI,CACT,EAAE,QAAQ,EAAE,IAAI,EAAE,EAClB,6CAA6C,CAC9C,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;aAAM,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IACD,UAAU,CAAC,aAAa,GAAG,aAAa,CAAC;IACzC,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,aAAa,CAC3B,KAAa,EACb,OAAe;IAEf,MAAM,OAAO,GAAuB,EAAE,CAAC;IACvC,IAAI,WAAoC,CAAC;IACzC,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,MAAM,aAAa,GAAG,KAAK,CAAC;IAC5B,GAAG,CAAC;QACF,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5B,CAAC;QACD,UAAU,IAAI,CAAC,CAAC;IAClB,CAAC,QAAQ,WAAW,IAAI,UAAU,GAAG,aAAa,EAAE;IACpD,IAAI,UAAU,KAAK,aAAa,EAAE,CAAC;QACjC,eAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;IACzD,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAgB,WAAW,CACzB,WAAmC,EACnC,WAAmC;IAEnC,OAAO,EAAE,GAAG,WAAW,EAAE,GAAG,WAAW,EAAE,CAAC;AAC5C,CAAC;AAED,SAAgB,uBAAuB,CACrC,IAAwB,EACxB,QAA4B;IAE5B,OAAO;QACL,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;QACjD,aAAa,EAAE,QAAQ,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa;KAC5D,CAAC;AACJ,CAAC","sourcesContent":["import { URL } from 'node:url';\nimport is from '@sindresorhus/is';\nimport { migrateDatasource } from '../../../../config/migrations/custom/datasource-migration';\nimport { logger } from '../../../../logger';\nimport * as template from '../../../../util/template';\nimport type { PackageDependency } from '../../types';\nimport type { ValidMatchFields } from '../utils';\nimport { validMatchFields } from '../utils';\nimport type {\n  ExtractionTemplate,\n  RegexManagerConfig,\n  RegexManagerTemplates,\n} from './types';\n\nfunction updateDependency(\n  dependency: PackageDependency,\n  field: ValidMatchFields,\n  value: string,\n): void {\n  switch (field) {\n    case 'registryUrl':\n      // check if URL is valid and pack inside an array\n      try {\n        const url = new URL(value).toString();\n        dependency.registryUrls = [url];\n      } catch {\n        logger.warn({ value }, 'Invalid regex manager registryUrl');\n      }\n      break;\n    case 'datasource':\n      dependency.datasource = migrateDatasource(value);\n      break;\n    case 'indentation':\n      dependency.indentation = is.emptyStringOrWhitespace(value) ? value : '';\n      break;\n    default:\n      dependency[field] = value;\n      break;\n  }\n}\n\nexport function createDependency(\n  extractionTemplate: ExtractionTemplate,\n  config: RegexManagerConfig,\n  dep?: PackageDependency,\n): PackageDependency | null {\n  const dependency = dep ?? {};\n  const { groups, replaceString } = extractionTemplate;\n\n  for (const field of validMatchFields) {\n    const fieldTemplate = `${field}Template` as keyof RegexManagerTemplates;\n    const tmpl = config[fieldTemplate];\n    if (tmpl) {\n      try {\n        const compiled = template.compile(tmpl, groups, false);\n        updateDependency(dependency, field, compiled);\n      } catch {\n        logger.warn(\n          { template: tmpl },\n          'Error compiling template for custom manager',\n        );\n        return null;\n      }\n    } else if (groups[field]) {\n      updateDependency(dependency, field, groups[field]);\n    }\n  }\n  dependency.replaceString = replaceString;\n  return dependency;\n}\n\nexport function regexMatchAll(\n  regex: RegExp,\n  content: string,\n): RegExpMatchArray[] {\n  const matches: RegExpMatchArray[] = [];\n  let matchResult: RegExpMatchArray | null;\n  let iterations = 0;\n  const maxIterations = 10000;\n  do {\n    matchResult = regex.exec(content);\n    if (matchResult) {\n      matches.push(matchResult);\n    }\n    iterations += 1;\n  } while (matchResult && iterations < maxIterations);\n  if (iterations === maxIterations) {\n    logger.warn('Max iterations reached for matchStrings');\n  }\n  return matches;\n}\n\nexport function mergeGroups(\n  mergedGroup: Record<string, string>,\n  secondGroup: Record<string, string>,\n): Record<string, string> {\n  return { ...mergedGroup, ...secondGroup };\n}\n\nexport function mergeExtractionTemplate(\n  base: ExtractionTemplate,\n  addition: ExtractionTemplate,\n): ExtractionTemplate {\n  return {\n    groups: mergeGroups(base.groups, addition.groups),\n    replaceString: addition.replaceString ?? base.replaceString,\n  };\n}\n"]}