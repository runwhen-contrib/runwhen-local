{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/workers/global/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { ERROR } from 'bunyan';\nimport fs from 'fs-extra';\nimport semver from 'semver';\nimport upath from 'upath';\nimport * as configParser from '../../config';\nimport { mergeChildConfig } from '../../config';\nimport { GlobalConfig } from '../../config/global';\nimport { resolveConfigPresets } from '../../config/presets';\nimport { validateConfigSecrets } from '../../config/secrets';\nimport type {\n  AllConfig,\n  RenovateConfig,\n  RenovateRepository,\n} from '../../config/types';\nimport { CONFIG_PRESETS_INVALID } from '../../constants/error-messages';\nimport { pkg } from '../../expose.cjs';\nimport { instrument } from '../../instrumentation';\nimport { exportStats, finalizeReport } from '../../instrumentation/reporting';\nimport { getProblems, logLevel, logger, setMeta } from '../../logger';\nimport { setGlobalLogLevelRemaps } from '../../logger/remap';\nimport * as hostRules from '../../util/host-rules';\nimport * as queue from '../../util/http/queue';\nimport * as throttle from '../../util/http/throttle';\nimport { regexEngineStatus } from '../../util/regex';\nimport { addSecretForSanitizing } from '../../util/sanitize';\nimport * as repositoryWorker from '../repository';\nimport { autodiscoverRepositories } from './autodiscover';\nimport { parseConfigs } from './config/parse';\nimport { globalFinalize, globalInitialize } from './initialize';\nimport { isLimitReached } from './limits';\n\nexport async function getRepositoryConfig(\n  globalConfig: RenovateConfig,\n  repository: RenovateRepository,\n): Promise<RenovateConfig> {\n  const repoConfig = configParser.mergeChildConfig(\n    globalConfig,\n    is.string(repository) ? { repository } : repository,\n  );\n  const repoParts = repoConfig.repository.split('/');\n  repoParts.pop();\n  repoConfig.parentOrg = repoParts.join('/');\n  repoConfig.topLevelOrg = repoParts.shift();\n  // TODO: types (#22198)\n  const platform = GlobalConfig.get('platform')!;\n  repoConfig.localDir =\n    platform === 'local'\n      ? process.cwd()\n      : upath.join(\n          repoConfig.baseDir,\n          `./repos/${platform}/${repoConfig.repository}`,\n        );\n  await fs.ensureDir(repoConfig.localDir);\n  delete repoConfig.baseDir;\n  return configParser.filterConfig(repoConfig, 'repository');\n}\n\nfunction getGlobalConfig(): Promise<RenovateConfig> {\n  return parseConfigs(process.env, process.argv);\n}\n\nfunction haveReachedLimits(): boolean {\n  if (isLimitReached('Commits')) {\n    logger.info('Max commits created for this run.');\n    return true;\n  }\n  return false;\n}\n\n/* istanbul ignore next */\nfunction checkEnv(): void {\n  const range = pkg.engines!.node!;\n  if (process.release?.name !== 'node' || !process.versions?.node) {\n    logger.warn(\n      { release: process.release, versions: process.versions },\n      'Unknown node environment detected.',\n    );\n  } else if (!semver.satisfies(process.versions?.node, range)) {\n    logger.error(\n      { versions: process.versions, range },\n      'Unsupported node environment detected. Please update your node version.',\n    );\n  }\n}\n\nexport async function validatePresets(config: AllConfig): Promise<void> {\n  logger.debug('validatePresets()');\n  try {\n    await resolveConfigPresets(config);\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ err }, CONFIG_PRESETS_INVALID);\n    throw new Error(CONFIG_PRESETS_INVALID);\n  }\n}\n\nexport async function resolveGlobalExtends(\n  globalExtends: string[],\n  ignorePresets?: string[],\n): Promise<AllConfig> {\n  try {\n    // Make a \"fake\" config to pass to resolveConfigPresets and resolve globalPresets\n    const config = { extends: globalExtends, ignorePresets };\n    const resolvedConfig = await resolveConfigPresets(config);\n    return resolvedConfig;\n  } catch (err) {\n    logger.error({ err }, 'Error resolving config preset');\n    throw new Error(CONFIG_PRESETS_INVALID);\n  }\n}\n\nexport async function start(): Promise<number> {\n  // istanbul ignore next\n  if (regexEngineStatus.type === 'available') {\n    logger.debug('Using RE2 regex engine');\n  } else if (regexEngineStatus.type === 'unavailable') {\n    logger.warn(\n      { err: regexEngineStatus.err },\n      'RE2 not usable, falling back to RegExp',\n    );\n  } else if (regexEngineStatus.type === 'ignored') {\n    logger.debug('RE2 regex engine is ignored via RENOVATE_X_IGNORE_RE2');\n  }\n\n  let config: AllConfig;\n  try {\n    if (is.nonEmptyStringAndNotWhitespace(process.env.AWS_SECRET_ACCESS_KEY)) {\n      addSecretForSanitizing(process.env.AWS_SECRET_ACCESS_KEY, 'global');\n    }\n    if (is.nonEmptyStringAndNotWhitespace(process.env.AWS_SESSION_TOKEN)) {\n      addSecretForSanitizing(process.env.AWS_SESSION_TOKEN, 'global');\n    }\n\n    await instrument('config', async () => {\n      // read global config from file, env and cli args\n      config = await getGlobalConfig();\n      if (is.nonEmptyArray(config?.globalExtends)) {\n        // resolve global presets immediately\n        config = mergeChildConfig(\n          await resolveGlobalExtends(\n            config.globalExtends,\n            config.ignorePresets,\n          ),\n          config,\n        );\n      }\n\n      // Set allowedHeaders and userAgent in case hostRules headers are configured in file config\n      GlobalConfig.set({\n        allowedHeaders: config.allowedHeaders,\n        userAgent: config.userAgent,\n      });\n      // initialize all submodules\n      config = await globalInitialize(config);\n\n      // Set platform, endpoint, allowedHeaders and userAgent in case local presets are used\n      GlobalConfig.set({\n        allowedHeaders: config.allowedHeaders,\n        platform: config.platform,\n        endpoint: config.endpoint,\n        userAgent: config.userAgent,\n      });\n\n      await validatePresets(config);\n\n      setGlobalLogLevelRemaps(config.logLevelRemap);\n\n      checkEnv();\n\n      // validate secrets. Will throw and abort if invalid\n      validateConfigSecrets(config);\n    });\n\n    // autodiscover repositories (needs to come after platform initialization)\n    config = await instrument('discover', () =>\n      autodiscoverRepositories(config),\n    );\n\n    if (is.nonEmptyString(config.writeDiscoveredRepos)) {\n      const content = JSON.stringify(config.repositories);\n      await fs.writeFile(config.writeDiscoveredRepos, content);\n      logger.info(\n        `Written discovered repositories to ${config.writeDiscoveredRepos}`,\n      );\n      return 0;\n    }\n\n    // Iterate through repositories sequentially\n    for (const repository of config.repositories!) {\n      if (haveReachedLimits()) {\n        break;\n      }\n      await instrument(\n        'repository',\n        async () => {\n          const repoConfig = await getRepositoryConfig(config, repository);\n          if (repoConfig.hostRules) {\n            logger.debug('Reinitializing hostRules for repo');\n            hostRules.clear();\n            repoConfig.hostRules.forEach((rule) => hostRules.add(rule));\n            repoConfig.hostRules = [];\n          }\n\n          // host rules can change concurrency\n          queue.clear();\n          throttle.clear();\n\n          await repositoryWorker.renovateRepository(repoConfig);\n          setMeta({});\n        },\n        {\n          attributes: {\n            repository:\n              typeof repository === 'string'\n                ? repository\n                : repository.repository,\n          },\n        },\n      );\n    }\n\n    finalizeReport();\n    await exportStats(config);\n  } catch (err) /* istanbul ignore next */ {\n    if (err.message.startsWith('Init: ')) {\n      logger.fatal(\n        { errorMessage: err.message.substring(6) },\n        'Initialization error',\n      );\n    } else {\n      logger.fatal({ err }, 'Unknown error');\n    }\n    if (!config!) {\n      // return early if we can't parse config options\n      logger.debug(`Missing config`);\n      return 2;\n    }\n  } finally {\n    await globalFinalize(config!);\n    if (logLevel() === 'info') {\n      logger.info(\n        `Renovate was run at log level \"${logLevel()}\". Set LOG_LEVEL=debug in environment variables to see extended debug logs.`,\n      );\n    }\n  }\n  const loggerErrors = getProblems().filter((p) => p.level >= ERROR);\n  if (loggerErrors.length) {\n    logger.info(\n      { loggerErrors },\n      'Renovate is exiting with a non-zero code due to the following logged errors',\n    );\n    return 1;\n  }\n  return 0;\n}\n"]}