{"version":3,"file":"coersions.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/coersions.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAClC,0DAA0B;AAEb,QAAA,SAAS,GAA6C;IACjE,OAAO,EAAE,CAAC,GAAW,EAAW,EAAE;QAChC,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,GAAG,KAAK,OAAO,EAAE,CAAC;YACpB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,IAAI,KAAK,CACb,8DAA8D;YAC5D,GAAG;YACH,GAAG,CACN,CAAC;IACJ,CAAC;IACD,KAAK,EAAE,CAAC,GAAW,EAAY,EAAE;QAC/B,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YACf,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,IAAI,CAAC;YACH,OAAO,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,GAAG;iBACP,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;iBACtB,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IACD,MAAM,EAAE,CAAC,GAAW,EAAO,EAAE;QAC3B,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YACf,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,IAAI,CAAC;YACH,OAAO,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IACD,MAAM,EAAE,CAAC,GAAW,EAAU,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;IAC1D,OAAO,EAAE,QAAQ;CAClB,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport JSON5 from 'json5';\n\nexport const coersions: Record<string, (arg: string) => unknown> = {\n  boolean: (val: string): boolean => {\n    if (val === 'true' || val === '') {\n      return true;\n    }\n    if (val === 'false') {\n      return false;\n    }\n    throw new Error(\n      \"Invalid boolean value: expected 'true' or 'false', but got '\" +\n        val +\n        \"'\",\n    );\n  },\n  array: (val: string): string[] => {\n    if (val === '') {\n      return [];\n    }\n    try {\n      return JSON5.parse(val);\n    } catch {\n      return val\n        .split(',')\n        .map((el) => el.trim())\n        .filter(is.nonEmptyString);\n    }\n  },\n  object: (val: string): any => {\n    if (val === '') {\n      return {};\n    }\n    try {\n      return JSON5.parse(val);\n    } catch {\n      throw new Error(\"Invalid JSON value: '\" + val + \"'\");\n    }\n  },\n  string: (val: string): string => val.replace(/\\\\n/g, '\\n'),\n  integer: parseInt,\n};\n"]}