{"version":3,"file":"host-rules-from-env.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/host-rules-from-env.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../../logger';\nimport { getDatasourceList } from '../../../../modules/datasource';\nimport type { HostRule } from '../../../../types';\n\ntype AuthField = 'token' | 'username' | 'password';\n\ntype HttpsAuthField =\n  | 'httpscertificate'\n  | 'httpsprivatekey'\n  | 'httpscertificateauthority';\n\nfunction isAuthField(x: unknown): x is AuthField {\n  return x === 'token' || x === 'username' || x === 'password';\n}\n\nfunction isHttpsAuthField(x: unknown): x is HttpsAuthField {\n  return (\n    x === 'httpscertificate' ||\n    x === 'httpsprivatekey' ||\n    x === 'httpscertificateauthority'\n  );\n}\n\nfunction restoreHttpsAuthField(x: HttpsAuthField | AuthField): string {\n  switch (x) {\n    case 'httpsprivatekey':\n      return 'httpsPrivateKey';\n    case 'httpscertificate':\n      return 'httpsCertificate';\n    case 'httpscertificateauthority':\n      return 'httpsCertificateAuthority';\n  }\n\n  return x;\n}\n\nfunction setHostRuleValue(\n  rule: HostRule,\n  key: string,\n  value: string | undefined,\n): void {\n  if (value !== undefined) {\n    switch (key) {\n      case 'token':\n      case 'username':\n      case 'password':\n      case 'httpsCertificateAuthority':\n      case 'httpsCertificate':\n      case 'httpsPrivateKey':\n        rule[key] = value;\n    }\n  }\n}\n\nexport function hostRulesFromEnv(env: NodeJS.ProcessEnv): HostRule[] {\n  const datasources = new Set(getDatasourceList());\n  const platforms = new Set(['github']);\n\n  const hostRules: HostRule[] = [];\n\n  const npmEnvPrefixes = ['npm_config_', 'npm_lifecycle_', 'npm_package_'];\n\n  for (const envName of Object.keys(env).sort()) {\n    if (['GITHUB_COM_TOKEN', 'RENOVATE_GITHUB_COM_TOKEN'].includes(envName)) {\n      continue;\n    }\n    if (npmEnvPrefixes.some((prefix) => envName.startsWith(prefix))) {\n      logger.trace('Ignoring npm env: ' + envName);\n      continue;\n    }\n    // Double underscore __ is used in place of hyphen -\n    const splitEnv = envName\n      .replace(/^RENOVATE_/, '')\n      .toLowerCase()\n      .replace(/__/g, '-')\n      .split('_');\n    const hostType = splitEnv.shift()!;\n    if (\n      datasources.has(hostType) ||\n      (platforms.has(hostType) && splitEnv.length > 1)\n    ) {\n      let suffix = splitEnv.pop()!;\n      if (isAuthField(suffix) || isHttpsAuthField(suffix)) {\n        suffix = restoreHttpsAuthField(suffix);\n\n        let matchHost: string | undefined = undefined;\n        const rule: HostRule = {};\n        setHostRuleValue(rule, suffix, env[envName]);\n        if (splitEnv.length === 0) {\n          // host-less rule\n        } else if (splitEnv.length === 1) {\n          logger.warn({ env: envName }, 'Cannot parse env');\n          continue;\n        } else {\n          matchHost = splitEnv.join('.');\n        }\n        const existingRule = hostRules.find(\n          (hr) => hr.hostType === hostType && hr.matchHost === matchHost,\n        );\n        logger.debug(`Converting ${envName} into a global host rule`);\n        if (existingRule) {\n          // Add current field to existing rule\n          setHostRuleValue(existingRule, suffix, env[envName]);\n        } else {\n          // Create a new rule\n          const newRule: HostRule = {\n            hostType,\n          };\n          if (matchHost) {\n            newRule.matchHost = matchHost;\n          }\n          setHostRuleValue(newRule, suffix, env[envName]);\n          hostRules.push(newRule);\n        }\n      }\n    }\n  }\n  return hostRules;\n}\n"]}