{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/env.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport JSON5 from 'json5';\nimport { getOptions } from '../../../../config/options';\nimport type { AllConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { parseJson } from '../../../../util/common';\nimport { coersions } from './coersions';\nimport type { ParseConfigOptions } from './types';\nimport { migrateAndValidateConfig } from './util';\n\nfunction normalizePrefixes(\n  env: NodeJS.ProcessEnv,\n  prefix: string | undefined,\n): NodeJS.ProcessEnv {\n  const result = { ...env };\n  if (prefix) {\n    for (const [key, val] of Object.entries(result)) {\n      if (key.startsWith(prefix)) {\n        const newKey = key.replace(prefix, 'RENOVATE_');\n        result[newKey] = val;\n        delete result[key];\n      }\n    }\n  }\n  return result;\n}\n\nexport function getEnvName(option: ParseConfigOptions): string {\n  if (option.env === false) {\n    return '';\n  }\n  if (option.env) {\n    return option.env;\n  }\n  const nameWithUnderscores = option.name.replace(/([A-Z])/g, '_$1');\n  return `RENOVATE_${nameWithUnderscores.toUpperCase()}`;\n}\n\nconst renameKeys = {\n  aliases: 'registryAliases',\n  azureAutoComplete: 'platformAutomerge', // migrate: azureAutoComplete\n  gitLabAutomerge: 'platformAutomerge', // migrate: gitLabAutomerge\n  mergeConfidenceApiBaseUrl: 'mergeConfidenceEndpoint',\n  mergeConfidenceSupportedDatasources: 'mergeConfidenceDatasources',\n  allowPostUpgradeCommandTemplating: 'allowCommandTemplating',\n  allowedPostUpgradeCommands: 'allowedCommands',\n};\n\nfunction renameEnvKeys(env: NodeJS.ProcessEnv): NodeJS.ProcessEnv {\n  const result = { ...env };\n  for (const [from, to] of Object.entries(renameKeys)) {\n    const fromKey = getEnvName({ name: from });\n    const toKey = getEnvName({ name: to });\n    if (env[fromKey]) {\n      result[toKey] = env[fromKey];\n      delete result[fromKey];\n    }\n  }\n  return result;\n}\n\nconst migratedKeysWithValues = [\n  {\n    oldName: 'recreateClosed',\n    newName: 'recreateWhen',\n    from: 'true',\n    to: 'always',\n  },\n  {\n    oldName: 'recreateClosed',\n    newName: 'recreateWhen',\n    from: 'false',\n    to: 'auto',\n  },\n];\n\nfunction massageEnvKeyValues(env: NodeJS.ProcessEnv): NodeJS.ProcessEnv {\n  const result = { ...env };\n  for (const { oldName, newName, from, to } of migratedKeysWithValues) {\n    const key = getEnvName({ name: oldName });\n    if (env[key] !== undefined) {\n      if (result[key] === from) {\n        delete result[key];\n        result[getEnvName({ name: newName })] = to;\n      }\n    }\n  }\n  return result;\n}\n\n// these experimental env vars have been converted into self-hosted config options\nconst convertedExperimentalEnvVars = [\n  'RENOVATE_X_AUTODISCOVER_REPO_SORT',\n  'RENOVATE_X_AUTODISCOVER_REPO_ORDER',\n  'RENOVATE_X_DOCKER_MAX_PAGES',\n  'RENOVATE_X_DELETE_CONFIG_FILE',\n  'RENOVATE_X_S3_ENDPOINT',\n  'RENOVATE_X_S3_PATH_STYLE',\n  'RENOVATE_X_MERGE_CONFIDENCE_API_BASE_URL',\n  'RENOVATE_X_MERGE_CONFIDENCE_SUPPORTED_DATASOURCES',\n];\n\n/**\n * Massages the experimental env vars which have been converted to config options\n *\n * e.g. RENOVATE_X_AUTODISCOVER_REPO_SORT -> RENOVATE_AUTODISCOVER_REPO_SORT\n */\nfunction massageConvertedExperimentalVars(\n  env: NodeJS.ProcessEnv,\n): NodeJS.ProcessEnv {\n  const result = { ...env };\n  for (const key of convertedExperimentalEnvVars) {\n    if (env[key] !== undefined) {\n      const newKey = key.replace('RENOVATE_X_', 'RENOVATE_');\n      result[newKey] = env[key];\n      delete result[key];\n    }\n  }\n  return result;\n}\n\nexport async function getConfig(\n  inputEnv: NodeJS.ProcessEnv,\n  configEnvKey = 'RENOVATE_CONFIG',\n): Promise<AllConfig> {\n  const env = prepareEnv(inputEnv);\n  const config = await parseAndValidateOrExit(env, configEnvKey);\n\n  const options = getOptions();\n  config.hostRules ??= [];\n\n  for (const option of options) {\n    if (option.env === false) {\n      continue;\n    }\n\n    const envName = getEnvName(option);\n    const envVal = env[envName];\n    if (!envVal) {\n      continue;\n    }\n\n    if (option.type === 'array' && option.subType === 'object') {\n      try {\n        const parsed = JSON5.parse(envVal);\n        if (is.array(parsed)) {\n          config[option.name] = parsed;\n        } else {\n          logger.debug(\n            { val: envVal, envName },\n            'Could not parse object array',\n          );\n        }\n      } catch {\n        logger.debug(\n          { val: envVal, envName },\n          'Could not parse environment variable',\n        );\n      }\n    } else {\n      const coerce = coersions[option.type];\n      config[option.name] = coerce(envVal);\n      if (option.name === 'dryRun') {\n        if ((config[option.name] as string) === 'true') {\n          logger.warn('env config dryRun property has been changed to full');\n          config[option.name] = 'full';\n        } else if ((config[option.name] as string) === 'false') {\n          logger.warn('env config dryRun property has been changed to null');\n          delete config[option.name];\n        } else if ((config[option.name] as string) === 'null') {\n          delete config[option.name];\n        }\n      }\n\n      if (option.name === 'requireConfig') {\n        if ((config[option.name] as string) === 'true') {\n          logger.warn(\n            'env config requireConfig property has been changed to required',\n          );\n          config[option.name] = 'required';\n        } else if ((config[option.name] as string) === 'false') {\n          logger.warn(\n            'env config requireConfig property has been changed to optional',\n          );\n          config[option.name] = 'optional';\n        }\n      }\n\n      if (option.name === 'platformCommit') {\n        if ((config[option.name] as string) === 'true') {\n          logger.warn(\n            'env config platformCommit property has been changed to enabled',\n          );\n          config[option.name] = 'enabled';\n        } else if ((config[option.name] as string) === 'false') {\n          logger.warn(\n            'env config platformCommit property has been changed to disabled',\n          );\n          config[option.name] = 'disabled';\n        }\n      }\n    }\n  }\n\n  const githubComToken = env.GITHUB_COM_TOKEN ?? env.RENOVATE_GITHUB_COM_TOKEN;\n  if (githubComToken) {\n    logger.debug(`Converting GITHUB_COM_TOKEN into a global host rule`);\n    config.hostRules.push({\n      hostType: 'github',\n      matchHost: 'github.com',\n      token: githubComToken,\n    });\n  }\n\n  // These env vars are deprecated and deleted to make sure they're not used\n  const unsupportedEnv = [\n    'BITBUCKET_TOKEN',\n    'BITBUCKET_USERNAME',\n    'BITBUCKET_PASSWORD',\n    'GITHUB_ENDPOINT',\n    'GITHUB_TOKEN',\n    'GITLAB_ENDPOINT',\n    'GITLAB_TOKEN',\n    'VSTS_ENDPOINT',\n    'VSTS_TOKEN',\n  ];\n\n  for (const val of unsupportedEnv) {\n    delete env[val];\n  }\n\n  return config;\n}\n\nexport function prepareEnv(inputEnv: NodeJS.ProcessEnv): NodeJS.ProcessEnv {\n  let env = normalizePrefixes(inputEnv, inputEnv.ENV_PREFIX);\n  env = massageConvertedExperimentalVars(env);\n  env = renameEnvKeys(env);\n  // massage the values of migrated configuration keys\n  return massageEnvKeyValues(env);\n}\n\nexport async function parseAndValidateOrExit(\n  env: NodeJS.ProcessEnv,\n  configEnvKey: string,\n): Promise<AllConfig> {\n  if (!env[configEnvKey]) {\n    return {};\n  }\n\n  try {\n    const config = parseJson(\n      env[configEnvKey],\n      `${configEnvKey}.env.json5`,\n    ) as AllConfig;\n    logger.debug({ config }, `Detected config in env ${configEnvKey}`);\n\n    return await migrateAndValidateConfig(config, `${configEnvKey}`);\n  } catch (err) {\n    logger.fatal({ err }, `Could not parse ${configEnvKey}`);\n    process.exit(1);\n  }\n}\n"]}