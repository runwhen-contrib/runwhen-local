{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as defaultsParser from '../../../../config/defaults';\nimport { applySecretsToConfig } from '../../../../config/secrets';\nimport type { AllConfig } from '../../../../config/types';\nimport { mergeChildConfig } from '../../../../config/utils';\nimport { logger, setContext } from '../../../../logger';\nimport { detectAllGlobalConfig } from '../../../../modules/manager';\nimport { coerceArray } from '../../../../util/array';\nimport { setCustomEnv } from '../../../../util/env';\nimport { readSystemFile } from '../../../../util/fs';\nimport { addSecretForSanitizing } from '../../../../util/sanitize';\nimport { ensureTrailingSlash } from '../../../../util/url';\nimport * as cliParser from './cli';\nimport * as codespaces from './codespaces';\nimport * as envParser from './env';\nimport * as fileParser from './file';\nimport { hostRulesFromEnv } from './host-rules-from-env';\n\nexport async function parseConfigs(\n  env: NodeJS.ProcessEnv,\n  argv: string[],\n): Promise<AllConfig> {\n  logger.debug('Parsing configs');\n\n  // Get configs\n  const defaultConfig = defaultsParser.getConfig();\n  const fileConfig = await fileParser.getConfig(env);\n  const cliConfig = cliParser.getConfig(argv);\n  const envConfig = await envParser.getConfig(env);\n\n  let config: AllConfig = mergeChildConfig(fileConfig, envConfig);\n  config = mergeChildConfig(config, cliConfig);\n\n  config = await codespaces.setConfig(config);\n\n  const combinedConfig = config;\n\n  config = mergeChildConfig(defaultConfig, config);\n\n  if (config.forceCli) {\n    const forcedCli = { ...cliConfig };\n    delete forcedCli.token;\n    delete forcedCli.hostRules;\n    if (config.force) {\n      config.force = { ...config.force, ...forcedCli };\n    } else {\n      config.force = forcedCli;\n    }\n  }\n\n  if (!config.privateKey && config.privateKeyPath) {\n    config.privateKey = await readSystemFile(config.privateKeyPath, 'utf8');\n    delete config.privateKeyPath;\n  }\n\n  if (!config.privateKeyOld && config.privateKeyPathOld) {\n    config.privateKeyOld = await readSystemFile(\n      config.privateKeyPathOld,\n      'utf8',\n    );\n    delete config.privateKeyPathOld;\n  }\n\n  addSecretForSanitizing(config.privateKey, 'global');\n  addSecretForSanitizing(config.privateKeyOld, 'global');\n\n  if (config.logContext) {\n    // This only has an effect if logContext was defined via file or CLI, otherwise it would already have been detected in env\n    setContext(config.logContext);\n  }\n\n  logger.trace({ config: defaultConfig }, 'Default config');\n  logger.debug({ config: fileConfig }, 'File config');\n  logger.debug({ config: cliConfig }, 'CLI config');\n  logger.debug({ config: envConfig }, 'Env config');\n  logger.debug({ config: combinedConfig }, 'Combined config');\n\n  if (config.detectGlobalManagerConfig) {\n    logger.debug('Detecting global manager config');\n    const globalManagerConfig = await detectAllGlobalConfig();\n    logger.debug({ config: globalManagerConfig }, 'Global manager config');\n    config = mergeChildConfig(config, globalManagerConfig);\n  }\n\n  if (config.detectHostRulesFromEnv) {\n    const hostRules = hostRulesFromEnv(env);\n    config.hostRules = [...coerceArray(config.hostRules), ...hostRules];\n  }\n  // Get global config\n  logger.trace({ config }, 'Full config');\n\n  // Massage endpoint to have a trailing slash\n  if (config.endpoint) {\n    logger.debug('Adding trailing slash to endpoint');\n    config.endpoint = ensureTrailingSlash(config.endpoint);\n  }\n\n  // Massage forkProcessing\n  if (!config.autodiscover && config.forkProcessing !== 'disabled') {\n    logger.debug('Enabling forkProcessing while in non-autodiscover mode');\n    config.forkProcessing = 'enabled';\n  }\n\n  // Only try deletion if RENOVATE_CONFIG_FILE is set\n  await fileParser.deleteNonDefaultConfig(env, !!config.deleteConfigFile);\n\n  // Massage onboardingNoDeps\n  if (!config.autodiscover && config.onboardingNoDeps !== 'disabled') {\n    logger.debug('Enabling onboardingNoDeps while in non-autodiscover mode');\n    config.onboardingNoDeps = 'enabled';\n  }\n\n  // do not add these secrets to repoSecrets and,\n  //  do not delete the secrets object after applying on global config as it needs to be re-used for repo config\n  if (is.nonEmptyObject(config.secrets)) {\n    config = applySecretsToConfig(config, undefined, false);\n    // adding these secrets to the globalSecrets set so that they can be redacted from logs\n    for (const secret of Object.values(config.secrets!)) {\n      addSecretForSanitizing(secret, 'global');\n    }\n  }\n\n  if (is.nonEmptyObject(config.customEnvVariables)) {\n    setCustomEnv(config.customEnvVariables);\n  }\n\n  return config;\n}\n"]}