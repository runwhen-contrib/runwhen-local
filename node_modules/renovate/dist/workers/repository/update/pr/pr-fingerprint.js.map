{"version":3,"file":"pr-fingerprint.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/pr-fingerprint.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,4IAA4I;;AA6C5I,0EAqCC;AAED,0CAoBC;AAjGD,+CAA4C;AAE5C,gDAAwD;AAoCxD,SAAgB,+BAA+B,CAC7C,MAAoB;IAEpB,MAAM,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACvD,OAAO;YACL,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,eAAe,EAAE,OAAO,CAAC,eAAe;YACxC,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;YAC5C,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC3B,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO;QACL,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;QAC3C,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,gBAAgB;QAChB,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,eAAe,EAAE,MAAM,CAAC,eAAe;KACxC,CAAC;AACJ,CAAC;AAED,SAAgB,eAAe,CAC7B,OAAgB,EAChB,eAAuB;IAEvB,IAAI,OAAO,CAAC,eAAe,KAAK,eAAe,EAAE,CAAC;QAChD,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QACxD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,IAAA,sBAAe,EAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;QAC7C,eAAM,CAAC,KAAK,CACV,6EAA6E,CAC9E,CAAC;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,eAAM,CAAC,KAAK,CACV,6EAA6E,CAC9E,CAAC;IACF,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// fingerprint config is based on the old skip pr update logic\n// https://github.com/renovatebot/renovate/blob/3d85b6048d6a8c57887b64ed4929e2e02ea41aa0/lib/workers/repository/update/pr/index.ts#L294-L306\n\nimport type {\n  RecreateWhen,\n  UpdateType,\n  ValidationMessage,\n} from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport type { PrCache } from '../../../../util/cache/repository/types';\nimport { getElapsedHours } from '../../../../util/date';\nimport type { BranchConfig } from '../../../types';\n\n// BranchUpgradeConfig - filtered\nexport interface FilteredBranchUpgradeConfig {\n  depName?: string;\n  gitRef?: boolean;\n  hasReleaseNotes?: boolean;\n  prBodyDefinitions?: Record<string, string>;\n  prBodyNotes?: string[];\n  repoName?: string;\n}\n\nexport interface PrBodyFingerprintConfig {\n  // BranchConfig - filtered\n  automerge?: boolean;\n  baseBranch?: string;\n  automergeSchedule?: string[];\n  hasReleaseNotes?: boolean;\n  isPin?: boolean;\n  prBodyTemplate?: string;\n  prFooter?: string;\n  prHeader?: string;\n  prTitle?: string;\n  rebaseWhen?: string;\n  recreateWhen?: RecreateWhen;\n  schedule?: string[];\n  stopUpdating?: boolean;\n  timezone?: string;\n  updateType?: UpdateType;\n  warnings?: ValidationMessage[];\n  pendingVersions?: string[];\n\n  filteredUpgrades?: FilteredBranchUpgradeConfig[];\n}\n\nexport function generatePrBodyFingerprintConfig(\n  config: BranchConfig,\n): PrBodyFingerprintConfig {\n  const filteredUpgrades = config.upgrades.map((upgrade) => {\n    return {\n      depName: upgrade.depName,\n      displayFrom: upgrade.displayFrom,\n      displayTo: upgrade.displayTo,\n      displayPending: upgrade.displayPending,\n      gitRef: upgrade.gitRef,\n      hasReleaseNotes: upgrade.hasReleaseNotes,\n      prBodyDefinitions: upgrade.prBodyDefinitions,\n      prBodyNotes: upgrade.prBodyNotes,\n      repoName: upgrade.repoName,\n    };\n  });\n\n  return {\n    automerge: config.automerge,\n    automergeSchedule: config.automergeSchedule,\n    baseBranch: config.baseBranch,\n    filteredUpgrades,\n    hasReleaseNotes: config.hasReleaseNotes,\n    isPin: config.isPin,\n    prBodyTemplate: config.prBodyTemplate,\n    prFooter: config.prFooter,\n    prHeader: config.prHeader,\n    prTitle: config.prTitle,\n    rebaseWhen: config.rebaseWhen,\n    recreateWhen: config.recreateWhen,\n    schedule: config.schedule,\n    stopUpdating: config.stopUpdating,\n    timezone: config.timezone,\n    updateType: config.updateType,\n    warnings: config.warnings,\n    pendingVersions: config.pendingVersions,\n  };\n}\n\nexport function validatePrCache(\n  prCache: PrCache,\n  bodyFingerprint: string,\n): boolean {\n  if (prCache.bodyFingerprint !== bodyFingerprint) {\n    logger.debug('PR fingerprints mismatch, processing PR');\n    return false;\n  }\n\n  if (getElapsedHours(prCache.lastEdited) < 24) {\n    logger.debug(\n      'PR cache matches but it has been edited in the past 24hrs, so processing PR',\n    );\n    return false;\n  }\n\n  logger.debug(\n    'PR cache matches and no PR changes in last 24hrs, so skipping PR body check',\n  );\n  return true;\n}\n"]}