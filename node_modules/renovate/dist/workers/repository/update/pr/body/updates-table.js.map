{"version":3,"file":"updates-table.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/body/updates-table.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../../../../logger';\nimport { regEx } from '../../../../../util/regex';\nimport * as template from '../../../../../util/template';\nimport type { BranchConfig, BranchUpgradeConfig } from '../../../../types';\n\ninterface TableDefinition {\n  header: string;\n  value: string | undefined;\n}\n\nfunction getRowDefinition(\n  prBodyColumns: string[],\n  upgrade: BranchUpgradeConfig,\n): TableDefinition[] {\n  const res: TableDefinition[] = [];\n  if (upgrade.prBodyDefinitions) {\n    for (const header of prBodyColumns) {\n      const value = upgrade.prBodyDefinitions[header];\n      res.push({ header, value });\n    }\n  }\n  return res;\n}\n\nfunction getNonEmptyColumns(\n  prBodyColumns: string[],\n  rows: Record<string, string>[],\n): string[] {\n  const res: string[] = [];\n  for (const header of prBodyColumns) {\n    for (const row of rows) {\n      if (row[header]?.length) {\n        if (!res.includes(header)) {\n          res.push(header);\n        }\n      }\n    }\n  }\n  return res;\n}\n\nexport function getPrUpdatesTable(config: BranchConfig): string {\n  if (config.prBodyColumns === undefined) {\n    logger.warn('getPrUpdatesTable - prBodyColumns is undefined');\n    return '';\n  }\n\n  const tableKeyValuePairs: Record<string, Record<string, string>> = {};\n  for (const upgrade of config.upgrades) {\n    if (upgrade) {\n      // Create a key based on the properties which are significant in the updates table\n      const key = `${upgrade.depName ?? ''}_${upgrade.depType ?? ''}_${upgrade.newValue ?? ''}_${upgrade.newVersion ?? ''}_${upgrade.currentValue ?? ''}_${upgrade.currentVersion ?? ''}_${upgrade.updateType}`;\n\n      const res: Record<string, string> = {};\n      const rowDefinition = getRowDefinition(config.prBodyColumns, upgrade);\n      for (const column of rowDefinition) {\n        const { header, value } = column;\n        try {\n          // istanbul ignore else\n          if (value) {\n            res[header] = template\n              .compile(value, upgrade)\n              .replace(regEx(/``/g), '');\n          } else {\n            res[header] = '';\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ header, value, err }, 'Handlebars compilation error');\n        }\n      }\n\n      if (tableKeyValuePairs[key]) {\n        // compare the duplicate upgrades as per their table values\n        // and select one with better values\n        tableKeyValuePairs[key] = compareTableValues(\n          tableKeyValuePairs[key],\n          res,\n          config.prBodyColumns,\n        );\n      } else {\n        tableKeyValuePairs[key] = res;\n      }\n    }\n  }\n\n  const tableValues = Object.values(tableKeyValuePairs);\n  const tableColumns = getNonEmptyColumns(config.prBodyColumns, tableValues);\n  let res = '\\n\\nThis PR contains the following updates:\\n\\n';\n  res += '| ' + tableColumns.join(' | ') + ' |\\n';\n  res += '|' + tableColumns.map(() => '---|').join('') + '\\n';\n  const rows = [];\n  for (const row of tableValues) {\n    let val = '|';\n    for (const column of tableColumns) {\n      const content = row[column]\n        ? row[column]\n            .replace(regEx(/^@/), '@&#8203;')\n            .replace(regEx(/\\|/g), '\\\\|')\n        : '';\n      val += ` ${content} |`;\n    }\n    val += '\\n';\n    rows.push(val);\n  }\n  const uniqueRows = [...new Set(rows)];\n  res += uniqueRows.join('');\n  res += '\\n\\n';\n  return res;\n}\n\n// return the row with better table values\nfunction compareTableValues(\n  a: Record<string, string>,\n  b: Record<string, string>,\n  prBodyColumns: string[],\n): Record<string, string> {\n  let score = 0;\n\n  for (const header of prBodyColumns) {\n    if (!b[header] && !a[header]) {\n      continue;\n    }\n    if (!b[header]) {\n      score--;\n      continue;\n    }\n    if (!a[header]) {\n      score++;\n      continue;\n    }\n\n    if (a[header] !== b[header]) {\n      if (a[header].length < b[header].length) {\n        score++;\n      } else {\n        score--;\n      }\n    }\n  }\n  return score > 0 ? b : a;\n}\n"]}