{"version":3,"file":"code-owners.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/code-owners.ts"],"names":[],"mappings":";;AA6EA,0CA2FC;;AAxKD,kEAAkC;AAClC,4DAA4B;AAC5B,+CAA4C;AAE5C,4CAAoD;AACpD,8CAAsD;AACtD,kDAA6D;AAS7D,SAAS,qBAAqB,CAAC,IAAY;IACzC,MAAM,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC,CAAC;IACzD,MAAM,YAAY,GAAG,IAAA,gBAAM,GAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC3C,OAAO;QACL,SAAS;QACT,OAAO;QACP,KAAK,EAAE,OAAO,CAAC,MAAM;QACrB,KAAK,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC;KACpD,CAAC;AACJ,CAAC;AAOD,SAAS,iBAAiB,CACxB,IAAY,EACZ,KAAsB;IAEtB,MAAM,SAAS,GAAG,IAAI,GAAG,EAAkB,CAAC;IAE5C,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACtB,SAAS;QACX,CAAC;QAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YAClC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC;AAC3C,CAAC;AAOD,SAAS,YAAY,CAAC,eAAkC;IACtD,MAAM,WAAW,GAAG,IAAI,GAAG,EAA+B,CAAC;IAE3D,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE,CAAC;QACxC,KAAK,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;YACjE,+BAA+B;YAC/B,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,GAAG,EAAkB,CAAC;YACvE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC/B,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACrC,CAAC;YAED,mBAAmB;YACnB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAC9D,QAAQ,EAAE,GAAG;QACb,YAAY,EAAE,KAAK;KACpB,CAAC,CAAC,CAAC;AACN,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,EAAM;IAC1C,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAC9C,IAAI,CAAC;QACH,uBAAuB;QACvB,MAAM,cAAc,GAClB,CAAC,MAAM,IAAA,kBAAa,EAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAC3C,CAAC,MAAM,IAAA,kBAAa,EAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;YACtD,CAAC,MAAM,IAAA,kBAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,IAAA,kBAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,MAAM,IAAA,kBAAa,EAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACzC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,eAAM,CAAC,KAAK,CAAC,0BAA0B,cAAc,EAAE,CAAC,CAAC;QAEzD,mCAAmC;QACnC,MAAM,OAAO,GAAG,MAAM,IAAA,oBAAc,EAAC,EAAE,CAAC,YAAY,CAAC,CAAC;QAEtD,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;YACrB,eAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACrC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,sDAAsD;QACtD,MAAM,cAAc,GAAG,cAAc;aAClC,KAAK,CAAC,oBAAY,CAAC;YACpB,kBAAkB;aACjB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,qBAAqB;aACpB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aAC1B,MAAM,CAAC,YAAE,CAAC,cAAc,CAAC;YAC1B,8BAA8B;aAC7B,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAE9B,eAAM,CAAC,KAAK,CACV,EAAE,OAAO,EAAE,cAAc,EAAE,EAC3B,4CAA4C,CAC7C,CAAC;QAEF,mDAAmD;QACnD,MAAM,UAAU,GAAG,cAAc,CAAC,MAAM,CACtC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CACtC,CAAC;QACF,MAAM,UAAU;QACd,oEAAoE;QACpE,OAAO;aACJ,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YAEvD,sHAAsH;aACrH,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YACjB,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC1C,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAC3B,CAAC;YACF,IAAI,UAAU,EAAE,CAAC;gBACf,OAAO,EAAE,GAAG,SAAS,EAAE,YAAY,EAAE,IAAI,GAAG,EAAkB,EAAE,CAAC;YACnE,CAAC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;QAEP,eAAM,CAAC,KAAK,CACV,2CAA2C,UAAU;aAClD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aAClB,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;QAEF,oFAAoF;QACpF,MAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAErD,wOAAwO;QACxO,MAAM,SAAS,GAAG,mBAAmB;aAClC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACnB,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CACvD,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,EAC3B,CAAC,CACF;SACF,CAAC,CAAC;aACF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAErC,eAAM,CAAC,KAAK,CACV,2CAA2C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CACvE,CAAC;QAEF,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,wCAAwC,CAAC,CAAC;QACnE,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport ignore from 'ignore';\nimport { logger } from '../../../../logger';\nimport type { Pr } from '../../../../modules/platform';\nimport { readLocalFile } from '../../../../util/fs';\nimport { getBranchFiles } from '../../../../util/git';\nimport { newlineRegex, regEx } from '../../../../util/regex';\n\ninterface FileOwnerRule {\n  usernames: string[];\n  pattern: string;\n  score: number;\n  match: (path: string) => boolean;\n}\n\nfunction extractOwnersFromLine(line: string): FileOwnerRule {\n  const [pattern, ...usernames] = line.split(regEx(/\\s+/));\n  const matchPattern = ignore().add(pattern);\n  return {\n    usernames,\n    pattern,\n    score: pattern.length,\n    match: (path: string) => matchPattern.ignores(path),\n  };\n}\n\ninterface FileOwnersScore {\n  file: string;\n  userScoreMap: Map<string, number>;\n}\n\nfunction matchFileToOwners(\n  file: string,\n  rules: FileOwnerRule[],\n): FileOwnersScore {\n  const usernames = new Map<string, number>();\n\n  for (const rule of rules) {\n    if (!rule.match(file)) {\n      continue;\n    }\n\n    for (const user of rule.usernames) {\n      usernames.set(user, rule.score);\n    }\n  }\n\n  return { file, userScoreMap: usernames };\n}\n\ninterface OwnerFileScore {\n  username: string;\n  fileScoreMap: Map<string, number>;\n}\n\nfunction getOwnerList(filesWithOwners: FileOwnersScore[]): OwnerFileScore[] {\n  const userFileMap = new Map<string, Map<string, number>>();\n\n  for (const fileMatch of filesWithOwners) {\n    for (const [username, score] of fileMatch.userScoreMap.entries()) {\n      // Get / create user file score\n      const fileMap = userFileMap.get(username) ?? new Map<string, number>();\n      if (!userFileMap.has(username)) {\n        userFileMap.set(username, fileMap);\n      }\n\n      // Add file to user\n      fileMap.set(fileMatch.file, (fileMap.get(fileMatch.file) ?? 0) + score);\n    }\n  }\n\n  return Array.from(userFileMap.entries()).map(([key, value]) => ({\n    username: key,\n    fileScoreMap: value,\n  }));\n}\n\nexport async function codeOwnersForPr(pr: Pr): Promise<string[]> {\n  logger.debug('Searching for CODEOWNERS file');\n  try {\n    // Find CODEOWNERS file\n    const codeOwnersFile =\n      (await readLocalFile('CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('.bitbucket/CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('.github/CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('.gitlab/CODEOWNERS', 'utf8')) ??\n      (await readLocalFile('docs/CODEOWNERS', 'utf8'));\n\n    if (!codeOwnersFile) {\n      logger.debug('No CODEOWNERS file found');\n      return [];\n    }\n\n    logger.debug(`Found CODEOWNERS file: ${codeOwnersFile}`);\n\n    // Get list of modified files in PR\n    const prFiles = await getBranchFiles(pr.sourceBranch);\n\n    if (!prFiles?.length) {\n      logger.debug('PR includes no files');\n      return [];\n    }\n\n    // Convert CODEOWNERS file into list of matching rules\n    const fileOwnerRules = codeOwnersFile\n      .split(newlineRegex)\n      // Remove comments\n      .map((line) => line.split('#')[0])\n      // Remove empty lines\n      .map((line) => line.trim())\n      .filter(is.nonEmptyString)\n      // Extract pattern & usernames\n      .map(extractOwnersFromLine);\n\n    logger.debug(\n      { prFiles, fileOwnerRules },\n      'PR files and rules to match for CODEOWNERS',\n    );\n\n    // Apply rules & get list of owners for each prFile\n    const emptyRules = fileOwnerRules.filter(\n      (rule) => rule.usernames.length === 0,\n    );\n    const fileOwners =\n      // Map through all prFiles and match said file(s) with all the rules\n      prFiles\n        .map((file) => matchFileToOwners(file, fileOwnerRules))\n\n        // Match file again but this time only with emptyRules, to ensure that files which have no owner set remain owner-less\n        .map((fileMatch) => {\n          const matchEmpty = emptyRules.find((rule) =>\n            rule.match(fileMatch.file),\n          );\n          if (matchEmpty) {\n            return { ...fileMatch, userScoreMap: new Map<string, number>() };\n          }\n          return fileMatch;\n        });\n\n    logger.debug(\n      `CODEOWNERS matched the following files: ${fileOwners\n        .map((f) => f.file)\n        .join(', ')}`,\n    );\n\n    // Get list of all matched users and the files they own (reverse keys of fileOwners)\n    const usersWithOwnedFiles = getOwnerList(fileOwners);\n\n    // Calculate a match score for each user. This allows sorting of the final user array in a way that guarantees that users matched with more precise patterns are first and users matched with less precise patterns are last (wildcards)\n    const userScore = usersWithOwnedFiles\n      .map((userMatch) => ({\n        user: userMatch.username,\n        score: Array.from(userMatch.fileScoreMap.values()).reduce(\n          (acc, score) => acc + score,\n          0,\n        ),\n      }))\n      .sort((a, b) => b.score - a.score);\n\n    logger.debug(\n      `CODEOWNERS matched the following users: ${JSON.stringify(userScore)}`,\n    );\n\n    return userScore.map((u) => u.user);\n  } catch (err) {\n    logger.warn({ err, pr }, 'Failed to determine CODEOWNERS for PR.');\n    return [];\n  }\n}\n"]}