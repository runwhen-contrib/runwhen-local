{"version":3,"file":"releases.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/releases.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #22198\nimport { logger } from '../../../../../logger';\nimport type { Release } from '../../../../../modules/datasource';\nimport {\n  getPkgReleases,\n  isGetPkgReleasesConfig,\n} from '../../../../../modules/datasource';\nimport type { VersioningApi } from '../../../../../modules/versioning';\nimport { get } from '../../../../../modules/versioning';\nimport { coerceArray } from '../../../../../util/array';\nimport type { BranchUpgradeConfig } from '../../../../types';\n\nfunction matchesMMP(\n  versioningApi: VersioningApi,\n  v1: string,\n  v2: string,\n): boolean {\n  return (\n    versioningApi.getMajor(v1) === versioningApi.getMajor(v2) &&\n    versioningApi.getMinor(v1) === versioningApi.getMinor(v2) &&\n    versioningApi.getPatch(v1) === versioningApi.getPatch(v2)\n  );\n}\n\nfunction matchesUnstable(\n  versioningApi: VersioningApi,\n  v1: string,\n  v2: string,\n): boolean {\n  return !versioningApi.isStable(v1) && matchesMMP(versioningApi, v1, v2);\n}\n\nexport async function getInRangeReleases(\n  config: BranchUpgradeConfig,\n): Promise<Release[] | null> {\n  const versioning = config.versioning!;\n  const currentVersion = config.currentVersion!;\n  const newVersion = config.newVersion!;\n  const depName = config.depName!;\n  const datasource = config.datasource!;\n  // istanbul ignore if\n  if (!isGetPkgReleasesConfig(config)) {\n    return null;\n  }\n  try {\n    const pkgReleases = (await getPkgReleases(config))!.releases;\n    const version = get(versioning);\n\n    const previousReleases = pkgReleases\n      .filter((release) =>\n        version.isCompatible(release.version, currentVersion),\n      )\n      .filter((release) => !version.isGreaterThan(release.version, newVersion))\n      .filter(\n        (release) =>\n          version.isStable(release.version) ||\n          matchesUnstable(version, currentVersion, release.version) ||\n          matchesUnstable(version, newVersion, release.version),\n      );\n\n    const releases = previousReleases.filter(\n      (release) =>\n        version.equals(release.version, currentVersion) ||\n        version.isGreaterThan(release.version, currentVersion),\n    );\n\n    /**\n     * If there is only one release, it can be one of two things:\n     *\n     *   1. There really is only one release\n     *\n     *   2. Pinned version doesn't actually exist, i.e pinning `^1.2.3` to `1.2.3`\n     *      while only `1.2.2` and `1.2.4` exist.\n     */\n    if (releases.length === 1) {\n      const newRelease = releases[0];\n      const closestPreviousRelease = previousReleases\n        .filter((release) => !version.equals(release.version, newVersion))\n        .sort((b, a) => version.sortVersions(a.version, b.version))\n        .shift();\n\n      if (\n        closestPreviousRelease &&\n        closestPreviousRelease.version !== newRelease.version\n      ) {\n        releases.unshift(closestPreviousRelease);\n      }\n    }\n\n    if (version.valueToVersion) {\n      for (const release of coerceArray(releases)) {\n        release.version = version.valueToVersion(release.version);\n      }\n    }\n    return releases;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug({ err }, 'getInRangeReleases err');\n    logger.debug(`Error getting releases for ${depName} from ${datasource}`);\n    return null;\n  }\n}\n"]}