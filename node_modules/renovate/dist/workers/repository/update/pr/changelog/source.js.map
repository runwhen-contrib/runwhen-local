{"version":3,"file":"source.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/source.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport { getPkgReleases } from '../../../../../modules/datasource';\nimport type { Release } from '../../../../../modules/datasource/types';\nimport * as allVersioning from '../../../../../modules/versioning';\nimport * as packageCache from '../../../../../util/cache/package';\nimport type { PackageCacheNamespace } from '../../../../../util/cache/package/types';\nimport { memoize } from '../../../../../util/memoize';\nimport { regEx } from '../../../../../util/regex';\nimport { parseUrl, trimSlashes } from '../../../../../util/url';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport { slugifyUrl } from './common';\nimport { addReleaseNotes } from './release-notes';\nimport { getInRangeReleases } from './releases';\nimport type {\n  ChangeLogError,\n  ChangeLogPlatform,\n  ChangeLogRelease,\n  ChangeLogResult,\n} from './types';\n\nexport abstract class ChangeLogSource {\n  private readonly cacheNamespace: PackageCacheNamespace;\n\n  constructor(\n    private readonly platform: ChangeLogPlatform,\n    private readonly datasource:\n      | 'bitbucket-tags'\n      | 'bitbucket-server-tags'\n      | 'gitea-tags'\n      | 'github-tags'\n      | 'gitlab-tags',\n  ) {\n    this.cacheNamespace = `changelog-${platform}-release`;\n  }\n\n  abstract getCompareURL(\n    baseUrl: string,\n    repository: string,\n    prevHead: string,\n    nextHead: string,\n  ): string;\n\n  abstract getAPIBaseUrl(config: BranchUpgradeConfig): string;\n\n  async getAllTags(endpoint: string, repository: string): Promise<string[]> {\n    const tags = (\n      await getPkgReleases({\n        registryUrls: [endpoint],\n        datasource: this.datasource,\n        packageName: repository,\n        versioning:\n          'regex:(?<major>\\\\d+)(\\\\.(?<minor>\\\\d+))?(\\\\.(?<patch>\\\\d+))?',\n      })\n    )?.releases;\n\n    if (is.nullOrUndefined(tags) || is.emptyArray(tags)) {\n      logger.debug(\n        `No ${this.datasource} tags found for repository: ${repository}`,\n      );\n\n      return [];\n    }\n\n    return tags.map(({ version }) => version);\n  }\n\n  public async getChangeLogJSON(\n    config: BranchUpgradeConfig,\n  ): Promise<ChangeLogResult | null> {\n    logger.trace(`getChangeLogJSON for ${this.platform}`);\n\n    const versioning = config.versioning!;\n    const currentVersion = config.currentVersion!;\n    const newVersion = config.newVersion!;\n    const sourceUrl = config.sourceUrl!;\n    const packageName = config.packageName!;\n    const depName = config.depName!;\n    const sourceDirectory = config.sourceDirectory;\n    const versioningApi = allVersioning.get(versioning);\n\n    if (this.shouldSkipPackage(config)) {\n      return null;\n    }\n\n    const baseUrl = this.getBaseUrl(config);\n    const apiBaseUrl = this.getAPIBaseUrl(config);\n    const repository = this.getRepositoryFromUrl(config);\n\n    const tokenResponse = this.hasValidToken(config);\n    if (!tokenResponse.isValid) {\n      if (tokenResponse.error) {\n        return {\n          error: tokenResponse.error,\n        };\n      }\n      return null;\n    }\n\n    if (is.falsy(this.hasValidRepository(repository))) {\n      logger.debug(`Invalid ${this.platform} URL found: ${sourceUrl}`);\n      return null;\n    }\n\n    const releases = config.releases ?? (await getInRangeReleases(config));\n    if (!releases?.length) {\n      logger.debug('No releases');\n      return null;\n    }\n    // This extra filter/sort should not be necessary, but better safe than sorry\n    const validReleases = [...releases]\n      .filter((release) => versioningApi.isVersion(release.version))\n      .sort((a, b) => versioningApi.sortVersions(a.version, b.version));\n\n    if (validReleases.length < 2) {\n      logger.debug(\n        `Not enough valid releases for dep ${depName} (${packageName})`,\n      );\n      return null;\n    }\n\n    const changelogReleases: ChangeLogRelease[] = [];\n\n    // Check if `v` belongs to the range (currentVersion, newVersion]\n    const inRange = (v: string): boolean =>\n      versioningApi.isGreaterThan(v, currentVersion) &&\n      !versioningApi.isGreaterThan(v, newVersion);\n\n    const getTags = memoize(() => this.getAllTags(apiBaseUrl, repository));\n    for (let i = 1; i < validReleases.length; i += 1) {\n      const prev = validReleases[i - 1];\n      const next = validReleases[i];\n      if (!inRange(next.version)) {\n        continue;\n      }\n      let release = await packageCache.get(\n        this.cacheNamespace,\n        this.getCacheKey(sourceUrl, packageName, prev.version, next.version),\n      );\n      if (!release) {\n        release = {\n          version: next.version,\n          date: next.releaseTimestamp,\n          gitRef: next.gitRef,\n          // put empty changes so that existing templates won't break\n          changes: [],\n          compare: {},\n        };\n        const tags = await getTags();\n        const prevHead = this.getRef(\n          versioningApi,\n          packageName,\n          depName,\n          prev,\n          tags,\n        );\n        const nextHead = this.getRef(\n          versioningApi,\n          packageName,\n          depName,\n          next,\n          tags,\n        );\n        if (is.nonEmptyString(prevHead) && is.nonEmptyString(nextHead)) {\n          release.compare.url = this.getCompareURL(\n            baseUrl,\n            repository,\n            prevHead,\n            nextHead,\n          );\n        }\n        const cacheMinutes = 55;\n        await packageCache.set(\n          this.cacheNamespace,\n          this.getCacheKey(sourceUrl, packageName, prev.version, next.version),\n          release,\n          cacheMinutes,\n        );\n      }\n      changelogReleases.unshift(release);\n    }\n\n    let res: ChangeLogResult | null = {\n      project: {\n        apiBaseUrl,\n        baseUrl,\n        type: this.platform,\n        repository,\n        sourceUrl,\n        sourceDirectory,\n        packageName,\n        depName,\n      },\n      versions: changelogReleases,\n    };\n\n    res = await addReleaseNotes(res, config);\n\n    return res;\n  }\n\n  private findTagOfRelease(\n    versioningApi: allVersioning.VersioningApi,\n    packageName: string,\n    depName: string,\n    depNewVersion: string,\n    tags: string[],\n  ): string | undefined {\n    const releaseRegexPrefix = `^(?:${packageName}|${depName}|release)[@_-]v?`;\n    const regex = regEx(releaseRegexPrefix, undefined, false);\n    const exactReleaseRegex = regEx(`${releaseRegexPrefix}${depNewVersion}`);\n    const exactTagsList = tags.filter((tag) => {\n      return exactReleaseRegex.test(tag);\n    });\n    const tagList = exactTagsList.length ? exactTagsList : tags;\n    return tagList\n      .filter((tag) => versioningApi.isVersion(tag.replace(regex, '')))\n      .find((tag) =>\n        versioningApi.equals(tag.replace(regex, ''), depNewVersion),\n      );\n  }\n\n  private getRef(\n    versioningApi: allVersioning.VersioningApi,\n    packageName: string,\n    depName: string,\n    release: Release,\n    tags: string[],\n  ): string | null {\n    const tagName = this.findTagOfRelease(\n      versioningApi,\n      packageName,\n      depName,\n      release.version,\n      tags,\n    );\n    if (is.nonEmptyString(tagName)) {\n      return tagName;\n    }\n    if (is.nonEmptyString(release.gitRef)) {\n      return release.gitRef;\n    }\n    return null;\n  }\n\n  private getCacheKey(\n    sourceUrl: string,\n    packageName: string,\n    prev: string,\n    next: string,\n  ): string {\n    return `${slugifyUrl(sourceUrl)}:${packageName}:${prev}:${next}`;\n  }\n\n  getBaseUrl(config: BranchUpgradeConfig): string {\n    const parsedUrl = parseUrl(config.sourceUrl);\n    if (is.nullOrUndefined(parsedUrl)) {\n      return '';\n    }\n    const protocol = parsedUrl.protocol.replace(regEx(/^git\\+/), '');\n    const host = parsedUrl.host;\n    return `${protocol}//${host}/`;\n  }\n\n  getRepositoryFromUrl(config: BranchUpgradeConfig): string {\n    const parsedUrl = parseUrl(config.sourceUrl);\n    if (is.nullOrUndefined(parsedUrl)) {\n      return '';\n    }\n    const pathname = parsedUrl.pathname;\n    return trimSlashes(pathname).replace(regEx(/\\.git$/), '');\n  }\n\n  protected hasValidToken(config: BranchUpgradeConfig): {\n    isValid: boolean;\n    error?: ChangeLogError;\n  } {\n    return { isValid: true };\n  }\n\n  protected shouldSkipPackage(config: BranchUpgradeConfig): boolean {\n    return false;\n  }\n\n  hasValidRepository(repository: string): boolean {\n    return repository.split('/').length === 2;\n  }\n}\n"]}