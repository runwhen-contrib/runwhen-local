{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/github/index.ts"],"names":[],"mappings":"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","sourcesContent":["import changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../../../logger';\nimport type {\n  GithubGitBlob,\n  GithubGitTree,\n  GithubGitTreeNode,\n} from '../../../../../../types/platform/github';\nimport { queryReleases } from '../../../../../../util/github/graphql';\nimport { memCacheProvider } from '../../../../../../util/http/cache/memory-http-cache-provider';\nimport { GithubHttp } from '../../../../../../util/http/github';\nimport { fromBase64 } from '../../../../../../util/string';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../../../../util/url';\nimport { compareChangelogFilePath } from '../common';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n} from '../types';\n\nexport const id = 'github-changelog';\nconst http = new GithubHttp(id);\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory: string,\n): Promise<ChangeLogFile | null> {\n  logger.trace('github.getReleaseNotesMd()');\n  const apiPrefix = `${ensureTrailingSlash(apiBaseUrl)}repos/${repository}`;\n  const { default_branch: defaultBranch = 'HEAD' } = (\n    await http.getJsonUnchecked<{ default_branch: string }>(apiPrefix, {\n      cacheProvider: memCacheProvider,\n    })\n  ).body;\n\n  // https://docs.github.com/en/rest/reference/git#get-a-tree\n  const res = await http.getJsonUnchecked<GithubGitTree>(\n    `${apiPrefix}/git/trees/${defaultBranch}${\n      sourceDirectory ? '?recursive=1' : ''\n    }`,\n    { cacheProvider: memCacheProvider },\n  );\n\n  // istanbul ignore if\n  if (res.body.truncated) {\n    logger.debug(`Git tree truncated repository:${repository}`);\n  }\n\n  const allFiles = res.body.tree.filter((f) => f.type === 'blob');\n  let files: GithubGitTreeNode[] = [];\n\n  if (sourceDirectory?.length) {\n    files = allFiles\n      .filter((f) => f.path.startsWith(sourceDirectory))\n      .filter((f) =>\n        changelogFilenameRegex.test(\n          f.path.replace(ensureTrailingSlash(sourceDirectory), ''),\n        ),\n      );\n  }\n  if (!files.length) {\n    files = allFiles.filter((f) => changelogFilenameRegex.test(f.path));\n  }\n  if (!files.length) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n  const { path: changelogFile, sha } = files\n    .sort((a, b) => compareChangelogFilePath(a.path, b.path))\n    .shift()!;\n  /* istanbul ignore if */\n  if (files.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`,\n    );\n  }\n\n  // https://docs.github.com/en/rest/reference/git#get-a-blob\n  const fileRes = await http.getJsonUnchecked<GithubGitBlob>(\n    `${apiPrefix}/git/blobs/${sha}`,\n    { cacheProvider: memCacheProvider },\n  );\n\n  const changelogMd = fromBase64(fileRes.body.content) + '\\n#\\n##';\n  return { changelogFile, changelogMd };\n}\n\nexport async function getReleaseList(\n  project: ChangeLogProject,\n  _release: ChangeLogRelease,\n): Promise<ChangeLogNotes[]> {\n  logger.trace('github.getReleaseList()');\n  const apiBaseUrl = project.apiBaseUrl;\n  const repository = project.repository;\n  const notesSourceUrl = joinUrlParts(\n    apiBaseUrl,\n    'repos',\n    repository,\n    'releases',\n  );\n  const releases = await queryReleases(\n    {\n      registryUrl: apiBaseUrl,\n      packageName: repository,\n    },\n    http,\n  );\n\n  const result = releases.map(\n    ({ url, id, version: tag, name, description: body }) => ({\n      url,\n      notesSourceUrl,\n      id,\n      tag,\n      name,\n      body,\n    }),\n  );\n  return result;\n}\n"]}