{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/bitbucket/index.ts"],"names":[],"mappings":";;;AAkBA,8CA0DC;AAED,wCASC;;AAvFD,kEAA6B;AAC7B,kEAAkC;AAClC,gGAA8D;AAC9D,qDAAkD;AAClD,gFAA+F;AAC/F,qEAAsE;AACtE,oDAA0D;AAC1D,sCAAqD;AAQxC,QAAA,EAAE,GAAG,qBAAqB,CAAC;AACxC,MAAM,aAAa,GAAG,IAAI,yBAAa,CAAC,UAAE,CAAC,CAAC;AAErC,KAAK,UAAU,iBAAiB,CACrC,UAAkB,EAClB,UAAkB,EAClB,eAAwB;IAExB,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAE9C,MAAM,mBAAmB,GAAG,IAAA,kBAAY,EACtC,UAAU,EACV,kBAAkB,EAClB,UAAU,EACV,UAAU,EACV,eAAe,IAAI,EAAE,CACtB,CAAC;IAEF,MAAM,SAAS,GAAG,CAChB,MAAM,aAAa,CAAC,OAAO,CACzB,mBAAmB,EACnB;QACE,QAAQ,EAAE,IAAI;KACf,EACD,iCAAwB,CACzB,CACF,CAAC,IAAI,CAAC,MAAM,CAAC;IAEd,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;IAEnE,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAClC,kCAAsB,CAAC,IAAI,CAAC,mBAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CACnD,CAAC;IAEF,MAAM,aAAa,GAAG,KAAK;SACxB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAA,iCAAwB,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;SACxD,KAAK,EAAE,CAAC;IACX,IAAI,YAAE,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC;QACtC,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,eAAM,CAAC,KAAK,CACV,iDAAiD,aAAa,CAAC,IAAI,EAAE,CACtE,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,OAAO,CACzC,IAAA,kBAAY,EACV,UAAU,EACV,kBAAkB,EAClB,UAAU,EACV,KAAK,EACL,aAAa,CAAC,MAAM,CAAC,IAAI,EACzB,aAAa,CAAC,IAAI,CACnB,CACF,CAAC;IAEF,MAAM,WAAW,GAAG,GAAG,OAAO,CAAC,IAAI,SAAS,CAAC;IAC7C,OAAO,EAAE,aAAa,EAAE,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC;AAC5D,CAAC;AAED,SAAgB,cAAc,CAC5B,QAA0B,EAC1B,QAA0B;IAE1B,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAC3C,eAAM,CAAC,IAAI,CACT,kEAAkE,CACnE,CAAC;IACF,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import path from 'node:path';\nimport is from '@sindresorhus/is';\nimport changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../../../logger';\nimport { PagedSourceResultsSchema } from '../../../../../../modules/platform/bitbucket/schema';\nimport { BitbucketHttp } from '../../../../../../util/http/bitbucket';\nimport { joinUrlParts } from '../../../../../../util/url';\nimport { compareChangelogFilePath } from '../common';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n} from '../types';\n\nexport const id = 'bitbucket-changelog';\nconst bitbucketHttp = new BitbucketHttp(id);\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory?: string,\n): Promise<ChangeLogFile | null> {\n  logger.trace('bitbucket.getReleaseNotesMd()');\n\n  const repositorySourceURl = joinUrlParts(\n    apiBaseUrl,\n    '2.0/repositories',\n    repository,\n    'src/HEAD',\n    sourceDirectory ?? '',\n  );\n\n  const rootFiles = (\n    await bitbucketHttp.getJson(\n      repositorySourceURl,\n      {\n        paginate: true,\n      },\n      PagedSourceResultsSchema,\n    )\n  ).body.values;\n\n  const allFiles = rootFiles.filter((f) => f.type === 'commit_file');\n\n  const files = allFiles.filter((f) =>\n    changelogFilenameRegex.test(path.basename(f.path)),\n  );\n\n  const changelogFile = files\n    .sort((a, b) => compareChangelogFilePath(a.path, b.path))\n    .shift();\n  if (is.nullOrUndefined(changelogFile)) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n\n  if (files.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile.path}`,\n    );\n  }\n\n  const fileRes = await bitbucketHttp.getText(\n    joinUrlParts(\n      apiBaseUrl,\n      '2.0/repositories',\n      repository,\n      'src',\n      changelogFile.commit.hash,\n      changelogFile.path,\n    ),\n  );\n\n  const changelogMd = `${fileRes.body}\\n#\\n##`;\n  return { changelogFile: changelogFile.path, changelogMd };\n}\n\nexport function getReleaseList(\n  _project: ChangeLogProject,\n  _release: ChangeLogRelease,\n): ChangeLogNotes[] {\n  logger.trace('bitbucket.getReleaseList()');\n  logger.info(\n    'Unsupported Bitbucket Cloud feature.  Skipping release fetching.',\n  );\n  return [];\n}\n"]}