{"version":3,"file":"source.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/bitbucket-server/source.ts"],"names":[],"mappings":";;;AAAA,wDAAqD;AACrD,oDAAsD;AAEtD,sCAA4C;AAE5C,MAAM,eAAe,GAAG,IAAA,aAAK,EAC3B,uFAAuF,CACxF,CAAC;AAEF,MAAa,8BAA+B,SAAQ,wBAAe;IACjE;QACE,KAAK,CAAC,kBAAkB,EAAE,uBAAuB,CAAC,CAAC;IACrD,CAAC;IAED,aAAa,CAAC,MAA2B;QACvC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC;IACnD,CAAC;IAED,aAAa,CACX,OAAe,EACf,UAAkB,EAClB,QAAgB,EAChB,QAAgB;QAEhB,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3D,OAAO,GAAG,OAAO,YAAY,UAAU,UAAU,cAAc,iCAAiC,QAAQ,iBAAiB,QAAQ,EAAE,CAAC;IACtI,CAAC;IAEQ,oBAAoB,CAAC,MAA2B;QACvD,MAAM,SAAS,GAAG,IAAA,cAAQ,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,KAAK,EAAE,MAAM,EAAE,CAAC;gBAClB,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACxD,CAAC;QACH,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AA9BD,wEA8BC","sourcesContent":["import { regEx } from '../../../../../../util/regex';\nimport { parseUrl } from '../../../../../../util/url';\nimport type { BranchUpgradeConfig } from '../../../../../types';\nimport { ChangeLogSource } from '../source';\n\nconst repositoryRegex = regEx(\n  '^/(?:scm|projects)?/?(?<project>[^\\\\/]+)/(?:repos/)?(?<repo>[^\\\\/]+?)(?:\\\\.git|/.*|$)',\n);\n\nexport class BitbucketServerChangeLogSource extends ChangeLogSource {\n  constructor() {\n    super('bitbucket-server', 'bitbucket-server-tags');\n  }\n\n  getAPIBaseUrl(config: BranchUpgradeConfig): string {\n    return `${this.getBaseUrl(config)}rest/api/1.0/`;\n  }\n\n  getCompareURL(\n    baseUrl: string,\n    repository: string,\n    prevHead: string,\n    nextHead: string,\n  ): string {\n    const [projectKey, repositorySlug] = repository.split('/');\n    return `${baseUrl}projects/${projectKey}/repos/${repositorySlug}/compare/commits?sourceBranch=${nextHead}&targetBranch=${prevHead}`;\n  }\n\n  override getRepositoryFromUrl(config: BranchUpgradeConfig): string {\n    const parsedUrl = parseUrl(config.sourceUrl);\n    if (parsedUrl) {\n      const match = repositoryRegex.exec(parsedUrl.pathname);\n      if (match?.groups) {\n        return `${match.groups.project}/${match.groups.repo}`;\n      }\n    }\n\n    return '';\n  }\n}\n"]}