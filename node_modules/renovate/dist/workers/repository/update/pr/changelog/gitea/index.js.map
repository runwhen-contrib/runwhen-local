{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/gitea/index.ts"],"names":[],"mappings":"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","sourcesContent":["import changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../../../logger';\nimport { ReleasesSchema } from '../../../../../../modules/datasource/gitea-releases/schema';\nimport type { ContentsResponse } from '../../../../../../modules/platform/gitea/schema';\nimport {\n  ContentsListResponseSchema,\n  ContentsResponseSchema,\n} from '../../../../../../modules/platform/gitea/schema';\nimport { GiteaHttp } from '../../../../../../util/http/gitea';\nimport { fromBase64 } from '../../../../../../util/string';\nimport { compareChangelogFilePath } from '../common';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n} from '../types';\n\nexport const id = 'gitea-changelog';\nconst http = new GiteaHttp(id);\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory?: string,\n): Promise<ChangeLogFile | null> {\n  logger.trace('gitea.getReleaseNotesMd()');\n  const apiPrefix = `${apiBaseUrl}repos/${repository}/contents`;\n\n  const sourceDir = sourceDirectory ? `/${sourceDirectory}` : '';\n  const tree = (\n    await http.getJson(\n      `${apiPrefix}${sourceDir}`,\n      {\n        paginate: false, // no pagination yet\n      },\n      ContentsListResponseSchema,\n    )\n  ).body;\n  const allFiles = tree.filter((f) => f.type === 'file');\n  let files: ContentsResponse[] = [];\n  if (!files.length) {\n    files = allFiles.filter((f) => changelogFilenameRegex.test(f.name));\n  }\n  if (!files.length) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n\n  const { path: changelogFile } = files\n    .sort((a, b) => compareChangelogFilePath(a.path, b.path))\n    .shift()!;\n  /* istanbul ignore if */\n  if (files.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`,\n    );\n  }\n\n  const fileRes = await http.getJson(\n    `${apiPrefix}/${changelogFile}`,\n    ContentsResponseSchema,\n  );\n  // istanbul ignore if: should never happen\n  if (!fileRes.body.content) {\n    logger.debug(`Missing content for changelog file, using ${changelogFile}`);\n    return null;\n  }\n  const changelogMd = fromBase64(fileRes.body.content) + '\\n#\\n##';\n\n  return { changelogFile, changelogMd };\n}\n\nexport async function getReleaseList(\n  project: ChangeLogProject,\n  _release: ChangeLogRelease,\n): Promise<ChangeLogNotes[]> {\n  logger.trace('gitea.getReleaseNotesMd()');\n  const apiUrl = `${project.apiBaseUrl}repos/${project.repository}/releases`;\n\n  const res = await http.getJson(\n    `${apiUrl}?draft=false`,\n    {\n      paginate: true,\n    },\n    ReleasesSchema,\n  );\n  return res.body.map((release) => ({\n    url: `${project.baseUrl}${project.repository}/releases/tag/${release.tag_name}`,\n    notesSourceUrl: apiUrl,\n    name: release.name,\n    body: release.body,\n    tag: release.tag_name,\n  }));\n}\n"]}