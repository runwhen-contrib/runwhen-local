{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/index.ts"],"names":[],"mappings":";;AAWA,4CAyCC;AAED,sDAIC;;AA1DD,kEAAkC;AAClC,kDAA+C;AAC/C,yFAAmE;AACnE,uDAA4D;AAE5D,wDAAwB;AAIxB,kDAAwB;AAEjB,KAAK,UAAU,gBAAgB,CACpC,MAA2B;IAE3B,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IACrE,IAAI,CAAC;QACH,IAAI,CAAC,CAAC,SAAS,IAAI,cAAc,IAAI,UAAU,CAAC,EAAE,CAAC;YACjD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE,CAAC;YACrD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,eAAM,CAAC,KAAK,CACV,uBAAuB,SAAS,KAAK,cAAc,OAAO,UAAU,GAAG,CACxE,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAA,uBAAc,EAAC,SAAS,CAAC,CAAC;QAE3C,IAAI,YAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,eAAM,CAAC,IAAI,CACT,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACjC,gDAAgD,CACjD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,eAAe,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAExD,IAAI,YAAE,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC;YACxC,eAAM,CAAC,IAAI,CACT,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACjC,wDAAwD,CACzD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,MAAM,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC,CAAC;QACxC,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,wBAAwB,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED,SAAgB,qBAAqB,CACnC,QAAgB;IAEhB,OAAO,aAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;AACnC,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../../logger';\nimport * as allVersioning from '../../../../../modules/versioning';\nimport { detectPlatform } from '../../../../../util/common';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport api from './api';\nimport type { ChangeLogSource } from './source';\nimport type { ChangeLogResult } from './types';\n\nexport * from './types';\n\nexport async function getChangeLogJSON(\n  config: BranchUpgradeConfig,\n): Promise<ChangeLogResult | null> {\n  const { sourceUrl, versioning, currentVersion, newVersion } = config;\n  try {\n    if (!(sourceUrl && currentVersion && newVersion)) {\n      return null;\n    }\n    const versioningApi = allVersioning.get(versioning);\n    if (versioningApi.equals(currentVersion, newVersion)) {\n      return null;\n    }\n    logger.debug(\n      `Fetching changelog: ${sourceUrl} (${currentVersion} -> ${newVersion})`,\n    );\n\n    const platform = detectPlatform(sourceUrl);\n\n    if (is.nullOrUndefined(platform)) {\n      logger.info(\n        { sourceUrl, hostType: platform },\n        'Unknown platform, skipping changelog fetching.',\n      );\n      return null;\n    }\n\n    const changeLogSource = getChangeLogSourceFor(platform);\n\n    if (is.nullOrUndefined(changeLogSource)) {\n      logger.info(\n        { sourceUrl, hostType: platform },\n        'Unknown changelog source, skipping changelog fetching.',\n      );\n      return null;\n    }\n\n    return await changeLogSource.getChangeLogJSON(config);\n  } catch (err) /* istanbul ignore next */ {\n    logger.error({ config, err }, 'getChangeLogJSON error');\n    return null;\n  }\n}\n\nexport function getChangeLogSourceFor(\n  platform: string,\n): ChangeLogSource | null {\n  return api.get(platform) ?? null;\n}\n"]}