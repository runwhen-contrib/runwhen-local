{"version":3,"file":"release-notes.js","sourceRoot":"","sources":["../../../../../../lib/workers/repository/update/pr/changelog/release-notes.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { DateTime } from 'luxon';\nimport MarkdownIt from 'markdown-it';\nimport { logger } from '../../../../../logger';\nimport * as memCache from '../../../../../util/cache/memory';\nimport * as packageCache from '../../../../../util/cache/package';\nimport type { PackageCacheNamespace } from '../../../../../util/cache/package/types';\nimport { detectPlatform } from '../../../../../util/common';\nimport { linkify } from '../../../../../util/markdown';\nimport { newlineRegex, regEx } from '../../../../../util/regex';\nimport { coerceString } from '../../../../../util/string';\nimport { isHttpUrl, joinUrlParts } from '../../../../../util/url';\nimport type { BranchUpgradeConfig } from '../../../../types';\nimport * as bitbucket from './bitbucket';\nimport * as bitbucketServer from './bitbucket-server';\nimport * as gitea from './gitea';\nimport * as github from './github';\nimport * as gitlab from './gitlab';\nimport type {\n  ChangeLogFile,\n  ChangeLogNotes,\n  ChangeLogProject,\n  ChangeLogRelease,\n  ChangeLogResult,\n} from './types';\n\nconst markdown = new MarkdownIt('zero');\nmarkdown.enable(['heading', 'lheading']);\n\nconst repositoriesToSkipMdFetching = ['facebook/react-native'];\n\nexport async function getReleaseList(\n  project: ChangeLogProject,\n  release: ChangeLogRelease,\n): Promise<ChangeLogNotes[]> {\n  logger.trace('getReleaseList()');\n  const { apiBaseUrl, repository, type } = project;\n  try {\n    switch (type) {\n      case 'gitea':\n        return await gitea.getReleaseList(project, release);\n      case 'gitlab':\n        return await gitlab.getReleaseList(project, release);\n      case 'github':\n        return await github.getReleaseList(project, release);\n      case 'bitbucket':\n        return bitbucket.getReleaseList(project, release);\n      case 'bitbucket-server':\n        logger.trace(\n          'Unsupported Bitbucket Server feature. Skipping release fetching.',\n        );\n        return [];\n      default:\n        logger.warn({ apiBaseUrl, repository, type }, 'Invalid project type');\n        return [];\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug({ repository, type, apiBaseUrl }, 'getReleaseList 404');\n    } else {\n      logger.debug(\n        { repository, type, apiBaseUrl, err },\n        'getReleaseList error',\n      );\n    }\n  }\n  return [];\n}\n\nexport function getCachedReleaseList(\n  project: ChangeLogProject,\n  release: ChangeLogRelease,\n): Promise<ChangeLogNotes[]> {\n  const { repository, apiBaseUrl } = project;\n  // TODO: types (#22198)\n  const cacheKey = `getReleaseList-${apiBaseUrl}-${repository}`;\n  const cachedResult = memCache.get<Promise<ChangeLogNotes[]>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseList(project, release);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport function massageBody(\n  input: string | undefined | null,\n  baseUrl: string,\n): string {\n  let body = coerceString(input);\n  // Convert line returns\n  body = body.replace(regEx(/\\r\\n/g), '\\n');\n  // semantic-release cleanup\n  body = body.replace(regEx(/^<a name=\"[^\"]*\"><\\/a>\\n/), '');\n  body = body.replace(\n    regEx(\n      `^##? \\\\[[^\\\\]]*\\\\]\\\\(${baseUrl}[^/]*/[^/]*/compare/.*?\\\\n`,\n      undefined,\n      false,\n    ),\n    '',\n  );\n  // Clean-up unnecessary commits link\n  body = `\\n${body}\\n`.replace(\n    regEx(`\\\\n${baseUrl}[^/]+/[^/]+/compare/[^\\\\n]+(\\\\n|$)`),\n    '\\n',\n  );\n  // Reduce headings size\n  body = body\n    .replace(regEx(/\\n\\s*####? /g), '\\n##### ')\n    .replace(regEx(/\\n\\s*## /g), '\\n#### ')\n    .replace(regEx(/\\n\\s*# /g), '\\n### ');\n  // Trim whitespace\n  return body.trim();\n}\n\nexport function massageName(\n  input: string | undefined | null,\n  version: string | undefined,\n): string | undefined {\n  let name = input ?? '';\n\n  if (version) {\n    name = name.replace(RegExp(`^(Release )?v?${version}`, 'i'), '').trim();\n  }\n\n  name = name.trim();\n  if (!name.length) {\n    return undefined;\n  }\n\n  return name;\n}\n\nexport async function getReleaseNotes(\n  project: ChangeLogProject,\n  release: ChangeLogRelease,\n  config: BranchUpgradeConfig,\n): Promise<ChangeLogNotes | null> {\n  const { packageName, depName, repository } = project;\n  const { version, gitRef } = release;\n  // TODO: types (#22198)\n  logger.trace(\n    `getReleaseNotes(${repository}, ${version}, ${packageName!}, ${depName!})`,\n  );\n  const releases = await getCachedReleaseList(project, release);\n  logger.trace({ releases }, 'Release list from getReleaseList');\n  let releaseNotes: ChangeLogNotes | null = null;\n\n  let matchedRelease = getExactReleaseMatch(\n    packageName!,\n    depName!,\n    version,\n    releases,\n  );\n  if (is.undefined(matchedRelease)) {\n    // no exact match of a release then check other cases\n    matchedRelease = releases.find(\n      (r) =>\n        r.tag === version ||\n        r.tag === `v${version}` ||\n        r.tag === gitRef ||\n        r.tag === `v${gitRef}`,\n    );\n  }\n  if (is.undefined(matchedRelease) && config.extractVersion) {\n    const extractVersionRegEx = regEx(config.extractVersion);\n    matchedRelease = releases.find((r) => {\n      const extractedVersion = extractVersionRegEx.exec(r.tag!)?.groups\n        ?.version;\n      return version === extractedVersion;\n    });\n  }\n  releaseNotes = await releaseNotesResult(matchedRelease, project);\n  logger.trace({ releaseNotes });\n  return releaseNotes;\n}\n\nfunction getExactReleaseMatch(\n  packageName: string,\n  depName: string,\n  version: string,\n  releases: ChangeLogNotes[],\n): ChangeLogNotes | undefined {\n  const exactReleaseReg = regEx(\n    `(?:^|/)(?:${packageName}|${depName})[@_-]v?${version}`,\n  );\n  const candidateReleases = releases.filter((r) => r.tag?.endsWith(version));\n  const matchedRelease = candidateReleases.find((r) =>\n    exactReleaseReg.test(r.tag!),\n  );\n  return matchedRelease;\n}\n\nasync function releaseNotesResult(\n  releaseMatch: ChangeLogNotes | undefined,\n  project: ChangeLogProject,\n): Promise<ChangeLogNotes | null> {\n  if (!releaseMatch) {\n    return null;\n  }\n  const { baseUrl, repository } = project;\n  const releaseNotes: ChangeLogNotes = releaseMatch;\n  if (detectPlatform(baseUrl) === 'gitlab') {\n    releaseNotes.url = `${baseUrl}${repository}/tags/${releaseMatch.tag!}`;\n  } else {\n    releaseNotes.url = releaseMatch.url\n      ? releaseMatch.url\n      : /* istanbul ignore next */\n        `${baseUrl}${repository}/releases/${releaseMatch.tag!}`;\n  }\n  // set body for release notes\n  releaseNotes.body = massageBody(releaseNotes.body, baseUrl);\n  releaseNotes.name = massageName(releaseNotes.name, releaseNotes.tag);\n  if (releaseNotes.body.length || releaseNotes.name?.length) {\n    try {\n      if (baseUrl !== 'https://gitlab.com/') {\n        releaseNotes.body = await linkify(releaseNotes.body, {\n          repository: `${baseUrl}${repository}`,\n        });\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ err, baseUrl, repository }, 'Error linkifying');\n    }\n  } else {\n    return null;\n  }\n\n  return releaseNotes;\n}\n\nfunction sectionize(text: string, level: number): string[] {\n  const sections: [number, number][] = [];\n  const lines = text.split(newlineRegex);\n  const tokens = markdown.parse(text, undefined);\n  tokens.forEach((token) => {\n    if (token.type === 'heading_open') {\n      const lev = +token.tag.substring(1);\n      if (lev <= level) {\n        sections.push([lev, token.map![0]]);\n      }\n    }\n  });\n  sections.push([-1, lines.length]);\n  const result: string[] = [];\n  for (let i = 1; i < sections.length; i += 1) {\n    const [lev, start] = sections[i - 1];\n    const [, end] = sections[i];\n    if (lev === level) {\n      result.push(lines.slice(start, end).join('\\n'));\n    }\n  }\n  return result;\n}\n\nexport async function getReleaseNotesMdFileInner(\n  project: ChangeLogProject,\n): Promise<ChangeLogFile | null> {\n  const { repository, type } = project;\n  const apiBaseUrl = project.apiBaseUrl;\n  const sourceDirectory = project.sourceDirectory!;\n  try {\n    switch (type) {\n      case 'gitea':\n        return await gitea.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory,\n        );\n      case 'gitlab':\n        return await gitlab.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory,\n        );\n      case 'github':\n        return await github.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory,\n        );\n      case 'bitbucket':\n        return await bitbucket.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory,\n        );\n      case 'bitbucket-server':\n        return await bitbucketServer.getReleaseNotesMd(\n          repository,\n          apiBaseUrl,\n          sourceDirectory,\n        );\n      default:\n        logger.warn({ apiBaseUrl, repository, type }, 'Invalid project type');\n        return null;\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.statusCode === 404) {\n      logger.debug(\n        { repository, type, apiBaseUrl },\n        'Error 404 getting changelog md',\n      );\n    } else {\n      logger.debug(\n        { err, repository, type, apiBaseUrl },\n        'Error getting changelog md',\n      );\n    }\n  }\n  return null;\n}\n\nexport function getReleaseNotesMdFile(\n  project: ChangeLogProject,\n): Promise<ChangeLogFile | null> {\n  const { sourceDirectory, repository, apiBaseUrl } = project;\n  // TODO: types (#22198)\n  const cacheKey = sourceDirectory\n    ? `getReleaseNotesMdFile@v2-${repository}-${sourceDirectory}-${apiBaseUrl}`\n    : `getReleaseNotesMdFile@v2-${repository}-${apiBaseUrl}`;\n  const cachedResult = memCache.get<Promise<ChangeLogFile | null>>(cacheKey);\n  // istanbul ignore if\n  if (cachedResult !== undefined) {\n    return cachedResult;\n  }\n  const promisedRes = getReleaseNotesMdFileInner(project);\n  memCache.set(cacheKey, promisedRes);\n  return promisedRes;\n}\n\nexport async function getReleaseNotesMd(\n  project: ChangeLogProject,\n  release: ChangeLogRelease,\n): Promise<ChangeLogNotes | null> {\n  const { baseUrl, repository } = project;\n  const version = release.version;\n  logger.trace(`getReleaseNotesMd(${repository}, ${version})`);\n\n  if (shouldSkipChangelogMd(repository)) {\n    return null;\n  }\n\n  const changelog = await getReleaseNotesMdFile(project);\n  if (!changelog) {\n    return null;\n  }\n  const { changelogFile } = changelog;\n  const changelogMd = changelog.changelogMd.replace(\n    regEx(/\\n\\s*<a name=\"[^\"]*\">.*?<\\/a>\\n/g),\n    '\\n',\n  );\n  for (const level of [1, 2, 3, 4, 5, 6, 7]) {\n    const changelogParsed = sectionize(changelogMd, level);\n    if (changelogParsed.length >= 2) {\n      for (const section of changelogParsed) {\n        try {\n          // replace brackets and parenthesis with space\n          const deParenthesizedSection = section.replace(\n            regEx(/[[\\]()]/g),\n            ' ',\n          );\n          const [heading] = deParenthesizedSection.split(newlineRegex);\n          const title = heading\n            .replace(regEx(/^\\s*#*\\s*/), '')\n            .split(' ')\n            .filter(Boolean);\n          let body = section.replace(regEx(/.*?\\n(-{3,}\\n)?/), '').trim();\n          for (const word of title) {\n            if (word.includes(version) && !isHttpUrl(word)) {\n              logger.trace({ body }, 'Found release notes for v' + version);\n              const notesSourceUrl = getNotesSourceUrl(\n                baseUrl,\n                repository,\n                project,\n                changelogFile,\n              );\n              const mdHeadingLink = title\n                .filter((word) => !isHttpUrl(word))\n                .join('-')\n                .replace(regEx(/[^A-Za-z0-9-]/g), '');\n              const url = `${notesSourceUrl}#${mdHeadingLink}`;\n              body = massageBody(body, baseUrl);\n              if (body?.length) {\n                try {\n                  body = await linkify(body, {\n                    repository: `${baseUrl}${repository}`,\n                  });\n                } catch (err) /* istanbul ignore next */ {\n                  logger.warn({ body, err }, 'linkify error');\n                }\n              }\n              return {\n                body,\n                url,\n                notesSourceUrl,\n              };\n            }\n          }\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn(\n            { file: changelogFile, err },\n            `Error parsing changelog file`,\n          );\n        }\n      }\n    }\n    logger.trace({ repository }, `No level ${level} changelogs headings found`);\n  }\n  logger.trace({ repository, version }, `No entry found in ${changelogFile}`);\n  return null;\n}\n\n/**\n * Determine how long to cache release notes based on when the version was released.\n *\n * It's not uncommon for release notes to be updated shortly after the release itself,\n * so only cache for about an hour when the release is less than a week old. Otherwise,\n * cache for days.\n */\nexport function releaseNotesCacheMinutes(releaseDate?: string | Date): number {\n  const dt = is.date(releaseDate)\n    ? DateTime.fromJSDate(releaseDate)\n    : DateTime.fromISO(releaseDate!);\n\n  const now = DateTime.local();\n\n  if (!dt.isValid || now.diff(dt, 'days').days < 7) {\n    return 55;\n  }\n\n  if (now.diff(dt, 'months').months < 6) {\n    return 1435; // 5 minutes shy of one day\n  }\n\n  return 14495; // 5 minutes shy of 10 days\n}\n\nexport async function addReleaseNotes(\n  input: ChangeLogResult | null | undefined,\n  config: BranchUpgradeConfig,\n): Promise<ChangeLogResult | null> {\n  if (!input?.versions || !input.project?.type) {\n    logger.debug('Missing project or versions');\n    return input ?? null;\n  }\n  const output: ChangeLogResult = {\n    ...input,\n    versions: [],\n    hasReleaseNotes: false,\n  };\n\n  const { repository, sourceDirectory, type: projectType } = input.project;\n  const cacheNamespace: PackageCacheNamespace = `changelog-${projectType}-notes@v2`;\n  const cacheKeyPrefix = sourceDirectory\n    ? `${repository}:${sourceDirectory}`\n    : `${repository}`;\n\n  for (const v of input.versions) {\n    let releaseNotes: ChangeLogNotes | null | undefined;\n    const cacheKey = `${cacheKeyPrefix}:${v.version}`;\n    releaseNotes = await packageCache.get(cacheNamespace, cacheKey);\n    releaseNotes ??= await getReleaseNotesMd(input.project, v);\n    releaseNotes ??= await getReleaseNotes(input.project, v, config);\n\n    // If there is no release notes, at least try to show the compare URL\n    if (!releaseNotes && v.compare.url) {\n      releaseNotes = { url: v.compare.url, notesSourceUrl: '' };\n    }\n\n    const cacheMinutes = releaseNotesCacheMinutes(v.date);\n    await packageCache.set(\n      cacheNamespace,\n      cacheKey,\n      releaseNotes,\n      cacheMinutes,\n    );\n    output.versions!.push({\n      ...v,\n      releaseNotes: releaseNotes!,\n    });\n\n    if (releaseNotes) {\n      output.hasReleaseNotes = true;\n    }\n  }\n  return output;\n}\n\n/**\n * Skip fetching changelog/release-notes markdown files.\n * Will force a fallback to using GitHub release notes\n */\nexport function shouldSkipChangelogMd(repository: string): boolean {\n  return repositoriesToSkipMdFetching.includes(repository);\n}\n\nfunction getNotesSourceUrl(\n  baseUrl: string,\n  repository: string,\n  project: ChangeLogProject,\n  changelogFile: string,\n): string {\n  if (project.type === 'bitbucket-server') {\n    const [projectKey, repositorySlug] = repository.split('/');\n    return joinUrlParts(\n      baseUrl,\n      'projects',\n      projectKey,\n      'repos',\n      repositorySlug,\n      'browse',\n      changelogFile,\n      '?at=HEAD',\n    );\n  }\n\n  return joinUrlParts(\n    baseUrl,\n    repository,\n    project.type === 'bitbucket' ? 'src' : 'blob',\n    'HEAD',\n    changelogFile,\n  );\n}\n"]}