{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../lib/workers/repository/update/pr/changelog/bitbucket-server/index.ts"],"names":[],"mappings":";;;AAYA,8CAwDC;;AApED,kEAA6B;AAC7B,gGAA8D;AAC9D,qDAAkD;AAClD,uFAAmF;AACnF,mFAAmF;AACnF,oDAA+E;AAC/E,sCAAqD;AAGxC,QAAA,EAAE,GAAG,4BAA4B,CAAC;AAC/C,MAAM,IAAI,GAAG,IAAI,sCAAmB,CAAC,UAAE,CAAC,CAAC;AAElC,KAAK,UAAU,iBAAiB,CACrC,UAAkB,EAClB,UAAkB,EAClB,eAAwB;IAExB,eAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;IAEnD,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3D,MAAM,cAAc,GAAG,IAAA,kBAAY,EACjC,UAAU,EACV,UAAU,EACV,UAAU,EACV,OAAO,EACP,cAAc,CACf,CAAC;IAEF,MAAM,mBAAmB,GAAG,IAAA,kBAAY,EACtC,cAAc,EACd,OAAO,EACP,eAAe,IAAI,EAAE,CACtB,CAAC;IACF,MAAM,QAAQ,GAAG,CACf,MAAM,IAAI,CAAC,OAAO,CAChB,mBAAmB,EACnB;QACE,QAAQ,EAAE,IAAI;KACf,EACD,cAAK,CACN,CACF,CAAC,IAAI,CAAC;IAEP,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAC3C,kCAAsB,CAAC,IAAI,CAAC,mBAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9C,CAAC;IAEF,IAAI,aAAa,GAAG,cAAc;SAC/B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAA,iCAAwB,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC9C,KAAK,EAAE,CAAC;IACX,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,eAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,aAAa,GAAG,GAAG,eAAe,CAAC,CAAC,CAAC,IAAA,yBAAmB,EAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,aAAa,EAAE,CAAC;IACjG,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAChC,eAAM,CAAC,KAAK,CACV,iDAAiD,aAAa,EAAE,CACjE,CAAC;IACJ,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAChC,IAAA,kBAAY,EAAC,cAAc,EAAE,KAAK,EAAE,aAAa,CAAC,CACnD,CAAC;IACF,MAAM,WAAW,GAAG,GAAG,OAAO,CAAC,IAAI,SAAS,CAAC;IAE7C,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC;AACxC,CAAC","sourcesContent":["import path from 'node:path';\nimport changelogFilenameRegex from 'changelog-filename-regex';\nimport { logger } from '../../../../../../logger';\nimport { Files } from '../../../../../../modules/platform/bitbucket-server/schema';\nimport { BitbucketServerHttp } from '../../../../../../util/http/bitbucket-server';\nimport { ensureTrailingSlash, joinUrlParts } from '../../../../../../util/url';\nimport { compareChangelogFilePath } from '../common';\nimport type { ChangeLogFile } from '../types';\n\nexport const id = 'bitbucket-server-changelog';\nconst http = new BitbucketServerHttp(id);\n\nexport async function getReleaseNotesMd(\n  repository: string,\n  apiBaseUrl: string,\n  sourceDirectory?: string,\n): Promise<ChangeLogFile | null> {\n  logger.info('bitbucketServer.getReleaseNotesMd()');\n\n  const [projectKey, repositorySlug] = repository.split('/');\n  const apiRepoBaseUrl = joinUrlParts(\n    apiBaseUrl,\n    `projects`,\n    projectKey,\n    'repos',\n    repositorySlug,\n  );\n\n  const repositorySourceURl = joinUrlParts(\n    apiRepoBaseUrl,\n    'files',\n    sourceDirectory ?? '',\n  );\n  const allFiles = (\n    await http.getJson(\n      repositorySourceURl,\n      {\n        paginate: true,\n      },\n      Files,\n    )\n  ).body;\n\n  const changelogFiles = allFiles.filter((f) =>\n    changelogFilenameRegex.test(path.basename(f)),\n  );\n\n  let changelogFile = changelogFiles\n    .sort((a, b) => compareChangelogFilePath(a, b))\n    .shift();\n  if (!changelogFile) {\n    logger.trace('no changelog file found');\n    return null;\n  }\n\n  changelogFile = `${sourceDirectory ? ensureTrailingSlash(sourceDirectory) : ''}${changelogFile}`;\n  if (changelogFiles.length !== 0) {\n    logger.debug(\n      `Multiple candidates for changelog file, using ${changelogFile}`,\n    );\n  }\n\n  const fileRes = await http.getText(\n    joinUrlParts(apiRepoBaseUrl, 'raw', changelogFile),\n  );\n  const changelogMd = `${fileRes.body}\\n#\\n##`;\n\n  return { changelogFile, changelogMd };\n}\n"]}