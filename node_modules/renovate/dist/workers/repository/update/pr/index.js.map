{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport {\n  PLATFORM_INTEGRATION_UNAUTHORIZED,\n  PLATFORM_RATE_LIMIT_EXCEEDED,\n  REPOSITORY_CHANGED,\n} from '../../../../constants/error-messages';\nimport { pkg } from '../../../../expose.cjs';\nimport { logger } from '../../../../logger';\nimport type {\n  PlatformPrOptions,\n  Pr,\n  PrDebugData,\n  UpdatePrConfig,\n} from '../../../../modules/platform';\nimport { platform } from '../../../../modules/platform';\nimport { ensureComment } from '../../../../modules/platform/comment';\nimport {\n  getPrBodyStruct,\n  hashBody,\n} from '../../../../modules/platform/pr-body';\nimport { scm } from '../../../../modules/platform/scm';\nimport { ExternalHostError } from '../../../../types/errors/external-host-error';\nimport { getElapsedHours } from '../../../../util/date';\nimport { stripEmojis } from '../../../../util/emoji';\nimport { fingerprint } from '../../../../util/fingerprint';\nimport { getBranchLastCommitTime } from '../../../../util/git';\nimport { memoize } from '../../../../util/memoize';\nimport { incCountValue, isLimitReached } from '../../../global/limits';\nimport type {\n  BranchConfig,\n  BranchUpgradeConfig,\n  PrBlockedBy,\n} from '../../../types';\nimport { embedChangelogs } from '../../changelog';\nimport { resolveBranchStatus } from '../branch/status-checks';\nimport { getPrBody } from './body';\nimport { getChangedLabels, prepareLabels, shouldUpdateLabels } from './labels';\nimport { addParticipants } from './participants';\nimport { getPrCache, setPrCache } from './pr-cache';\nimport {\n  generatePrBodyFingerprintConfig,\n  validatePrCache,\n} from './pr-fingerprint';\nimport { tryReuseAutoclosedPr } from './pr-reuse';\n\nexport function getPlatformPrOptions(\n  config: RenovateConfig & PlatformPrOptions,\n): PlatformPrOptions {\n  const usePlatformAutomerge = Boolean(\n    config.automerge &&\n      (config.automergeType === 'pr' || config.automergeType === 'branch') &&\n      config.platformAutomerge,\n  );\n\n  return {\n    autoApprove: !!config.autoApprove,\n    automergeStrategy: config.automergeStrategy,\n    azureWorkItemId: config.azureWorkItemId ?? 0,\n    bbAutoResolvePrTasks: !!config.bbAutoResolvePrTasks,\n    bbUseDefaultReviewers: !!config.bbUseDefaultReviewers,\n    gitLabIgnoreApprovals: !!config.gitLabIgnoreApprovals,\n    forkModeDisallowMaintainerEdits: !!config.forkModeDisallowMaintainerEdits,\n    usePlatformAutomerge,\n  };\n}\n\nexport interface ResultWithPr {\n  type: 'with-pr';\n  pr: Pr;\n}\n\nexport interface ResultWithoutPr {\n  type: 'without-pr';\n  prBlockedBy: PrBlockedBy;\n}\n\nexport type EnsurePrResult = ResultWithPr | ResultWithoutPr;\n\nexport function updatePrDebugData(\n  targetBranch: string,\n  labels: string[],\n  debugData: PrDebugData | undefined,\n): PrDebugData {\n  const createdByRenovateVersion = debugData?.createdInVer ?? pkg.version;\n  const updatedByRenovateVersion = pkg.version;\n\n  const updatedPrDebugData: PrDebugData = {\n    createdInVer: createdByRenovateVersion,\n    updatedInVer: updatedByRenovateVersion,\n    targetBranch,\n  };\n\n  // Add labels to the debug data object.\n  // When to add:\n  // 1. Add it when a new PR is created, i.e., when debugData is undefined.\n  // 2. Add it if an existing PR already has labels in the debug data, confirming that we can update its labels.\n  if (!debugData || is.array(debugData.labels)) {\n    updatedPrDebugData.labels = labels;\n  }\n\n  return updatedPrDebugData;\n}\n\nfunction hasNotIgnoredReviewers(pr: Pr, config: BranchConfig): boolean {\n  if (\n    is.nonEmptyArray(config.ignoreReviewers) &&\n    is.nonEmptyArray(pr.reviewers)\n  ) {\n    const ignoreReviewers = new Set(config.ignoreReviewers);\n    return (\n      pr.reviewers.filter((reviewer) => !ignoreReviewers.has(reviewer)).length >\n      0\n    );\n  }\n  return is.nonEmptyArray(pr.reviewers);\n}\n\n// Ensures that PR exists with matching title/body\nexport async function ensurePr(\n  prConfig: BranchConfig,\n): Promise<EnsurePrResult> {\n  const config: BranchConfig = { ...prConfig };\n  const filteredPrConfig = generatePrBodyFingerprintConfig(config);\n  const prBodyFingerprint = fingerprint(filteredPrConfig);\n  logger.trace({ config }, 'ensurePr');\n  // If there is a group, it will use the config of the first upgrade in the array\n  const {\n    branchName,\n    ignoreTests,\n    internalChecksAsSuccess,\n    prTitle = '',\n    upgrades,\n  } = config;\n  const getBranchStatus = memoize(() =>\n    resolveBranchStatus(branchName, !!internalChecksAsSuccess, ignoreTests),\n  );\n  const dependencyDashboardCheck =\n    config.dependencyDashboardChecks?.[config.branchName];\n  // Check if PR already exists\n  const existingPr =\n    (await platform.getBranchPr(branchName, config.baseBranch)) ??\n    (await tryReuseAutoclosedPr(branchName));\n  const prCache = getPrCache(branchName);\n  if (existingPr) {\n    logger.debug('Found existing PR');\n    if (existingPr.bodyStruct?.rebaseRequested) {\n      logger.debug('PR rebase requested, so skipping cache check');\n    } else if (prCache) {\n      logger.trace({ prCache }, 'Found existing PR cache');\n      // return if pr cache is valid and pr was not changed in the past 24hrs\n      if (validatePrCache(prCache, prBodyFingerprint)) {\n        return { type: 'with-pr', pr: existingPr };\n      }\n    } else if (config.repositoryCache === 'enabled') {\n      logger.debug('PR cache not found');\n    }\n  }\n  config.upgrades = [];\n\n  if (config.artifactErrors?.length) {\n    logger.debug('Forcing PR because of artifact errors');\n    config.forcePr = true;\n  }\n\n  if (dependencyDashboardCheck === 'approvePr') {\n    logger.debug('Forcing PR because of dependency dashboard approval');\n    config.forcePr = true;\n  }\n\n  if (!existingPr) {\n    // Only create a PR if a branch automerge has failed\n    if (\n      config.automerge === true &&\n      config.automergeType?.startsWith('branch') &&\n      !config.forcePr\n    ) {\n      logger.debug(`Branch automerge is enabled`);\n      if (\n        config.stabilityStatus !== 'yellow' &&\n        (await getBranchStatus()) === 'yellow' &&\n        is.number(config.prNotPendingHours)\n      ) {\n        logger.debug('Checking how long this branch has been pending');\n        const lastCommitTime = await getBranchLastCommitTime(branchName);\n        if (getElapsedHours(lastCommitTime) >= config.prNotPendingHours) {\n          logger.debug(\n            'Branch exceeds prNotPending hours - forcing PR creation',\n          );\n          config.forcePr = true;\n        }\n      }\n      if (config.forcePr || (await getBranchStatus()) === 'red') {\n        logger.debug(`Branch tests failed, so will create PR`);\n      } else {\n        // Branch should be automerged, so we don't want to create a PR\n        return { type: 'without-pr', prBlockedBy: 'BranchAutomerge' };\n      }\n    }\n    if (config.prCreation === 'status-success') {\n      logger.debug('Checking branch combined status');\n      if ((await getBranchStatus()) !== 'green') {\n        logger.debug(`Branch status isn't green - not creating PR`);\n        return { type: 'without-pr', prBlockedBy: 'AwaitingTests' };\n      }\n      logger.debug('Branch status success');\n    } else if (\n      config.prCreation === 'approval' &&\n      dependencyDashboardCheck !== 'approvePr'\n    ) {\n      return { type: 'without-pr', prBlockedBy: 'NeedsApproval' };\n    } else if (config.prCreation === 'not-pending' && !config.forcePr) {\n      logger.debug('Checking branch combined status');\n      if ((await getBranchStatus()) === 'yellow') {\n        logger.debug(`Branch status is yellow - checking timeout`);\n        const lastCommitTime = await getBranchLastCommitTime(branchName);\n        const elapsedHours = getElapsedHours(lastCommitTime);\n        if (\n          !dependencyDashboardCheck &&\n          ((config.stabilityStatus && config.stabilityStatus !== 'yellow') ||\n            (is.number(config.prNotPendingHours) &&\n              elapsedHours < config.prNotPendingHours))\n        ) {\n          logger.debug(\n            `Branch is ${elapsedHours} hours old - skipping PR creation`,\n          );\n          return {\n            type: 'without-pr',\n            prBlockedBy: 'AwaitingTests',\n          };\n        }\n        const prNotPendingHours = String(config.prNotPendingHours);\n        logger.debug(\n          `prNotPendingHours=${prNotPendingHours} threshold hit - creating PR`,\n        );\n      }\n      logger.debug('Branch status success');\n    }\n  }\n\n  const processedUpgrades: string[] = [];\n  const commitRepos: string[] = [];\n\n  function getRepoNameWithSourceDirectory(\n    upgrade: BranchUpgradeConfig,\n  ): string {\n    // TODO: types (#22198)\n    return `${upgrade.repoName!}${\n      upgrade.sourceDirectory ? `:${upgrade.sourceDirectory}` : ''\n    }`;\n  }\n\n  if (config.fetchChangeLogs === 'pr') {\n    // fetch changelogs when not already done;\n    await embedChangelogs(upgrades);\n  }\n\n  // Get changelog and then generate template strings\n  for (const upgrade of upgrades) {\n    // TODO: types (#22198)\n    const upgradeKey = `${upgrade.depType!}-${upgrade.depName!}-${upgrade.manager}-${upgrade.currentVersion ?? ''}-${upgrade.currentValue ?? ''}-${upgrade.newVersion ?? ''}-${upgrade.newValue ?? ''}`;\n    if (processedUpgrades.includes(upgradeKey)) {\n      continue;\n    }\n    processedUpgrades.push(upgradeKey);\n\n    const logJSON = upgrade.logJSON;\n\n    if (logJSON) {\n      if (typeof logJSON.error === 'undefined') {\n        if (logJSON.project) {\n          upgrade.repoName = logJSON.project.repository;\n        }\n        upgrade.hasReleaseNotes = false;\n        upgrade.releases = [];\n        if (\n          logJSON.hasReleaseNotes &&\n          upgrade.repoName &&\n          !commitRepos.includes(getRepoNameWithSourceDirectory(upgrade))\n        ) {\n          commitRepos.push(getRepoNameWithSourceDirectory(upgrade));\n          upgrade.hasReleaseNotes = logJSON.hasReleaseNotes;\n          if (logJSON.versions) {\n            for (const version of logJSON.versions) {\n              const release = { ...version };\n              upgrade.releases.push(release);\n            }\n          }\n        }\n      } else if (logJSON.error === 'MissingGithubToken') {\n        upgrade.prBodyNotes ??= [];\n        upgrade.prBodyNotes = [\n          ...upgrade.prBodyNotes,\n          [\n            '> :exclamation: **Important**',\n            '> ',\n            '> Release Notes retrieval for this PR were skipped because no github.com credentials were available. ',\n            '> If you are self-hosted, please see [this instruction](https://github.com/renovatebot/renovate/blob/master/docs/usage/examples/self-hosting.md#githubcom-token-for-release-notes).',\n            '\\n',\n          ].join('\\n'),\n        ];\n      }\n    }\n    config.upgrades.push(upgrade);\n  }\n\n  config.hasReleaseNotes = config.upgrades.some((upg) => upg.hasReleaseNotes);\n\n  const releaseNotesSources: string[] = [];\n  for (const upgrade of config.upgrades) {\n    let notesSourceUrl = upgrade.releases?.[0]?.releaseNotes?.notesSourceUrl;\n    // TODO: types (#22198)\n    notesSourceUrl ??= `${upgrade.sourceUrl!}${\n      upgrade.sourceDirectory ? `:${upgrade.sourceDirectory}` : ''\n    }`;\n\n    if (upgrade.hasReleaseNotes && notesSourceUrl) {\n      if (releaseNotesSources.includes(notesSourceUrl)) {\n        logger.debug(\n          { depName: upgrade.depName },\n          'Removing duplicate release notes',\n        );\n        upgrade.hasReleaseNotes = false;\n      } else {\n        releaseNotesSources.push(notesSourceUrl);\n      }\n    }\n  }\n\n  const prBody = getPrBody(\n    config,\n    {\n      debugData: updatePrDebugData(\n        config.baseBranch,\n        prepareLabels(config), // include labels in debug data\n        existingPr?.bodyStruct?.debugData,\n      ),\n    },\n    config,\n  );\n\n  try {\n    if (existingPr) {\n      logger.debug('Processing existing PR');\n\n      if (\n        !existingPr.hasAssignees &&\n        !hasNotIgnoredReviewers(existingPr, config) &&\n        config.automerge &&\n        !config.assignAutomerge &&\n        (await getBranchStatus()) === 'red'\n      ) {\n        logger.debug(`Setting assignees and reviewers as status checks failed`);\n        await addParticipants(config, existingPr);\n      }\n      // Check if existing PR needs updating\n      const existingPrTitle = stripEmojis(existingPr.title);\n      const existingPrBodyHash = existingPr.bodyStruct?.hash;\n      const newPrTitle = stripEmojis(prTitle);\n      const newPrBodyHash = hashBody(prBody);\n\n      const prInitialLabels = existingPr.bodyStruct?.debugData?.labels;\n      const prCurrentLabels = existingPr.labels;\n      const configuredLabels = prepareLabels(config);\n\n      const labelsNeedUpdate = shouldUpdateLabels(\n        prInitialLabels,\n        prCurrentLabels,\n        configuredLabels,\n      );\n\n      if (\n        existingPr?.targetBranch === config.baseBranch &&\n        existingPrTitle === newPrTitle &&\n        existingPrBodyHash === newPrBodyHash &&\n        !labelsNeedUpdate\n      ) {\n        // adds or-cache for existing PRs\n        setPrCache(branchName, prBodyFingerprint, false);\n        logger.debug(\n          `Pull Request #${existingPr.number} does not need updating`,\n        );\n        return { type: 'with-pr', pr: existingPr };\n      }\n\n      const updatePrConfig: UpdatePrConfig = {\n        number: existingPr.number,\n        prTitle,\n        prBody,\n        platformPrOptions: getPlatformPrOptions(config),\n      };\n      // PR must need updating\n      if (existingPr?.targetBranch !== config.baseBranch) {\n        logger.debug(\n          {\n            branchName,\n            oldBaseBranch: existingPr?.targetBranch,\n            newBaseBranch: config.baseBranch,\n          },\n          'PR base branch has changed',\n        );\n        updatePrConfig.targetBranch = config.baseBranch;\n      }\n\n      if (labelsNeedUpdate) {\n        logger.debug(\n          {\n            branchName,\n            prCurrentLabels,\n            configuredLabels,\n          },\n          'PR labels have changed',\n        );\n\n        // Divide labels into three categories:\n        // i) addLabels: Labels that need to be added\n        // ii) removeLabels: Labels that need to be removed\n        // iii) labels: New labels for the PR, replacing the old labels array entirely.\n        // This distinction is necessary because different platforms update labels differently\n        // For more details, refer to the updatePr function of each platform.\n\n        const [addLabels, removeLabels] = getChangedLabels(\n          prCurrentLabels,\n          configuredLabels,\n        );\n\n        // for Gitea\n        updatePrConfig.labels = configuredLabels;\n\n        // for GitHub, GitLab\n        updatePrConfig.addLabels = addLabels;\n        updatePrConfig.removeLabels = removeLabels;\n      }\n      if (existingPrTitle !== newPrTitle) {\n        logger.debug(\n          {\n            branchName,\n            oldPrTitle: existingPr.title,\n            newPrTitle: prTitle,\n          },\n          'PR title changed',\n        );\n      } else if (!config.committedFiles && !config.rebaseRequested) {\n        logger.debug(\n          {\n            prTitle,\n          },\n          'PR body changed',\n        );\n      }\n\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would update PR #${existingPr.number}`);\n        return { type: 'with-pr', pr: existingPr };\n      } else {\n        await platform.updatePr(updatePrConfig);\n        logger.info({ pr: existingPr.number, prTitle }, `PR updated`);\n        setPrCache(branchName, prBodyFingerprint, true);\n      }\n      return {\n        type: 'with-pr',\n        pr: {\n          ...existingPr,\n          bodyStruct: getPrBodyStruct(prBody),\n          title: prTitle,\n          targetBranch: config.baseBranch,\n        },\n      };\n    }\n    logger.debug({ branch: branchName, prTitle }, `Creating PR`);\n    if (config.updateType === 'rollback') {\n      logger.info('Creating Rollback PR');\n    }\n    let pr: Pr | null;\n    if (GlobalConfig.get('dryRun')) {\n      logger.info('DRY-RUN: Would create PR: ' + prTitle);\n      pr = { number: 0 } as never;\n    } else {\n      try {\n        if (\n          !dependencyDashboardCheck &&\n          isLimitReached('ConcurrentPRs', prConfig) &&\n          !config.isVulnerabilityAlert\n        ) {\n          logger.debug('Skipping PR - limit reached');\n          return { type: 'without-pr', prBlockedBy: 'RateLimited' };\n        }\n        pr = await platform.createPr({\n          sourceBranch: branchName,\n          targetBranch: config.baseBranch,\n          prTitle,\n          prBody,\n          labels: prepareLabels(config),\n          platformPrOptions: getPlatformPrOptions(config),\n          draftPR: !!config.draftPR,\n          milestone: config.milestone,\n        });\n\n        incCountValue('ConcurrentPRs');\n        incCountValue('HourlyPRs');\n        logger.info({ pr: pr?.number, prTitle }, 'PR created');\n      } catch (err) {\n        logger.debug({ err }, 'Pull request creation error');\n        if (\n          err.body?.message === 'Validation failed' &&\n          err.body.errors?.length &&\n          err.body.errors.some((error: { message?: string }) =>\n            error.message?.startsWith('A pull request already exists'),\n          )\n        ) {\n          logger.warn('A pull requests already exists');\n          return { type: 'without-pr', prBlockedBy: 'Error' };\n        }\n        if (err.statusCode === 502) {\n          logger.warn(\n            { branch: branchName },\n            'Deleting branch due to server error',\n          );\n          await scm.deleteBranch(branchName);\n        }\n        return { type: 'without-pr', prBlockedBy: 'Error' };\n      }\n    }\n    if (\n      pr &&\n      config.branchAutomergeFailureMessage &&\n      !config.suppressNotifications?.includes('branchAutomergeFailure')\n    ) {\n      const topic = 'Branch automerge failure';\n      let content =\n        'This PR was configured for branch automerge. However, this is not possible, so it has been raised as a PR instead.';\n      if (config.branchAutomergeFailureMessage === 'branch status error') {\n        content += '\\n___\\n * Branch has one or more failed status checks';\n      }\n      content = platform.massageMarkdown(content);\n      logger.debug('Adding branch automerge failure message to PR');\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(`DRY-RUN: Would add comment to PR #${pr.number}`);\n      } else {\n        await ensureComment({\n          number: pr.number,\n          topic,\n          content,\n        });\n      }\n    }\n    // Skip assign and review if automerging PR\n    if (pr) {\n      if (\n        config.automerge &&\n        !config.assignAutomerge &&\n        (await getBranchStatus()) !== 'red'\n      ) {\n        logger.debug(\n          `Skipping assignees and reviewers as automerge=${config.automerge}`,\n        );\n      } else {\n        await addParticipants(config, pr);\n      }\n      setPrCache(branchName, prBodyFingerprint, true);\n      logger.debug(`Created Pull Request #${pr.number}`);\n      return { type: 'with-pr', pr };\n    }\n  } catch (err) {\n    if (\n      err instanceof ExternalHostError ||\n      err.message === REPOSITORY_CHANGED ||\n      err.message === PLATFORM_RATE_LIMIT_EXCEEDED ||\n      err.message === PLATFORM_INTEGRATION_UNAUTHORIZED\n    ) {\n      logger.debug('Passing error up');\n      throw err;\n    }\n    logger.warn({ err, prTitle }, 'Failed to ensure PR');\n  }\n  if (existingPr) {\n    return { type: 'with-pr', pr: existingPr };\n  }\n  return { type: 'without-pr', prBlockedBy: 'Error' };\n}\n"]}