{"version":3,"file":"pr-cache.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/pr-cache.ts"],"names":[],"mappings":";;AAIA,gCAmBC;AAGD,gCAuBC;AAjDD,+CAA4C;AAC5C,kEAA6D;AAG7D,SAAgB,UAAU,CAAC,UAAkB;IAC3C,eAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC7B,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACzB,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,IAAI,CACjC,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,CAC7C,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,EAAE,OAAO,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,qBAAqB;IACrB,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;QACxB,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC;QAC9C,OAAO,OAAO,CAAC,WAAW,CAAC;IAC7B,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,uCAAuC;AACvC,SAAgB,UAAU,CACxB,UAAkB,EAClB,eAAuB,EACvB,UAAmB;IAEnB,eAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC7B,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACzB,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,IAAI,CACjC,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,CAC7C,CAAC;IAEF,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,eAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;QACvD,OAAO;IACT,CAAC;IAED,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC;IAC9C,MAAM,CAAC,OAAO,GAAG;QACf,eAAe;QACf,8DAA8D;QAC9D,UAAU,EACR,UAAU,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACpE,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from '../../../../logger';\nimport { getCache } from '../../../../util/cache/repository';\nimport type { PrCache } from '../../../../util/cache/repository/types';\n\nexport function getPrCache(branchName: string): PrCache | null {\n  logger.trace(`getPrCache()`);\n  const cache = getCache();\n  const branch = cache.branches?.find(\n    (branch) => branchName === branch.branchName,\n  );\n\n  const prCache = branch?.prCache;\n  if (!prCache) {\n    return null;\n  }\n\n  // istanbul ignore if\n  if (prCache.fingerprint) {\n    prCache.bodyFingerprint = prCache.fingerprint;\n    delete prCache.fingerprint;\n  }\n\n  return prCache;\n}\n\n// store the time a PR was last updated\nexport function setPrCache(\n  branchName: string,\n  bodyFingerprint: string,\n  prModified: boolean,\n): void {\n  logger.debug(`setPrCache()`);\n  const cache = getCache();\n  const branch = cache.branches?.find(\n    (branch) => branchName === branch.branchName,\n  );\n\n  if (!branch) {\n    logger.debug(`setPrCache(): Branch cache not present`);\n    return;\n  }\n\n  const lastEdited = branch.prCache?.lastEdited;\n  branch.prCache = {\n    bodyFingerprint,\n    // update time when creating new cache or when pr was modified\n    lastEdited:\n      lastEdited && !prModified ? lastEdited : new Date().toISOString(),\n  };\n}\n"]}