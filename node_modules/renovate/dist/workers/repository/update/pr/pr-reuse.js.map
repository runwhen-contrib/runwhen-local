{"version":3,"file":"pr-reuse.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/pr-reuse.ts"],"names":[],"mappings":";;AAQA,oDAoDC;AA5DD,iCAAiC;AACjC,sDAAyD;AACzD,+CAA4C;AAC5C,2DAAwD;AAGxD,MAAM,uBAAuB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAEjD,KAAK,UAAU,oBAAoB,CACxC,UAAkB;IAElB,IAAI,CAAC,mBAAQ,CAAC,oBAAoB,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,YAAY,GAAG,MAAM,mBAAQ,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC5E,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;IACvC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,eAAe,GAAG,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC/C,OAAO,EAAE;SACT,MAAM,EAAE;SACR,QAAQ,EAAE,CAAC;IACd,IAAI,eAAe,GAAG,uBAAuB,EAAE,CAAC;QAC9C,eAAM,CAAC,KAAK,CACV,uBAAuB,YAAY,CAAC,MAAM,8BAA8B,CACzE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,eAAM,CAAC,KAAK,CACV,EAAE,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,EAC/B,gCAAgC,CACjC,CAAC;IAEF,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,mBAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAC7D,OAAO,EAAE,CAAC;IACZ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,iDAAiD,UAAU,EAAE,CAC9D,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import { DateTime } from 'luxon';\nimport { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport { platform } from '../../../../modules/platform';\nimport type { Pr } from '../../../../modules/platform/types';\n\nconst REOPEN_THRESHOLD_MILLIS = 1000 * 60 * 60 * 24 * 7;\n\nexport async function tryReuseAutoclosedPr(\n  branchName: string,\n): Promise<Pr | null> {\n  if (!platform.tryReuseAutoclosedPr) {\n    return null;\n  }\n\n  const autoclosedPr = await platform.findPr({ branchName, state: 'closed' });\n  if (!autoclosedPr) {\n    return null;\n  }\n\n  if (!autoclosedPr.title.endsWith(' - autoclosed')) {\n    return null;\n  }\n\n  const closedAt = autoclosedPr.closedAt;\n  if (!closedAt) {\n    return null;\n  }\n\n  const closedMillisAgo = DateTime.fromISO(closedAt)\n    .diffNow()\n    .negate()\n    .toMillis();\n  if (closedMillisAgo > REOPEN_THRESHOLD_MILLIS) {\n    logger.debug(\n      `Found autoclosed PR ${autoclosedPr.number} but it is too old to reopen`,\n    );\n    return null;\n  }\n\n  logger.debug(\n    { number: autoclosedPr.number },\n    'Found autoclosed PR for branch',\n  );\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would try to reopen autoclosed PR');\n    return null;\n  }\n\n  try {\n    const pr = await platform.tryReuseAutoclosedPr(autoclosedPr);\n    return pr;\n  } catch (err) {\n    logger.debug(\n      { err },\n      `Error trying to reuse existing PR with branch=${branchName}`,\n    );\n    return null;\n  }\n}\n"]}