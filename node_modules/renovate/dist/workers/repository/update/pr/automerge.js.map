{"version":3,"file":"automerge.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/pr/automerge.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #22198\nimport { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport type { Pr } from '../../../../modules/platform';\nimport { platform } from '../../../../modules/platform';\nimport {\n  ensureComment,\n  ensureCommentRemoval,\n} from '../../../../modules/platform/comment';\nimport { scm } from '../../../../modules/platform/scm';\nimport type { BranchConfig } from '../../../types';\nimport { isScheduledNow } from '../branch/schedule';\nimport { resolveBranchStatus } from '../branch/status-checks';\n\nexport type PrAutomergeBlockReason =\n  | 'BranchModified'\n  | 'BranchNotGreen'\n  | 'Conflicted'\n  | 'DryRun'\n  | 'PlatformNotReady'\n  | 'PlatformRejection'\n  | 'off schedule';\n\nexport interface AutomergePrResult {\n  automerged: boolean;\n  branchRemoved?: boolean;\n  prAutomergeBlockReason?: PrAutomergeBlockReason;\n}\n\nexport async function checkAutoMerge(\n  pr: Pr,\n  config: BranchConfig,\n): Promise<AutomergePrResult> {\n  logger.trace({ config }, 'checkAutoMerge');\n  const {\n    branchName,\n    baseBranch,\n    automergeType,\n    automergeStrategy,\n    pruneBranchAfterAutomerge,\n    automergeComment,\n    ignoreTests,\n    rebaseRequested,\n  } = config;\n  // Return if PR not ready for automerge\n  if (!isScheduledNow(config, 'automergeSchedule')) {\n    logger.debug(`PR automerge is off schedule`);\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'off schedule',\n    };\n  }\n  const isConflicted =\n    config.isConflicted ??\n    (await scm.isBranchConflicted(baseBranch, branchName));\n  if (isConflicted) {\n    logger.debug('PR is conflicted');\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'Conflicted',\n    };\n  }\n  if (!ignoreTests && pr.cannotMergeReason) {\n    logger.debug(\n      `Platform reported that PR is not ready for merge. Reason: [${pr.cannotMergeReason}]`,\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'PlatformNotReady',\n    };\n  }\n  const branchStatus = await resolveBranchStatus(\n    branchName,\n    !!config.internalChecksAsSuccess,\n    config.ignoreTests,\n  );\n  if (branchStatus !== 'green') {\n    logger.debug(\n      `PR is not ready for merge (branch status is ${branchStatus})`,\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'BranchNotGreen',\n    };\n  }\n  if (await scm.isBranchModified(branchName, baseBranch)) {\n    logger.debug('PR is ready for automerge but has been modified');\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'BranchModified',\n    };\n  }\n  if (automergeType === 'pr-comment') {\n    // TODO: types (#22198)\n    logger.debug(`Applying automerge comment: ${automergeComment!}`);\n    // istanbul ignore if\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would add PR automerge comment to PR #${pr.number}`,\n      );\n      return {\n        automerged: false,\n        prAutomergeBlockReason: 'DryRun',\n      };\n    }\n    if (rebaseRequested) {\n      await ensureCommentRemoval({\n        type: 'by-content',\n        number: pr.number,\n        content: automergeComment!,\n      });\n    }\n    await ensureComment({\n      number: pr.number,\n      topic: null,\n      content: automergeComment!,\n    });\n    return { automerged: true, branchRemoved: false };\n  }\n  // Let's merge this\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    // TODO: types (#22198)\n    logger.info(\n      `DRY-RUN: Would merge PR #${\n        pr.number\n      } with strategy \"${automergeStrategy!}\"`,\n    );\n    return {\n      automerged: false,\n      prAutomergeBlockReason: 'DryRun',\n    };\n  }\n  // TODO: types (#22198)\n  logger.debug(`Automerging #${pr.number} with strategy ${automergeStrategy!}`);\n  const res = await platform.mergePr({\n    branchName,\n    id: pr.number,\n    strategy: automergeStrategy,\n  });\n  if (res) {\n    logger.info({ pr: pr.number, prTitle: pr.title }, 'PR automerged');\n    if (!pruneBranchAfterAutomerge) {\n      logger.info('Skipping pruning of merged branch');\n      return { automerged: true, branchRemoved: false };\n    }\n    let branchRemoved = false;\n    try {\n      await scm.deleteBranch(branchName);\n      branchRemoved = true;\n    } catch (err) /* istanbul ignore next */ {\n      logger.warn({ branchName, err }, 'Branch auto-remove failed');\n    }\n    return { automerged: true, branchRemoved };\n  }\n  return {\n    automerged: false,\n    prAutomergeBlockReason: 'PlatformRejection',\n  };\n}\n"]}