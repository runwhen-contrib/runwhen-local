{"version":3,"file":"schedule.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/schedule.ts"],"names":[],"mappings":"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","sourcesContent":["import later from '@breejs/later';\nimport is from '@sindresorhus/is';\nimport { Cron, CronPattern } from 'croner';\nimport cronstrue from 'cronstrue';\nimport { DateTime } from 'luxon';\nimport { fixShortHours } from '../../../../config/migration';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\n\nconst scheduleMappings: Record<string, string> = {\n  'every month': 'before 5am on the first day of the month',\n  monthly: 'before 5am on the first day of the month',\n};\n\nconst minutesChar = '*';\n\nfunction parseCron(scheduleText: string): CronPattern | undefined {\n  try {\n    return new CronPattern(scheduleText);\n  } catch {\n    return undefined;\n  }\n}\n\nexport function hasValidTimezone(timezone: string): [true] | [false, string] {\n  if (!DateTime.local().setZone(timezone).isValid) {\n    return [false, `Invalid schedule: Unsupported timezone ${timezone}`];\n  }\n  return [true];\n}\n\nexport function hasValidSchedule(\n  schedule: string[] | null | 'at any time',\n): [true] | [false, string] {\n  let message = '';\n  if (\n    !schedule ||\n    schedule === 'at any time' ||\n    schedule[0] === 'at any time'\n  ) {\n    return [true];\n  }\n  // check if any of the schedules fail to parse\n  const hasFailedSchedules = schedule.some((scheduleText) => {\n    const parsedCron = parseCron(scheduleText);\n    if (parsedCron !== undefined) {\n      if (\n        parsedCron.minute.filter((v) => v !== 1).length !== 0 ||\n        !scheduleText.startsWith(minutesChar)\n      ) {\n        message = `Invalid schedule: \"${scheduleText}\" has cron syntax, but doesn't have * as minutes`;\n        return true;\n      }\n\n      // It was valid cron syntax and * as minutes\n      return false;\n    }\n\n    const massagedText = fixShortHours(\n      scheduleMappings[scheduleText] || scheduleText,\n    );\n\n    const parsedSchedule = later.parse.text(massagedText);\n    if (parsedSchedule.error !== -1) {\n      message = `Invalid schedule: Failed to parse \"${scheduleText}\"`;\n      // It failed to parse\n      return true;\n    }\n    if (parsedSchedule.schedules.some((s) => s.m)) {\n      message = `Invalid schedule: \"${scheduleText}\" should not specify minutes`;\n      return true;\n    }\n    if (\n      !parsedSchedule.schedules.some(\n        (s) =>\n          !!s.M || s.d !== undefined || !!s.D || s.t_a !== undefined || !!s.t_b,\n      )\n    ) {\n      message = `Invalid schedule: \"${scheduleText}\" has no months, days of week or time of day`;\n      return true;\n    }\n    // It must be OK\n    return false;\n  });\n  if (hasFailedSchedules) {\n    // If any fail then we invalidate the whole thing\n    return [false, message];\n  }\n  return [true];\n}\n\nexport function cronMatches(\n  cron: string,\n  now: DateTime,\n  timezone?: string,\n): boolean {\n  const parsedCron: Cron = new Cron(cron, {\n    ...(timezone && { timezone }),\n    legacyMode: false,\n  });\n  // it will always parse because it is checked beforehand\n  // istanbul ignore if\n  if (!parsedCron) {\n    return false;\n  }\n\n  // return the next date which matches the cron schedule\n  const nextRun = parsedCron.nextRun();\n  // istanbul ignore if: should not happen\n  if (!nextRun) {\n    logger.warn(\n      { schedule: cron },\n      'Invalid cron schedule. No next run is possible',\n    );\n    return false;\n  }\n\n  let nextDate = DateTime.fromJSDate(nextRun);\n  if (timezone) {\n    nextDate = nextDate.setZone(timezone);\n  }\n\n  return (\n    nextDate.hour === now.hour &&\n    nextDate.day === now.day &&\n    nextDate.month === now.month\n  );\n}\n\nexport function isScheduledNow(\n  config: RenovateConfig,\n  scheduleKey: 'schedule' | 'automergeSchedule' = 'schedule',\n): boolean {\n  let configSchedule = config[scheduleKey];\n  logger.debug(\n    // TODO: types (#22198)\n    `Checking schedule(schedule=${String(configSchedule)}, tz=${config.timezone!}, now=${new Date().toISOString()})`,\n  );\n  if (\n    !configSchedule ||\n    configSchedule.length === 0 ||\n    configSchedule[0] === '' ||\n    configSchedule[0] === 'at any time'\n  ) {\n    logger.debug('No schedule defined');\n    return true;\n  }\n  if (!is.array(configSchedule)) {\n    logger.warn(\n      { schedule: configSchedule },\n      'config schedule is not an array',\n    );\n    configSchedule = [configSchedule];\n  }\n  const validSchedule = hasValidSchedule(configSchedule);\n  if (!validSchedule[0]) {\n    logger.warn(validSchedule[1]);\n    return true;\n  }\n  let now: DateTime = DateTime.local();\n  logger.trace(`now=${now.toISO()!}`);\n  // Adjust the time if repo is in a different timezone to renovate\n  if (config.timezone) {\n    logger.debug(`Found timezone: ${config.timezone}`);\n    const validTimezone = hasValidTimezone(config.timezone);\n    if (!validTimezone[0]) {\n      logger.warn(validTimezone[1]);\n      return true;\n    }\n    logger.debug('Adjusting now for timezone');\n    now = now.setZone(config.timezone);\n    logger.trace(`now=${now.toISO()!}`);\n  }\n  const currentDay = now.weekday;\n  logger.trace(`currentDay=${currentDay}`);\n  // Get the number of seconds since midnight\n  const currentSeconds = now\n    .startOf('second')\n    .diff(now.startOf('day'), 'seconds').seconds;\n  logger.trace(`currentSeconds=${currentSeconds}`);\n  // Support a single string but massage to array for processing\n  logger.debug(`Checking ${configSchedule.length} schedule(s)`);\n\n  // later is timezone agnostic (as in, it purely relies on the underlying UTC date/time that is stored in the Date),\n  // which means we have to pass it a Date that has an underlying UTC date/time in the same timezone as the schedule\n  const jsNow = now.setZone('utc', { keepLocalTime: true }).toJSDate();\n\n  // We run if any schedule matches\n  const isWithinSchedule = configSchedule.some((scheduleText) => {\n    const cronSchedule = parseCron(scheduleText);\n    if (cronSchedule) {\n      const cronScheduleSummary = cronstrue.toString(scheduleText, {\n        throwExceptionOnParseError: false,\n      });\n      logger.debug(`Human-readable summary for cron:: ${cronScheduleSummary}`);\n      // We have Cron syntax\n      if (cronMatches(scheduleText, now, config.timezone)) {\n        logger.debug(`Matches schedule ${scheduleText}`);\n        return true;\n      }\n    } else {\n      // We have Later syntax\n      const massagedText = scheduleMappings[scheduleText] || scheduleText;\n      const parsedSchedule = later.parse.text(fixShortHours(massagedText));\n      logger.debug({ parsedSchedule }, `Checking schedule \"${scheduleText}\"`);\n\n      if (later.schedule(parsedSchedule).isValid(jsNow)) {\n        logger.debug(`Matches schedule ${scheduleText}`);\n        return true;\n      }\n    }\n\n    return false;\n  });\n  if (!isWithinSchedule) {\n    logger.debug('Package not scheduled');\n    return false;\n  }\n  return true;\n}\n"]}