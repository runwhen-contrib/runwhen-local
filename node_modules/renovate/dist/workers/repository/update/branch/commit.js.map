{"version":3,"file":"commit.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/commit.ts"],"names":[],"mappings":";;AAWA,kDAwDC;;AAnED,cAAc;AACd,kEAAkC;AAClC,sDAAyD;AACzD,yEAA8E;AAC9E,+CAA4C;AAC5C,0DAAuD;AAEvD,0DAAuD;AACvD,wDAAqD;AAGrD,SAAgB,mBAAmB,CACjC,MAAoB;IAEpB,IAAI,YAAY,GAAG,MAAM,CAAC,mBAAoB,CAAC,MAAM,CACnD,MAAM,CAAC,gBAAiB,CACzB,CAAC;IACF,qBAAqB;IACrB,IAAI,YAAE,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;QAChD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE;YACxD,MAAM,mBAAmB,GAAG,MAAM,CAAC,kBAAmB,CAAC,IAAI,CACzD,CAAC,YAAY,EAAE,EAAE,CACf,IAAA,qBAAS,EAAC,YAAY,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CACzD,CAAC;YACF,IAAI,mBAAmB,EAAE,CAAC;gBACxB,eAAM,CAAC,KAAK,CAAC,aAAa,QAAQ,cAAc,CAAC,CAAC;gBAClD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IACD,IAAI,CAAC,YAAE,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;QACpC,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9E,eAAM,CAAC,KAAK,CAAC,GAAG,UAAU,oBAAoB,CAAC,CAAC;IAChD,qBAAqB;IACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,wCAAwC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1E,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IACD,qBAAqB;IACrB,IACE,MAAM,CAAC,UAAU,KAAK,IAAA,mBAAQ,EAAC,MAAM,CAAC,UAAU,CAAC;QACjD,MAAM,CAAC,aAAa,KAAK,IAAA,mBAAQ,EAAC,MAAM,CAAC,aAAa,CAAC,EACvD,CAAC;QACD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,EACjC,gDAAgD,CACjD,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,uCAAsB,CAAC,CAAC;IAC1C,CAAC;IAED,oDAAoD;IACpD,OAAO,SAAG,CAAC,aAAa,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,MAAM,CAAC,aAAc;QAC9B,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW;QAC3B,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,iCAAiC;QACjC,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,iCAAiC;QACjC,WAAW,EAAE,MAAM,CAAC,WAAW;KAChC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// TODO #22198\nimport is from '@sindresorhus/is';\nimport { GlobalConfig } from '../../../../config/global';\nimport { CONFIG_SECRETS_EXPOSED } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport type { LongCommitSha } from '../../../../util/git/types';\nimport { minimatch } from '../../../../util/minimatch';\nimport { sanitize } from '../../../../util/sanitize';\nimport type { BranchConfig } from '../../../types';\n\nexport function commitFilesToBranch(\n  config: BranchConfig,\n): Promise<LongCommitSha | null> {\n  let updatedFiles = config.updatedPackageFiles!.concat(\n    config.updatedArtifacts!,\n  );\n  // istanbul ignore if\n  if (is.nonEmptyArray(config.excludeCommitPaths)) {\n    updatedFiles = updatedFiles.filter(({ path: filePath }) => {\n      const matchesExcludePaths = config.excludeCommitPaths!.some(\n        (excludedPath) =>\n          minimatch(excludedPath, { dot: true }).match(filePath),\n      );\n      if (matchesExcludePaths) {\n        logger.debug(`Excluding ${filePath} from commit`);\n        return false;\n      }\n      return true;\n    });\n  }\n  if (!is.nonEmptyArray(updatedFiles)) {\n    logger.debug(`No files to commit`);\n    return Promise.resolve(null);\n  }\n  const fileLength = [...new Set(updatedFiles.map((file) => file.path))].length;\n  logger.debug(`${fileLength} file(s) to commit`);\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would commit files to branch ' + config.branchName);\n    return Promise.resolve(null);\n  }\n  // istanbul ignore if\n  if (\n    config.branchName !== sanitize(config.branchName) ||\n    config.commitMessage !== sanitize(config.commitMessage)\n  ) {\n    logger.debug(\n      { branchName: config.branchName },\n      'Secrets exposed in branchName or commitMessage',\n    );\n    throw new Error(CONFIG_SECRETS_EXPOSED);\n  }\n\n  // API will know whether to create new branch or not\n  return scm.commitAndPush({\n    baseBranch: config.baseBranch,\n    branchName: config.branchName,\n    files: updatedFiles,\n    message: config.commitMessage!,\n    force: !!config.forceCommit,\n    platformCommit: config.platformCommit,\n    // Only needed by Gerrit platform\n    prTitle: config.prTitle,\n    // Only needed by Gerrit platform\n    autoApprove: config.autoApprove,\n  });\n}\n"]}