{"version":3,"file":"handle-existing.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/update/branch/handle-existing.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport { logger } from '../../../../logger';\nimport type { Pr } from '../../../../modules/platform';\nimport {\n  ensureComment,\n  ensureCommentRemoval,\n} from '../../../../modules/platform/comment';\nimport { scm } from '../../../../modules/platform/scm';\nimport { emojify } from '../../../../util/emoji';\nimport * as template from '../../../../util/template';\nimport type { BranchConfig } from '../../../types';\n\nexport async function handleClosedPr(\n  config: BranchConfig,\n  pr: Pr,\n): Promise<void> {\n  if (pr.state === 'closed') {\n    let content;\n    // TODO #22198\n    const userStrings = config.userStrings!;\n    if (config.updateType === 'major') {\n      content = template.compile(userStrings.ignoreMajor, config);\n    } else if (config.updateType === 'digest') {\n      content = template.compile(userStrings.ignoreDigest, config);\n    } else {\n      content = template.compile(userStrings.ignoreOther, config);\n    }\n    content +=\n      '\\n\\nIf you accidentally closed this PR, or if you changed your mind: rename this PR to get a fresh replacement PR.';\n    if (!config.suppressNotifications!.includes('prIgnoreNotification')) {\n      if (GlobalConfig.get('dryRun')) {\n        logger.info(\n          `DRY-RUN: Would ensure closed PR comment in PR #${pr.number}`,\n        );\n      } else {\n        await ensureComment({\n          number: pr.number,\n          topic: userStrings.ignoreTopic,\n          content,\n        });\n      }\n    }\n    if (await scm.branchExists(config.branchName)) {\n      if (GlobalConfig.get('dryRun')) {\n        logger.info('DRY-RUN: Would delete branch ' + config.branchName);\n      } else {\n        await scm.deleteBranch(config.branchName);\n      }\n    }\n  }\n}\n\nexport async function handleModifiedPr(\n  config: BranchConfig,\n  pr: Pr,\n): Promise<void> {\n  if (config.suppressNotifications!.includes('prEditedNotification')) {\n    return;\n  }\n\n  const editedPrCommentTopic = 'Edited/Blocked Notification';\n  const content =\n    'Renovate will not automatically rebase this PR, because it does not recognize the last commit author and assumes somebody else may have edited the PR.\\n\\n' +\n    'You can manually request rebase by checking the rebase/retry box above.\\n\\n' +\n    emojify(' :warning: **Warning**: custom changes will be lost.');\n\n  const dependencyDashboardCheck =\n    config.dependencyDashboardChecks?.[config.branchName];\n\n  if (!!dependencyDashboardCheck || config.rebaseRequested) {\n    logger.debug('Manual rebase has been requested for PR');\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would remove edited/blocked PR comment in PR #${pr.number}`,\n      );\n      return;\n    }\n    logger.debug(`Removing edited/blocked PR comment in PR #${pr.number}`);\n    await ensureCommentRemoval({\n      type: 'by-topic',\n      number: pr.number,\n      topic: editedPrCommentTopic,\n    });\n  } else {\n    if (GlobalConfig.get('dryRun')) {\n      logger.info(\n        `DRY-RUN: Would ensure edited/blocked PR comment in PR #${pr.number}`,\n      );\n      return;\n    }\n    logger.debug('Ensuring comment to indicate that rebasing is not possible');\n    await ensureComment({\n      number: pr.number,\n      topic: editedPrCommentTopic,\n      content,\n    });\n  }\n}\n"]}