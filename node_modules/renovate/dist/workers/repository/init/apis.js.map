{"version":3,"file":"apis.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/apis.ts"],"names":[],"mappings":"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","sourcesContent":["import { configFileNames } from '../../../config/app-strings';\nimport type { RenovateConfig } from '../../../config/types';\nimport {\n  REPOSITORY_DISABLED_BY_CONFIG,\n  REPOSITORY_FORKED,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport type { RepoParams, RepoResult } from '../../../modules/platform';\nimport { platform } from '../../../modules/platform';\n\n// TODO: fix types (#22198)\nexport type WorkerPlatformConfig = RepoResult &\n  RenovateConfig &\n  Record<string, any>;\n\n// TODO #22198\nconst getDefaultConfigFile = (config: RenovateConfig): string =>\n  configFileNames.includes(config.onboardingConfigFileName!)\n    ? config.onboardingConfigFileName!\n    : configFileNames[0];\n\nasync function getJsonFile(file: string): Promise<RenovateConfig | null> {\n  try {\n    return await platform.getJsonFile(file);\n  } catch {\n    return null;\n  }\n}\n\nasync function validateOptimizeForDisabled(\n  config: RenovateConfig,\n): Promise<void> {\n  if (config.optimizeForDisabled) {\n    const renovateConfig = await getJsonFile(getDefaultConfigFile(config));\n    if (renovateConfig?.enabled === false) {\n      throw new Error(REPOSITORY_DISABLED_BY_CONFIG);\n    }\n    /*\n     * The following is to support a use case within Mend customers where:\n     *  - Bot admins configure install the bot into every repo\n     *  - Bot admins configure `extends: [':disableRenovate'] in order to skip repos by default\n     *  - Repo users can push a `renovate.json` containing `extends: [':enableRenovate']` to re-enable Renovate\n     */\n    if (config.extends?.includes(':disableRenovate')) {\n      logger.debug(\n        'Global config disables Renovate - checking renovate.json to see if it is re-enabled',\n      );\n      if (\n        renovateConfig?.extends?.includes(':enableRenovate') ??\n        renovateConfig?.ignorePresets?.includes(':disableRenovate') ??\n        renovateConfig?.enabled\n      ) {\n        logger.debug('Repository config re-enables Renovate - continuing');\n      } else {\n        logger.debug(\n          'Repository config does not re-enable Renovate - skipping',\n        );\n        throw new Error(REPOSITORY_DISABLED_BY_CONFIG);\n      }\n    }\n  }\n}\n\nasync function validateIncludeForks(config: RenovateConfig): Promise<void> {\n  if (config.forkProcessing !== 'enabled' && config.isFork) {\n    const defaultConfigFile = getDefaultConfigFile(config);\n    const repoConfig = await getJsonFile(defaultConfigFile);\n    if (!repoConfig) {\n      logger.debug(\n        `Default config file ${defaultConfigFile} not found in repo`,\n      );\n      throw new Error(REPOSITORY_FORKED);\n    }\n    if (repoConfig.includeForks) {\n      logger.debug(\n        `Found legacy setting includeForks in ${defaultConfigFile} - continuing`,\n      );\n      return;\n    }\n    if (repoConfig.forkProcessing === 'enabled') {\n      logger.debug(\n        `Found forkProcessing=enabled in ${defaultConfigFile} - continuing`,\n      );\n      return;\n    }\n    logger.debug(\n      { config: repoConfig },\n      `Default config file ${defaultConfigFile} found in repo but does not enable forks`,\n    );\n    throw new Error(REPOSITORY_FORKED);\n  }\n}\n\n// TODO: fix types (#22198)\nasync function getPlatformConfig(\n  config: RepoParams,\n): Promise<WorkerPlatformConfig> {\n  const platformConfig = await platform.initRepo(config);\n  return {\n    ...config,\n    ...platformConfig,\n  };\n}\n\n// TODO: fix types (#22198)\nexport async function initApis(\n  input: RenovateConfig,\n): Promise<WorkerPlatformConfig> {\n  let config: WorkerPlatformConfig = { ...input } as never;\n  config = await getPlatformConfig(config as never);\n  await validateOptimizeForDisabled(config);\n  await validateIncludeForks(config);\n  return config;\n}\n"]}