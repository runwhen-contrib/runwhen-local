{"version":3,"file":"merge.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/merge.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { mergeChildConfig } from '../../../config';\nimport { configFileNames } from '../../../config/app-strings';\nimport { decryptConfig } from '../../../config/decrypt';\nimport { migrateAndValidate } from '../../../config/migrate-validate';\nimport { migrateConfig } from '../../../config/migration';\nimport { parseFileConfig } from '../../../config/parse';\nimport * as presets from '../../../config/presets';\nimport { applySecretsToConfig } from '../../../config/secrets';\nimport type { AllConfig, RenovateConfig } from '../../../config/types';\nimport {\n  CONFIG_VALIDATION,\n  REPOSITORY_CHANGED,\n} from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport * as npmApi from '../../../modules/datasource/npm';\nimport { platform } from '../../../modules/platform';\nimport { scm } from '../../../modules/platform/scm';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport { getCache } from '../../../util/cache/repository';\nimport { parseJson } from '../../../util/common';\nimport { setUserEnv } from '../../../util/env';\nimport { readLocalFile } from '../../../util/fs';\nimport * as hostRules from '../../../util/host-rules';\nimport * as queue from '../../../util/http/queue';\nimport * as throttle from '../../../util/http/throttle';\nimport { maskToken } from '../../../util/mask';\nimport { regEx } from '../../../util/regex';\nimport { parseAndValidateOrExit } from '../../global/config/parse/env';\nimport { getOnboardingConfig } from '../onboarding/branch/config';\nimport { getDefaultConfigFileName } from '../onboarding/branch/create';\nimport {\n  getOnboardingConfigFromCache,\n  getOnboardingFileNameFromCache,\n  setOnboardingConfigDetails,\n} from '../onboarding/branch/onboarding-branch-cache';\nimport { OnboardingState } from '../onboarding/common';\nimport type { RepoFileConfig } from './types';\n\nexport async function detectConfigFile(): Promise<string | null> {\n  const fileList = await scm.getFileList();\n  for (const fileName of configFileNames) {\n    if (fileName === 'package.json') {\n      try {\n        const pJson = JSON.parse(\n          (await readLocalFile('package.json', 'utf8'))!,\n        );\n        if (pJson.renovate) {\n          logger.warn(\n            'Using package.json for Renovate config is deprecated - please use a dedicated configuration file instead',\n          );\n          return 'package.json';\n        }\n      } catch {\n        // Do nothing\n      }\n    } else if (fileList.includes(fileName)) {\n      return fileName;\n    }\n  }\n  return null;\n}\n\nexport async function detectRepoFileConfig(): Promise<RepoFileConfig> {\n  const cache = getCache();\n  let { configFileName } = cache;\n  if (is.nonEmptyString(configFileName)) {\n    let configFileRaw: string | null;\n    try {\n      configFileRaw = await platform.getRawFile(configFileName);\n    } catch (err) {\n      // istanbul ignore if\n      if (err instanceof ExternalHostError) {\n        throw err;\n      }\n      configFileRaw = null;\n    }\n    if (configFileRaw) {\n      let configFileParsed = parseJson(configFileRaw, configFileName) as any;\n      if (configFileName === 'package.json') {\n        configFileParsed = configFileParsed.renovate;\n      }\n      return { configFileName, configFileParsed };\n    } else {\n      logger.debug('Existing config file no longer exists');\n      delete cache.configFileName;\n    }\n  }\n\n  if (OnboardingState.onboardingCacheValid) {\n    configFileName = getOnboardingFileNameFromCache();\n  } else {\n    configFileName = (await detectConfigFile()) ?? undefined;\n  }\n\n  if (!configFileName) {\n    logger.debug('No renovate config file found');\n    cache.configFileName = '';\n    return {};\n  }\n  cache.configFileName = configFileName;\n  logger.debug(`Found ${configFileName} config file`);\n  // TODO #22198\n  let configFileParsed: any;\n  let configFileRaw: string | undefined | null;\n\n  if (OnboardingState.onboardingCacheValid) {\n    const cachedConfig = getOnboardingConfigFromCache();\n    const parsedConfig = cachedConfig ? JSON.parse(cachedConfig) : undefined;\n    if (parsedConfig) {\n      setOnboardingConfigDetails(configFileName, JSON.stringify(parsedConfig));\n      return { configFileName, configFileParsed: parsedConfig };\n    }\n  }\n\n  if (configFileName === 'package.json') {\n    // We already know it parses\n    configFileParsed = JSON.parse(\n      // TODO #22198\n      (await readLocalFile('package.json', 'utf8'))!,\n    ).renovate;\n    if (is.string(configFileParsed)) {\n      logger.debug('Massaging string renovate config to extends array');\n      configFileParsed = { extends: [configFileParsed] };\n    }\n    logger.debug({ config: configFileParsed }, 'package.json>renovate config');\n  } else {\n    configFileRaw = await readLocalFile(configFileName, 'utf8');\n    // istanbul ignore if\n    if (!is.string(configFileRaw)) {\n      logger.warn({ configFileName }, 'Null contents when reading config file');\n      throw new Error(REPOSITORY_CHANGED);\n    }\n    // istanbul ignore if\n    if (!configFileRaw.length) {\n      configFileRaw = '{}';\n    }\n\n    const parseResult = parseFileConfig(configFileName, configFileRaw);\n\n    if (!parseResult.success) {\n      return {\n        configFileName,\n        configFileParseError: {\n          validationError: parseResult.validationError,\n          validationMessage: parseResult.validationMessage,\n        },\n      };\n    }\n    configFileParsed = parseResult.parsedContents;\n    logger.debug(\n      { fileName: configFileName, config: configFileParsed },\n      'Repository config',\n    );\n  }\n\n  setOnboardingConfigDetails(configFileName, JSON.stringify(configFileParsed));\n  return { configFileName, configFileParsed };\n}\n\nexport function checkForRepoConfigError(repoConfig: RepoFileConfig): void {\n  if (!repoConfig.configFileParseError) {\n    return;\n  }\n  const error = new Error(CONFIG_VALIDATION);\n  error.validationSource = repoConfig.configFileName;\n  error.validationError = repoConfig.configFileParseError.validationError;\n  error.validationMessage = repoConfig.configFileParseError.validationMessage;\n  throw error;\n}\n\n// Check for repository config\nexport async function mergeRenovateConfig(\n  config: RenovateConfig,\n): Promise<RenovateConfig> {\n  let returnConfig = { ...config };\n  let repoConfig: RepoFileConfig = {};\n  if (config.requireConfig !== 'ignored') {\n    repoConfig = await detectRepoFileConfig();\n  }\n  if (!repoConfig.configFileParsed && config.mode === 'silent') {\n    logger.debug(\n      'When mode=silent and repo has no config file, we use the onboarding config as repo config',\n    );\n    const configFileName = getDefaultConfigFileName(config);\n    repoConfig = {\n      configFileName,\n      configFileParsed: await getOnboardingConfig(config),\n    };\n  }\n  const configFileParsed = repoConfig?.configFileParsed ?? {};\n  const configFileAndEnv = await mergeStaticRepoEnvConfig(\n    configFileParsed,\n    process.env,\n  );\n  if (is.nonEmptyArray(returnConfig.extends)) {\n    configFileAndEnv.extends = [\n      ...returnConfig.extends,\n      ...(configFileAndEnv.extends ?? []),\n    ];\n    delete returnConfig.extends;\n  }\n  checkForRepoConfigError(repoConfig);\n  const migratedConfig = await migrateAndValidate(config, configFileAndEnv);\n  if (migratedConfig.errors?.length) {\n    const error = new Error(CONFIG_VALIDATION);\n    error.validationSource = repoConfig.configFileName;\n    error.validationError =\n      'The renovate configuration file contains some invalid settings';\n    error.validationMessage = migratedConfig.errors\n      .map((e) => e.message)\n      .join(', ');\n    throw error;\n  }\n  if (migratedConfig.warnings) {\n    returnConfig.warnings = [\n      ...(returnConfig.warnings ?? []),\n      ...migratedConfig.warnings,\n    ];\n  }\n  delete migratedConfig.errors;\n  delete migratedConfig.warnings;\n  // TODO #22198\n  const repository = config.repository!;\n  // Decrypt before resolving in case we need npm authentication for any presets\n  const decryptedConfig = await decryptConfig(migratedConfig, repository);\n  setNpmTokenInNpmrc(decryptedConfig);\n  // istanbul ignore if\n  if (is.string(decryptedConfig.npmrc)) {\n    logger.debug('Found npmrc in decrypted config - setting');\n    npmApi.setNpmrc(decryptedConfig.npmrc);\n  }\n  // Decrypt after resolving in case the preset contains npm authentication instead\n  let resolvedConfig = await decryptConfig(\n    await presets.resolveConfigPresets(\n      decryptedConfig,\n      config,\n      config.ignorePresets,\n    ),\n    repository,\n  );\n  logger.trace({ config: resolvedConfig }, 'resolved config');\n  const migrationResult = migrateConfig(resolvedConfig);\n  if (migrationResult.isMigrated) {\n    logger.debug('Resolved config needs migrating');\n    logger.trace({ config: resolvedConfig }, 'resolved config after migrating');\n    resolvedConfig = migrationResult.migratedConfig;\n  }\n  setNpmTokenInNpmrc(resolvedConfig);\n  // istanbul ignore if\n  if (is.string(resolvedConfig.npmrc)) {\n    logger.debug(\n      'Ignoring any .npmrc files in repository due to configured npmrc',\n    );\n    npmApi.setNpmrc(resolvedConfig.npmrc);\n  }\n  resolvedConfig = applySecretsToConfig(\n    resolvedConfig,\n    mergeChildConfig(config.secrets ?? {}, resolvedConfig.secrets ?? {}),\n  );\n  // istanbul ignore if\n  if (resolvedConfig.hostRules) {\n    logger.debug('Setting hostRules from config');\n    for (const rule of resolvedConfig.hostRules) {\n      try {\n        hostRules.add(rule);\n      } catch (err) {\n        logger.warn(\n          { err, config: rule },\n          'Error setting hostRule from config',\n        );\n      }\n    }\n    // host rules can change concurrency\n    queue.clear();\n    throttle.clear();\n    delete resolvedConfig.hostRules;\n  }\n  returnConfig = mergeChildConfig(returnConfig, resolvedConfig);\n  returnConfig = await presets.resolveConfigPresets(returnConfig, config);\n  returnConfig.renovateJsonPresent = true;\n  // istanbul ignore if\n  if (returnConfig.ignorePaths?.length) {\n    logger.debug(\n      { ignorePaths: returnConfig.ignorePaths },\n      `Found repo ignorePaths`,\n    );\n  }\n\n  setUserEnv(returnConfig.env);\n  delete returnConfig.env;\n\n  return returnConfig;\n}\n\n/** needed when using portal secrets for npmToken */\nexport function setNpmTokenInNpmrc(config: RenovateConfig): void {\n  if (!is.string(config.npmToken)) {\n    return;\n  }\n\n  const token = config.npmToken;\n  logger.debug({ npmToken: maskToken(token) }, 'Migrating npmToken to npmrc');\n\n  if (!is.string(config.npmrc)) {\n    logger.debug('Adding npmrc to config');\n    config.npmrc = `//registry.npmjs.org/:_authToken=${token}\\n`;\n    delete config.npmToken;\n    return;\n  }\n\n  if (config.npmrc.includes(`\\${NPM_TOKEN}`)) {\n    logger.debug(`Replacing \\${NPM_TOKEN} with npmToken`);\n    config.npmrc = config.npmrc.replace(regEx(/\\${NPM_TOKEN}/g), token);\n  } else {\n    logger.debug('Appending _authToken= to end of existing npmrc');\n    config.npmrc = config.npmrc.replace(\n      regEx(/\\n?$/),\n      `\\n_authToken=${token}\\n`,\n    );\n  }\n\n  delete config.npmToken;\n}\n\nexport async function mergeStaticRepoEnvConfig(\n  config: AllConfig,\n  env: NodeJS.ProcessEnv,\n): Promise<AllConfig> {\n  const repoEnvConfig = await parseAndValidateOrExit(\n    env,\n    'RENOVATE_STATIC_REPO_CONFIG',\n  );\n\n  if (!is.nonEmptyObject(repoEnvConfig)) {\n    return config;\n  }\n\n  // merge extends\n  if (is.nonEmptyArray(repoEnvConfig.extends)) {\n    config.extends = [...repoEnvConfig.extends, ...(config.extends ?? [])];\n    delete repoEnvConfig.extends;\n  }\n  // renovate repo config overrides RENOVATE_STATIC_REPO_CONFIG\n  return mergeChildConfig(repoEnvConfig, config);\n}\n"]}