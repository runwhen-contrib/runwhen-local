{"version":3,"file":"vulnerability.js","sourceRoot":"","sources":["../../../../lib/workers/repository/init/vulnerability.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PackageRule, RenovateConfig } from '../../../config/types';\nimport { NO_VULNERABILITY_ALERTS } from '../../../constants/error-messages';\nimport { logger } from '../../../logger';\nimport { CrateDatasource } from '../../../modules/datasource/crate';\nimport { GoDatasource } from '../../../modules/datasource/go';\nimport { MavenDatasource } from '../../../modules/datasource/maven';\nimport { NpmDatasource } from '../../../modules/datasource/npm';\nimport { NugetDatasource } from '../../../modules/datasource/nuget';\nimport { PackagistDatasource } from '../../../modules/datasource/packagist';\nimport { PypiDatasource } from '../../../modules/datasource/pypi';\nimport { RubygemsDatasource } from '../../../modules/datasource/rubygems';\nimport { platform } from '../../../modules/platform';\nimport * as allVersioning from '../../../modules/versioning';\nimport * as composerVersioning from '../../../modules/versioning/composer';\nimport * as mavenVersioning from '../../../modules/versioning/maven';\nimport * as npmVersioning from '../../../modules/versioning/npm';\nimport * as pep440Versioning from '../../../modules/versioning/pep440';\nimport * as rubyVersioning from '../../../modules/versioning/ruby';\nimport * as semverVersioning from '../../../modules/versioning/semver';\nimport type { SecurityAdvisory } from '../../../types';\nimport { sanitizeMarkdown } from '../../../util/markdown';\n\ntype Datasource = string;\ntype DependencyName = string;\ntype FileName = string;\n\ntype CombinedAlert = Record<\n  FileName,\n  Record<\n    Datasource,\n    Record<\n      DependencyName,\n      {\n        advisories: SecurityAdvisory[];\n        fileType?: string;\n        firstPatchedVersion?: string;\n      }\n    >\n  >\n>;\n\nexport function getFixedVersionByDatasource(\n  fixedVersion: string,\n  datasource: string,\n): string {\n  if (datasource === MavenDatasource.id || datasource === NugetDatasource.id) {\n    return `[${fixedVersion},)`;\n  }\n\n  // crates.io, Go, Hackage, Hex, npm, RubyGems, PyPI\n  return `>= ${fixedVersion}`;\n}\n\n// TODO can return `null` and `undefined` (#22198)\nexport async function detectVulnerabilityAlerts(\n  input: RenovateConfig,\n): Promise<RenovateConfig> {\n  if (!input?.vulnerabilityAlerts) {\n    return input;\n  }\n  if (input.vulnerabilityAlerts.enabled === false) {\n    logger.debug('Vulnerability alerts are disabled');\n    return input;\n  }\n  const alerts = await platform.getVulnerabilityAlerts?.();\n  if (!alerts?.length) {\n    logger.debug('No vulnerability alerts found');\n    if (input.vulnerabilityAlertsOnly) {\n      throw new Error(NO_VULNERABILITY_ALERTS);\n    }\n    return input;\n  }\n  const config = { ...input };\n  const versionings: Record<string, string> = {\n    'github-tags': semverVersioning.id,\n    go: semverVersioning.id,\n    packagist: composerVersioning.id,\n    maven: mavenVersioning.id,\n    npm: npmVersioning.id,\n    nuget: semverVersioning.id,\n    pypi: pep440Versioning.id,\n    rubygems: rubyVersioning.id,\n  };\n  const combinedAlerts: CombinedAlert = {};\n  for (const alert of alerts) {\n    try {\n      if (alert.dismissed_reason) {\n        continue;\n      }\n      if (!alert.security_vulnerability?.first_patched_version) {\n        logger.debug(\n          { alert },\n          'Vulnerability alert has no firstPatchedVersion - skipping',\n        );\n        continue;\n      }\n      const datasourceMapping: Record<string, string> = {\n        composer: PackagistDatasource.id,\n        go: GoDatasource.id,\n        maven: MavenDatasource.id,\n        npm: NpmDatasource.id,\n        nuget: NugetDatasource.id,\n        pip: PypiDatasource.id,\n        rubygems: RubygemsDatasource.id,\n        rust: CrateDatasource.id,\n      };\n      const datasource =\n        datasourceMapping[alert.security_vulnerability.package.ecosystem];\n      const depName = alert.security_vulnerability.package.name;\n      const fileName = alert.dependency.manifest_path;\n      const fileType = fileName.split('/').pop();\n      const firstPatchedVersion =\n        alert.security_vulnerability.first_patched_version.identifier;\n      const advisory = alert.security_advisory;\n\n      combinedAlerts[fileName] ??= {};\n      combinedAlerts[fileName][datasource] ??= {};\n      combinedAlerts[fileName][datasource][depName] ??= {\n        advisories: [],\n      };\n      const alertDetails = combinedAlerts[fileName][datasource][depName];\n      alertDetails.advisories.push(advisory);\n      const versioningApi = allVersioning.get(versionings[datasource]);\n      if (versioningApi.isVersion(firstPatchedVersion)) {\n        if (\n          !alertDetails.firstPatchedVersion ||\n          versioningApi.isGreaterThan(\n            firstPatchedVersion,\n            alertDetails.firstPatchedVersion,\n          )\n        ) {\n          alertDetails.firstPatchedVersion = firstPatchedVersion;\n        }\n      } else {\n        logger.debug('Invalid firstPatchedVersion: ' + firstPatchedVersion);\n      }\n      alertDetails.fileType = fileType;\n    } catch (err) {\n      logger.warn({ err }, 'Error parsing vulnerability alert');\n    }\n  }\n  const alertPackageRules: PackageRule[] = [];\n  config.remediations = {} as never;\n  for (const [fileName, files] of Object.entries(combinedAlerts)) {\n    for (const [datasource, dependencies] of Object.entries(files)) {\n      for (const [depName, val] of Object.entries(dependencies)) {\n        let prBodyNotes: string[] = [];\n        try {\n          prBodyNotes = ['### GitHub Vulnerability Alerts'].concat(\n            val.advisories.map((advisory) => {\n              const identifiers = advisory.identifiers;\n              const description = advisory.description;\n              let content = '#### ';\n              let heading: string;\n              if (identifiers.some((id) => id.type === 'CVE')) {\n                heading = identifiers\n                  .filter((id) => id.type === 'CVE')\n                  .map((id) => id.value)\n                  .join(' / ');\n              } else {\n                heading = identifiers.map((id) => id.value).join(' / ');\n              }\n              if (advisory.references?.length) {\n                heading = `[${heading}](${advisory.references[0].url})`;\n              }\n              content += heading;\n              content += '\\n\\n';\n\n              content += sanitizeMarkdown(description);\n              return content;\n            }),\n          );\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn({ err }, 'Error generating vulnerability PR notes');\n        }\n        // TODO: types (#22198)\n        const matchFileNames =\n          datasource === GoDatasource.id\n            ? [fileName.replace('go.sum', 'go.mod')]\n            : [fileName];\n        let matchRule: PackageRule = {\n          matchDatasources: [datasource],\n          matchPackageNames: [depName],\n          matchFileNames,\n        };\n\n        let matchCurrentVersion = `< ${val.firstPatchedVersion}`;\n        if (\n          datasource === MavenDatasource.id ||\n          datasource === NugetDatasource.id\n        ) {\n          matchCurrentVersion = `(,${val.firstPatchedVersion})`;\n        }\n\n        // Remediate only direct dependencies\n        matchRule = {\n          ...matchRule,\n          matchCurrentVersion,\n          vulnerabilityFixVersion: val.firstPatchedVersion,\n          prBodyNotes,\n          isVulnerabilityAlert: true,\n          force: {\n            ...config.vulnerabilityAlerts,\n          },\n        };\n        alertPackageRules.push(matchRule);\n      }\n    }\n  }\n  logger.debug({ alertPackageRules }, 'alert package rules');\n  config.packageRules = (config.packageRules ?? []).concat(alertPackageRules);\n  return config;\n}\n"]}