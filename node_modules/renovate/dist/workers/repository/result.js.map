{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../lib/workers/repository/result.ts"],"names":[],"mappings":";;AAsCA,sCAsDC;AA1FD,mEAmBwC;AACxC,yCAAsC;AAgBtC,SAAgB,aAAa,CAC3B,MAAsB,EACtB,GAAW;IAEX,MAAM,gBAAgB,GAAG;QACvB,4CAA2B;QAC3B,oCAAmB;QACnB,mCAAkB;QAClB,6CAA4B;QAC5B,oCAAmB;QACnB,8CAA6B;QAC7B,iCAAgB;QAChB,4CAA2B;QAC3B,kCAAiB;QACjB,oCAAmB;QACnB,qCAAoB;QACpB,qCAAoB;QACpB,4CAA2B;QAC3B,mCAAkB;QAClB,uCAAsB;KACvB,CAAC;IACF,MAAM,eAAe,GAAG;QACtB,uCAAsB;QACtB,kCAAiB;QACjB,wCAAuB;KACxB,CAAC;IACF,IAAI,MAAqB,CAAC;IAC1B,IAAI,OAA4B,CAAC;IACjC,IAAI,SAA8B,CAAC;IACnC,uBAAuB;IACvB,IAAI,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QACnC,MAAM,GAAG,UAAU,CAAC;QACpB,OAAO,GAAG,KAAK,CAAC;IAClB,CAAC;SAAM,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;QAClC,MAAM,GAAG,WAAW,CAAC;QACrB,OAAO,GAAG,IAAI,CAAC;QACf,SAAS,GAAG,IAAI,CAAC;IACnB,CAAC;SAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;QACnE,MAAM,GAAG,WAAW,CAAC;QACrB,OAAO,GAAG,IAAI,CAAC;QACf,SAAS,GAAG,IAAI,CAAC;IACnB,CAAC;SAAM,IAAI,MAAM,CAAC,eAAe,KAAK,KAAK,EAAE,CAAC;QAC5C,MAAM,GAAG,YAAY,CAAC;QACtB,OAAO,GAAG,IAAI,CAAC;QACf,SAAS,GAAG,KAAK,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,eAAM,CAAC,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;QACpC,MAAM,GAAG,SAAS,CAAC;IACrB,CAAC;IACD,eAAM,CAAC,KAAK;IACV,uBAAuB;IACvB,sBAAsB,GAAG,aAAa,MAAM,cAAc,OAAQ,gBAAgB,SAAU,EAAE,CAC/F,CAAC;IACF,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AAC7C,CAAC","sourcesContent":["import type { RenovateConfig } from '../../config/types';\n\nimport {\n  CONFIG_SECRETS_EXPOSED,\n  CONFIG_VALIDATION,\n  MISSING_API_CREDENTIALS,\n  REPOSITORY_ACCESS_FORBIDDEN,\n  REPOSITORY_ARCHIVED,\n  REPOSITORY_BLOCKED,\n  REPOSITORY_CLOSED_ONBOARDING,\n  REPOSITORY_DISABLED,\n  REPOSITORY_DISABLED_BY_CONFIG,\n  REPOSITORY_EMPTY,\n  REPOSITORY_FORKED,\n  REPOSITORY_FORK_MODE_FORKED,\n  REPOSITORY_MIRRORED,\n  REPOSITORY_NOT_FOUND,\n  REPOSITORY_NO_CONFIG,\n  REPOSITORY_NO_PACKAGE_FILES,\n  REPOSITORY_RENAMED,\n  REPOSITORY_UNINITIATED,\n} from '../../constants/error-messages';\nimport { logger } from '../../logger';\n\nexport type ProcessStatus =\n  | 'disabled'\n  | 'onboarded'\n  | 'activated'\n  | 'onboarding'\n  | 'unknown';\n\nexport interface ProcessResult {\n  res: string;\n  status: ProcessStatus;\n  enabled: boolean | undefined;\n  onboarded: boolean | undefined;\n}\n\nexport function processResult(\n  config: RenovateConfig,\n  res: string,\n): ProcessResult {\n  const disabledStatuses = [\n    REPOSITORY_ACCESS_FORBIDDEN,\n    REPOSITORY_ARCHIVED,\n    REPOSITORY_BLOCKED,\n    REPOSITORY_CLOSED_ONBOARDING,\n    REPOSITORY_DISABLED,\n    REPOSITORY_DISABLED_BY_CONFIG,\n    REPOSITORY_EMPTY,\n    REPOSITORY_FORK_MODE_FORKED,\n    REPOSITORY_FORKED,\n    REPOSITORY_MIRRORED,\n    REPOSITORY_NOT_FOUND,\n    REPOSITORY_NO_CONFIG,\n    REPOSITORY_NO_PACKAGE_FILES,\n    REPOSITORY_RENAMED,\n    REPOSITORY_UNINITIATED,\n  ];\n  const enabledStatuses = [\n    CONFIG_SECRETS_EXPOSED,\n    CONFIG_VALIDATION,\n    MISSING_API_CREDENTIALS,\n  ];\n  let status: ProcessStatus;\n  let enabled: boolean | undefined;\n  let onboarded: boolean | undefined;\n  // istanbul ignore next\n  if (disabledStatuses.includes(res)) {\n    status = 'disabled';\n    enabled = false;\n  } else if (config.repoIsActivated) {\n    status = 'activated';\n    enabled = true;\n    onboarded = true;\n  } else if (enabledStatuses.includes(res) || config.repoIsOnboarded) {\n    status = 'onboarded';\n    enabled = true;\n    onboarded = true;\n  } else if (config.repoIsOnboarded === false) {\n    status = 'onboarding';\n    enabled = true;\n    onboarded = false;\n  } else {\n    logger.debug(`Unknown res: ${res}`);\n    status = 'unknown';\n  }\n  logger.debug(\n    // TODO: types (#22198)\n    `Repository result: ${res}, status: ${status}, enabled: ${enabled!}, onboarded: ${onboarded!}`,\n  );\n  return { res, status, enabled, onboarded };\n}\n"]}