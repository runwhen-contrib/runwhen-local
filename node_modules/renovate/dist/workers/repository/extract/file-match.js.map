{"version":3,"file":"file-match.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/file-match.ts"],"names":[],"mappings":";;AAKA,4CAcC;AAED,gDAeC;AAED,kDAUC;AAED,4CAiBC;AAlED,4CAAyC;AACzC,uDAAoD;AACpD,+CAA4C;AAE5C,SAAgB,gBAAgB,CAC9B,QAAkB,EAClB,YAAsB;IAEtB,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,CAAC;QAC1B,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAC9B,YAAY,CAAC,IAAI,CACf,CAAC,WAAW,EAAE,EAAE,CACd,IAAI,KAAK,WAAW;QACpB,IAAA,qBAAS,EAAC,WAAW,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CACpD,CACF,CAAC;AACJ,CAAC;AAED,SAAgB,kBAAkB,CAChC,QAAkB,EAClB,WAAqB;IAErB,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC;QACzB,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,QAAQ,CAAC,MAAM,CACpB,CAAC,IAAI,EAAE,EAAE,CACP,CAAC,WAAW,CAAC,IAAI,CACf,CAAC,UAAU,EAAE,EAAE,CACb,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACzB,IAAA,qBAAS,EAAC,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CACnD,CACJ,CAAC;AACJ,CAAC;AAED,SAAgB,mBAAmB,CACjC,MAAsB,EACtB,QAAkB;IAElB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;IAC7C,cAAc;IAEd,IAAI,YAAY,GAAG,gBAAgB,CAAC,QAAQ,EAAE,YAAa,CAAC,CAAC;IAC7D,YAAY,GAAG,kBAAkB,CAAC,YAAY,EAAE,WAAY,CAAC,CAAC;IAC9D,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAgB,gBAAgB,CAC9B,MAAsB,EACtB,QAAkB;IAElB,MAAM,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACvD,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;IACtC,IAAI,YAAY,GAAa,EAAE,CAAC;IAChC,uBAAuB;IACvB,KAAK,MAAM,KAAK,IAAI,SAAU,EAAE,CAAC;QAC/B,eAAM,CAAC,KAAK,CAAC,qBAAqB,KAAK,gBAAgB,OAAQ,EAAE,CAAC,CAAC;QACnE,MAAM,EAAE,GAAG,IAAA,aAAK,EAAC,KAAK,CAAC,CAAC;QACxB,YAAY,GAAG,YAAY,CAAC,MAAM,CAChC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC,CAAC;IACJ,CAAC;IACD,wBAAwB;IACxB,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC3C,CAAC","sourcesContent":["import type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { minimatch } from '../../../util/minimatch';\nimport { regEx } from '../../../util/regex';\n\nexport function getIncludedFiles(\n  fileList: string[],\n  includePaths: string[],\n): string[] {\n  if (!includePaths?.length) {\n    return [...fileList];\n  }\n  return fileList.filter((file) =>\n    includePaths.some(\n      (includePath) =>\n        file === includePath ||\n        minimatch(includePath, { dot: true }).match(file),\n    ),\n  );\n}\n\nexport function filterIgnoredFiles(\n  fileList: string[],\n  ignorePaths: string[],\n): string[] {\n  if (!ignorePaths?.length) {\n    return [...fileList];\n  }\n  return fileList.filter(\n    (file) =>\n      !ignorePaths.some(\n        (ignorePath) =>\n          file.includes(ignorePath) ||\n          minimatch(ignorePath, { dot: true }).match(file),\n      ),\n  );\n}\n\nexport function getFilteredFileList(\n  config: RenovateConfig,\n  fileList: string[],\n): string[] {\n  const { includePaths, ignorePaths } = config;\n  // TODO #22198\n\n  let filteredList = getIncludedFiles(fileList, includePaths!);\n  filteredList = filterIgnoredFiles(filteredList, ignorePaths!);\n  return filteredList;\n}\n\nexport function getMatchingFiles(\n  config: RenovateConfig,\n  allFiles: string[],\n): string[] {\n  const fileList = getFilteredFileList(config, allFiles);\n  const { fileMatch, manager } = config;\n  let matchedFiles: string[] = [];\n  // TODO: types (#22198)\n  for (const match of fileMatch!) {\n    logger.debug(`Using file match: ${match} for manager ${manager!}`);\n    const re = regEx(match);\n    matchedFiles = matchedFiles.concat(\n      fileList.filter((file) => re.test(file)),\n    );\n  }\n  // filter out duplicates\n  return [...new Set(matchedFiles)].sort();\n}\n"]}