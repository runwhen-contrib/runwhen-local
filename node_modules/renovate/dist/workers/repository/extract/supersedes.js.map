{"version":3,"file":"supersedes.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/supersedes.ts"],"names":[],"mappings":";;AAIA,8DA+BC;;AAnCD,kEAAkC;AAClC,sDAA+C;AAG/C,SAAgB,yBAAyB,CACvC,cAAgC;IAEhC,KAAK,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,SAAS;QACX,CAAC;QACD,MAAM,kBAAkB,GAAG,IAAA,aAAG,EAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;QAC9D,IAAI,YAAE,CAAC,aAAa,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACzC,MAAM,2BAA2B,GAAG,YAAY,CAAC,GAAG,CAClD,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,CACzC,CAAC;YACF,KAAK,MAAM,iBAAiB,IAAI,kBAAkB,EAAE,CAAC;gBACnD,MAAM,wBAAwB,GAAG,cAAc,CAAC,IAAI,CAClD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,KAAK,iBAAiB,CACjD,CAAC;gBACF,IAAI,wBAAwB,EAAE,YAAY,EAAE,CAAC;oBAC3C,wBAAwB,CAAC,YAAY;wBACnC,wBAAwB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE;4BAC3D,IACE,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM;gCAC9B,2BAA2B,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,EAC7D,CAAC;gCACD,OAAO,KAAK,CAAC;4BACf,CAAC;4BACD,OAAO,IAAI,CAAC;wBACd,CAAC,CAAC,CAAC;gBACP,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { get } from '../../../modules/manager';\nimport type { ExtractResults } from './types';\n\nexport function processSupersedesManagers(\n  extractResults: ExtractResults[],\n): void {\n  for (const { manager, packageFiles } of extractResults) {\n    if (!packageFiles) {\n      continue;\n    }\n    const supersedesManagers = get(manager, 'supersedesManagers');\n    if (is.nonEmptyArray(supersedesManagers)) {\n      const supercedingPackageFileNames = packageFiles.map(\n        (packageFile) => packageFile.packageFile,\n      );\n      for (const supercededManager of supersedesManagers) {\n        const supercededManagerResults = extractResults.find(\n          (result) => result.manager === supercededManager,\n        );\n        if (supercededManagerResults?.packageFiles) {\n          supercededManagerResults.packageFiles =\n            supercededManagerResults.packageFiles.filter((packageFile) => {\n              if (\n                !packageFile.lockFiles?.length &&\n                supercedingPackageFileNames.includes(packageFile.packageFile)\n              ) {\n                return false;\n              }\n              return true;\n            });\n        }\n      }\n    }\n  }\n}\n"]}