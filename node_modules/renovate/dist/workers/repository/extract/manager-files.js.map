{"version":3,"file":"manager-files.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/manager-files.ts"],"names":[],"mappings":";;AAuBA,wDAoDC;;AA3ED,kEAAkC;AAClC,4CAAyC;AACzC,sDAIkC;AAElC,yCAAiD;AAGjD,SAAS,eAAe,CAAC,YAAkC;IACzD,IAAI,YAAY,EAAE,CAAC;QACjB,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnC,IAAI,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;oBACpC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,WAAW,CAAC;gBAChC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAA2B;IAE3B,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;IAC9C,eAAM,CAAC,KAAK,CAAC,mBAAmB,OAAO,GAAG,CAAC,CAAC;IAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,GAAG,OAAO,cAAc,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,uBAAuB;IACvB,IAAI,YAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,KAAK,CACV,WACE,QAAQ,CAAC,MACX,wBAAwB,OAAO,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1D,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,6DAA6D;IAC7D,IAAI,IAAA,aAAG,EAAC,OAAO,EAAE,wBAAwB,CAAC,EAAE,CAAC;QAC3C,MAAM,eAAe,GAAG,MAAM,IAAA,gCAAsB,EAClD,OAAO,EACP,MAAM,EACN,QAAQ,CACT,CAAC;QACF,eAAe,CAAC,eAAe,CAAC,CAAC;QACjC,OAAO,eAAe,CAAC;IACzB,CAAC;IACD,MAAM,YAAY,GAAkB,EAAE,CAAC;IACvC,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE,CAAC;QACnC,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAa,EAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACzD,uBAAuB;QACvB,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,GAAG,GAAG,MAAM,IAAA,4BAAkB,EAClC,OAAO,EACP,OAAO,EACP,WAAW,EACX,MAAM,CACP,CAAC;YACF,IAAI,GAAG,EAAE,CAAC;gBACR,YAAY,CAAC,IAAI,CAAC;oBAChB,GAAG,GAAG;oBACN,WAAW;iBACZ,CAAC,CAAC;YACL,CAAC;QACH,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,GAAG,WAAW,iBAAiB,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IACD,eAAe,CAAC,YAAY,CAAC,CAAC;IAC9B,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../logger';\nimport {\n  extractAllPackageFiles,\n  extractPackageFile,\n  get,\n} from '../../../modules/manager';\nimport type { PackageFile } from '../../../modules/manager/types';\nimport { readLocalFile } from '../../../util/fs';\nimport type { WorkerExtractConfig } from '../../types';\n\nfunction massageDepNames(packageFiles: PackageFile[] | null): void {\n  if (packageFiles) {\n    for (const packageFile of packageFiles) {\n      for (const dep of packageFile.deps) {\n        if (dep.packageName && !dep.depName) {\n          dep.depName = dep.packageName;\n        }\n      }\n    }\n  }\n}\n\nexport async function getManagerPackageFiles(\n  config: WorkerExtractConfig,\n): Promise<PackageFile[] | null> {\n  const { enabled, manager, fileList } = config;\n  logger.trace(`getPackageFiles(${manager})`);\n  if (!enabled) {\n    logger.debug(`${manager} is disabled`);\n    return [];\n  }\n  // istanbul ignore else\n  if (is.nonEmptyArray(fileList)) {\n    logger.debug(\n      `Matched ${\n        fileList.length\n      } file(s) for manager ${manager}: ${fileList.join(', ')}`,\n    );\n  } else {\n    return [];\n  }\n  // Extract package files synchronously if manager requires it\n  if (get(manager, 'extractAllPackageFiles')) {\n    const allPackageFiles = await extractAllPackageFiles(\n      manager,\n      config,\n      fileList,\n    );\n    massageDepNames(allPackageFiles);\n    return allPackageFiles;\n  }\n  const packageFiles: PackageFile[] = [];\n  for (const packageFile of fileList) {\n    const content = await readLocalFile(packageFile, 'utf8');\n    // istanbul ignore else\n    if (content) {\n      const res = await extractPackageFile(\n        manager,\n        content,\n        packageFile,\n        config,\n      );\n      if (res) {\n        packageFiles.push({\n          ...res,\n          packageFile,\n        });\n      }\n    } else {\n      logger.debug(`${packageFile} has no content`);\n    }\n  }\n  massageDepNames(packageFiles);\n  return packageFiles;\n}\n"]}