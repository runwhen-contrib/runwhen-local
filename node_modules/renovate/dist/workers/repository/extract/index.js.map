{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { getManagerConfig, mergeChildConfig } from '../../../config';\nimport type { ManagerConfig, RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { getEnabledManagersList, hashMap } from '../../../modules/manager';\nimport { isCustomManager } from '../../../modules/manager/custom';\nimport { scm } from '../../../modules/platform/scm';\nimport type { ExtractResult, WorkerExtractConfig } from '../../types';\nimport { getMatchingFiles } from './file-match';\nimport { getManagerPackageFiles } from './manager-files';\nimport { processSupersedesManagers } from './supersedes';\n\nexport async function extractAllDependencies(\n  config: RenovateConfig,\n): Promise<ExtractResult> {\n  const managerList = getEnabledManagersList(config.enabledManagers);\n  const extractList: WorkerExtractConfig[] = [];\n  const fileList = await scm.getFileList();\n\n  const tryConfig = (managerConfig: ManagerConfig): void => {\n    const matchingFileList = getMatchingFiles(managerConfig, fileList);\n    if (matchingFileList.length) {\n      extractList.push({ ...managerConfig, fileList: matchingFileList });\n    }\n  };\n\n  for (const manager of managerList) {\n    const managerConfig = getManagerConfig(config, manager);\n    managerConfig.manager = manager;\n    if (isCustomManager(manager)) {\n      const filteredCustomManagers = (config.customManagers ?? []).filter(\n        (mgr) => mgr.customType === manager,\n      );\n      for (const customManager of filteredCustomManagers) {\n        tryConfig(mergeChildConfig(managerConfig, customManager));\n      }\n    } else {\n      tryConfig(managerConfig);\n    }\n  }\n\n  const extractResult: ExtractResult = {\n    packageFiles: {},\n    extractionFingerprints: {},\n  };\n\n  // Store the fingerprint of all managers which match any file (even if they do not find any dependencies)\n  // The cached result needs to be invalidated if the fingerprint of any matching manager changes\n  for (const { manager } of extractList) {\n    extractResult.extractionFingerprints[manager] = hashMap.get(manager);\n  }\n\n  const extractDurations: Record<string, number> = {};\n  const extractResults = await Promise.all(\n    extractList.map(async (managerConfig) => {\n      const start = Date.now();\n      const packageFiles = await getManagerPackageFiles(managerConfig);\n      const durationMs = Math.round(Date.now() - start);\n      extractDurations[managerConfig.manager] = durationMs;\n      return { manager: managerConfig.manager, packageFiles };\n    }),\n  );\n\n  // De-duplicate results using supersedesManagers\n  processSupersedesManagers(extractResults);\n\n  logger.debug(\n    { managers: extractDurations },\n    'manager extract durations (ms)',\n  );\n  let fileCount = 0;\n  for (const { manager, packageFiles } of extractResults) {\n    if (packageFiles?.length) {\n      fileCount += packageFiles.length;\n      logger.debug(`Found ${manager} package files`);\n      extractResult.packageFiles[manager] = (\n        extractResult.packageFiles[manager] || []\n      ).concat(packageFiles);\n    }\n  }\n  logger.debug(`Found ${fileCount} package file(s)`);\n\n  // If enabledManagers is non-empty, check that each of them has at least one extraction.\n  // If not, log a warning to indicate possible misconfiguration.\n  if (is.nonEmptyArray(config.enabledManagers)) {\n    for (const enabledManager of config.enabledManagers) {\n      if (\n        !(enabledManager.replace('custom.', '') in extractResult.packageFiles)\n      ) {\n        logger.debug(\n          { manager: enabledManager },\n          `Manager explicitly enabled in \"enabledManagers\" config, but found no results. Possible config error?`,\n        );\n      }\n    }\n  }\n\n  return extractResult;\n}\n"]}