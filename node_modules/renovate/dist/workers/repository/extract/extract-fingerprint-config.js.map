{"version":3,"file":"extract-fingerprint-config.js","sourceRoot":"","sources":["../../../../lib/workers/repository/extract/extract-fingerprint-config.ts"],"names":[],"mappings":";;AAqDA,8DA2BC;AAhFD,4CAAqE;AAErE,sDAAkE;AAClE,4DAAkE;AAGlE,iEAAyE;AAQzE,kCAAkC;AAClC,SAAS,sBAAsB,CAC7B,MAA2B;IAE3B,MAAM,WAAW,GAAG,EAAyB,CAAC;IAC9C,KAAK,MAAM,KAAK,IAAI,wBAAgB,CAAC,GAAG,CACtC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,UAAyC,CACrD,EAAE,CAAC;QACF,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAClB,WAAW,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,OAAO;QACL,yBAAyB,EAAE,MAAM,CAAC,yBAAyB;QAC3D,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,oBAAoB,EAAE,MAAM,CAAC,oBAAoB;QACjD,GAAG,WAAW;KACf,CAAC;AACJ,CAAC;AAED,SAAS,wBAAwB,CAC/B,MAA2B;IAE3B,OAAO;QACL,GAAG,CAAC,IAAA,wBAAe,EAAC,MAAM,CAAC,OAAO,CAAC,IAAI,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACtE,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE;QACrC,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,EAAE;QACvC,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,eAAe,EAAE,MAAM,CAAC,eAAe;QACvC,QAAQ,EAAE,EAAE;KACb,CAAC;AACJ,CAAC;AAED,SAAgB,yBAAyB,CACvC,MAAsB;IAEtB,MAAM,qBAAqB,GAA0B,EAAE,CAAC;IACxD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,IAAA,gCAAsB,EAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;IAE5E,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE,CAAC;QAClC,MAAM,aAAa,GAAG,IAAA,yBAAgB,EAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACxD,IAAI,IAAA,wBAAe,EAAC,OAAO,CAAC,EAAE,CAAC;YAC7B,MAAM,sBAAsB,GAAG,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,MAAM,CACjE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,KAAK,OAAO,CACpC,CAAC;YACF,KAAK,MAAM,aAAa,IAAI,sBAAsB,EAAE,CAAC;gBACnD,qBAAqB,CAAC,IAAI,CAAC;oBACzB,GAAG,IAAA,yBAAgB,EAAC,aAAa,EAAE,aAAa,CAAC;oBACjD,QAAQ,EAAE,EAAE;iBACb,CAAC,CAAC;YACL,CAAC;QACH,CAAC;aAAM,CAAC;YACN,qBAAqB,CAAC,IAAI,CAAC,EAAE,GAAG,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAED,OAAO;QACL,WAAW;QACX,QAAQ,EAAE,qBAAqB,CAAC,GAAG,CAAC,wBAAwB,CAAC;KAC9D,CAAC;AACJ,CAAC","sourcesContent":["import { getManagerConfig, mergeChildConfig } from '../../../config';\nimport type { RenovateConfig } from '../../../config/types';\nimport { getEnabledManagersList } from '../../../modules/manager';\nimport { isCustomManager } from '../../../modules/manager/custom';\nimport type { RegexManagerTemplates } from '../../../modules/manager/custom/regex/types';\nimport type { CustomExtractConfig } from '../../../modules/manager/custom/types';\nimport { validMatchFields } from '../../../modules/manager/custom/utils';\nimport type { WorkerExtractConfig } from '../../types';\n\nexport interface FingerprintExtractConfig {\n  managerList: Set<string>;\n  managers: WorkerExtractConfig[];\n}\n\n// checks for regex manager fields\nfunction getCustomManagerFields(\n  config: WorkerExtractConfig,\n): CustomExtractConfig {\n  const regexFields = {} as CustomExtractConfig;\n  for (const field of validMatchFields.map(\n    (f) => `${f}Template` as keyof RegexManagerTemplates,\n  )) {\n    if (config[field]) {\n      regexFields[field] = config[field];\n    }\n  }\n\n  return {\n    autoReplaceStringTemplate: config.autoReplaceStringTemplate,\n    matchStrings: config.matchStrings,\n    matchStringsStrategy: config.matchStringsStrategy,\n    ...regexFields,\n  };\n}\n\nfunction getFilteredManagerConfig(\n  config: WorkerExtractConfig,\n): WorkerExtractConfig {\n  return {\n    ...(isCustomManager(config.manager) && getCustomManagerFields(config)),\n    manager: config.manager,\n    fileMatch: config.fileMatch,\n    npmrc: config.npmrc,\n    npmrcMerge: config.npmrcMerge,\n    enabled: config.enabled,\n    ignorePaths: config.ignorePaths ?? [],\n    includePaths: config.includePaths ?? [],\n    skipInstalls: config.skipInstalls,\n    registryAliases: config.registryAliases,\n    fileList: [],\n  };\n}\n\nexport function generateFingerprintConfig(\n  config: RenovateConfig,\n): FingerprintExtractConfig {\n  const managerExtractConfigs: WorkerExtractConfig[] = [];\n  const managerList = new Set(getEnabledManagersList(config.enabledManagers));\n\n  for (const manager of managerList) {\n    const managerConfig = getManagerConfig(config, manager);\n    if (isCustomManager(manager)) {\n      const filteredCustomManagers = (config.customManagers ?? []).filter(\n        (mgr) => mgr.customType === manager,\n      );\n      for (const customManager of filteredCustomManagers) {\n        managerExtractConfigs.push({\n          ...mergeChildConfig(managerConfig, customManager),\n          fileList: [],\n        });\n      }\n    } else {\n      managerExtractConfigs.push({ ...managerConfig, fileList: [] });\n    }\n  }\n\n  return {\n    managerList,\n    managers: managerExtractConfigs.map(getFilteredManagerConfig),\n  };\n}\n"]}