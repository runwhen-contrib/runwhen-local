{"version":3,"file":"branch-name.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/branch-name.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO #22198\nimport cleanGitRef from 'clean-git-ref';\nimport slugify from 'slugify';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { hash } from '../../../util/hash';\nimport { regEx } from '../../../util/regex';\nimport * as template from '../../../util/template';\n\nconst MIN_HASH_LENGTH = 6;\n\nconst RE_MULTIPLE_DASH = regEx(/--+/g);\n\nconst RE_SPECIAL_CHARS_STRICT = regEx(/[`~!@#$%^&*()_=+[\\]\\\\|{};':\",.<>?/]/g);\n\n/**\n * Clean git branch name\n *\n * Remove what clean-git-ref fails to:\n * - leading dot/leading dot after slash\n * - trailing dot\n * - whitespace\n * - special characters\n * - leading or trailing dashes\n * - chained dashes(breaks markdown comments) are replaced by single dash\n */\nfunction cleanBranchName(\n  branchName: string,\n  branchPrefix: string,\n  branchNameStrict?: boolean,\n): string {\n  let cleanedBranchName = branchName;\n\n  let existingBranchPrefix = '';\n  if (branchNameStrict) {\n    if (cleanedBranchName.startsWith(branchPrefix)) {\n      existingBranchPrefix = branchPrefix;\n      cleanedBranchName = cleanedBranchName.slice(branchPrefix.length);\n    }\n    cleanedBranchName =\n      existingBranchPrefix +\n      cleanedBranchName.replace(RE_SPECIAL_CHARS_STRICT, '-'); // massage out all special characters that slip through slugify\n  }\n\n  return cleanGitRef\n    .clean(cleanedBranchName)\n    .replace(regEx(/^\\.|\\.$/), '') // leading or trailing dot\n    .replace(regEx(/\\/\\./g), '/') // leading dot after slash\n    .replace(regEx(/\\s/g), '') // whitespace\n    .replace(regEx(/[[\\]?:\\\\^~]/g), '-') // massage out all these characters: [ ] ? : \\ ^ ~\n    .replace(regEx(/(^|\\/)-+/g), '$1') // leading dashes\n    .replace(regEx(/-+(\\/|$)/g), '$1') // trailing dashes\n    .replace(RE_MULTIPLE_DASH, '-'); // chained dashes\n}\n\nexport function generateBranchName(update: RenovateConfig): void {\n  // Check whether to use a group name\n  const newMajor = String(update.newMajor);\n  const newMinor = String(update.newMinor);\n  if (!update.groupName && update.sharedVariableName) {\n    logger.debug(\n      `Using sharedVariableName=${update.sharedVariableName} as groupName for depName=${update.depName}`,\n    );\n    update.groupName = update.sharedVariableName;\n  }\n  if (update.groupName) {\n    update.groupName = template.compile(update.groupName, update);\n    logger.trace('Using group branchName template');\n    // TODO: types (#22198)\n    logger.trace(\n      `Dependency ${update.depName!} is part of group ${update.groupName}`,\n    );\n    if (update.groupSlug) {\n      update.groupSlug = template.compile(update.groupSlug, update);\n    } else {\n      update.groupSlug = update.groupName;\n    }\n    update.groupSlug = slugify(update.groupSlug, {\n      lower: true,\n    });\n    if (update.updateType === 'major' && update.separateMajorMinor) {\n      if (update.separateMultipleMajor) {\n        update.groupSlug = `major-${newMajor}-${update.groupSlug}`;\n      } else {\n        update.groupSlug = `major-${update.groupSlug}`;\n      }\n    }\n    if (update.updateType === 'minor' && update.separateMultipleMinor) {\n      update.groupSlug = `minor-${newMajor}.${newMinor}-${update.groupSlug}`;\n    }\n    if (update.updateType === 'patch' && update.separateMinorPatch) {\n      update.groupSlug = `patch-${update.groupSlug}`;\n    }\n    update.branchTopic = update.group!.branchTopic ?? update.branchTopic;\n    update.branchName = update.group!.branchName ?? update.branchName;\n  }\n\n  if (update.hashedBranchLength) {\n    let hashLength = update.hashedBranchLength - update.branchPrefix!.length;\n    if (hashLength < MIN_HASH_LENGTH) {\n      logger.warn(\n        `\\`hashedBranchLength\\` must allow for at least ${MIN_HASH_LENGTH} characters hashing in addition to \\`branchPrefix\\`. Using ${MIN_HASH_LENGTH} character hash instead.`,\n      );\n      hashLength = MIN_HASH_LENGTH;\n    }\n\n    const additionalBranchPrefix = template.compile(\n      String(update.additionalBranchPrefix ?? ''),\n      update,\n    );\n\n    const branchTopic = template.compile(\n      String(update.branchTopic ?? ''),\n      update,\n    );\n\n    let hashInput = additionalBranchPrefix + branchTopic;\n\n    // Compile extra times in case of nested templates\n    hashInput = template.compile(hashInput, update);\n    hashInput = template.compile(hashInput, update);\n\n    const hashedInput = hash(hashInput);\n\n    // TODO: types (#22198)\n    update.branchName = `${update.branchPrefix!}${hashedInput.slice(\n      0,\n      hashLength,\n    )}`;\n  } else {\n    update.branchName = template.compile(update.branchName!, update);\n\n    // Compile extra times in case of nested templates\n    update.branchName = template.compile(update.branchName, update);\n    update.branchName = template.compile(update.branchName, update);\n  }\n  if (update.updateType === 'minor' && update.separateMultipleMinor) {\n    update.branchName = update.branchName.replace('.x', `.${newMinor}.x`);\n  }\n  update.branchName = cleanBranchName(\n    update.branchName,\n    update.branchPrefix!,\n    update.branchNameStrict,\n  );\n}\n"]}