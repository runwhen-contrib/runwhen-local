{"version":3,"file":"flatten.js","sourceRoot":"","sources":["../../../../lib/workers/repository/updates/flatten.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  filterConfig,\n  getManagerConfig,\n  mergeChildConfig,\n} from '../../../config';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { getDefaultConfig } from '../../../modules/datasource';\nimport { get } from '../../../modules/manager';\nimport { detectSemanticCommits } from '../../../util/git/semantic';\nimport { applyPackageRules } from '../../../util/package-rules';\nimport { regEx } from '../../../util/regex';\nimport * as template from '../../../util/template';\nimport { parseUrl } from '../../../util/url';\nimport type { BranchUpgradeConfig } from '../../types';\nimport { generateBranchName } from './branch-name';\n\nconst upper = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.substring(1);\n\nexport function sanitizeDepName(depName: string): string {\n  return depName\n    .replace('@types/', '')\n    .replace('@', '')\n    .replace(regEx(/\\//g), '-')\n    .replace(regEx(/\\s+/g), '-')\n    .replace(regEx(/:/g), '-')\n    .replace(regEx(/-+/), '-')\n    .toLowerCase();\n}\n\nexport function applyUpdateConfig(input: BranchUpgradeConfig): any {\n  const updateConfig = { ...input };\n  delete updateConfig.packageRules;\n  // TODO: Remove next line once #8075 is complete\n  updateConfig.depNameSanitized = updateConfig.depName\n    ? sanitizeDepName(updateConfig.depName)\n    : undefined;\n  updateConfig.newNameSanitized = updateConfig.newName\n    ? sanitizeDepName(updateConfig.newName)\n    : undefined;\n  if (updateConfig.sourceUrl) {\n    const parsedSourceUrl = parseUrl(updateConfig.sourceUrl);\n    if (parsedSourceUrl?.pathname) {\n      updateConfig.sourceRepoSlug = parsedSourceUrl.pathname\n        .replace(regEx(/^\\//), '') // remove leading slash\n        .replace(regEx(/\\//g), '-') // change slashes to hyphens\n        .replace(regEx(/-+/g), '-'); // remove multiple hyphens\n      updateConfig.sourceRepo = parsedSourceUrl.pathname.replace(\n        regEx(/^\\//),\n        '',\n      ); // remove leading slash\n      updateConfig.sourceRepoOrg = updateConfig.sourceRepo.replace(\n        regEx(/\\/.*/g),\n        '',\n      ); // remove everything after first slash\n      updateConfig.sourceRepoName = updateConfig.sourceRepo.replace(\n        regEx(/.*\\//g),\n        '',\n      ); // remove everything up to the last slash\n    }\n  }\n  if (updateConfig.sourceDirectory) {\n    updateConfig.sourceDirectory = template.compile(\n      updateConfig.sourceDirectory,\n      updateConfig,\n    );\n  }\n  generateBranchName(updateConfig);\n  return updateConfig;\n}\n\nexport async function flattenUpdates(\n  config: RenovateConfig,\n  packageFiles: Record<string, any[]>,\n): Promise<RenovateConfig[]> {\n  const updates = [];\n  const updateTypes = [\n    'major',\n    'minor',\n    'patch',\n    'pin',\n    'digest',\n    'lockFileMaintenance',\n    'replacement',\n  ];\n  for (const [manager, files] of Object.entries(packageFiles)) {\n    const managerConfig = getManagerConfig(config, manager);\n    for (const packageFile of files) {\n      const packageFileConfig = mergeChildConfig(managerConfig, packageFile);\n      const packagePath = packageFile.packageFile?.split('/');\n      if (packagePath.length > 0) {\n        packagePath.splice(-1, 1);\n      }\n      if (packagePath.length > 0) {\n        packageFileConfig.parentDir = packagePath[packagePath.length - 1];\n        packageFileConfig.packageFileDir = packagePath.join('/');\n      } else {\n        packageFileConfig.parentDir = '';\n        packageFileConfig.packageFileDir = '';\n      }\n      let depIndex = 0;\n      for (const dep of packageFile.deps) {\n        if (dep.updates.length) {\n          const depConfig = mergeChildConfig(packageFileConfig, dep);\n          delete depConfig.deps;\n          depConfig.depIndex = depIndex; // used for autoreplace\n          for (const update of dep.updates) {\n            let updateConfig = mergeChildConfig(depConfig, update);\n            delete updateConfig.updates;\n            if (updateConfig.updateType) {\n              updateConfig[`is${upper(updateConfig.updateType)}`] = true;\n            }\n            if (updateConfig.updateTypes) {\n              updateConfig.updateTypes.forEach((updateType: string) => {\n                updateConfig[`is${upper(updateType)}`] = true;\n              });\n            }\n            // apply config from datasource\n            const datasourceConfig = await getDefaultConfig(\n              depConfig.datasource,\n            );\n            updateConfig = mergeChildConfig(updateConfig, datasourceConfig);\n            updateConfig = await applyPackageRules(\n              updateConfig,\n              'datasource-merge',\n            );\n            // apply major/minor/patch/pin/digest\n            updateConfig = mergeChildConfig(\n              updateConfig,\n              updateConfig[updateConfig.updateType],\n            );\n            for (const updateType of updateTypes) {\n              delete updateConfig[updateType];\n            }\n            // Apply again in case any were added by the updateType config\n            updateConfig = await applyPackageRules(\n              updateConfig,\n              'update-type-merge',\n            );\n            updateConfig = applyUpdateConfig(updateConfig);\n            updateConfig.baseDeps = packageFile.deps;\n            update.branchName = updateConfig.branchName;\n            updates.push(updateConfig);\n          }\n        }\n        depIndex += 1;\n      }\n      if (\n        get(manager, 'supportsLockFileMaintenance') &&\n        packageFileConfig.lockFileMaintenance.enabled\n      ) {\n        // Apply lockFileMaintenance config before packageRules\n        let lockFileConfig = mergeChildConfig(\n          packageFileConfig,\n          packageFileConfig.lockFileMaintenance,\n        );\n        lockFileConfig.updateType = 'lockFileMaintenance';\n        lockFileConfig.isLockFileMaintenance = true;\n        lockFileConfig = await applyPackageRules(\n          lockFileConfig,\n          'lock-file-maintenance-merge',\n        );\n        // Apply lockFileMaintenance and packageRules again\n        lockFileConfig = mergeChildConfig(\n          lockFileConfig,\n          lockFileConfig.lockFileMaintenance,\n        );\n        lockFileConfig = await applyPackageRules(\n          lockFileConfig,\n          'lock-file-maintenance-merge-2',\n        );\n        // Remove unnecessary objects\n        for (const updateType of updateTypes) {\n          delete lockFileConfig[updateType];\n        }\n        delete lockFileConfig.packageRules;\n        delete lockFileConfig.deps;\n        generateBranchName(lockFileConfig);\n        updates.push(lockFileConfig);\n      }\n      if (get(manager, 'updateLockedDependency')) {\n        for (const lockFile of packageFileConfig.lockFiles ?? []) {\n          const lockfileRemediations = config.remediations as Record<\n            string,\n            Record<string, any>[]\n          >;\n          const remediations = lockfileRemediations?.[lockFile];\n          if (remediations) {\n            for (const remediation of remediations) {\n              let updateConfig = mergeChildConfig(\n                packageFileConfig,\n                remediation,\n              );\n              updateConfig = mergeChildConfig(\n                updateConfig,\n                config.vulnerabilityAlerts,\n              );\n              delete updateConfig.vulnerabilityAlerts;\n              updateConfig.isVulnerabilityAlert = true;\n              updateConfig.isRemediation = true;\n              updateConfig.lockFile = lockFile;\n              updateConfig.currentValue = updateConfig.currentVersion;\n              updateConfig.newValue = updateConfig.newVersion;\n              updateConfig = applyUpdateConfig(updateConfig);\n              updateConfig.enabled = true;\n              updates.push(updateConfig);\n            }\n          }\n        }\n      }\n    }\n  }\n  if (config.semanticCommits === 'auto') {\n    const semanticCommits = await detectSemanticCommits();\n    for (const update of updates) {\n      update.semanticCommits = semanticCommits;\n    }\n  }\n  const filteredUpdates = updates\n    .filter((update) => update.enabled !== false)\n    .map(({ vulnerabilityAlerts, ...update }) => update)\n    .map((update) => filterConfig(update, 'branch'));\n  if (filteredUpdates.length < updates.length) {\n    logger.debug(\n      `Filtered out ${updates.length - filteredUpdates.length} disabled update(s). ${filteredUpdates.length} update(s) remaining.`,\n    );\n  }\n  return filteredUpdates;\n}\n"]}