{"version":3,"file":"current.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/current.ts"],"names":[],"mappings":";;AAKA,8CAsDC;;AA3DD,kEAAkC;AAClC,+CAA4C;AAE5C,kDAA+C;AAE/C,SAAgB,iBAAiB,CAC/B,YAAoB,EACpB,aAAqB,EACrB,aAA4B,EAC5B,aAAqB,EACrB,aAAqB,EACrB,WAAqB;IAErB,qBAAqB;IACrB,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CAAC,gBAAgB,YAAY,WAAW,CAAC,CAAC;IACtD,IAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;QACvC,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,IAAI,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CACzC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CACvC,CAAC;IACF,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC7B,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;IACD,IAAI,aAAa,IAAI,aAAa,CAAC,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC;QACxE,WAAW,GAAG,WAAW,CAAC,MAAM,CAC9B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CACtD,CAAC;IACJ,CAAC;IACD,IAAI,aAAa,KAAK,KAAK,EAAE,CAAC;QAC5B,OAAO,CACL,aAAa;YACb,aAAa,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAC9D,CAAC;IACJ,CAAC;IACD,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC7B,8CAA8C;QAC9C,OAAO,aAAa,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACvE,CAAC;IACD,+CAA+C;IAC/C,MAAM,iBAAiB,GAAG,aAAa,CAAC,oBAAoB,CAC1D,WAAW,EACX,YAAY,CACb,CAAC;IACF,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,IAAI,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC;QAC1C,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,IAAI,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC;QAChD,OAAO,YAAY,CAAC,OAAO,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IACtD,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport type { VersioningApi } from '../../../../modules/versioning/types';\nimport { regEx } from '../../../../util/regex';\n\nexport function getCurrentVersion(\n  currentValue: string,\n  lockedVersion: string,\n  versioningApi: VersioningApi,\n  rangeStrategy: string,\n  latestVersion: string,\n  allVersions: string[],\n): string | null {\n  // istanbul ignore if\n  if (!is.string(currentValue)) {\n    return null;\n  }\n  logger.trace(`currentValue ${currentValue} is range`);\n  if (allVersions.includes(currentValue)) {\n    return currentValue;\n  }\n  let useVersions = allVersions.filter((v) =>\n    versioningApi.matches(v, currentValue),\n  );\n  if (useVersions.length === 1) {\n    return useVersions[0];\n  }\n  if (latestVersion && versioningApi.matches(latestVersion, currentValue)) {\n    useVersions = useVersions.filter(\n      (v) => !versioningApi.isGreaterThan(v, latestVersion),\n    );\n  }\n  if (rangeStrategy === 'pin') {\n    return (\n      lockedVersion ||\n      versioningApi.getSatisfyingVersion(useVersions, currentValue)\n    );\n  }\n  if (rangeStrategy === 'bump') {\n    // Use the lowest version in the current range\n    return versioningApi.minSatisfyingVersion(useVersions, currentValue);\n  }\n  // Use the highest version in the current range\n  const satisfyingVersion = versioningApi.getSatisfyingVersion(\n    useVersions,\n    currentValue,\n  );\n  if (satisfyingVersion) {\n    return satisfyingVersion;\n  }\n\n  if (versioningApi.isVersion(currentValue)) {\n    return currentValue;\n  }\n  if (versioningApi.isSingleVersion(currentValue)) {\n    return currentValue.replace(regEx(/=/g), '').trim();\n  }\n\n  return null;\n}\n"]}