{"version":3,"file":"rollback.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/rollback.ts"],"names":[],"mappings":";;AAMA,8CA2EC;AAjFD,+CAA4C;AAM5C,SAAgB,iBAAiB,CAC/B,MAAsB,EACtB,QAAmB,EACnB,aAA4B;IAE5B,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAClE,qBAAqB;IACrB,IAAI,CAAC,CAAC,iBAAiB,IAAI,aAAa,CAAC,EAAE,CAAC;QAC1C,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,EACd,uDAAuD,CACxD,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;QAC7C,IAAI,CAAC;YACH,OAAO,aAAa,CAAC,eAAgB,CAAC,CAAC,CAAC,OAAO,EAAE,YAAa,CAAC,CAAC;QAClE,CAAC;QAAC,MAAM,0BAA0B,CAAC,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC,CAAC,CAAC;IACH,qBAAqB;IACrB,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAC7B,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,EACtC,6CAA6C,CAC9C,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CACV,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,EACtC,0CAA0C,CAC3C,CAAC;IACF,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,EACjC,oCAAoC,CACrC,CAAC;IAEF,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC7B,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CACjD,CAAC;IACF,IAAI,UAAU,CAAC;IACf,IAAI,YAAY,IAAI,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;QACzD,UAAU,GAAG,gBAAgB;aAC1B,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aAChD,GAAG,EAAE,CAAC;IACX,CAAC;IACD,IAAI,UAAU,GAAG,UAAU,EAAE,OAAO,CAAC;IACrC,IAAI,WAAW,GAAG,UAAU,EAAE,WAAW,CAAC;IAE1C,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,UAAU,GAAG,gBAAgB,CAAC,GAAG,EAAE,CAAC;QACpC,UAAU,GAAG,UAAU,EAAE,OAAO,CAAC;QACjC,WAAW,GAAG,UAAU,EAAE,WAAW,CAAC;IACxC,CAAC;IACD,qBAAqB;IACrB,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC;QACzC,cAAc;QACd,YAAY,EAAE,YAAa;QAC3B,aAAa,EAAE,SAAS;QACxB,UAAU;KACX,CAAC,CAAC;IACH,OAAO;QACL,MAAM,EAAE,UAAU;QAClB,cAAc;QACd,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAE;QAC7C,QAAQ,EAAE,QAAS;QACnB,UAAU;QACV,WAAW;QACX,UAAU,EAAE,UAAU;KACvB,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from '../../../../logger';\nimport type { Release } from '../../../../modules/datasource/types';\nimport type { LookupUpdate } from '../../../../modules/manager/types';\nimport type { VersioningApi } from '../../../../modules/versioning';\nimport type { RollbackConfig } from './types';\n\nexport function getRollbackUpdate(\n  config: RollbackConfig,\n  versions: Release[],\n  versioningApi: VersioningApi,\n): LookupUpdate | null {\n  const { packageFile, versioning, depName, currentValue } = config;\n  // istanbul ignore if\n  if (!('isLessThanRange' in versioningApi)) {\n    logger.debug(\n      { versioning },\n      'Current versioning does not support isLessThanRange()',\n    );\n    return null;\n  }\n  const lessThanVersions = versions.filter((v) => {\n    try {\n      return versioningApi.isLessThanRange!(v.version, currentValue!);\n    } catch /* istanbul ignore next */ {\n      return false;\n    }\n  });\n  // istanbul ignore if\n  if (!lessThanVersions.length) {\n    logger.debug(\n      { packageFile, depName, currentValue },\n      'Missing version has nothing to roll back to',\n    );\n    return null;\n  }\n  logger.debug(\n    { packageFile, depName, currentValue },\n    `Current version not found - rolling back`,\n  );\n  logger.debug(\n    { dependency: depName, versions },\n    'Versions found before rolling back',\n  );\n\n  lessThanVersions.sort((a, b) =>\n    versioningApi.sortVersions(a.version, b.version),\n  );\n  let newRelease;\n  if (currentValue && versioningApi.isStable(currentValue)) {\n    newRelease = lessThanVersions\n      .filter((v) => versioningApi.isStable(v.version))\n      .pop();\n  }\n  let newVersion = newRelease?.version;\n  let registryUrl = newRelease?.registryUrl;\n\n  if (!newVersion) {\n    newRelease = lessThanVersions.pop();\n    newVersion = newRelease?.version;\n    registryUrl = newRelease?.registryUrl;\n  }\n  // istanbul ignore if\n  if (!newVersion) {\n    logger.debug('No newVersion to roll back to');\n    return null;\n  }\n  const newValue = versioningApi.getNewValue({\n    // TODO #22198\n    currentValue: currentValue!,\n    rangeStrategy: 'replace',\n    newVersion,\n  });\n  return {\n    bucket: 'rollback',\n    // TODO #22198\n    newMajor: versioningApi.getMajor(newVersion)!,\n    newValue: newValue!,\n    newVersion,\n    registryUrl,\n    updateType: 'rollback',\n  };\n}\n"]}