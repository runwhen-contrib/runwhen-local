{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport { CONFIG_VALIDATION } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport type { Release } from '../../../../modules/datasource/types';\nimport type { VersioningApi } from '../../../../modules/versioning';\nimport * as npmVersioning from '../../../../modules/versioning/npm';\nimport * as pep440 from '../../../../modules/versioning/pep440';\nimport * as poetryVersioning from '../../../../modules/versioning/poetry';\nimport { getRegexPredicate } from '../../../../util/string-match';\nimport type { FilterConfig } from './types';\n\nfunction isReleaseStable(\n  release: Release,\n  versioningApi: VersioningApi,\n): boolean {\n  if (!versioningApi.isStable(release.version)) {\n    return false;\n  }\n\n  if (release.isStable === false) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function filterVersions(\n  config: FilterConfig,\n  currentVersion: string,\n  latestVersion: string,\n  releases: Release[],\n  versioningApi: VersioningApi,\n): Release[] {\n  const { ignoreUnstable, ignoreDeprecated, respectLatest, allowedVersions } =\n    config;\n\n  // istanbul ignore if: shouldn't happen\n  if (!currentVersion) {\n    return [];\n  }\n\n  // Leave only versions greater than current\n  let filteredReleases = releases.filter(\n    (r) =>\n      versioningApi.isVersion(r.version) &&\n      versioningApi.isGreaterThan(r.version, currentVersion),\n  );\n\n  const currentRelease = releases.find(\n    (r) =>\n      versioningApi.isValid(r.version) &&\n      versioningApi.isVersion(r.version) &&\n      versioningApi.isValid(currentVersion) &&\n      versioningApi.isVersion(currentVersion) &&\n      versioningApi.equals(r.version, currentVersion),\n  );\n\n  // Don't upgrade from non-deprecated to deprecated\n  if (ignoreDeprecated && currentRelease && !currentRelease.isDeprecated) {\n    filteredReleases = filteredReleases.filter((r) => {\n      if (r.isDeprecated) {\n        logger.trace(\n          `Skipping ${config.depName!}@${r.version} because it is deprecated`,\n        );\n        return false;\n      }\n      return true;\n    });\n  }\n\n  if (allowedVersions) {\n    const isAllowedPred = getRegexPredicate(allowedVersions);\n    if (isAllowedPred) {\n      filteredReleases = filteredReleases.filter(({ version }) =>\n        isAllowedPred(version),\n      );\n    } else if (versioningApi.isValid(allowedVersions)) {\n      filteredReleases = filteredReleases.filter((r) =>\n        versioningApi.matches(r.version, allowedVersions),\n      );\n    } else if (\n      config.versioning !== npmVersioning.id &&\n      semver.validRange(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to npm semver syntax for allowedVersions',\n      );\n      filteredReleases = filteredReleases.filter((r) =>\n        semver.satisfies(\n          semver.valid(r.version)\n            ? r.version\n            : /* istanbul ignore next: not reachable, but it's safer to preserve it */ semver.coerce(\n                r.version,\n              )!,\n          allowedVersions,\n        ),\n      );\n    } else if (\n      config.versioning === poetryVersioning.id &&\n      pep440.isValid(allowedVersions)\n    ) {\n      logger.debug(\n        { depName: config.depName },\n        'Falling back to pypi syntax for allowedVersions',\n      );\n      filteredReleases = filteredReleases.filter((r) =>\n        pep440.matches(r.version, allowedVersions),\n      );\n    } else {\n      const error = new Error(CONFIG_VALIDATION);\n      error.validationSource = 'config';\n      error.validationError = 'Invalid `allowedVersions`';\n      error.validationMessage =\n        'The following allowedVersions does not parse as a valid version or range: ' +\n        JSON.stringify(allowedVersions);\n      throw error;\n    }\n  }\n\n  if (config.followTag) {\n    return filteredReleases;\n  }\n\n  if (\n    respectLatest &&\n    latestVersion &&\n    !versioningApi.isGreaterThan(currentVersion, latestVersion)\n  ) {\n    filteredReleases = filteredReleases.filter(\n      (r) => !versioningApi.isGreaterThan(r.version, latestVersion),\n    );\n  }\n\n  if (!ignoreUnstable) {\n    return filteredReleases;\n  }\n\n  if (currentRelease && isReleaseStable(currentRelease, versioningApi)) {\n    return filteredReleases.filter((r) => isReleaseStable(r, versioningApi));\n  }\n\n  const currentMajor = versioningApi.getMajor(currentVersion);\n  const currentMinor = versioningApi.getMinor(currentVersion);\n  const currentPatch = versioningApi.getPatch(currentVersion);\n\n  return filteredReleases.filter((r) => {\n    if (isReleaseStable(r, versioningApi)) {\n      return true;\n    }\n\n    const major = versioningApi.getMajor(r.version);\n\n    if (major !== currentMajor) {\n      return false;\n    }\n\n    if (versioningApi.allowUnstableMajorUpgrades) {\n      return true;\n    }\n\n    const minor = versioningApi.getMinor(r.version);\n    const patch = versioningApi.getPatch(r.version);\n\n    return minor === currentMinor && patch === currentPatch;\n  });\n}\n"]}