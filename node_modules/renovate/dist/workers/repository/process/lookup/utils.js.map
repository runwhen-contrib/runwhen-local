{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/utils.ts"],"names":[],"mappings":";;AAQA,kEAiBC;AAED,oEASC;AAED,kEAUC;AAED,oEAkBC;;AApED,kEAAkC;AAElC,yDAA+D;AAE/D,sFAAgE;AAChE,4EAAsD;AAGtD,SAAgB,2BAA2B,CACzC,OAAuB,EACvB,MAA0B;IAE1B,MAAM,kBAAkB,GAAG,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC/D,MAAM,mBAAmB,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAEjE,IACE,MAAM,CAAC,WAAW,KAAK,kBAAkB;QACzC,MAAM,CAAC,YAAY,KAAK,mBAAmB,EAC3C,CAAC;QACD,OAAO,CAAC,IAAI,CAAC;YACX,UAAU,EAAE,aAAa;YACzB,OAAO,EAAE,kBAAkB;YAC3B,QAAQ,EAAE,mBAAoB;SAC/B,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,SAAgB,4BAA4B,CAC1C,MAA0B;IAE1B,OAAO,CACL,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,CAAC;QACzC,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,uBAAuB,CAAC;QACjD,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,kBAAkB,CAAC;QAC5C,YAAE,CAAC,cAAc,CAAC,MAAM,CAAC,0BAA0B,CAAC,CACrD,CAAC;AACJ,CAAC;AAED,SAAgB,2BAA2B,CACzC,MAA0B;IAE1B,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC;QAC3B,OAAO,MAAM,CAAC,eAAe,CAAC;IAChC,CAAC;IACD,IAAI,MAAM,CAAC,uBAAuB,EAAE,CAAC;QACnC,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,MAAM,CAAC,WAAW,CAAC;AAC5B,CAAC;AAED,SAAgB,4BAA4B,CAC1C,MAA0B;IAE1B,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACzC,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,MAAM,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC3D,MAAM,aAAa,GAAG,IAAA,0BAAgB,EAAC,MAAM,CAAC,CAAC;IAE/C,OAAO,aAAa,CAAC,WAAW,CAAC;QAC/B,cAAc;QACd,YAAY,EAAE,MAAM,CAAC,YAAa;QAClC,UAAU;QACV,aAAa,EAAE,aAAc;QAC7B,aAAa,EAAE,IAAI;KACpB,CAAC,CAAC;AACL,CAAC;AAED,SAAS,aAAa,CAAC,MAA0B;IAC/C,IAAI,CAAC,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACnD,OAAO,MAAM,CAAC,kBAAkB,CAAC;IACnC,CAAC;IACD,IAAI,CAAC,YAAE,CAAC,eAAe,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE,CAAC;QAC3D,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import is from '@sindresorhus/is';\n\nimport { getRangeStrategy } from '../../../../modules/manager';\nimport type { LookupUpdate } from '../../../../modules/manager/types';\nimport * as allVersioning from '../../../../modules/versioning';\nimport * as template from '../../../../util/template';\nimport type { LookupUpdateConfig } from './types';\n\nexport function addReplacementUpdateIfValid(\n  updates: LookupUpdate[],\n  config: LookupUpdateConfig,\n): void {\n  const replacementNewName = determineNewReplacementName(config);\n  const replacementNewValue = determineNewReplacementValue(config);\n\n  if (\n    config.packageName !== replacementNewName ||\n    config.currentValue !== replacementNewValue\n  ) {\n    updates.push({\n      updateType: 'replacement',\n      newName: replacementNewName,\n      newValue: replacementNewValue!,\n    });\n  }\n}\n\nexport function isReplacementRulesConfigured(\n  config: LookupUpdateConfig,\n): boolean {\n  return (\n    is.nonEmptyString(config.replacementName) ||\n    is.nonEmptyString(config.replacementNameTemplate) ||\n    is.nonEmptyString(config.replacementVersion) ||\n    is.nonEmptyString(config.replacementVersionTemplate)\n  );\n}\n\nexport function determineNewReplacementName(\n  config: LookupUpdateConfig,\n): string {\n  if (config.replacementName) {\n    return config.replacementName;\n  }\n  if (config.replacementNameTemplate) {\n    return template.compile(config.replacementNameTemplate, config, true);\n  }\n  return config.packageName;\n}\n\nexport function determineNewReplacementValue(\n  config: LookupUpdateConfig,\n): string | undefined | null {\n  const newVersion = getNewVersion(config);\n  if (!newVersion) {\n    return config.currentValue;\n  }\n\n  const versioningApi = allVersioning.get(config.versioning);\n  const rangeStrategy = getRangeStrategy(config);\n\n  return versioningApi.getNewValue({\n    // TODO #22198\n    currentValue: config.currentValue!,\n    newVersion,\n    rangeStrategy: rangeStrategy!,\n    isReplacement: true,\n  });\n}\n\nfunction getNewVersion(config: LookupUpdateConfig): string | null {\n  if (!is.nullOrUndefined(config.replacementVersion)) {\n    return config.replacementVersion;\n  }\n  if (!is.nullOrUndefined(config.replacementVersionTemplate)) {\n    return template.compile(config.replacementVersionTemplate, config, true);\n  }\n  return null;\n}\n"]}