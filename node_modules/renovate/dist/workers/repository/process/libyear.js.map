{"version":3,"file":"libyear.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/libyear.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport type { RenovateConfig } from '../../../config/types';\nimport { addLibYears } from '../../../instrumentation/reporting';\nimport { logger } from '../../../logger';\nimport type { PackageFile } from '../../../modules/manager/types';\n\ninterface DepInfo {\n  depName: string;\n  manager: string;\n  datasource: string;\n  version: string;\n  file: string;\n  outdated?: boolean;\n  libYear?: number;\n}\nexport function calculateLibYears(\n  config: RenovateConfig,\n  packageFiles?: Record<string, PackageFile[]>,\n): void {\n  if (!packageFiles) {\n    return;\n  }\n  const allDeps: DepInfo[] = [];\n  for (const [manager, files] of Object.entries(packageFiles)) {\n    for (const file of files) {\n      for (const dep of file.deps) {\n        const depInfo: DepInfo = {\n          depName: dep.depName!,\n          manager,\n          file: file.packageFile,\n          datasource: dep.datasource!,\n          version: (dep.currentVersion ?? dep.currentValue)!,\n        };\n\n        if (!dep.updates?.length) {\n          allDeps.push(depInfo);\n          continue;\n        }\n\n        depInfo.outdated = true;\n        if (!dep.currentVersionTimestamp) {\n          logger.once.debug(`No currentVersionTimestamp for ${dep.depName}`);\n          allDeps.push(depInfo);\n          continue;\n        }\n        // timestamps are in ISO format\n        const currentVersionDate = DateTime.fromISO(\n          dep.currentVersionTimestamp,\n        );\n\n        for (const update of dep.updates) {\n          if (!update.releaseTimestamp) {\n            logger.once.debug(\n              `No releaseTimestamp for ${dep.depName} update to ${update.newVersion}`,\n            );\n            continue;\n          }\n          const releaseDate = DateTime.fromISO(update.releaseTimestamp);\n          const libYears = releaseDate.diff(currentVersionDate, 'years').years;\n          if (libYears >= 0) {\n            update.libYears = libYears;\n          }\n        }\n        // Set the highest libYears for the dep\n        const depLibYears = Math.max(\n          ...dep.updates.map((update) => update.libYears ?? 0),\n          0,\n        );\n        depInfo.libYear = depLibYears;\n        allDeps.push(depInfo);\n      }\n    }\n  }\n\n  const [totalDepsCount, outdatedDepsCount, totalLibYears] = getCounts(allDeps);\n  const managerLibYears = getManagerLibYears(allDeps);\n  logger.debug(\n    {\n      managerLibYears,\n      totalLibYears,\n      totalDepsCount,\n      outdatedDepsCount,\n    },\n    'Repository libYears',\n  );\n\n  addLibYears(\n    config,\n    managerLibYears,\n    totalLibYears,\n    totalDepsCount,\n    outdatedDepsCount,\n  );\n}\n\nfunction getManagerLibYears(deps: DepInfo[]): Record<string, number> {\n  /** {manager : {depKey: libYear }} */\n  const managerLibYears: Record<string, Record<string, number>> = {};\n  for (const dep of deps) {\n    const depKey = `${dep.depName}@${dep.version}@${dep.datasource}`;\n    const manager = dep.manager;\n    managerLibYears[manager] ??= {};\n    if (dep.libYear) {\n      if (!managerLibYears[manager][depKey]) {\n        managerLibYears[manager][depKey] = dep.libYear;\n      }\n    }\n  }\n\n  const res: Record<string, number> = {};\n  for (const [manager, deps] of Object.entries(managerLibYears)) {\n    const managerLibYear = Object.values(deps).reduce((sum, curr) => {\n      return sum + curr;\n    }, 0);\n    res[manager] = managerLibYear;\n  }\n\n  return res;\n}\n\nfunction getCounts(deps: DepInfo[]): [number, number, number] {\n  const distinctDeps = new Set<string>();\n  let totalDepsCount = 0,\n    outdatedDepsCount = 0,\n    totalLibYears = 0;\n  for (const dep of deps) {\n    const depKey = `${dep.depName}@${dep.version}@${dep.datasource}`;\n    if (!distinctDeps.has(depKey)) {\n      if (dep.outdated) {\n        outdatedDepsCount++;\n      }\n      if (dep.libYear) {\n        totalLibYears += dep.libYear;\n      }\n\n      totalDepsCount++;\n      distinctDeps.add(depKey);\n    }\n  }\n\n  return [totalDepsCount, outdatedDepsCount, totalLibYears];\n}\n"]}