{"version":3,"file":"write.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/write.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport type { RenovateConfig } from '../../../config/types';\nimport { addMeta, logger, removeMeta } from '../../../logger';\nimport { hashMap } from '../../../modules/manager';\nimport { scm } from '../../../modules/platform/scm';\nimport { getCache } from '../../../util/cache/repository';\nimport type { BranchCache } from '../../../util/cache/repository/types';\nimport { fingerprint } from '../../../util/fingerprint';\nimport { setBranchNewCommit } from '../../../util/git/set-branch-commit';\nimport { incCountValue, setCount } from '../../global/limits';\nimport type { BranchConfig, UpgradeFingerprintConfig } from '../../types';\nimport { processBranch } from '../update/branch';\nimport { upgradeFingerprintFields } from './fingerprint-fields';\nimport {\n  getConcurrentBranchesCount,\n  getConcurrentPrsCount,\n  getPrHourlyCount,\n} from './limits';\n\nexport type WriteUpdateResult = 'done' | 'automerged';\n\nexport function generateCommitFingerprintConfig(\n  branch: BranchConfig,\n): UpgradeFingerprintConfig[] {\n  const res = branch.upgrades.map((upgrade) => {\n    const filteredUpgrade = {} as UpgradeFingerprintConfig;\n    for (const field of upgradeFingerprintFields) {\n      filteredUpgrade[field] = upgrade[field];\n    }\n    return filteredUpgrade;\n  });\n\n  return res;\n}\n\nexport function canSkipBranchUpdateCheck(\n  branchState: BranchCache,\n  commitFingerprint: string,\n): boolean {\n  if (!branchState.commitFingerprint) {\n    logger.trace('branch.isUpToDate(): no fingerprint');\n    return false;\n  }\n\n  if (commitFingerprint !== branchState.commitFingerprint) {\n    logger.debug('branch.isUpToDate(): needs recalculation');\n    return false;\n  }\n\n  logger.debug('branch.isUpToDate(): using cached result \"true\"');\n  return true;\n}\n\nexport async function syncBranchState(\n  branchName: string,\n  baseBranch: string,\n): Promise<BranchCache> {\n  logger.debug('syncBranchState()');\n  const branchSha = await scm.getBranchCommit(branchName);\n  const baseBranchSha = await scm.getBranchCommit(baseBranch);\n\n  const cache = getCache();\n  cache.branches ??= [];\n  const { branches: cachedBranches } = cache;\n  let branchState = cachedBranches.find((br) => br.branchName === branchName);\n  if (!branchState) {\n    logger.debug(\n      'syncBranchState(): Branch cache not found, creating minimal branchState',\n    );\n    // create a minimal branch state\n    branchState = {\n      branchName,\n      sha: branchSha,\n      baseBranch,\n      baseBranchSha,\n    } as BranchCache;\n    cachedBranches.push(branchState);\n  }\n\n  // if base branch name has changed invalidate cached isModified state\n  if (baseBranch !== branchState.baseBranch) {\n    logger.debug('syncBranchState(): update baseBranch name');\n    branchState.baseBranch = baseBranch;\n    delete branchState.isModified;\n    branchState.pristine = false;\n  }\n\n  // if base branch sha has changed invalidate cached isBehindBase state\n  if (baseBranchSha !== branchState.baseBranchSha) {\n    logger.debug('syncBranchState(): update baseBranchSha');\n    delete branchState.isBehindBase;\n    delete branchState.isConflicted;\n\n    // update cached branchSha\n    branchState.baseBranchSha = baseBranchSha;\n    branchState.pristine = false;\n  }\n\n  // if branch sha has changed invalidate all cached states\n  if (branchSha !== branchState.sha) {\n    logger.debug('syncBranchState(): update branchSha');\n    delete branchState.isBehindBase;\n    delete branchState.isConflicted;\n    delete branchState.isModified;\n    delete branchState.commitFingerprint;\n\n    // update cached branchSha\n    branchState.sha = branchSha;\n    branchState.pristine = false;\n  }\n\n  return branchState;\n}\n\nexport async function writeUpdates(\n  config: RenovateConfig,\n  allBranches: BranchConfig[],\n): Promise<WriteUpdateResult> {\n  const branches = allBranches;\n  logger.debug(\n    `Processing ${branches.length} branch${\n      branches.length === 1 ? '' : 'es'\n    }: ${branches\n      .map((b) => b.branchName)\n      .sort()\n      .join(', ')}`,\n  );\n\n  const concurrentPrsCount = await getConcurrentPrsCount(config, branches);\n  setCount('ConcurrentPRs', concurrentPrsCount);\n\n  const concurrentBranchesCount = await getConcurrentBranchesCount(branches);\n  setCount('Branches', concurrentBranchesCount);\n\n  const prsThisHourCount = await getPrHourlyCount(config);\n  setCount('HourlyPRs', prsThisHourCount);\n\n  for (const branch of branches) {\n    const { baseBranch, branchName } = branch;\n    const meta: Record<string, string> = { branch: branchName };\n    if (config.baseBranches?.length && baseBranch) {\n      meta.baseBranch = baseBranch;\n    }\n    addMeta(meta);\n    const branchExisted = await scm.branchExists(branchName);\n    const branchState = await syncBranchState(branchName, baseBranch);\n\n    const managers = [\n      ...new Set(\n        branch.upgrades\n          .map((upgrade) => hashMap.get(upgrade.manager) ?? upgrade.manager)\n          .filter(is.string),\n      ),\n    ].sort();\n    const commitFingerprint = fingerprint({\n      commitFingerprintConfig: generateCommitFingerprintConfig(branch),\n      managers,\n    });\n    branch.skipBranchUpdate = canSkipBranchUpdateCheck(\n      branchState,\n      commitFingerprint,\n    );\n\n    const res = await processBranch(branch);\n    branch.prBlockedBy = res?.prBlockedBy;\n    branch.prNo = res?.prNo;\n    branch.result = res?.result;\n    branch.commitFingerprint = res?.updatesVerified\n      ? commitFingerprint\n      : branchState.commitFingerprint;\n\n    if (res?.commitSha) {\n      setBranchNewCommit(branchName, baseBranch, res.commitSha);\n    }\n    if (\n      branch.result === 'automerged' &&\n      branch.automergeType !== 'pr-comment'\n    ) {\n      // Stop processing other branches because base branch has been changed\n      return 'automerged';\n    }\n    if (!branchExisted && (await scm.branchExists(branch.branchName))) {\n      incCountValue('Branches');\n    }\n  }\n  removeMeta(['branch', 'baseBranch']);\n  return 'done';\n}\n"]}