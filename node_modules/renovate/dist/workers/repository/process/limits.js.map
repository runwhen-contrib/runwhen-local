{"version":3,"file":"limits.js","sourceRoot":"","sources":["../../../../lib/workers/repository/process/limits.ts"],"names":[],"mappings":";;AAQA,4CA2BC;AAED,sDA2BC;AAED,gEAYC;AA9ED,iCAAiC;AAEjC,4CAAyC;AACzC,wDAAqD;AACrD,uDAAoD;AACpD,mFAA8E;AAGvE,KAAK,UAAU,gBAAgB,CACpC,MAAsB;IAEtB,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,mBAAQ,CAAC,SAAS,EAAE,CAAC;QAC1C,MAAM,gBAAgB,GAAG,gBAAQ,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzE,eAAM,CAAC,KAAK,CACV,gEAAgE,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAC3F,CAAC;QACF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CACjC,CAAC,EAAE,EAAE,EAAE,CACL,EAAE,CAAC,YAAY,KAAK,MAAM,CAAC,gBAAgB;YAC3C,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,YAAa,CAAC;YAChD,gBAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,SAAU,CAAC,GAAG,gBAAgB,CACrD,CAAC;QACF,eAAM,CAAC,KAAK,CACV,GAAG,aAAa,CAAC,MAAM,6CAA6C,CACrE,CAAC;QACF,OAAO,aAAa,CAAC,MAAM,CAAC;IAC9B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,qBAAqB;QACrB,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;YACrC,MAAM,GAAG,CAAC;QACZ,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;QAC7D,OAAO,CAAC,CAAC;IACX,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,qBAAqB,CACzC,MAAsB,EACtB,QAAwB;IAExB,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,KAAK,MAAM,EAAE,UAAU,EAAE,IAAI,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,IACE,EAAE;gBACF,EAAE,CAAC,YAAY,KAAK,MAAM,CAAC,gBAAgB;gBAC3C,EAAE,CAAC,KAAK,KAAK,MAAM,EACnB,CAAC;gBACD,WAAW,EAAE,CAAC;YAChB,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,qBAAqB;YACrB,IAAI,GAAG,YAAY,uCAAiB,EAAE,CAAC;gBACrC,MAAM,GAAG,CAAC;YACZ,CAAC;iBAAM,CAAC;gBACN,QAAQ;YACV,CAAC;QACH,CAAC;IACH,CAAC;IAED,eAAM,CAAC,KAAK,CAAC,GAAG,WAAW,yBAAyB,CAAC,CAAC;IACtD,OAAO,WAAW,CAAC;AACrB,CAAC;AAEM,KAAK,UAAU,0BAA0B,CAC9C,QAAwB;IAExB,IAAI,mBAAmB,GAAG,CAAC,CAAC;IAC5B,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE,CAAC;QAC9B,IAAI,MAAM,SAAG,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9C,mBAAmB,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAED,eAAM,CAAC,KAAK,CAAC,GAAG,mBAAmB,mCAAmC,CAAC,CAAC;IACxE,OAAO,mBAAmB,CAAC;AAC7B,CAAC","sourcesContent":["import { DateTime } from 'luxon';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../modules/platform';\nimport { scm } from '../../../modules/platform/scm';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { BranchConfig } from '../../types';\n\nexport async function getPrHourlyCount(\n  config: RenovateConfig,\n): Promise<number> {\n  try {\n    const prList = await platform.getPrList();\n    const currentHourStart = DateTime.local().setZone('utc').startOf('hour');\n    logger.debug(\n      `Calculating PRs created so far in this hour currentHourStart=${String(currentHourStart)}`,\n    );\n    const soFarThisHour = prList.filter(\n      (pr) =>\n        pr.sourceBranch !== config.onboardingBranch &&\n        pr.sourceBranch.startsWith(config.branchPrefix!) &&\n        DateTime.fromISO(pr.createdAt!) > currentHourStart,\n    );\n    logger.debug(\n      `${soFarThisHour.length} PRs have been created so far in this hour.`,\n    );\n    return soFarThisHour.length;\n  } catch (err) {\n    // istanbul ignore if\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.error({ err }, 'Error checking PRs created per hour');\n    return 0;\n  }\n}\n\nexport async function getConcurrentPrsCount(\n  config: RenovateConfig,\n  branches: BranchConfig[],\n): Promise<number> {\n  let openPrCount = 0;\n  for (const { branchName } of branches) {\n    try {\n      const pr = await platform.getBranchPr(branchName, config.baseBranch);\n      if (\n        pr &&\n        pr.sourceBranch !== config.onboardingBranch &&\n        pr.state === 'open'\n      ) {\n        openPrCount++;\n      }\n    } catch (err) {\n      // istanbul ignore if\n      if (err instanceof ExternalHostError) {\n        throw err;\n      } else {\n        // no-op\n      }\n    }\n  }\n\n  logger.debug(`${openPrCount} PRs are currently open`);\n  return openPrCount;\n}\n\nexport async function getConcurrentBranchesCount(\n  branches: BranchConfig[],\n): Promise<number> {\n  let existingBranchCount = 0;\n  for (const branch of branches) {\n    if (await scm.branchExists(branch.branchName)) {\n      existingBranchCount++;\n    }\n  }\n\n  logger.debug(`${existingBranchCount} already existing branches found.`);\n  return existingBranchCount;\n}\n"]}