{"version":3,"file":"package-files.js","sourceRoot":"","sources":["../../../lib/workers/repository/package-files.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../logger';\nimport type { PackageFile } from '../../modules/manager/types';\nimport { clone } from '../../util/clone';\n\nexport class PackageFiles {\n  private static data = new Map<string, Record<string, PackageFile[]> | null>();\n\n  static add(\n    baseBranch: string,\n    packageFiles: Record<string, PackageFile[]> | null,\n  ): void {\n    logger.debug(\n      { baseBranch },\n      `PackageFiles.add() - Package file saved for base branch`,\n    );\n    this.data.set(baseBranch, packageFiles);\n  }\n\n  static clear(): void {\n    logger.debug('PackageFiles.clear() - Package files deleted');\n    this.data.clear();\n  }\n\n  /**\n   * Truncates the detected dependencies' section until it fits the available space\n   * i.e. It has length smaller than maxLength.\n   * This does not mutate the original PackageFiles data\n   * Note:  setHeader=false is used for testing purposes only\n   *        Mainly for comparing truncated and non-truncated markdown\n   * @param maxLength\n   * @param setHeader\n   */\n  static getDashboardMarkdown(maxLength: number, setHeader = true): string {\n    const note =\n      '> â„¹ **Note**\\n> \\n> Detected dependencies section has been truncated\\n\\n';\n    const title = `## Detected dependencies\\n\\n`;\n\n    // exclude header length from the available space\n    const maxHeaderLen = setHeader ? (title + note).length : 0;\n    const mdMaxLength = maxLength - maxHeaderLen;\n\n    let md: string;\n    let header = '';\n    let removed = false;\n    let truncated = false;\n\n    const data = new Map(clone(Array.from(this.data)));\n\n    // filter all deps with skip reason\n    for (const managers of [...data.values()].filter(is.truthy)) {\n      for (const files of Object.values(managers).filter(is.truthy)) {\n        for (const file of files.filter((f) => is.truthy(f.deps))) {\n          file.deps = file.deps.filter(is.truthy).filter((d) => !d.skipReason);\n        }\n      }\n    }\n\n    do {\n      // shorten markdown until it fits\n      md = PackageFiles.getDashboardMarkdownInternal(data);\n      if (md.length > mdMaxLength) {\n        // truncate data\n        removed = PackageFiles.pop(data);\n      }\n      if (removed) {\n        truncated = true; // used to set the truncation Note\n      }\n    } while (removed && md.length > mdMaxLength);\n\n    header += title;\n    header += truncated ? note : '';\n\n    return (setHeader ? header : '') + md;\n  }\n\n  /**\n   * Generates the \"detected dependencies\" markdown\n   * @param data\n   */\n  private static getDashboardMarkdownInternal(\n    data: Map<string, Record<string, PackageFile[]> | null>,\n  ): string {\n    const none = 'None detected\\n\\n';\n    const pad = data.size > 1; // padding condition for a multi base branch repo\n    let deps = '';\n\n    for (const [branch, packageFiles] of data) {\n      deps += pad\n        ? `<details><summary>Branch ${branch}</summary>\\n<blockquote>\\n\\n`\n        : '';\n      if (packageFiles === null) {\n        deps += none;\n        deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n        continue;\n      }\n\n      const managers = Object.keys(packageFiles);\n      if (managers.length === 0) {\n        deps += none;\n        deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n        continue;\n      }\n\n      for (const manager of managers) {\n        deps += `<details><summary>${manager}</summary>\\n<blockquote>\\n\\n`;\n        for (const packageFile of packageFiles[manager]) {\n          deps += `<details><summary>${packageFile.packageFile}</summary>\\n\\n`;\n          for (const dep of packageFile.deps) {\n            const ver = dep.currentValue;\n            const digest = dep.currentDigest;\n            const version =\n              ver && digest ? `${ver}@${digest}` : `${digest ?? ver!}`;\n            // TODO: types (#22198)\n            deps += ` - \\`${dep.depName!} ${version}\\`\\n`;\n          }\n          deps += '\\n</details>\\n\\n';\n        }\n        deps += `</blockquote>\\n</details>\\n\\n`;\n      }\n      deps += pad ? '</blockquote>\\n</details>\\n\\n' : '';\n    }\n\n    return deps;\n  }\n\n  /**\n   * Removes the last dependency/entry in the PackageFiles data\n   * i.e. the last line in the tobe generated detected dependency section\n   * @param data\n   * @Returns true if anything that translates to a markdown written line was deleted\n   *          otherwise false is returned\n   */\n  private static pop(\n    data: Map<string, Record<string, PackageFile[]> | null>,\n  ): boolean {\n    // get detected managers list of the last listed base branch\n    const [branch, managers] = Array.from(data).pop() ?? [];\n    if (!branch) {\n      return false;\n    }\n\n    // delete base branch listing if it has no managers left\n    if (!managers || is.emptyObject(managers)) {\n      return data.delete(branch);\n    }\n\n    // get all manifest files for the last listed manager\n    const [manager, packageFiles] = Object.entries(managers).pop()!;\n\n    // delete current manager if it has no manifest files left\n    if (!packageFiles || is.emptyArray(packageFiles)) {\n      return delete managers[manager];\n    }\n\n    // delete manifest file if it has no deps left\n    const len = packageFiles.length - 1;\n    if (is.emptyArray(packageFiles[len].deps)) {\n      return !!packageFiles.pop();\n    }\n\n    // remove the last listed dependency\n    return !!packageFiles[len].deps.pop();\n  }\n}\n"]}