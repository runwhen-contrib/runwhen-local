{"version":3,"file":"repository-statistics.js","sourceRoot":"","sources":["../../../../lib/workers/repository/finalize/repository-statistics.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RenovateConfig } from '../../../config/types';\nimport { addBranchStats } from '../../../instrumentation/reporting';\nimport { logger } from '../../../logger';\nimport type { Pr } from '../../../modules/platform';\nimport { getCache, isCacheModified } from '../../../util/cache/repository';\nimport type {\n  BranchCache,\n  BranchUpgradeCache,\n} from '../../../util/cache/repository/types';\nimport type {\n  BaseBranchMetadata,\n  BranchMetadata,\n  BranchSummary,\n} from '../../types';\n\nexport function runRenovateRepoStats(\n  config: RenovateConfig,\n  prList: Pr[],\n): void {\n  const prStats = { total: 0, open: 0, closed: 0, merged: 0 };\n\n  for (const pr of prList) {\n    if (\n      pr.title === 'Configure Renovate' ||\n      pr.title === config.onboardingPrTitle\n    ) {\n      continue;\n    }\n    prStats.total += 1;\n    switch (pr.state) {\n      case 'merged':\n        prStats.merged += 1;\n        break;\n      case 'closed':\n        prStats.closed += 1;\n        break;\n      case 'open':\n        prStats.open += 1;\n        break;\n      default:\n        break;\n    }\n  }\n  logger.debug({ stats: prStats }, `Renovate repository PR statistics`);\n}\n\nfunction branchCacheToMetadata({\n  automerge,\n  baseBranch,\n  baseBranchSha,\n  branchName,\n  isModified,\n  pristine: isPristine,\n  sha: branchSha,\n}: BranchCache): BranchMetadata {\n  return {\n    automerge,\n    baseBranch,\n    baseBranchSha,\n    branchName,\n    branchSha,\n    isModified,\n    isPristine,\n  };\n}\n\nfunction filterDependencyDashboardData(\n  branches: BranchCache[],\n): Partial<BranchCache>[] {\n  const branchesFiltered: Partial<BranchCache>[] = [];\n  for (const branch of branches) {\n    const upgradesFiltered: Partial<BranchUpgradeCache>[] = [];\n    const { branchName, prNo, prTitle, result, upgrades, prBlockedBy } = branch;\n\n    for (const upgrade of upgrades ?? []) {\n      const {\n        datasource,\n        depName,\n        displayPending,\n        fixedVersion,\n        currentVersion,\n        currentValue,\n        currentDigest,\n        newValue,\n        newVersion,\n        newDigest,\n        packageFile,\n        updateType,\n        packageName,\n      } = upgrade;\n\n      const filteredUpgrade: Partial<BranchUpgradeCache> = {\n        datasource,\n        depName,\n        displayPending,\n        fixedVersion,\n        currentVersion,\n        currentValue,\n        currentDigest,\n        newValue,\n        newVersion,\n        newDigest,\n        packageFile,\n        updateType,\n        packageName,\n      };\n      upgradesFiltered.push(filteredUpgrade);\n    }\n\n    const filteredBranch: Partial<BranchCache> = {\n      branchName,\n      prNo,\n      prTitle,\n      result,\n      prBlockedBy,\n      upgrades: upgradesFiltered,\n    };\n    branchesFiltered.push(filteredBranch);\n  }\n\n  return branchesFiltered;\n}\n\nexport function runBranchSummary(config: RenovateConfig): void {\n  const defaultBranch = config.defaultBranch;\n  const { scan, branches } = getCache();\n\n  const baseMetadata: BaseBranchMetadata[] = [];\n  for (const [branchName, cached] of Object.entries(scan ?? {})) {\n    baseMetadata.push({ branchName, sha: cached.sha });\n  }\n\n  const branchMetadata: BranchMetadata[] = [];\n  const inactiveBranches: string[] = [];\n\n  for (const branch of branches ?? []) {\n    if (branch.sha) {\n      branchMetadata.push(branchCacheToMetadata(branch));\n    } else {\n      inactiveBranches.push(branch.branchName);\n    }\n  }\n\n  const res: BranchSummary = {\n    cacheModified: isCacheModified(),\n    baseBranches: baseMetadata,\n    branches: branchMetadata,\n    defaultBranch,\n    inactiveBranches,\n  };\n\n  logger.debug(res, 'Branch summary');\n\n  if (branches?.length) {\n    const branchesInformation = filterDependencyDashboardData(branches);\n    addBranchStats(config, branchesInformation);\n    logger.debug({ branchesInformation }, 'branches info extended');\n  }\n}\n"]}