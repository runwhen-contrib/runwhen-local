{"version":3,"file":"commit-message-factory.js","sourceRoot":"","sources":["../../../../lib/workers/repository/model/commit-message-factory.ts"],"names":[],"mappings":";;;AACA,iDAAoD;AAEpD,mEAA8D;AAC9D,uEAAkE;AAUlE,MAAa,oBAAoB;IACd,OAAO,CAAsB;IAE9C,YAAY,MAA2B;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB;YAC5C,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE;YACpC,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAErC,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,2BAA2B;QACjC,MAAM,OAAO,GAAG,IAAI,+CAAqB,EAAE,CAAC;QAE5C,OAAO,CAAC,IAAI,GAAG,IAAA,qBAAY,EAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC7D,OAAO,CAAC,KAAK,GAAG,IAAA,qBAAY,EAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAE/D,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,yBAAyB;QAC/B,MAAM,OAAO,GAAG,IAAI,2CAAmB,EAAE,CAAC;QAC1C,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,IAAI,EAAE,CAAC;QAExD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,IAAY,yBAAyB;QACnC,OAAO,CACL,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB;YACjC,IAAI,CAAC,OAAO,CAAC,eAAe,KAAK,SAAS,CAC3C,CAAC;IACJ,CAAC;CACF;AArCD,oDAqCC","sourcesContent":["import type { RenovateSharedConfig } from '../../../config/types';\nimport { coerceString } from '../../../util/string';\nimport type { CommitMessage } from './commit-message';\nimport { CustomCommitMessage } from './custom-commit-message';\nimport { SemanticCommitMessage } from './semantic-commit-message';\n\ntype CommitMessageConfig = Pick<\n  RenovateSharedConfig,\n  | 'commitMessagePrefix'\n  | 'semanticCommits'\n  | 'semanticCommitScope'\n  | 'semanticCommitType'\n>;\n\nexport class CommitMessageFactory {\n  private readonly _config: CommitMessageConfig;\n\n  constructor(config: CommitMessageConfig) {\n    this._config = config;\n  }\n\n  create(): CommitMessage {\n    const message = this.areSemanticCommitsEnabled\n      ? this.createSemanticCommitMessage()\n      : this.createCustomCommitMessage();\n\n    return message;\n  }\n\n  private createSemanticCommitMessage(): SemanticCommitMessage {\n    const message = new SemanticCommitMessage();\n\n    message.type = coerceString(this._config.semanticCommitType);\n    message.scope = coerceString(this._config.semanticCommitScope);\n\n    return message;\n  }\n\n  private createCustomCommitMessage(): CustomCommitMessage {\n    const message = new CustomCommitMessage();\n    message.prefix = this._config.commitMessagePrefix ?? '';\n\n    return message;\n  }\n\n  private get areSemanticCommitsEnabled(): boolean {\n    return (\n      !this._config.commitMessagePrefix &&\n      this._config.semanticCommits === 'enabled'\n    );\n  }\n}\n"]}