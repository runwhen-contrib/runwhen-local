{"version":3,"file":"semantic-commit-message.js","sourceRoot":"","sources":["../../../../lib/workers/repository/model/semantic-commit-message.ts"],"names":[],"mappings":";;;AACA,qDAAiD;AAOjD;;;;;;GAMG;AACH,MAAa,qBAAsB,SAAQ,8BAAa;IAC9C,MAAM,CAAU,MAAM,GAC5B,yGAAyG,CAAC;IAEpG,MAAM,GAAG,EAAE,CAAC;IACZ,KAAK,GAAG,EAAE,CAAC;IAEnB,MAAM,CAAC,EAAE,CAAC,KAAc;QACtB,OAAO,KAAK,YAAY,qBAAqB,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,KAAa;QAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAExD,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;YACnB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;QACzB,MAAM,OAAO,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC5C,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAC3B,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC7B,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;QAErC,OAAO,OAAO,CAAC;IACjB,CAAC;IAEQ,MAAM;QACb,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QAE5B,OAAO;YACL,GAAG,IAAI;YACP,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,IAAI,EAAE,IAAI,CAAC,KAAK;SACjB,CAAC;IACJ,CAAC;IAED,IAAI,KAAK,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,IAAI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,IAAc,MAAM;QAClB,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;QACzC,CAAC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;;AAvDH,sDAwDC","sourcesContent":["import type { CommitMessageJSON } from '../../../types';\nimport { CommitMessage } from './commit-message';\n\nexport interface SemanticCommitMessageJSON extends CommitMessageJSON {\n  scope?: string;\n  type?: string;\n}\n\n/**\n * @see https://www.conventionalcommits.org/en/v1.0.0/#summary\n *\n * <type>[optional scope]: <description>\n * [optional body]\n * [optional footer]\n */\nexport class SemanticCommitMessage extends CommitMessage {\n  private static readonly REGEXP =\n    /^(?<type>[\\w]+)(\\((?<scope>[\\w-]+)\\))?(?<breaking>!)?: ((?<issue>([A-Z]+-|#)[\\d]+) )?(?<description>.*)/;\n\n  private _scope = '';\n  private _type = '';\n\n  static is(value: unknown): value is SemanticCommitMessage {\n    return value instanceof SemanticCommitMessage;\n  }\n\n  static fromString(value: string): SemanticCommitMessage | undefined {\n    const match = value.match(SemanticCommitMessage.REGEXP);\n\n    if (!match?.groups) {\n      return undefined;\n    }\n\n    const { groups } = match;\n    const message = new SemanticCommitMessage();\n    message.type = groups.type;\n    message.scope = groups.scope;\n    message.subject = groups.description;\n\n    return message;\n  }\n\n  override toJSON(): SemanticCommitMessageJSON {\n    const json = super.toJSON();\n\n    return {\n      ...json,\n      scope: this._scope,\n      type: this._type,\n    };\n  }\n\n  set scope(value: string) {\n    this._scope = this.normalizeInput(value);\n  }\n\n  set type(value: string) {\n    this._type = this.normalizeInput(value);\n  }\n\n  protected get prefix(): string {\n    if (this._type && !this._scope) {\n      return this._type;\n    }\n\n    if (this._scope) {\n      return `${this._type}(${this._scope})`;\n    }\n\n    return '';\n  }\n}\n"]}