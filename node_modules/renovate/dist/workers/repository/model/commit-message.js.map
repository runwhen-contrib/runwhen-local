{"version":3,"file":"commit-message.js","sourceRoot":"","sources":["../../../../lib/workers/repository/model/commit-message.ts"],"names":[],"mappings":";;;;AAAA,kEAAkC;AAGlC;;;;;;GAMG;AACH,MAAsB,aAAa;IACzB,MAAM,CAAU,SAAS,GAAW,GAAG,CAAC;IACxC,MAAM,CAAU,iBAAiB,GAAG,MAAM,CAAC;IAE3C,KAAK,GAAG,EAAE,CAAC;IACX,OAAO,GAAG,EAAE,CAAC;IACb,QAAQ,GAAG,EAAE,CAAC;IAEtB,MAAM,CAAC,YAAY,CAAC,MAAc;QAChC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7C,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,OAAO,GAAG,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;IAC/C,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,OAAO,EAAE,IAAI,CAAC,QAAQ;SACvB,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,MAAM,KAAK,GAAoC;YAC7C,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,OAAO;SACb,CAAC;QAEF,OAAO,KAAK,CAAC,MAAM,CAAC,YAAE,CAAC,8BAA8B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC;IAED,IAAI,KAAK;QACP,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC;aACnE,IAAI,CAAC,GAAG,CAAC;aACT,IAAI,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,MAAM,CAAC,KAAa;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,OAAO,CAAC,KAAa;QACvB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,OAAO,CACpC,aAAa,CAAC,iBAAiB,EAC/B,GAAG,CACJ,CAAC;IACJ,CAAC;IAED,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC;IAIS,cAAc,CAAC,KAAgC;QACvD,OAAO,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAC7B,CAAC;;AA5EH,sCA6EC","sourcesContent":["import is from '@sindresorhus/is';\nimport type { CommitMessageJSON } from '../../../types';\n\n/**\n * @see https://git-scm.com/docs/git-commit#_discussion\n *\n * [optional prefix]: <suject>\n * [optional body]\n * [optional footer]\n */\nexport abstract class CommitMessage {\n  private static readonly SEPARATOR: string = ':';\n  private static readonly EXTRA_WHITESPACES = /\\s+/g;\n\n  private _body = '';\n  private _footer = '';\n  private _subject = '';\n\n  static formatPrefix(prefix: string): string {\n    if (!prefix) {\n      return '';\n    }\n\n    if (prefix.endsWith(CommitMessage.SEPARATOR)) {\n      return prefix;\n    }\n\n    return `${prefix}${CommitMessage.SEPARATOR}`;\n  }\n\n  toJSON(): CommitMessageJSON {\n    return {\n      body: this._body,\n      footer: this._footer,\n      subject: this._subject,\n    };\n  }\n\n  toString(): string {\n    const parts: readonly (string | undefined)[] = [\n      this.title,\n      this._body,\n      this._footer,\n    ];\n\n    return parts.filter(is.nonEmptyStringAndNotWhitespace).join('\\n\\n');\n  }\n\n  get title(): string {\n    return [CommitMessage.formatPrefix(this.prefix), this.formatSubject()]\n      .join(' ')\n      .trim();\n  }\n\n  set body(value: string) {\n    this._body = this.normalizeInput(value);\n  }\n\n  set footer(value: string) {\n    this._footer = this.normalizeInput(value);\n  }\n\n  set subject(value: string) {\n    this._subject = this.normalizeInput(value);\n    this._subject = this._subject?.replace(\n      CommitMessage.EXTRA_WHITESPACES,\n      ' ',\n    );\n  }\n\n  formatSubject(): string {\n    if (!this._subject) {\n      return '';\n    }\n\n    if (this.prefix) {\n      return this._subject.charAt(0).toLowerCase() + this._subject.slice(1);\n    }\n\n    return this._subject.charAt(0).toUpperCase() + this._subject.slice(1);\n  }\n\n  protected abstract get prefix(): string;\n\n  protected normalizeInput(value: string | null | undefined): string {\n    return value?.trim() ?? '';\n  }\n}\n"]}