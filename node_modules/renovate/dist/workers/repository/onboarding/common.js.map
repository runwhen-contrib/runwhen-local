{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/workers/repository/onboarding/common.ts"],"names":[],"mappings":";;;AAKA,4DAEC;AAED,8CAIC;;AAbD,6DAA8D;AAE9D,4CAAyC;AACzC,6EAAuD;AAEvD,SAAgB,wBAAwB,CAAC,MAAsB;IAC7D,OAAO,GAAG,MAAM,CAAC,kBAAkB,IAAI,OAAO,KAAK,MAAM,CAAC,iBAAiB,EAAE,CAAC;AAChF,CAAC;AAED,SAAgB,iBAAiB,CAAC,MAAsB;IACtD,OAAO,6BAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,wBAAyB,CAAC;QAC/D,CAAC,CAAC,MAAM,CAAC,wBAAyB;QAClC,CAAC,CAAC,6BAAe,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,MAAa,eAAe;IAClB,MAAM,CAAU,QAAQ,GAAG,iBAAiB,CAAC;IAC7C,MAAM,CAAU,OAAO,GAAG,sBAAsB,CAAC;IAEzD,MAAM,KAAK,iBAAiB;QAC1B,MAAM,eAAe,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CACpC,eAAe,CAAC,QAAQ,CACzB,CAAC;QACF,eAAM,CAAC,KAAK,CACV,EAAE,KAAK,EAAE,eAAe,EAAE,EAC1B,uCAAuC,CACxC,CAAC;QACF,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,KAAK,iBAAiB,CAAC,KAAc;QACzC,eAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,uCAAuC,CAAC,CAAC;QACjE,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,KAAK,oBAAoB;QAC7B,MAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAC/B,eAAe,CAAC,OAAO,CACxB,CAAC;QACF,eAAM,CAAC,KAAK,CACV,EAAE,KAAK,EAAE,UAAU,EAAE,EACrB,0CAA0C,CAC3C,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,KAAK,oBAAoB,CAAC,KAAc;QAC5C,eAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,0CAA0C,CAAC,CAAC;QACpE,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;;AAlCH,0CAmCC","sourcesContent":["import { configFileNames } from '../../../config/app-strings';\nimport type { RenovateConfig } from '../../../config/types';\nimport { logger } from '../../../logger';\nimport * as memCache from '../../../util/cache/memory';\n\nexport function getSemanticCommitPrTitle(config: RenovateConfig): string {\n  return `${config.semanticCommitType ?? 'chore'}: ${config.onboardingPrTitle}`;\n}\n\nexport function defaultConfigFile(config: RenovateConfig): string {\n  return configFileNames.includes(config.onboardingConfigFileName!)\n    ? config.onboardingConfigFileName!\n    : configFileNames[0];\n}\n\nexport class OnboardingState {\n  private static readonly cacheKey = 'OnboardingState';\n  private static readonly skipKey = 'OnboardingStateValid';\n\n  static get prUpdateRequested(): boolean {\n    const updateRequested = !!memCache.get<boolean | undefined>(\n      OnboardingState.cacheKey,\n    );\n    logger.trace(\n      { value: updateRequested },\n      'Get OnboardingState.prUpdateRequested',\n    );\n    return updateRequested;\n  }\n\n  static set prUpdateRequested(value: boolean) {\n    logger.trace({ value }, 'Set OnboardingState.prUpdateRequested');\n    memCache.set(OnboardingState.cacheKey, value);\n  }\n\n  static get onboardingCacheValid(): boolean {\n    const cacheValid = !!memCache.get<boolean | undefined>(\n      OnboardingState.skipKey,\n    );\n    logger.trace(\n      { value: cacheValid },\n      'Get OnboardingState.onboardingCacheValid',\n    );\n    return cacheValid;\n  }\n\n  static set onboardingCacheValid(value: boolean) {\n    logger.trace({ value }, 'Set OnboardingState.onboardingCacheValid');\n    memCache.set(OnboardingState.skipKey, value);\n  }\n}\n"]}