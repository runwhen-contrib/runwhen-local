{"version":3,"file":"rebase.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/rebase.ts"],"names":[],"mappings":";;AASA,wDAqDC;AA9DD,sDAAyD;AAEzD,+CAA4C;AAC5C,0DAAuD;AACvD,gDAAiD;AACjD,sCAA8C;AAC9C,qDAAkE;AAClE,qCAAuD;AAEhD,KAAK,UAAU,sBAAsB,CAC1C,MAAsB,EACtB,kBAAsC;IAEtC,eAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAE7D,yDAAyD;IACzD,MAAM,QAAQ,GAAG,qBAAY,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;IAC/C,IAAI,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;QACtD,eAAM,CAAC,KAAK,CACV,sBAAsB,QAAQ,iCAAiC,CAChE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,UAAU,GAAG,IAAA,0BAAiB,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,QAAQ,GAAG,MAAM,IAAA,oCAA2B,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACvE,MAAM,iBAAiB,GAAG,IAAA,eAAQ,EAAC,QAAQ,CAAC,CAAC;IAE7C,IAAI,kBAAkB,KAAK,iBAAiB,EAAE,CAAC;QAC7C,eAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CACV,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,EACzC,4BAA4B,CAC7B,CAAC;IAEF,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,oBAAoB,GAAG,IAAI,+CAA8B,CAC7D,MAAM,EACN,UAAU,CACX,CAAC;IACF,MAAM,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC;IAEpD,cAAc;IACd,OAAO,SAAG,CAAC,aAAa,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,UAAU,EAAE,MAAM,CAAC,gBAAiB;QACpC,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,UAAU;gBAChB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;QACjC,cAAc,EAAE,MAAM,CAAC,cAAc;KACtC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { toSha256 } from '../../../../util/hash';\nimport { defaultConfigFile } from '../common';\nimport { OnboardingCommitMessageFactory } from './commit-message';\nimport { getOnboardingConfigContents } from './config';\n\nexport async function rebaseOnboardingBranch(\n  config: RenovateConfig,\n  previousConfigHash: string | undefined,\n): Promise<string | null> {\n  logger.debug('Checking if onboarding branch needs rebasing');\n\n  // skip platforms that do not support html comments in pr\n  const platform = GlobalConfig.get('platform')!;\n  if (!['github', 'gitea', 'gitlab'].includes(platform)) {\n    logger.debug(\n      `Skipping rebase as ${platform} does not support html comments`,\n    );\n    return null;\n  }\n\n  const configFile = defaultConfigFile(config);\n  const contents = await getOnboardingConfigContents(config, configFile);\n  const currentConfigHash = toSha256(contents);\n\n  if (previousConfigHash === currentConfigHash) {\n    logger.debug('No rebase needed');\n    return null;\n  }\n  logger.debug(\n    { previousConfigHash, currentConfigHash },\n    'Rebasing onboarding branch',\n  );\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would rebase files in onboarding branch');\n    return null;\n  }\n\n  const commitMessageFactory = new OnboardingCommitMessageFactory(\n    config,\n    configFile,\n  );\n  const commitMessage = commitMessageFactory.create();\n\n  // TODO #22198\n  return scm.commitAndPush({\n    baseBranch: config.baseBranch,\n    branchName: config.onboardingBranch!,\n    files: [\n      {\n        type: 'addition',\n        path: configFile,\n        contents,\n      },\n    ],\n    message: commitMessage.toString(),\n    platformCommit: config.platformCommit,\n  });\n}\n"]}