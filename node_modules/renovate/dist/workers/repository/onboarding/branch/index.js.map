{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport { mergeChildConfig } from '../../../../config';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { REPOSITORY_NO_PACKAGE_FILES } from '../../../../constants/error-messages';\nimport { logger } from '../../../../logger';\nimport { type Pr, platform } from '../../../../modules/platform';\nimport { scm } from '../../../../modules/platform/scm';\nimport { getCache } from '../../../../util/cache/repository';\nimport { getBranchCommit, setGitAuthor } from '../../../../util/git';\nimport { checkIfConfigured } from '../../configured';\nimport { extractAllDependencies } from '../../extract';\nimport { mergeRenovateConfig } from '../../init/merge';\nimport { OnboardingState } from '../common';\nimport { getOnboardingPr, isOnboarded } from './check';\nimport { getOnboardingConfig } from './config';\nimport { createOnboardingBranch } from './create';\nimport {\n  deleteOnboardingCache,\n  hasOnboardingBranchChanged,\n  isOnboardingBranchConflicted,\n  isOnboardingBranchModified,\n  setOnboardingCache,\n} from './onboarding-branch-cache';\nimport { rebaseOnboardingBranch } from './rebase';\n\nexport async function checkOnboardingBranch(\n  config: RenovateConfig,\n): Promise<RenovateConfig> {\n  logger.debug('checkOnboarding()');\n  logger.trace({ config });\n  let onboardingBranch = config.onboardingBranch;\n  const defaultBranch = config.defaultBranch!;\n  let isConflicted = false;\n  let isModified = false;\n  const repoIsOnboarded = await isOnboarded(config);\n  if (repoIsOnboarded) {\n    logger.debug('Repo is onboarded');\n\n    // delete onboarding cache\n    deleteOnboardingCache();\n    return { ...config, repoIsOnboarded };\n  }\n  checkIfConfigured(config);\n\n  logger.debug('Repo is not onboarded');\n  // global gitAuthor will need to be used\n  setGitAuthor(config.gitAuthor);\n  const onboardingPr = await getOnboardingPr(config);\n  // TODO #22198\n  const branchList = [onboardingBranch!];\n  if (onboardingPr) {\n    logger.debug('Onboarding PR already exists');\n\n    isModified = await isOnboardingBranchModified(\n      config.onboardingBranch!,\n      defaultBranch,\n    );\n    // if onboarding branch is not modified, check if onboarding config has been changed and rebase if true\n    if (!isModified) {\n      const commit = await rebaseOnboardingBranch(\n        config,\n        onboardingPr.bodyStruct?.rawConfigHash,\n      );\n      if (commit) {\n        logger.info(\n          { branch: config.onboardingBranch, commit, onboarding: true },\n          'Branch updated',\n        );\n      }\n      // istanbul ignore if\n      if (platform.refreshPr) {\n        await platform.refreshPr(onboardingPr.number);\n      }\n    }\n    if (config.onboardingRebaseCheckbox) {\n      handleOnboardingManualRebase(onboardingPr);\n    }\n\n    if (\n      isConfigHashPresent(onboardingPr) && // needed so that existing onboarding PRs are updated with config hash comment\n      isOnboardingCacheValid(defaultBranch, config.onboardingBranch!) &&\n      !(config.onboardingRebaseCheckbox && OnboardingState.prUpdateRequested)\n    ) {\n      logger.debug(\n        'Skip processing since the onboarding branch is up to date and default branch has not changed',\n      );\n      OnboardingState.onboardingCacheValid = true;\n      return { ...config, repoIsOnboarded, onboardingBranch, branchList };\n    }\n    OnboardingState.onboardingCacheValid = false;\n    if (isModified) {\n      if (hasOnboardingBranchChanged(config.onboardingBranch!)) {\n        invalidateExtractCache(config.baseBranch!);\n      }\n      isConflicted = await isOnboardingBranchConflicted(\n        config.baseBranch!,\n        config.onboardingBranch!,\n      );\n    }\n  } else {\n    logger.debug('Onboarding PR does not exist');\n    const onboardingConfig = await getOnboardingConfig(config);\n    let mergedConfig = mergeChildConfig(config, onboardingConfig);\n    mergedConfig = await mergeRenovateConfig(mergedConfig);\n    onboardingBranch = mergedConfig.onboardingBranch;\n\n    if (\n      Object.entries((await extractAllDependencies(mergedConfig)).packageFiles)\n        .length === 0\n    ) {\n      if (config.onboardingNoDeps !== 'enabled') {\n        throw new Error(REPOSITORY_NO_PACKAGE_FILES);\n      }\n    }\n    logger.debug('Need to create onboarding PR');\n    if (config.onboardingRebaseCheckbox) {\n      OnboardingState.prUpdateRequested = true;\n    }\n    const commit = await createOnboardingBranch(mergedConfig);\n    // istanbul ignore if\n    if (commit) {\n      logger.info(\n        { branch: onboardingBranch, commit, onboarding: true },\n        'Branch created',\n      );\n    }\n  }\n  if (!GlobalConfig.get('dryRun')) {\n    // TODO #22198\n    if (!isConflicted) {\n      logger.debug('Merge onboarding branch in default branch');\n      await scm.mergeToLocal(onboardingBranch!);\n    }\n  }\n  setOnboardingCache(\n    getBranchCommit(config.defaultBranch!)!,\n    getBranchCommit(onboardingBranch!)!,\n    isConflicted,\n    isModified,\n  );\n\n  return { ...config, repoIsOnboarded, onboardingBranch, branchList };\n}\n\nfunction handleOnboardingManualRebase(onboardingPr: Pr): void {\n  const pl = GlobalConfig.get('platform')!;\n  const { rebaseRequested } = onboardingPr.bodyStruct ?? {};\n  if (!['github', 'gitlab', 'gitea'].includes(pl)) {\n    logger.trace(`Platform '${pl}' does not support extended markdown`);\n    OnboardingState.prUpdateRequested = true;\n  } else if (is.nullOrUndefined(rebaseRequested)) {\n    logger.debug('No rebase checkbox was found in the onboarding PR');\n    OnboardingState.prUpdateRequested = true;\n  } else if (rebaseRequested) {\n    logger.debug('Manual onboarding PR update requested');\n    OnboardingState.prUpdateRequested = true;\n  }\n}\n\nfunction invalidateExtractCache(baseBranch: string): void {\n  const cache = getCache();\n  cache.scan ??= {};\n\n  if (cache.scan?.[baseBranch]) {\n    delete cache.scan[baseBranch];\n  }\n}\n\nfunction isOnboardingCacheValid(\n  defaultBranch: string,\n  onboardingBranch: string,\n): boolean {\n  const cache = getCache();\n  const onboardingBranchCache = cache?.onboardingBranchCache;\n  return !!(\n    onboardingBranchCache &&\n    onboardingBranchCache.defaultBranchSha === getBranchCommit(defaultBranch) &&\n    onboardingBranchCache.onboardingBranchSha ===\n      getBranchCommit(onboardingBranch) &&\n    onboardingBranchCache.configFileName &&\n    onboardingBranchCache.configFileParsed\n  );\n}\n\nfunction isConfigHashPresent(pr: Pr): boolean {\n  const platform = GlobalConfig.get('platform')!;\n  // if platform does not support html comments return true\n  if (!['github', 'gitlab', 'gitea'].includes(platform)) {\n    return true;\n  }\n\n  return !!pr.bodyStruct?.rawConfigHash;\n}\n"]}