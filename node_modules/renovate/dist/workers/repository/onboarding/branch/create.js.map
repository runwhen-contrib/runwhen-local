{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/create.ts"],"names":[],"mappings":";;AAWA,4DAOC;AAED,wDA8CC;AAlED,gEAAiE;AACjE,sDAAyD;AAEzD,+CAA4C;AAC5C,0DAAuD;AACvD,wDAAoD;AACpD,qDAAkE;AAClE,qCAAuD;AAEvD,MAAM,iBAAiB,GAAG,6BAAe,CAAC,CAAC,CAAC,CAAC;AAE7C,SAAgB,wBAAwB,CACtC,MAA+B;IAE/B,cAAc;IACd,OAAO,6BAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,wBAAyB,CAAC;QAC/D,CAAC,CAAC,MAAM,CAAC,wBAAyB;QAClC,CAAC,CAAC,iBAAiB,CAAC;AACxB,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,MAA+B;IAE/B,eAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACzC,MAAM,UAAU,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACpD,cAAc;IACd,MAAM,QAAQ,GAAG,MAAM,IAAA,oCAA2B,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACvE,eAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAE3C,MAAM,oBAAoB,GAAG,IAAI,+CAA8B,CAC7D,MAAM,EACN,UAAU,CACX,CAAC;IACF,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;IAE7D,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QACtB,aAAa,GAAG,GAAG,aAAa,OAAO,IAAA,kBAAO,EAC5C,MAAM,CAAC,UAAU;QACjB,wDAAwD;QACxD,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,CAChC,EAAE,CAAC;QAEJ,eAAM,CAAC,KAAK,CAAC,kBAAkB,aAAa,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,qBAAqB;IACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,SAAG,CAAC,aAAa,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,UAAU,EAAE,MAAM,CAAC,gBAAiB;QACpC,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,cAAc;gBACd,IAAI,EAAE,UAAU;gBAChB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa;QACtB,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { configFileNames } from '../../../../config/app-strings';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { compile } from '../../../../util/template';\nimport { OnboardingCommitMessageFactory } from './commit-message';\nimport { getOnboardingConfigContents } from './config';\n\nconst defaultConfigFile = configFileNames[0];\n\nexport function getDefaultConfigFileName(\n  config: Partial<RenovateConfig>,\n): string {\n  // TODO #22198\n  return configFileNames.includes(config.onboardingConfigFileName!)\n    ? config.onboardingConfigFileName!\n    : defaultConfigFile;\n}\n\nexport async function createOnboardingBranch(\n  config: Partial<RenovateConfig>,\n): Promise<string | null> {\n  logger.debug('createOnboardingBranch()');\n  const configFile = getDefaultConfigFileName(config);\n  // TODO #22198\n  const contents = await getOnboardingConfigContents(config, configFile);\n  logger.debug('Creating onboarding branch');\n\n  const commitMessageFactory = new OnboardingCommitMessageFactory(\n    config,\n    configFile,\n  );\n  let commitMessage = commitMessageFactory.create().toString();\n\n  if (config.commitBody) {\n    commitMessage = `${commitMessage}\\n\\n${compile(\n      config.commitBody,\n      // only allow gitAuthor template value in the commitBody\n      { gitAuthor: config.gitAuthor },\n    )}`;\n\n    logger.trace(`commitMessage: ${commitMessage}`);\n  }\n\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would commit files to onboarding branch');\n    return null;\n  }\n\n  return scm.commitAndPush({\n    baseBranch: config.baseBranch,\n    branchName: config.onboardingBranch!,\n    files: [\n      {\n        type: 'addition',\n        // TODO #22198\n        path: configFile,\n        contents,\n      },\n    ],\n    message: commitMessage,\n    platformCommit: config.platformCommit,\n    force: true,\n  });\n}\n"]}