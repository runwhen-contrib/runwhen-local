{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/onboarding/branch/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport { getPreset } from '../../../../config/presets/local';\nimport { PRESET_DEP_NOT_FOUND } from '../../../../config/presets/util';\nimport type {\n  RenovateConfig,\n  RenovateSharedConfig,\n} from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { clone } from '../../../../util/clone';\nimport { EditorConfig, JSONWriter } from '../../../../util/json-writer';\n\nasync function getOnboardingConfig(\n  config: RenovateConfig,\n): Promise<RenovateSharedConfig | undefined> {\n  let onboardingConfig = clone(config.onboardingConfig);\n\n  // TODO #22198 fix types\n  const foundPreset = await searchDefaultOnboardingPreset(config.repository!);\n\n  if (foundPreset) {\n    logger.debug(`Found preset ${foundPreset} - using it in onboarding config`);\n    onboardingConfig = {\n      $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n      extends: [foundPreset],\n    };\n  } else {\n    // Organization preset did not exist\n    logger.debug(\n      'No default org/owner preset found, so the default onboarding config will be used instead.',\n    );\n  }\n\n  logger.debug({ config: onboardingConfig }, 'onboarding config');\n  return onboardingConfig;\n}\n\nasync function searchDefaultOnboardingPreset(\n  repository: string,\n): Promise<string | undefined> {\n  let foundPreset: string | undefined;\n  logger.debug('Checking for a default Renovate preset which can be used.');\n\n  const repoPathParts = repository.split('/');\n\n  for (\n    let index = repoPathParts.length - 1;\n    index >= 1 && !foundPreset;\n    index--\n  ) {\n    const groupName = repoPathParts.slice(0, index).join('/');\n\n    // Check for group/renovate-config\n    try {\n      const repo = `${groupName}/renovate-config`;\n      const preset = `local>${repo}`;\n      logger.debug(`Checking for preset: ${preset}`);\n      if (await getPreset({ repo })) {\n        foundPreset = preset;\n      }\n    } catch (err) {\n      if (\n        err.message !== PRESET_DEP_NOT_FOUND &&\n        !err.message.startsWith('Unsupported platform')\n      ) {\n        logger.warn({ err }, 'Unknown error fetching default owner preset');\n      }\n    }\n  }\n\n  if (!foundPreset) {\n    // Check for org/.{{platform}}\n\n    const orgName = repoPathParts[0];\n\n    // TODO: types (#22198)\n    const platform = GlobalConfig.get('platform')!;\n    try {\n      const repo = `${orgName}/.${platform}`;\n      const presetName = 'renovate-config';\n      const orgPresetName = `local>${repo}:${presetName}`;\n      logger.debug(`Checking for preset: ${orgPresetName}`);\n\n      if (\n        await getPreset({\n          repo,\n          presetName,\n        })\n      ) {\n        foundPreset = orgPresetName;\n      }\n    } catch (err) {\n      if (\n        err.message !== PRESET_DEP_NOT_FOUND &&\n        !err.message.startsWith('Unsupported platform')\n      ) {\n        logger.warn({ err }, 'Unknown error fetching default owner preset');\n      }\n    }\n  }\n\n  return foundPreset;\n}\n\nasync function getOnboardingConfigContents(\n  config: RenovateConfig,\n  fileName: string,\n): Promise<string> {\n  const codeFormat = await EditorConfig.getCodeFormat(fileName);\n  const jsonWriter = new JSONWriter(codeFormat);\n  const onboardingConfig = await getOnboardingConfig(config);\n  return jsonWriter.write(onboardingConfig);\n}\n\nexport { getOnboardingConfig, getOnboardingConfigContents };\n"]}