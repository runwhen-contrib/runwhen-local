{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../lib/workers/repository/reconfigure/utils.ts"],"names":[],"mappings":";;AAIA,4DAEC;AAED,0CAiBC;;AAzBD,kEAAkC;AAClC,wDAAqD;AAGrD,SAAgB,wBAAwB,CAAC,MAAc;IACrD,OAAO,GAAG,MAAM,aAAa,CAAC;AAChC,CAAC;AAEM,KAAK,UAAU,eAAe,CACnC,UAAkB,EAClB,WAAmB,EACnB,KAAmB,EACnB,OAAuB;IAEvB,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC;QAChC,4DAA4D;QAC5D,OAAO;IACT,CAAC;IAED,MAAM,mBAAQ,CAAC,eAAe,CAAC;QAC7B,UAAU;QACV,OAAO;QACP,WAAW;QACX,KAAK;KACN,CAAC,CAAC;AACL,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport { platform } from '../../../modules/platform';\nimport type { BranchStatus } from '../../../types';\n\nexport function getReconfigureBranchName(prefix: string): string {\n  return `${prefix}reconfigure`;\n}\n\nexport async function setBranchStatus(\n  branchName: string,\n  description: string,\n  state: BranchStatus,\n  context?: string | null,\n): Promise<void> {\n  if (!is.nonEmptyString(context)) {\n    // already logged this case when validating the status check\n    return;\n  }\n\n  await platform.setBranchStatus({\n    branchName,\n    context,\n    description,\n    state,\n  });\n}\n"]}