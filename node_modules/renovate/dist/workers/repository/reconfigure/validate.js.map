{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../lib/workers/repository/reconfigure/validate.ts"],"names":[],"mappings":";;AAiBA,8DAqJC;;AAtKD,kEAAkC;AAClC,0DAA0B;AAC1B,qDAAwD;AAExD,2DAA4D;AAC5D,4CAAyC;AACzC,wDAAqD;AACrD,+DAAkE;AAClE,uDAAoD;AACpD,+DAA0D;AAC1D,yCAAiD;AACjD,2CAAoD;AACpD,+CAA4C;AAC5C,yCAAiD;AACjD,2DAAgE;AAChE,mCAAoE;AAE7D,KAAK,UAAU,yBAAyB,CAC7C,MAAsB;IAEtB,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAE5C,MAAM,OAAO,GAAG,MAAM,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;IAC1D,MAAM,UAAU,GAAG,IAAA,gCAAwB,EAAC,MAAM,CAAC,YAAa,CAAC,CAAC;IAElE,uBAAuB;IACvB,4EAA4E;IAC5E,mGAAmG;IACnG,MAAM,SAAS,GAAG,IAAA,qBAAe,EAAC,UAAU,CAAE,CAAC;IAC/C,MAAM,KAAK,GAAG,IAAA,qBAAQ,GAAE,CAAC;IACzB,IAAI,cAAc,GAAkB,IAAI,CAAC;IACzC,MAAM,gBAAgB,GAAG,KAAK,CAAC,sBAAsB,CAAC;IACtD,oCAAoC;IACpC,IAAI,gBAAgB,EAAE,oBAAoB,KAAK,SAAS,EAAE,CAAC;QACzD,eAAM,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;QACrE,OAAO;IACT,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACZ,MAAM,gBAAgB,GAAG,MAAM,mBAAQ,CAAC,oBAAoB,CAC1D,UAAU,EACV,OAAO,CACR,CAAC;QAEF,iDAAiD;QACjD,IAAI,YAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACxC,eAAM,CAAC,KAAK,CACV,gEAAgE,CACjE,CAAC;YACF,OAAO;QACT,CAAC;IACH,CAAC;SAAM,CAAC;QACN,eAAM,CAAC,KAAK,CACV,0EAA0E,CAC3E,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,MAAM,SAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACrC,cAAc,GAAG,MAAM,IAAA,wBAAgB,GAAE,CAAC;IAC5C,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,6DAA6D,CAC9D,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC;QACvC,eAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAC1D,MAAM,IAAA,uBAAe,EACnB,UAAU,EACV,0CAA0C,EAC1C,KAAK,EACL,OAAO,CACR,CAAC;QACF,IAAA,6CAAyB,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,aAAc,CAAC,CAAC;QAChD,OAAO;IACT,CAAC;IAED,IAAI,aAAa,GAAkB,IAAI,CAAC;IACxC,IAAI,CAAC;QACH,aAAa,GAAG,MAAM,IAAA,kBAAa,EAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,iCAAiC,CAAC,CAAC;IAC3D,CAAC;IAED,IAAI,CAAC,YAAE,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC;QACtC,eAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC5C,MAAM,IAAA,uBAAe,EACnB,UAAU,EACV,+CAA+C,EAC/C,KAAK,EACL,OAAO,CACR,CAAC;QACF,IAAA,6CAAyB,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,UAAW,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,IAAI,gBAAqB,CAAC;IAC1B,IAAI,CAAC;QACH,gBAAgB,GAAG,eAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC9C,6FAA6F;QAC7F,IAAI,cAAc,KAAK,cAAc,EAAE,CAAC;YACtC,gBAAgB,GAAG,gBAAgB,CAAC,QAAQ,CAAC;QAC/C,CAAC;IACH,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,iCAAiC,CAAC,CAAC;QACzD,MAAM,IAAA,uBAAe,EACnB,UAAU,EACV,4CAA4C,EAC5C,KAAK,EACL,OAAO,CACR,CAAC;QACF,IAAA,6CAAyB,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,UAAW,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,4EAA4E;IAC5E,MAAM,cAAc,GAAG,IAAA,uBAAa,EAAC,gBAAgB,CAAC,CAAC;IACvD,MAAM,gBAAgB,GAAG,MAAM,IAAA,2BAAc,EAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAEtE,gBAAgB;IAChB,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACvC,eAAM,CAAC,KAAK,CACV,EAAE,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EACxE,mBAAmB,CACpB,CAAC;QAEF,MAAM,aAAa,GAAG,MAAM,mBAAQ,CAAC,MAAM,CAAC;YAC1C,UAAU;YACV,KAAK,EAAE,MAAM;YACb,mBAAmB,EAAE,IAAI;YACzB,YAAY,EAAE,MAAM,CAAC,aAAa;SACnC,CAAC,CAAC;QAEH,6CAA6C;QAC7C,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,IAAI,GAAG,6FAA6F,CAAC;YACzG,IAAI,IAAI,eAAe,cAAc,MAAM,CAAC;YAC5C,IAAI,IAAI,cAAc,gBAAgB,CAAC,MAAM;iBAC1C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;iBACrB,IAAI,CAAC,IAAI,CAAC;iBACV,OAAO,CAAC,IAAA,aAAK,EAAC,IAAI,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC;YAEnC,MAAM,IAAA,uBAAa,EAAC;gBAClB,MAAM,EAAE,aAAa,CAAC,MAAM;gBAC5B,KAAK,EAAE,6CAA6C;gBACpD,OAAO,EAAE,IAAI;aACd,CAAC,CAAC;QACL,CAAC;QAED,MAAM,IAAA,uBAAe,EAAC,UAAU,EAAE,mBAAmB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QACvE,IAAA,6CAAyB,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,UAAW,CAAC,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,gBAAgB;IAChB,MAAM,IAAA,uBAAe,EAAC,UAAU,EAAE,uBAAuB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAE7E,IAAA,6CAAyB,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC3C,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,UAAW,CAAC,CAAC;IAC7C,OAAO;AACT,CAAC","sourcesContent":["import is from '@sindresorhus/is';\nimport JSON5 from 'json5';\nimport { massageConfig } from '../../../config/massage';\nimport type { RenovateConfig } from '../../../config/types';\nimport { validateConfig } from '../../../config/validation';\nimport { logger } from '../../../logger';\nimport { platform } from '../../../modules/platform';\nimport { ensureComment } from '../../../modules/platform/comment';\nimport { scm } from '../../../modules/platform/scm';\nimport { getCache } from '../../../util/cache/repository';\nimport { readLocalFile } from '../../../util/fs';\nimport { getBranchCommit } from '../../../util/git';\nimport { regEx } from '../../../util/regex';\nimport { detectConfigFile } from '../init/merge';\nimport { setReconfigureBranchCache } from './reconfigure-cache';\nimport { getReconfigureBranchName, setBranchStatus } from './utils';\n\nexport async function validateReconfigureBranch(\n  config: RenovateConfig,\n): Promise<void> {\n  logger.debug('validateReconfigureBranch()');\n\n  const context = config.statusCheckNames?.configValidation;\n  const branchName = getReconfigureBranchName(config.branchPrefix!);\n\n  // look for config file\n  // 1. check reconfigure branch cache and use the configFileName if it exists\n  // 2. checkout reconfigure branch and look for the config file, don't assume default configFileName\n  const branchSha = getBranchCommit(branchName)!;\n  const cache = getCache();\n  let configFileName: string | null = null;\n  const reconfigureCache = cache.reconfigureBranchCache;\n  // only use valid cached information\n  if (reconfigureCache?.reconfigureBranchSha === branchSha) {\n    logger.debug('Skipping validation check as branch sha is unchanged');\n    return;\n  }\n\n  if (context) {\n    const validationStatus = await platform.getBranchStatusCheck(\n      branchName,\n      context,\n    );\n\n    // if old status check is present skip validation\n    if (is.nonEmptyString(validationStatus)) {\n      logger.debug(\n        'Skipping validation check because status check already exists.',\n      );\n      return;\n    }\n  } else {\n    logger.debug(\n      'Status check is null or an empty string, skipping status check addition.',\n    );\n  }\n\n  try {\n    await scm.checkoutBranch(branchName);\n    configFileName = await detectConfigFile();\n  } catch (err) {\n    logger.error(\n      { err },\n      'Error while searching for config file in reconfigure branch',\n    );\n  }\n\n  if (!is.nonEmptyString(configFileName)) {\n    logger.warn('No config file found in reconfigure branch');\n    await setBranchStatus(\n      branchName,\n      'Validation Failed - No config file found',\n      'red',\n      context,\n    );\n    setReconfigureBranchCache(branchSha, false);\n    await scm.checkoutBranch(config.defaultBranch!);\n    return;\n  }\n\n  let configFileRaw: string | null = null;\n  try {\n    configFileRaw = await readLocalFile(configFileName, 'utf8');\n  } catch (err) {\n    logger.error({ err }, 'Error while reading config file');\n  }\n\n  if (!is.nonEmptyString(configFileRaw)) {\n    logger.warn('Empty or invalid config file');\n    await setBranchStatus(\n      branchName,\n      'Validation Failed - Empty/Invalid config file',\n      'red',\n      context,\n    );\n    setReconfigureBranchCache(branchSha, false);\n    await scm.checkoutBranch(config.baseBranch!);\n    return;\n  }\n\n  let configFileParsed: any;\n  try {\n    configFileParsed = JSON5.parse(configFileRaw);\n    // no need to confirm renovate field in package.json we already do it in `detectConfigFile()`\n    if (configFileName === 'package.json') {\n      configFileParsed = configFileParsed.renovate;\n    }\n  } catch (err) {\n    logger.error({ err }, 'Error while parsing config file');\n    await setBranchStatus(\n      branchName,\n      'Validation Failed - Unparsable config file',\n      'red',\n      context,\n    );\n    setReconfigureBranchCache(branchSha, false);\n    await scm.checkoutBranch(config.baseBranch!);\n    return;\n  }\n\n  // perform validation and provide a passing or failing check based on result\n  const massagedConfig = massageConfig(configFileParsed);\n  const validationResult = await validateConfig('repo', massagedConfig);\n\n  // failing check\n  if (validationResult.errors.length > 0) {\n    logger.debug(\n      { errors: validationResult.errors.map((err) => err.message).join(', ') },\n      'Validation Errors',\n    );\n\n    const reconfigurePr = await platform.findPr({\n      branchName,\n      state: 'open',\n      includeOtherAuthors: true,\n      targetBranch: config.defaultBranch,\n    });\n\n    // add comment to reconfigure PR if it exists\n    if (reconfigurePr) {\n      let body = `There is an error with this repository's Renovate configuration that needs to be fixed.\\n\\n`;\n      body += `Location: \\`${configFileName}\\`\\n`;\n      body += `Message: \\`${validationResult.errors\n        .map((e) => e.message)\n        .join(', ')\n        .replace(regEx(/`/g), \"'\")}\\`\\n`;\n\n      await ensureComment({\n        number: reconfigurePr.number,\n        topic: 'Action Required: Fix Renovate Configuration',\n        content: body,\n      });\n    }\n\n    await setBranchStatus(branchName, 'Validation Failed', 'red', context);\n    setReconfigureBranchCache(branchSha, false);\n    await scm.checkoutBranch(config.baseBranch!);\n    return;\n  }\n\n  // passing check\n  await setBranchStatus(branchName, 'Validation Successful', 'green', context);\n\n  setReconfigureBranchCache(branchSha, true);\n  await scm.checkoutBranch(config.baseBranch!);\n  return;\n}\n"]}