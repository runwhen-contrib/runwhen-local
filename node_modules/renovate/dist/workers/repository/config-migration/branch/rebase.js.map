{"version":3,"file":"rebase.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/rebase.ts"],"names":[],"mappings":";;AAYA,sDA6CC;AAMD,oDAeC;;AA9ED,0DAA0B;AAC1B,sDAAyD;AAEzD,+CAA4C;AAC5C,0DAAuD;AACvD,8CAA+C;AAC/C,0DAA4D;AAC5D,sCAAmD;AACnD,qDAAuE;AACvE,mDAAsD;AAG/C,KAAK,UAAU,qBAAqB,CACzC,MAAsB,EACtB,kBAAgC;IAEhC,eAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,MAAM,CAAC,aAAc,CAAC;IACzC,MAAM,UAAU,GAAG,IAAA,+BAAsB,EAAC,MAAM,CAAC,CAAC;IAClD,MAAM,cAAc,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IACnD,IAAI,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAC1C,MAAM,gBAAgB,GAAG,MAAM,IAAA,aAAO,EAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACnE,IACE,oBAAoB,CAAC,QAAQ,CAAC,KAAK,oBAAoB,CAAC,gBAAgB,CAAC,EACzE,CAAC;QACD,eAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,eAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAE1C,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,oBAAoB,GAAG,IAAI,oDAAmC,CAClE,MAAM,EACN,cAAc,CACf,CAAC;IACF,MAAM,aAAa,GAAG,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;IAE9D,MAAM,SAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACrC,QAAQ;QACN,MAAM,mCAAmB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;IACxE,OAAO,SAAG,CAAC,aAAa,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,UAAU;QACV,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,cAAc;gBACpB,QAAQ;aACT;SACF;QACD,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;QACjC,cAAc,EAAE,MAAM,CAAC,cAAc;KACtC,CAAC,CAAC;AACL,CAAC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAAC,IAAmB;IACtD,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IACD;;;;;;OAMG;IACH,OAAO,CACL,IAAA,0BAAc,EAAC,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjC,+CAA+C,CAAC,IAAI,CACrD,CAAC;AACJ,CAAC","sourcesContent":["import JSON5 from 'json5';\nimport { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { getFile } from '../../../../util/git';\nimport { quickStringify } from '../../../../util/stringify';\nimport { getMigrationBranchName } from '../common';\nimport { ConfigMigrationCommitMessageFactory } from './commit-message';\nimport { MigratedDataFactory } from './migrated-data';\nimport type { MigratedData } from './migrated-data';\n\nexport async function rebaseMigrationBranch(\n  config: RenovateConfig,\n  migratedConfigData: MigratedData,\n): Promise<string | null> {\n  logger.debug('Checking if migration branch needs rebasing');\n  const baseBranch = config.defaultBranch!;\n  const branchName = getMigrationBranchName(config);\n  const configFileName = migratedConfigData.filename;\n  let contents = migratedConfigData.content;\n  const existingContents = await getFile(configFileName, branchName);\n  if (\n    jsonStripWhitespaces(contents) === jsonStripWhitespaces(existingContents)\n  ) {\n    logger.debug('Migration branch is up to date');\n    return null;\n  }\n  logger.debug('Rebasing migration branch');\n\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would rebase files in migration branch');\n    return null;\n  }\n\n  const commitMessageFactory = new ConfigMigrationCommitMessageFactory(\n    config,\n    configFileName,\n  );\n  const commitMessage = commitMessageFactory.getCommitMessage();\n\n  await scm.checkoutBranch(baseBranch);\n  contents =\n    await MigratedDataFactory.applyPrettierFormatting(migratedConfigData);\n  return scm.commitAndPush({\n    baseBranch: config.baseBranch,\n    branchName,\n    files: [\n      {\n        type: 'addition',\n        path: configFileName,\n        contents,\n      },\n    ],\n    message: commitMessage.toString(),\n    platformCommit: config.platformCommit,\n  });\n}\n\n/**\n * @param json a JSON string\n * @return a minimal json string. i.e. does not contain any formatting/whitespaces\n */\nexport function jsonStripWhitespaces(json: string | null): string | null {\n  if (!json) {\n    return null;\n  }\n  /**\n   * JSON.stringify(value, replacer, space):\n   * If \"space\" is anything other than a string or number —\n   * for example, is null or not provided — no white space is used.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#parameters\n   */\n  return (\n    quickStringify(JSON5.parse(json)) ??\n    /* istanbul ignore next: should never happen */ null\n  );\n}\n"]}