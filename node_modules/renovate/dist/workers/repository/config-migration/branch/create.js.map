{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/config-migration/branch/create.ts"],"names":[],"mappings":";;AAYA,kEAiEC;AA7ED,sDAAyD;AAEzD,+CAA4C;AAC5C,0DAAuD;AACvD,oDAAoD;AACpD,4CAAoD;AAEpD,sCAAmD;AACnD,qDAAuE;AACvE,mDAA+E;AAGxE,KAAK,UAAU,2BAA2B,CAC/C,MAA+B,EAC/B,kBAAgC;IAEhC,eAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAC9C,MAAM,cAAc,GAAG,kBAAkB,CAAC,QAAQ,KAAK,cAAc,CAAC;IACtE,MAAM,cAAc,GAAG,cAAc;QACnC,CAAC,CAAC,eAAe;QACjB,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC;IAChC,eAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;IAEjD,MAAM,oBAAoB,GAAG,IAAI,oDAAmC,CAClE,MAAM,EACN,cAAc,CACf,CAAC;IAEF,MAAM,aAAa,GAAG,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;IAE9D,qBAAqB;IACrB,IAAI,qBAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;QACtE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,SAAG,CAAC,cAAc,CAAC,MAAM,CAAC,aAAc,CAAC,CAAC;IAChD,MAAM,QAAQ,GACZ,MAAM,mCAAmB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;IAExE,MAAM,KAAK,GAAiB;QAC1B;YACE,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,cAAc;YACpB,QAAQ;SACT;KACF,CAAC;IAEF,IAAI,cAAc,EAAE,CAAC;QACnB,MAAM,KAAK,GAAG,IAAA,kBAAS,EACrB,MAAM,IAAA,kBAAa,EAAC,cAAc,EAAE,MAAM,CAAC,EAC3C,cAAc,CACY,CAAC;QAC7B,IAAI,KAAK,EAAE,QAAQ,EAAE,CAAC;YACpB,OAAO,KAAK,CAAC,QAAQ,CAAC;QACxB,CAAC;QACD,MAAM,YAAY,GAAG,MAAM,IAAA,uCAAuB,EAChD,cAAc,EACd,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,kBAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,EAClE,MAAM,EACN,kBAAkB,CAAC,MAAM,CAC1B,CAAC;QACF,KAAK,CAAC,IAAI,CAAC;YACT,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,YAAY;SACvB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,SAAG,CAAC,aAAa,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,UAAU,EAAE,IAAA,+BAAsB,EAAC,MAAM,CAAC;QAC1C,KAAK;QACL,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;QACjC,cAAc,EAAE,MAAM,CAAC,cAAc;QACrC,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { GlobalConfig } from '../../../../config/global';\nimport type { RenovateConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\nimport { scm } from '../../../../modules/platform/scm';\nimport { parseJson } from '../../../../util/common';\nimport { readLocalFile } from '../../../../util/fs';\nimport type { FileChange } from '../../../../util/git/types';\nimport { getMigrationBranchName } from '../common';\nimport { ConfigMigrationCommitMessageFactory } from './commit-message';\nimport { MigratedDataFactory, applyPrettierFormatting } from './migrated-data';\nimport type { MigratedData } from './migrated-data';\n\nexport async function createConfigMigrationBranch(\n  config: Partial<RenovateConfig>,\n  migratedConfigData: MigratedData,\n): Promise<string | null> {\n  logger.debug('createConfigMigrationBranch()');\n  const pJsonMigration = migratedConfigData.filename === 'package.json';\n  const configFileName = pJsonMigration\n    ? 'renovate.json'\n    : migratedConfigData.filename;\n  logger.debug('Creating config migration branch');\n\n  const commitMessageFactory = new ConfigMigrationCommitMessageFactory(\n    config,\n    configFileName,\n  );\n\n  const commitMessage = commitMessageFactory.getCommitMessage();\n\n  // istanbul ignore if\n  if (GlobalConfig.get('dryRun')) {\n    logger.info('DRY-RUN: Would commit files to config migration branch');\n    return Promise.resolve(null);\n  }\n\n  await scm.checkoutBranch(config.defaultBranch!);\n  const contents =\n    await MigratedDataFactory.applyPrettierFormatting(migratedConfigData);\n\n  const files: FileChange[] = [\n    {\n      type: 'addition',\n      path: configFileName,\n      contents,\n    },\n  ];\n\n  if (pJsonMigration) {\n    const pJson = parseJson(\n      await readLocalFile('package.json', 'utf8'),\n      'package.json',\n    ) as Record<string, unknown>;\n    if (pJson?.renovate) {\n      delete pJson.renovate;\n    }\n    const pJsonContent = await applyPrettierFormatting(\n      'package.json',\n      JSON.stringify(pJson, undefined, migratedConfigData.indent.indent),\n      'json',\n      migratedConfigData.indent,\n    );\n    files.push({\n      type: 'addition',\n      path: 'package.json',\n      contents: pJsonContent,\n    });\n  }\n\n  return scm.commitAndPush({\n    baseBranch: config.baseBranch,\n    branchName: getMigrationBranchName(config),\n    files,\n    message: commitMessage.toString(),\n    platformCommit: config.platformCommit,\n    force: true,\n  });\n}\n"]}