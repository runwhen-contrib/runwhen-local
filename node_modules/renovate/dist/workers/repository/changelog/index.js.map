{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/workers/repository/changelog/index.ts"],"names":[],"mappings":";;AAIA,wCAQC;AAED,0CAIC;;AAlBD,kEAA4C;AAE5C,sDAA0D;AAEnD,KAAK,UAAU,cAAc,CAClC,OAA4B;IAE5B,6DAA6D;IAC7D,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QAClC,OAAO;IACT,CAAC;IACD,OAAO,CAAC,OAAO,GAAG,MAAM,IAAA,4BAAgB,EAAC,OAAO,CAAC,CAAC;AACpD,CAAC;AAEM,KAAK,UAAU,eAAe,CACnC,QAA+B;IAE/B,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["import * as p from '../../../util/promises';\nimport type { BranchUpgradeConfig } from '../../types';\nimport { getChangeLogJSON } from '../update/pr/changelog';\n\nexport async function embedChangelog(\n  upgrade: BranchUpgradeConfig,\n): Promise<void> {\n  // getChangeLogJSON returns null on error, so don't try again\n  if (upgrade.logJSON !== undefined) {\n    return;\n  }\n  upgrade.logJSON = await getChangeLogJSON(upgrade);\n}\n\nexport async function embedChangelogs(\n  branches: BranchUpgradeConfig[],\n): Promise<void> {\n  await p.map(branches, embedChangelog, { concurrency: 10 });\n}\n"]}