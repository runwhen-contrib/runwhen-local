{"version":3,"file":"AwsEcsDetector.js","sourceRoot":"","sources":["../../../src/detectors/AwsEcsDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  ResourceDetector,\n  DetectedResource,\n  DetectedResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_AWS_ECS_CLUSTER_ARN,\n  ATTR_AWS_ECS_CONTAINER_ARN,\n  ATTR_AWS_ECS_LAUNCHTYPE,\n  ATTR_AWS_ECS_TASK_ARN,\n  ATTR_AWS_ECS_TASK_FAMILY,\n  ATTR_AWS_ECS_TASK_REVISION,\n  ATTR_AWS_LOG_GROUP_ARNS,\n  ATTR_AWS_LOG_GROUP_NAMES,\n  ATTR_AWS_LOG_STREAM_ARNS,\n  ATTR_AWS_LOG_STREAM_NAMES,\n  ATTR_CLOUD_ACCOUNT_ID,\n  ATTR_CLOUD_AVAILABILITY_ZONE,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_REGION,\n  ATTR_CLOUD_RESOURCE_ID,\n  ATTR_CONTAINER_ID,\n  ATTR_CONTAINER_NAME,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_ECS,\n} from '../semconv';\nimport * as http from 'http';\nimport * as util from 'util';\nimport * as fs from 'fs';\nimport * as os from 'os';\n\nconst HTTP_TIMEOUT_IN_MS = 1000;\n\ninterface AwsLogOptions {\n  readonly 'awslogs-region'?: string;\n  readonly 'awslogs-group'?: string;\n  readonly 'awslogs-stream'?: string;\n}\n\n/**\n * The AwsEcsDetector can be used to detect if a process is running in AWS\n * ECS and return a {@link Resource} populated with data about the ECS\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n */\nexport class AwsEcsDetector implements ResourceDetector {\n  static readonly CONTAINER_ID_LENGTH = 64;\n  static readonly DEFAULT_CGROUP_PATH = '/proc/self/cgroup';\n\n  private static readFileAsync = util.promisify(fs.readFile);\n\n  detect(): DetectedResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return { attributes };\n  }\n\n  private _getAttributes(): DetectedResourceAttributes {\n    if (\n      !process.env.ECS_CONTAINER_METADATA_URI_V4 &&\n      !process.env.ECS_CONTAINER_METADATA_URI\n    ) {\n      diag.debug('AwsEcsDetector: Process is not on ECS');\n      return {};\n    }\n\n    const dataPromise = this._gatherData();\n\n    const attrNames = [\n      ATTR_CLOUD_PROVIDER,\n      ATTR_CLOUD_PLATFORM,\n      ATTR_CONTAINER_NAME,\n      ATTR_CONTAINER_ID,\n\n      // Added in _addMetadataV4Attrs\n      ATTR_AWS_ECS_CONTAINER_ARN,\n      ATTR_AWS_ECS_CLUSTER_ARN,\n      ATTR_AWS_ECS_LAUNCHTYPE,\n      ATTR_AWS_ECS_TASK_ARN,\n      ATTR_AWS_ECS_TASK_FAMILY,\n      ATTR_AWS_ECS_TASK_REVISION,\n      ATTR_CLOUD_ACCOUNT_ID,\n      ATTR_CLOUD_REGION,\n      ATTR_CLOUD_RESOURCE_ID,\n      ATTR_CLOUD_AVAILABILITY_ZONE,\n\n      // Added in _addLogAttrs\n      ATTR_AWS_LOG_GROUP_NAMES,\n      ATTR_AWS_LOG_GROUP_ARNS,\n      ATTR_AWS_LOG_STREAM_NAMES,\n      ATTR_AWS_LOG_STREAM_ARNS,\n    ];\n\n    const attributes = {} as DetectedResourceAttributes;\n    attrNames.forEach(name => {\n      // Each resource attribute is determined asynchronously in _gatherData().\n      attributes[name] = dataPromise.then(data => data[name]);\n    });\n    return attributes;\n  }\n\n  private async _gatherData(): Promise<DetectedResourceAttributes> {\n    try {\n      const data = {\n        [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n        [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_ECS,\n        [ATTR_CONTAINER_NAME]: os.hostname(),\n        [ATTR_CONTAINER_ID]: await this._getContainerId(),\n      };\n\n      const metadataUrl = process.env.ECS_CONTAINER_METADATA_URI_V4;\n      if (metadataUrl) {\n        const [containerMetadata, taskMetadata] = await Promise.all([\n          AwsEcsDetector._getUrlAsJson(metadataUrl),\n          AwsEcsDetector._getUrlAsJson(`${metadataUrl}/task`),\n        ]);\n\n        AwsEcsDetector._addMetadataV4Attrs(\n          data,\n          containerMetadata,\n          taskMetadata\n        );\n        AwsEcsDetector._addLogAttrs(data, containerMetadata);\n      }\n      return data;\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Read container ID from cgroup file\n   * In ECS, even if we fail to find target file\n   * or target file does not contain container ID\n   * we do not throw an error but throw warning message\n   * and then return undefined.\n   */\n  private async _getContainerId(): Promise<string | undefined> {\n    let containerId = undefined;\n    try {\n      const rawData = await AwsEcsDetector.readFileAsync(\n        AwsEcsDetector.DEFAULT_CGROUP_PATH,\n        'utf8'\n      );\n      const splitData = rawData.trim().split('\\n');\n      for (const str of splitData) {\n        if (str.length > AwsEcsDetector.CONTAINER_ID_LENGTH) {\n          containerId = str.substring(\n            str.length - AwsEcsDetector.CONTAINER_ID_LENGTH\n          );\n          break;\n        }\n      }\n    } catch (e) {\n      diag.debug('AwsEcsDetector failed to read container ID', e);\n    }\n    return containerId;\n  }\n\n  /**\n   * Add metadata-v4-related resource attributes to `data` (in-place)\n   */\n  private static _addMetadataV4Attrs(\n    data: DetectedResourceAttributes,\n    containerMetadata: any,\n    taskMetadata: any\n  ) {\n    const launchType: string = taskMetadata['LaunchType'];\n    const taskArn: string = taskMetadata['TaskARN'];\n\n    const baseArn: string = taskArn.substring(0, taskArn.lastIndexOf(':'));\n    const cluster: string = taskMetadata['Cluster'];\n\n    const accountId: string = AwsEcsDetector._getAccountFromArn(taskArn);\n    const region: string = AwsEcsDetector._getRegionFromArn(taskArn);\n    const availabilityZone: string | undefined = taskMetadata?.AvailabilityZone;\n\n    const clusterArn = cluster.startsWith('arn:')\n      ? cluster\n      : `${baseArn}:cluster/${cluster}`;\n\n    const containerArn: string = containerMetadata['ContainerARN'];\n\n    // https://github.com/open-telemetry/semantic-conventions/blob/main/semantic_conventions/resource/cloud_provider/aws/ecs.yaml\n    data[ATTR_AWS_ECS_CONTAINER_ARN] = containerArn;\n    data[ATTR_AWS_ECS_CLUSTER_ARN] = clusterArn;\n    data[ATTR_AWS_ECS_LAUNCHTYPE] = launchType?.toLowerCase();\n    data[ATTR_AWS_ECS_TASK_ARN] = taskArn;\n    data[ATTR_AWS_ECS_TASK_FAMILY] = taskMetadata['Family'];\n    data[ATTR_AWS_ECS_TASK_REVISION] = taskMetadata['Revision'];\n\n    data[ATTR_CLOUD_ACCOUNT_ID] = accountId;\n    data[ATTR_CLOUD_REGION] = region;\n    data[ATTR_CLOUD_RESOURCE_ID] = containerArn;\n\n    // The availability zone is not available in all Fargate runtimes\n    if (availabilityZone) {\n      data[ATTR_CLOUD_AVAILABILITY_ZONE] = availabilityZone;\n    }\n  }\n\n  private static _addLogAttrs(\n    data: DetectedResourceAttributes,\n    containerMetadata: any\n  ) {\n    if (\n      containerMetadata['LogDriver'] !== 'awslogs' ||\n      !containerMetadata['LogOptions']\n    ) {\n      return;\n    }\n\n    const containerArn = containerMetadata['ContainerARN']!;\n    const logOptions = containerMetadata['LogOptions'] as AwsLogOptions;\n\n    const logsRegion =\n      logOptions['awslogs-region'] ||\n      AwsEcsDetector._getRegionFromArn(containerArn);\n\n    const awsAccount = AwsEcsDetector._getAccountFromArn(containerArn);\n\n    const logsGroupName = logOptions['awslogs-group']!;\n    const logsGroupArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}`;\n    const logsStreamName = logOptions['awslogs-stream']!;\n    const logsStreamArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}:log-stream:${logsStreamName}`;\n\n    data[ATTR_AWS_LOG_GROUP_NAMES] = [logsGroupName];\n    data[ATTR_AWS_LOG_GROUP_ARNS] = [logsGroupArn];\n    data[ATTR_AWS_LOG_STREAM_NAMES] = [logsStreamName];\n    data[ATTR_AWS_LOG_STREAM_ARNS] = [logsStreamArn];\n  }\n\n  private static _getAccountFromArn(containerArn: string): string {\n    const match = /arn:aws:ecs:[^:]+:([^:]+):.*/.exec(containerArn);\n    return match![1];\n  }\n\n  private static _getRegionFromArn(containerArn: string): string {\n    const match = /arn:aws:ecs:([^:]+):.*/.exec(containerArn);\n    return match![1];\n  }\n\n  private static _getUrlAsJson(url: string): Promise<any> {\n    return new Promise<string>((resolve, reject) => {\n      const request = http.get(url, (response: http.IncomingMessage) => {\n        if (response.statusCode && response.statusCode >= 400) {\n          reject(\n            new Error(\n              `Request to '${url}' failed with status ${response.statusCode}`\n            )\n          );\n        }\n        /*\n         * Concatenate the response out of chunks:\n         * https://nodejs.org/api/stream.html#stream_event_data\n         */\n        let responseBody = '';\n        response.on(\n          'data',\n          (chunk: Buffer) => (responseBody += chunk.toString())\n        );\n        // All the data has been read, resolve the Promise\n        response.on('end', () => resolve(responseBody));\n        /*\n         * https://nodejs.org/api/http.html#httprequesturl-options-callback, see the\n         * 'In the case of a premature connection close after the response is received'\n         * case\n         */\n        request.on('error', reject);\n      });\n\n      // Set an aggressive timeout to prevent lock-ups\n      request.setTimeout(HTTP_TIMEOUT_IN_MS, () => {\n        request.destroy();\n      });\n      // Connection error, disconnection, etc.\n      request.on('error', reject);\n      request.end();\n    }).then(responseBodyRaw => JSON.parse(responseBodyRaw));\n  }\n}\n\nexport const awsEcsDetector = new AwsEcsDetector();\n"]}