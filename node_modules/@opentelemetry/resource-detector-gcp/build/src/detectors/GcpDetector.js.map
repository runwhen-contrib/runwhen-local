{"version":3,"file":"GcpDetector.js","sourceRoot":"","sources":["../../../src/detectors/GcpDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as gcpMetadata from 'gcp-metadata';\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  ResourceDetectionConfig,\n  ResourceDetector,\n  DetectedResource,\n  DetectedResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  CLOUDPROVIDERVALUES_GCP,\n  SEMRESATTRS_CLOUD_ACCOUNT_ID,\n  SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CONTAINER_NAME,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_K8S_CLUSTER_NAME,\n  SEMRESATTRS_K8S_NAMESPACE_NAME,\n  SEMRESATTRS_K8S_POD_NAME,\n} from '@opentelemetry/semantic-conventions';\n\n/**\n * The GcpDetector can be used to detect if a process is running in the Google\n * Cloud Platform and return a {@link Resource} populated with metadata about\n * the instance. Returns an empty Resource if detection fails.\n */\nclass GcpDetector implements ResourceDetector {\n  detect(_config?: ResourceDetectionConfig): DetectedResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return { attributes };\n  }\n\n  /**\n   * Asynchronously gather GCP cloud metadata.\n   */\n  private _getAttributes(): DetectedResourceAttributes {\n    const isAvail = gcpMetadata.isAvailable();\n\n    const attributes: DetectedResourceAttributes = {\n      [SEMRESATTRS_CLOUD_PROVIDER]: (async () => {\n        return (await isAvail) ? CLOUDPROVIDERVALUES_GCP : undefined;\n      })(),\n      [SEMRESATTRS_CLOUD_ACCOUNT_ID]: this._getProjectId(isAvail),\n      [SEMRESATTRS_HOST_ID]: this._getInstanceId(isAvail),\n      [SEMRESATTRS_HOST_NAME]: this._getHostname(isAvail),\n      [SEMRESATTRS_CLOUD_AVAILABILITY_ZONE]: this._getZone(isAvail),\n    };\n\n    // Add resource attributes for K8s.\n    if (process.env.KUBERNETES_SERVICE_HOST) {\n      attributes[SEMRESATTRS_K8S_CLUSTER_NAME] = this._getClusterName(isAvail);\n      attributes[SEMRESATTRS_K8S_NAMESPACE_NAME] = (async () => {\n        return (await isAvail) ? process.env.NAMESPACE : undefined;\n      })();\n      attributes[SEMRESATTRS_K8S_POD_NAME] = (async () => {\n        return (await isAvail) ? process.env.HOSTNAME : undefined;\n      })();\n      attributes[SEMRESATTRS_CONTAINER_NAME] = (async () => {\n        return (await isAvail) ? process.env.CONTAINER_NAME : undefined;\n      })();\n    }\n\n    return attributes;\n  }\n\n  /** Gets project id from GCP project metadata. */\n  private async _getProjectId(\n    isAvail: Promise<boolean>\n  ): Promise<string | undefined> {\n    if (!(await isAvail)) {\n      return undefined;\n    }\n    try {\n      return await gcpMetadata.project('project-id');\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets instance id from GCP instance metadata. */\n  private async _getInstanceId(\n    isAvail: Promise<boolean>\n  ): Promise<string | undefined> {\n    if (!(await isAvail)) {\n      return undefined;\n    }\n    try {\n      const id = await gcpMetadata.instance('id');\n      return id.toString();\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets zone from GCP instance metadata. */\n  private async _getZone(\n    isAvail: Promise<boolean>\n  ): Promise<string | undefined> {\n    if (!(await isAvail)) {\n      return undefined;\n    }\n    try {\n      const zoneId = await gcpMetadata.instance('zone');\n      if (zoneId) {\n        return zoneId.split('/').pop();\n      }\n      return '';\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets cluster name from GCP instance metadata. */\n  private async _getClusterName(\n    isAvail: Promise<boolean>\n  ): Promise<string | undefined> {\n    if (!(await isAvail)) {\n      return undefined;\n    }\n    try {\n      return await gcpMetadata.instance('attributes/cluster-name');\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets hostname from GCP instance metadata. */\n  private async _getHostname(\n    isAvail: Promise<boolean>\n  ): Promise<string | undefined> {\n    if (!(await isAvail)) {\n      return undefined;\n    }\n    try {\n      return await gcpMetadata.instance('hostname');\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport const gcpDetector = new GcpDetector();\n"]}