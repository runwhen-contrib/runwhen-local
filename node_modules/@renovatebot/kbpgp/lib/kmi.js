// Generated by IcedCoffeeScript 112.8.1
var EUI, KeyFetcher, KeyManagerInterface, SignatureEngineInterface, iced, make_esc,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

iced = require('iced-runtime-3');

KeyFetcher = require('./keyfetch').KeyFetcher;

make_esc = require('iced-error').make_esc;

EUI = new Error("not implemented");

exports.KeyManagerInterface = KeyManagerInterface = (function(superClass) {
  extend(KeyManagerInterface, superClass);

  function KeyManagerInterface() {}

  KeyManagerInterface.prototype.get_pgp_fingerprint = function() {
    return null;
  };

  KeyManagerInterface.prototype.get_ekid = function() {
    return null;
  };

  KeyManagerInterface.prototype.get_fp2 = function() {
    return null;
  };

  KeyManagerInterface.prototype.get_fp2_formatted = function() {
    return null;
  };

  KeyManagerInterface.prototype.get_type = function() {
    return null;
  };

  KeyManagerInterface.prototype.check_public_eq = function(km2) {
    return this.EUI;
  };

  KeyManagerInterface.prototype.get_userids = function() {
    return [];
  };

  KeyManagerInterface.prototype.get_primary_keypair = function() {
    return null;
  };

  KeyManagerInterface.prototype.get_all_pgp_key_materials = function() {
    return [];
  };

  KeyManagerInterface.prototype.get_userids_mark_primary = function() {
    return [];
  };

  KeyManagerInterface.prototype.make_sig_eng = function() {
    return null;
  };

  KeyManagerInterface.prototype.export_pgp_public = function(opts, cb) {
    return cb(null, null);
  };

  KeyManagerInterface.prototype.export_pgp_private = function(opts, cb) {
    return cb(null, null);
  };

  KeyManagerInterface.prototype.export_public = function(arg, cb) {
    var asp, regen;
    asp = arg.asp, regen = arg.regen;
    return cb(EUI, null);
  };

  KeyManagerInterface.prototype.export_private = function(arg, cb) {
    var asp, p3skb, passphrase;
    asp = arg.asp, passphrase = arg.passphrase, p3skb = arg.p3skb;
    return cb(EUI);
  };

  KeyManagerInterface.prototype.can_verify = function() {
    return false;
  };

  KeyManagerInterface.prototype.can_sign = function() {
    return false;
  };

  KeyManagerInterface.prototype.can_encrypt = function() {
    return false;
  };

  KeyManagerInterface.prototype.can_decrypt = function() {
    return false;
  };

  KeyManagerInterface.prototype.get_all_pgp_key_ids = function() {
    return [];
  };

  KeyManagerInterface.prototype.pgp_full_hash = function(opts, cb) {
    return cb(null, null);
  };

  return KeyManagerInterface;

})(KeyFetcher);

exports.SignatureEngineInterface = SignatureEngineInterface = (function() {
  function SignatureEngineInterface(arg) {
    this.km = arg.km;
  }

  SignatureEngineInterface.prototype.get_km = function() {
    return this.km;
  };

  SignatureEngineInterface.prototype.box = function(msg, cb) {
    return cb(EUI);
  };

  SignatureEngineInterface.prototype.unbox = function(msb, cb) {
    return cb(EUI);
  };

  SignatureEngineInterface.prototype.get_body = function(arg, cb) {
    var armored;
    armored = arg.armored;
    return cb(EUI);
  };

  SignatureEngineInterface.prototype.get_unverified_payload_from_raw_sig_body = function(arg, cb) {
    var body;
    body = arg.body;
    return cb(EUI);
  };

  SignatureEngineInterface.prototype.get_body_and_unverified_payload = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, armored;
    armored = arg.armored;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var body, esc, payload;
      return function*() {
        var __iced_deferrals, __iced_deferrals1;
        esc = make_esc(cb, "get_body_and_unverified_payload");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "SignatureEngineInterface::get_body_and_unverified_payload",
          filename: "/home/runner/work/kbpgp/kbpgp/src/kmi.iced"
        });
        _this.get_body({
          armored: armored
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return body = arguments[0];
            };
          })(),
          lineno: 96
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        __iced_deferrals1 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "SignatureEngineInterface::get_body_and_unverified_payload",
          filename: "/home/runner/work/kbpgp/kbpgp/src/kmi.iced"
        });
        _this.get_unverified_payload_from_raw_sig_body({
          body: body
        }, esc(__iced_deferrals1.defer({
          assign_fn: (function() {
            return function() {
              return payload = arguments[0];
            };
          })(),
          lineno: 97
        })));
        if (__iced_deferrals1.await_exit()) {
          yield;
        }
        return cb(null, body, payload);
      };
    })(this)();
    __iced_it.next();
    return null;
  };

  return SignatureEngineInterface;

})();

//# sourceMappingURL=kmi.js.map
