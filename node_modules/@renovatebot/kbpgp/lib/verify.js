// Generated by IcedCoffeeScript 112.8.1
var GenericKey, iced, import_key_cb, make_esc, ukm;

iced = require('iced-runtime-3');

ukm = require('./ukm');

make_esc = require('iced-error').make_esc;

exports.GenericKey = GenericKey = (function() {
  function GenericKey(arg) {
    this.km = arg.km;
  }

  GenericKey.prototype.kid = function() {
    return this.km.get_ekid().toString('hex');
  };

  GenericKey.prototype.isPGP = function() {
    return !!this.km.get_pgp_fingerprint();
  };

  GenericKey.prototype._verify_cb = function(s, opts, cb) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var body, esc, payload, sig_eng;
      return function*() {
        var __iced_deferrals;
        esc = make_esc(cb);
        sig_eng = _this.km.make_sig_eng();
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "GenericKey::_verify_cb",
          filename: "/home/runner/work/kbpgp/kbpgp/src/verify.iced"
        });
        sig_eng.unbox(s, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              payload = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 11
        })), opts);
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        return cb(null, [payload, body]);
      };
    })(this)();
    __iced_it.next();
    return null;
  };

  GenericKey.prototype.verify = function(s, opts) {
    return new Promise(((function(_this) {
      return function(resolve, reject) {
        return _this._verify_cb(s, opts, function(err, res) {
          if (err != null) {
            return reject(err);
          } else {
            return resolve(res);
          }
        });
      };
    })(this)));
  };

  return GenericKey;

})();

import_key_cb = function(s, opts, cb) {
  var __iced_it, __iced_passed_deferral, esc, km, ret;
  __iced_passed_deferral = iced.findDeferral(arguments);
  __iced_it = (function*() {
    var __iced_deferrals;
    esc = make_esc(cb);
    __iced_deferrals = new iced.Deferrals(__iced_it, {
      parent: __iced_passed_deferral,
      funcname: "import_key_cb",
      filename: "/home/runner/work/kbpgp/kbpgp/src/verify.iced"
    });
    ukm.import_armored_public({
      armored: s,
      opts: opts
    }, esc(__iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return km = arguments[0];
        };
      })(),
      lineno: 23
    })));
    if (__iced_deferrals.await_exit()) {
      yield;
    }
    ret = new GenericKey({
      km: km
    });
    return cb(null, ret);
  })();
  __iced_it.next();
  return null;
};

exports.importKey = function(s, opts) {
  return new Promise((function(resolve, reject) {
    return import_key_cb(s, opts, function(err, ret) {
      if (err != null) {
        return reject(err);
      } else {
        return resolve(ret);
      }
    });
  }));
};

//# sourceMappingURL=verify.js.map
