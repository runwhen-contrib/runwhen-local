// Generated by IcedCoffeeScript 112.8.1
var SRF, bufxor, genseed, iced;

iced = require('iced-runtime-3');

SRF = require('../rand').SRF;

exports.bufxor = bufxor = function(b1, b2) {
  var arr, c, i;
  arr = (function() {
    var j, len1, results;
    results = [];
    for (i = j = 0, len1 = b1.length; j < len1; i = ++j) {
      c = b1[i];
      results.push(c ^ b2[i]);
    }
    return results;
  })();
  return Buffer.from(arr);
};

exports.genseed = genseed = function(arg, cb) {
  var __iced_it, __iced_passed_deferral, err, len, rseed, seed, server_half, split;
  seed = arg.seed, split = arg.split, len = arg.len, server_half = arg.server_half;
  __iced_passed_deferral = iced.findDeferral(arguments);
  __iced_it = (function*() {
    var __iced_deferrals;
    err = rseed = null;
    if (server_half == null) {
      server_half = null;
    }
    if ((seed == null) || (split && (server_half == null))) {
      __iced_deferrals = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "genseed",
        filename: "/home/runner/work/kbpgp/kbpgp/src/keybase/util.iced"
      });
      SRF().random_bytes(len, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return rseed = arguments[0];
          };
        })(),
        lineno: 16
      }));
      if (__iced_deferrals.await_exit()) {
        yield;
      }
    }
    if ((seed != null) && seed.length !== len) {
      err = new Error("Wrong seed length; need " + len + " bytes; got " + seed.length);
    } else if ((seed != null) && (rseed != null)) {
      server_half = rseed;
      seed = bufxor(seed, rseed);
    } else if ((seed != null) && (server_half != null)) {
      seed = bufxor(seed, server_half);
    } else if (seed == null) {
      seed = rseed;
    }
    return cb(err, {
      seed: seed,
      server_half: server_half
    });
  })();
  __iced_it.next();
  return null;
};

exports.prefix_signature_payload = function(prefix, payload) {
  var v;
  v = [];
  if (prefix != null ? prefix.length : void 0) {
    v.push(prefix);
    v.push(Buffer.from([0]));
  }
  if (payload != null) {
    v.push(payload);
  }
  if (v.length) {
    return Buffer.concat(v);
  } else {
    return null;
  }
};

//# sourceMappingURL=util.js.map
