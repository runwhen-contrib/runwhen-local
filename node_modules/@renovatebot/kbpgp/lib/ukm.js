// Generated by IcedCoffeeScript 112.8.1
var iced, is_pgp_sig, kb, pgp, pgp_sig;

iced = require('iced-runtime-3');

pgp = require('./openpgp/keymanager');

pgp_sig = require('./openpgp/sigeng');

kb = require('./keybase/hilev');

exports.import_armored_public = function(arg, cb) {
  var __iced_it, __iced_passed_deferral, armored, asp, err, opts, ret, warnings;
  armored = arg.armored, asp = arg.asp, opts = arg.opts;
  __iced_passed_deferral = iced.findDeferral(arguments);
  __iced_it = (function*() {
    var __iced_deferrals, __iced_deferrals1;
    warnings = null;
    if (armored.match(/^-{5}BEGIN PGP PUBLIC KEY BLOCK-{5}/)) {
      __iced_deferrals = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "exports.import_armored_public",
        filename: "/home/runner/work/kbpgp/kbpgp/src/ukm.iced"
      });
      pgp.KeyManager.import_from_armored_pgp({
        armored: armored,
        asp: asp,
        opts: opts
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            ret = arguments[1];
            return warnings = arguments[2];
          };
        })(),
        lineno: 12
      }));
      if (__iced_deferrals.await_exit()) {
        yield;
      }
    } else {
      __iced_deferrals1 = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "exports.import_armored_public",
        filename: "/home/runner/work/kbpgp/kbpgp/src/ukm.iced"
      });
      kb.KeyManager.import_public({
        hex: armored
      }, __iced_deferrals1.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return ret = arguments[1];
          };
        })(),
        lineno: 14
      }));
      if (__iced_deferrals1.await_exit()) {
        yield;
      }
    }
    return cb(err, ret, warnings);
  })();
  __iced_it.next();
  return null;
};

is_pgp_sig = function(x) {
  return x.match(/^-{5}BEGIN PGP MESSAGE-{5}/);
};

exports.decode_sig = function(arg) {
  var armored;
  armored = arg.armored;
  if (is_pgp_sig(armored)) {
    return pgp_sig.decode_sig({
      armored: armored
    });
  } else {
    return kb.decode_sig({
      armored: armored
    });
  }
};

exports.get_sig_body = function(arg) {
  var armored;
  armored = arg.armored;
  if (is_pgp_sig(armored)) {
    return pgp_sig.get_sig_body({
      armored: armored
    });
  } else {
    return kb.get_sig_body({
      armored: armored
    });
  }
};

//# sourceMappingURL=ukm.js.map
