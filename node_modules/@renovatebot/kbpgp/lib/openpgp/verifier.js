// Generated by IcedCoffeeScript 112.8.1
var Base, C, iced, konst;

iced = require('iced-runtime-3');

konst = require('../const');

C = konst.openpgp;

exports.Base = Base = (function() {
  function Base(arg) {
    this.packets = arg.packets, this.keyfetch = arg.keyfetch;
    this._sig = null;
  }

  Base.prototype._find_signature = function(cb) {
    var err, n;
    err = (n = this.packets.length) !== 1 ? new Error("Expected one signature packet; got " + n) : (this._sig = this.packets[0]).tag !== C.packet_tags.signature ? new Error("Expected a signature packet; but got type=" + this.packets[0].tag) : null;
    return cb(err);
  };

  Base.prototype._fetch_key = function(cb) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var err, i, key_id, keymat, km;
      return function*() {
        var __iced_deferrals;
        key_id = _this._sig.get_key_id();
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "Base::_fetch_key",
          filename: "/home/runner/work/kbpgp/kbpgp/src/openpgp/verifier.iced"
        });
        _this.keyfetch.fetch([key_id], konst.ops.verify, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              km = arguments[1];
              return i = arguments[2];
            };
          })(),
          lineno: 28
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        if (err == null) {
          keymat = km.find_pgp_key_material(key_id);
          _this._sig.key = keymat.key;
          _this._sig.key_manager = km;
          _this._sig.subkey_material = keymat;
        }
        return cb(err);
      };
    })(this)();
    __iced_it.next();
    return null;
  };

  return Base;

})();

//# sourceMappingURL=verifier.js.map
