// Generated by IcedCoffeeScript 112.8.1
var C, Literal, LiteralParser, Packet, asymmetric, iced, uint_to_buffer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

iced = require('iced-runtime-3');

Packet = require('./base').Packet;

C = require('../../const').openpgp;

asymmetric = require('../../asymmetric');

uint_to_buffer = require('../../util').uint_to_buffer;

Literal = (function(superClass) {
  extend(Literal, superClass);

  function Literal(arg) {
    this.format = arg.format, this.filename = arg.filename, this.date = arg.date, this.data = arg.data;
    Literal.__super__.constructor.call(this);
  }

  Literal.parse = function(slice) {
    return (new LiteralParser(slice)).parse();
  };

  Literal.prototype.toString = function(encoding) {
    if (encoding == null) {
      encoding = null;
    }
    return this.data.toString(encoding || this.buffer_format());
  };

  Literal.prototype.toBuffer = function() {
    return this.data;
  };

  Literal.prototype.buffer_format = function() {
    switch (this.format) {
      case C.literal_formats.text:
        return 'ascii';
      case C.literal_formats.utf8:
        return 'utf8';
      default:
        return 'binary';
    }
  };

  Literal.prototype.to_signature_payload = function() {
    return Buffer.concat([this.data]);
  };

  Literal.prototype.write_unframed = function(cb) {
    var bufs, ret;
    this.filename || (this.filename = Buffer.from([]));
    bufs = [Buffer.from([this.format]), uint_to_buffer(8, this.filename.length), this.filename, uint_to_buffer(32, this.date), this.data];
    ret = Buffer.concat(bufs);
    return cb(null, ret);
  };

  Literal.prototype.write = function(cb) {
    var __iced_it, __iced_passed_deferral;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var err, raw, ret;
      return function*() {
        var __iced_deferrals;
        err = ret = null;
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "Literal::write",
          filename: "/home/runner/work/kbpgp/kbpgp/src/openpgp/packet/literal.iced"
        });
        _this.write_unframed(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return raw = arguments[1];
            };
          })(),
          lineno: 41
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        if (err == null) {
          ret = _this.frame_packet(C.packet_tags.literal, raw);
        }
        return cb(err, ret);
      };
    })(this)();
    __iced_it.next();
    return null;
  };

  Literal.prototype.to_literal = function() {
    return this;
  };

  return Literal;

})(Packet);

LiteralParser = (function() {
  function LiteralParser(slice1) {
    this.slice = slice1;
  }

  LiteralParser.prototype.parse = function() {
    var data, date, filename, format, k, known_formats, v;
    known_formats = (function() {
      var ref, results;
      ref = C.literal_formats;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    })();
    format = this.slice.read_uint8();
    if (indexOf.call(known_formats, format) < 0) {
      throw new Error("unknwon format: " + format);
    }
    filename = this.slice.read_string();
    date = this.slice.read_uint32();
    data = this.slice.consume_rest_to_buffer();
    return new Literal({
      format: format,
      filename: filename,
      date: date,
      data: data
    });
  };

  return LiteralParser;

})();

exports.Literal = Literal;

//# sourceMappingURL=literal.js.map
