{"version":3,"sources":["../src/format.js"],"names":["xxx","key","value","build","params","reduce","prev","values","transform","TypeError","Array","isArray","map","challenge","options","entries","Object","keys","scheme","token","obj","join"],"mappings":";;;;;;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD;AAAA,SAAiB,UAACC,KAAD;AAAA,WAC1B,GAAED,GAAI,IAAGC,KAAK,IAAI,CAAC,mBAAQA,KAAR,CAAV,GAA2B,iBAAMA,KAAN,CAA3B,GAA0CA,KAAM,EAD/B;AAAA,GAAjB;AAAA,CAAZ;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CACZC,MADY,EAEM;AAClB,SAAOA,MAAM,CAACC,MAAP,CAAc,UAACC,IAAD,QAAyB;AAAA;AAAA,QAAjBL,GAAiB;AAAA,QAAZM,MAAY;;AAC5C,QAAMC,SAAS,GAAGR,GAAG,CAACC,GAAD,CAArB;;AACA,QAAI,CAAC,mBAAQA,GAAR,CAAL,EAAmB;AACjB,YAAM,IAAIQ,SAAJ,EAAN;AACD;;AACD,QAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,gCAAWD,IAAX,4BAAoBC,MAAM,CAACK,GAAP,CAAWJ,SAAX,CAApB;AACD;;AACD,8BAAWF,IAAX,UAAiBE,SAAS,CAACD,MAAD,CAA1B;AACD,GATM,EASJ,EATI,CAAP;AAUD,CAbD;;AAmBA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACT,MAAD,EAAiBU,OAAjB,EAA6B;AAC7C,MAAIJ,KAAK,CAACC,OAAN,CAAcP,MAAd,CAAJ,EAA2B;AACzB,WAAOD,KAAK,CAACC,MAAD,CAAZ;AACD,GAFD,MAEO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrC,QAAMW,OAA2C,GAAGX,MAApD;AACA,WAAOS,SAAS,CACdG,MAAM,CAACC,IAAP,CAAYb,MAAZ,EAAoBQ,GAApB,CAAwB,UAACX,GAAD;AAAA,aAAS,CAACA,GAAD,EAAMc,OAAO,CAACd,GAAD,CAAb,CAAT;AAAA,KAAxB,CADc,EAEda,OAFc,CAAhB;AAID;;AACD,QAAM,IAAIL,SAAJ,EAAN;AACD,CAXD;;eAae,kBAACS,MAAD,EAAiBC,KAAjB,EAAiCf,MAAjC,EAA4D;AACzE,MAAMgB,GAAG,GAAG,OAAOF,MAAP,KAAkB,QAAlB,GAA6B;AAACA,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBf,IAAAA;AAAhB,GAA7B,GAAuDc,MAAnE;;AAEA,MAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIX,SAAJ,EAAN;AACD,GAFD,MAEO,IAAI,CAAC,oBAASW,GAAG,CAACF,MAAb,CAAL,EAA2B;AAChC,UAAM,IAAIT,SAAJ,CAAc,iBAAd,CAAN;AACD;;AAED,SAAO,CACLW,GAAG,CAACF,MADC,4BAED,OAAOE,GAAG,CAACD,KAAX,KAAqB,WAArB,GAAmC,CAACC,GAAG,CAACD,KAAL,CAAnC,GAAiD,EAFhD,sBAGD,OAAOC,GAAG,CAAChB,MAAX,KAAsB,WAAtB,GAAoCS,SAAS,CAACO,GAAG,CAAChB,MAAL,CAA7C,GAA4D,EAH3D,GAILiB,IAJK,CAIA,GAJA,CAAP;AAKD,C","sourcesContent":["// @flow\nimport {quote, isToken, isScheme} from './util';\n\nconst xxx = (key: string) => (value: string): string =>\n  `${key}=${value && !isToken(value) ? quote(value) : value}`;\n\nconst build = (\n  params: Array<[string, string | Array<string>]>,\n): Array<string> => {\n  return params.reduce((prev, [key, values]) => {\n    const transform = xxx(key);\n    if (!isToken(key)) {\n      throw new TypeError();\n    }\n    if (Array.isArray(values)) {\n      return [...prev, ...values.map(transform)];\n    }\n    return [...prev, transform(values)];\n  }, []);\n};\n\ntype Params =\n  | Array<[string, string | Array<string>]>\n  | {[string]: string | Array<string>};\n\nconst challenge = (params: Params, options) => {\n  if (Array.isArray(params)) {\n    return build(params);\n  } else if (typeof params === 'object') {\n    const entries: {[string]: string | Array<string>} = params;\n    return challenge(\n      Object.keys(params).map((key) => [key, entries[key]]),\n      options,\n    );\n  }\n  throw new TypeError();\n};\n\nexport default (scheme: string, token: ?string, params: Params): string => {\n  const obj = typeof scheme === 'string' ? {scheme, token, params} : scheme;\n\n  if (typeof obj !== 'object') {\n    throw new TypeError();\n  } else if (!isScheme(obj.scheme)) {\n    throw new TypeError('Invalid scheme.');\n  }\n\n  return [\n    obj.scheme,\n    ...(typeof obj.token !== 'undefined' ? [obj.token] : []),\n    ...(typeof obj.params !== 'undefined' ? challenge(obj.params) : []),\n  ].join(' ');\n};\n"],"file":"format.js"}