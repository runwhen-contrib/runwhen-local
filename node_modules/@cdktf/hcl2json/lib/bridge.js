"use strict";
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference lib="dom" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExpressionAst = exports.getReferencesInExpression = exports.convertFiles = exports.parse = void 0;
// Inspired by
// https://github.com/ts-terraform/ts-terraform
// https://github.com/aaronpowell/webpack-golang-wasm-async-loader
const fs = __importStar(require("fs-extra"));
const path_1 = require("path");
const deepmerge_1 = require("./deepmerge");
const zlib_1 = require("zlib");
const references_1 = require("./references");
const util_1 = require("./util");
// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
const jsRoot = {};
function sleep() {
    return new Promise((resolve) => {
        setTimeout(resolve, 0);
    });
}
function goBridge(getBytes) {
    let ready = false;
    async function init() {
        // After: https://github.com/golang/go/commit/680caf15355057ca84857a2a291b6f5c44e73329
        // Go 1.19+ has a different entrypoint
        await Promise.resolve().then(() => __importStar(require(`../wasm/bridge_wasm_exec.js`)));
        const go = new global.Go();
        const bytes = await getBytes;
        const result = await WebAssembly.instantiate(bytes, go.importObject);
        global.__parse_terraform_config_wasm__ = jsRoot;
        void go.run(result.instance);
        ready = true;
    }
    init().catch((error) => {
        throw error;
    });
    const proxy = new Proxy({}, {
        get: (_, key) => {
            return async (...args) => {
                while (!ready) {
                    await sleep();
                }
                if (!(key in jsRoot)) {
                    throw new Error(`There is nothing defined with the name "${key.toString()}"`);
                }
                if (typeof jsRoot[key] !== "function") {
                    return jsRoot[key];
                }
                return new Promise((resolve, reject) => {
                    const cb = (err, ...msg) => 
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    err ? reject(new Error(err)) : resolve(...msg);
                    const run = () => {
                        jsRoot[key].apply(undefined, [...args, cb]);
                    };
                    run();
                });
            };
        },
    });
    return proxy;
}
const loadWasm = async () => {
    return (0, zlib_1.gunzipSync)(await fs.readFile((0, path_1.join)(__dirname, "..", "main.wasm.gz")));
};
const wasm = goBridge(loadWasm());
async function parse(filename, contents) {
    const res = await wasm.parse(filename, contents);
    return JSON.parse(res);
}
exports.parse = parse;
async function convertFiles(workingDirectory) {
    let tfFileContents = "";
    const tfJSONFileContents = [];
    for (const file of fs.readdirSync(workingDirectory)) {
        const filePath = (0, path_1.resolve)(workingDirectory, file);
        if (!fs.lstatSync(filePath).isDirectory()) {
            if (file.match(/\.tf$/)) {
                tfFileContents += fs.readFileSync(filePath, "utf-8");
                tfFileContents += "\n";
            }
            else if (file.match(/\.tf\.json$/)) {
                tfJSONFileContents.push(JSON.parse(fs.readFileSync(filePath, "utf-8")));
            }
        }
    }
    if (tfFileContents === "" && tfJSONFileContents.length === 0) {
        console.error(`No '.tf' or '.tf.json' files found in ${workingDirectory}`);
        return {};
    }
    return (0, deepmerge_1.deepMerge)(await parse("hcl2json.tf", tfFileContents), ...tfJSONFileContents);
}
exports.convertFiles = convertFiles;
/**
 * Parse a Terraform expression and return the AST. This function expects a string input, and will wrap the expression in quotes if it is not already quoted.
 * @param filename The filename to use for the expression. This is used for error reporting.
 * @param expression The expression to parse.
 * @returns An array of References found in the expression.
 */
async function getReferencesInExpression(filename, expression) {
    // We have to do this twice because of the problem with HEREDOCS
    // Our current hcl2json implementation removes HEREDOCS and replaces them
    // with a multi-line string, which is causing all kinds of problems
    let offset = 0;
    let quoteWrappedExpression = expression;
    if (!expression.startsWith('"')) {
        quoteWrappedExpression = `"${expression}"`;
        offset = 1;
    }
    const { wrap: wrappedExpression, wrapOffset: startOffset } = (0, util_1.wrapTerraformExpression)(`${quoteWrappedExpression}`);
    offset += startOffset;
    const ast = await getExpressionAst(filename, wrappedExpression);
    if (!ast) {
        return [];
    }
    const refs = (0, references_1.findAllReferencesInAst)(expression, ast);
    if (wrappedExpression === expression) {
        return refs;
    }
    return refs.map((ref) => {
        return {
            ...ref,
            startPosition: ref.startPosition - offset,
            endPosition: ref.endPosition - offset,
        };
    });
}
exports.getReferencesInExpression = getReferencesInExpression;
/**
 * Parse a Terraform expression and return the AST. The expression does not need to be a Terraform string.
 * @param filename The filename to use for the expression. This is used for error reporting.
 * @param expression The expression to parse.
 * @returns The AST for the expression.
 *
 *   The returned AST has the following structure:
 *   - type: The type of the node. This is a string.
 *   - range: This contains the start and end of the node in the expression.
 *   - children: This contains the children of the node. This is an array of nodes.
 *   - meta: This contains metadata about the node. This is an object, and varies depending on the type of the node.
 */
async function getExpressionAst(filename, expression) {
    const res = await wasm.getExpressionAst(filename, expression);
    const ast = JSON.parse(res);
    if (!ast) {
        return null;
    }
    return ast;
}
exports.getExpressionAst = getExpressionAst;
//# sourceMappingURL=data:application/json;base64,