// Generated by IcedCoffeeScript 112.8.0
(function() {
  var C, Pipeliner, _iand, _ior, _timeout, iced,
    slice = [].slice;



  C = require('./const');

  exports.iced = iced = require('./runtime');

  _timeout = function(cb, t, res, tmp) {
    var __iced_it, __iced_passed_deferral, arr, rv, timeout_obj, which;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function*() {
      var __iced_deferrals;
      rv = new iced.Rendezvous;
      tmp[0] = rv.id(true).defer({
        assign_fn: (function() {
          return function() {
            return arr = slice.call(arguments, 0);
          };
        })(),
        lineno: 20,
        context: __iced_deferrals
      });
      timeout_obj = setTimeout(rv.id(false).defer({
        lineno: 21,
        context: __iced_deferrals
      }), t);
      __iced_deferrals = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "_timeout",
        filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
      });
      rv.wait(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return which = arguments[0];
          };
        })(),
        lineno: 22
      }));
      if (__iced_deferrals.await_exit()) {
        yield;
      }
      if (res) {
        res[0] = which;
      }
      if (which) {
        clearTimeout(timeout_obj);
      }
      return cb.apply(null, arr);
    })();
    __iced_it.next();
    return null;
  };

  exports.timeout = function(cb, t, res) {
    var tmp;
    tmp = [];
    _timeout(cb, t, res, tmp);
    return tmp[0];
  };

  _iand = function(cb, res, tmp) {
    var __iced_it, __iced_passed_deferral, ok;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function*() {
      var __iced_deferrals;
      __iced_deferrals = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "_iand",
        filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
      });
      tmp[0] = __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return ok = arguments[0];
          };
        })(),
        lineno: 40
      });
      if (__iced_deferrals.await_exit()) {
        yield;
      }
      if (!ok) {
        res[0] = false;
      }
      return cb();
    })();
    __iced_it.next();
    return null;
  };

  exports.iand = function(cb, res) {
    var tmp;
    tmp = [];
    _iand(cb, res, tmp);
    return tmp[0];
  };

  _ior = function(cb, res, tmp) {
    var __iced_it, __iced_passed_deferral, ok;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function*() {
      var __iced_deferrals;
      __iced_deferrals = new iced.Deferrals(__iced_it, {
        parent: __iced_passed_deferral,
        funcname: "_ior",
        filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
      });
      tmp[0] = __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return ok = arguments[0];
          };
        })(),
        lineno: 59
      });
      if (__iced_deferrals.await_exit()) {
        yield;
      }
      if (ok) {
        res[0] = true;
      }
      return cb();
    })();
    __iced_it.next();
    return null;
  };

  exports.ior = function(cb, res) {
    var tmp;
    tmp = [];
    _ior(cb, res, tmp);
    return tmp[0];
  };

  exports.Pipeliner = Pipeliner = (function() {
    function Pipeliner(window, delay) {
      this.window = window || 1;
      this.delay = delay || 0;
      this.queue = [];
      this.n_out = 0;
      this.cb = null;
      this[C.deferrals] = this;
      this["defer"] = this._defer;
    }

    Pipeliner.prototype.waitInQueue = function(cb) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        return function*() {
          var __iced_deferrals, __iced_deferrals1;
          while (_this.n_out >= _this.window) {
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner::waitInQueue",
              filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
            });
            _this.cb = __iced_deferrals.defer({
              lineno: 101
            });
            if (__iced_deferrals.await_exit()) {
              yield;
            }
          }
          _this.n_out++;
          if (_this.delay) {
            __iced_deferrals1 = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner::waitInQueue",
              filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
            });
            setTimeout(__iced_deferrals1.defer({
              lineno: 109
            }), _this.delay);
            if (__iced_deferrals1.await_exit()) {
              yield;
            }
          }
          return cb();
        };
      })(this)();
      __iced_it.next();
      return null;
    };

    Pipeliner.prototype.__defer = function(out, deferArgs) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        var tmp, voidCb;
        return function*() {
          var __iced_deferrals;
          __iced_deferrals = new iced.Deferrals(__iced_it, {
            parent: __iced_passed_deferral,
            funcname: "Pipeliner::__defer",
            filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
          });
          voidCb = __iced_deferrals.defer({
            lineno: 123
          });
          out[0] = function() {
            var args, ref;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if ((ref = deferArgs.assign_fn) != null) {
              ref.apply(null, args);
            }
            return voidCb();
          };
          if (__iced_deferrals.await_exit()) {
            yield;
          }
          _this.n_out--;
          if (_this.cb) {
            tmp = _this.cb;
            _this.cb = null;
            return tmp();
          }
        };
      })(this)();
      __iced_it.next();
      return null;
    };

    Pipeliner.prototype._defer = function(deferArgs) {
      var tmp;
      tmp = [];
      this.__defer(tmp, deferArgs);
      return tmp[0];
    };

    Pipeliner.prototype.flush = function(cb) {
      var __iced_it, __iced_passed_deferral;
      __iced_passed_deferral = iced.findDeferral(arguments);
      __iced_it = (function(_this) {
        return function*() {
          var __iced_deferrals;
          while (_this.n_out) {
            __iced_deferrals = new iced.Deferrals(__iced_it, {
              parent: __iced_passed_deferral,
              funcname: "Pipeliner::flush",
              filename: "/Users/max/src/iced/iced-runtime-3/src/library.iced"
            });
            _this.cb = __iced_deferrals.defer({
              lineno: 152
            });
            if (__iced_deferrals.await_exit()) {
              yield;
            }
          }
          return cb();
        };
      })(this)();
      __iced_it.next();
      return null;
    };

    return Pipeliner;

  })();

}).call(this);
