---
search:
  exclude: true
---
# RunWhen Platform Upload
The Workspace Builder component of RunWhen Local generates configuration files that can be used in the RunWhen Platform, which provides: 

- Collaborative & interactive operational maps
- Collaborative & automated troubleshooting sessions
- Troubleshooting Digital Assistants
- Automated workflows

> Workspace Builder generated a total of: **{{ slx_count }} SLXs**



## QuickStart
<div class="demo-card">
    <div class="action-container">
        <p>Don't have a RunWhen Workspace yet?</p>
        <a href="{{ app_url }}/?addWorkspace=true" target="_blank" class="content-page-button action-button">Create a Workspace</a>
    </div>
    <div class="action-container">
            <p>Want to use a self-hosted private runner?</p>
            <a href="https://docs.runwhen.com/public/v/runwhen-local/user-guide/features/runner-agent" target="_blank" class="content-page-button action-button">Register a Runner</a>
    </div>
    <div class="action-container">
        <p>Attach your Workspace Configuration and Upload</p>
        <input type="file" id="fileUploadInfo" style="display:none;" onchange="handleFileSelect()">
        <button id="runUploadOverwriteButton" class="content-page-button action-button">Upload Configuration</button>
    </div>
    <div class="action-container">
        <p>Add Your Secrets (see section below for more details)</p>
        <a href="https://docs.runwhen.com/public/runwhen-platform/feature-overview/secrets" target="_blank" class="content-page-button action-button">Learn about Secrets</a>
    </div>
    <div class="action-container">
        <p>Check out the Workspace Map (it may take a few minutes to populate)</p>
        <a id="dynamicLink" href="#" target="_blank" class="content-page-button action-button">See Workspace Map</a>
    </div>
</div>

### Required Secrets
In order for the RunWhen Platform to run tasks in your cluster(s) and cloud resources, **secrets** are required in your workspace. 

{% if 'kubernetes' in auth_details %}
??? note "Kubeconfig Secret"
    In order for RunWhen Platform to connect to your Kubernetes based clusters, a **secret** must be created in the form of a KUBECONFIG.

    Your Kubernetes auth type has been detected as: `{{ auth_details["kubernetes"]["type"] }}`  

    Kubeconfig contents:  

    - Context Count: `{{ auth_details["kubernetes"]['kubeconfig_details']['contexts']|length }}`
    - Context Name(s):
    {% for context in auth_details["kubernetes"]['kubeconfig_details']['contexts'] %}
        - `{{ context.name }}`
    {% endfor %}

    {% if 'user-provided' in auth_details['kubernetes']['type'] %}

    When creating the RunWhen Platform Workspace **Secret**:

    - The **Secret Key** should be set to: `{{ workspace_info["custom"]["kubeconfig_secret_name"] | default('kubeconfig') }}` 
    - The **Secret Value** should be set to the contents of a kubeconfig that has a **long lived token**: 

    !!! tip "Long Lived vs Short Lived Tokens"
        If the kubeconfig that you provided utilized *long-lived* serivce account tokens, those contents can be copied into the **Secret Value**.
        If, however, the kubeconfig that you provided utilized *short-lived tokens* (such as those generaged from gcloud, az, and aws cli auth plugins), then a long-lived service account and token is required for every cluster context.

    ??? note "Creating a Long Lived Service Account Token"
        To create a long lived sa, choose **ONE** of the following methods: 
        
        ??? note "Option 1 - One-click Service Account & Kubeconfig Generation"
            This step will create a service account with **Cluster Scoped View** access in the provided namespace for **all contexts**: 

            - Namespace: <input type="text" class="theme-input" id="saNamespaceName" value="runwhen-local">
            - Service Account Name:  <input type="text" class="theme-input" id="saServiceAccountName" value="runwhen-local-sa">  

            <button id="generateClusterViewSA" class="content-page-button action-button">Generate Kubeconfig with ClusterView Permissions</button><br> 

            - Copy the contents of the new kubeconfig and paste them into the **Secret Value** with **one** of the following options: 
                - From the built-in terminal: `cat /shared/generated-kubeconfig.yaml`
                - From your Terminal (Running Locally with Docker/Podman): `cat $workdir/shared/generated-kubeconfig.yaml`
                - From kubectl (Running in Kubernetes - example only): `kubectl exec deployment/runwhen-local -n runwhen-local -- cat /shared/generated-kubeconfig.yaml`

        ??? note "Option 2 - Built in Terminal Execution - Service Account & Kubeconfig Generation"

            - Determine the namespace name and service account name that you'd like to use
            - Run the built in gen_clusterview_sa.sh script from the built-in terminal: 

                    /workspace-builder/scripts/gen_clusterview_sa.sh {% set comma = joiner(", ") %}{% for context in auth_details["kubernetes"]['kubeconfig_details']['contexts'] %}{{ comma() }}"{{ context.name }}"{% endfor %} [namespace name] [service account name]

            - Copy the contents of the new kubeconfig and paste them into the **Secret Value**:

                    cat /shared/generated-kubeconfig.yaml

        ??? note "Option 3 - Manually Create Service Accounts and Kubeconfig"
            If you wish to manually create the service accounts and construct the Kubeconfig yourself, the following resources may be useful: 

            - [RunWhen Docs: Generating Service Accounts and Kubeconfigs](https://docs.runwhen.com/public/runwhen-platform/guides/kubernetes-environments/generating-service-accounts-and-kubeconfigs)
            - [Kubernetes Docs: Organizing Cluster Access Using kubeconfig Files](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)


        {% elif 'in-cluster' in auth_details['kubernetes']['type'] %}
         When creating the RunWhen Platform Workspace **Secret**:

        - The **Secret Key** should be set to: `{{ workspace_info["custom"]["kubeconfig_secret_name"] | default('kubeconfig') }}` 
        - The **Secret Value** should be set to the contents of the generated kubeconfig: 

        !!! tip "In-cluster Auth is Limited to 1 Cluster"
            If you've deployed this instance via helm and allowed helm to create the service account using in-cluster auth, the generated kubeconfig will only be able to discover this cluster. 
            If you would like to discover and upload multiple clusters, provide a customized kubeconfig that has access to all necessary cluster contexts and rerun the discovery process. 

        This step will create an updated kubeconfig based on the in-cluster auth, along with the server endpoint: 

        - Server Address: <input type="text" id="serverAddress" class="theme-input" placeholder="https://your.kubernetes.api.endpoint">  

        <button id="generateKubeconfig" class="content-page-button action-button">Generate Kubeconfig</button><br>. 
        
        - Copy the contents of the new kubeconfig and paste them into the **Secret Value** with **one** of the following options: 
            - From the built-in terminal: `cat /shared/generated-kubeconfig.yaml`
            - From kubectl (Running in Kubernetes - example only): `kubectl exec deployment/runwhen-local -n runwhen-local -- cat /shared/generated-kubeconfig.yaml`

        {% else %}
        Could not determine Kubernetes auth type. 
        Your Kubernetes auth type has been detected as: `{{ auth_details["kubernetes"]["type"] }}`
        {% endif %}



    To create the secret:

    - Add the secret from the workspace creation modal, OR: 
    - Navigate to Configuration -> Secrets
    - Select **+ ADD SECRET**
    - Set the **Secret Key**
    - Set the **Secret Value**
    - Select **ADD AND SAVE**
    <img src="../assets/secret.gif" />
    
{% endif %}

!!! info "Documentation"
    For complete documentation on integrating RunWhen Local with the RunWhen Platform, see [this link](https://docs.runwhen.com/public/v/runwhen-local/user-guide/features/upload-to-runwhen-platform)

<script src="https://cdn.jsdelivr.net/npm/js-yaml/dist/js-yaml.min.js"></script>
<script>

document.getElementById('runUploadOverwriteButton').addEventListener('click', function() {
    document.getElementById('fileUploadInfo').click();
});

function handleFileSelect() {
    const file = document.getElementById('fileUploadInfo').files[0];
    if (!file) {
        showCommandOutput('Please select a file first.');
        return;
    }
    uploadFile(file);
}

function uploadFile(file) {
    // Read and parse the YAML file client-side
    const reader = new FileReader();
    reader.onload = function(event) {
        try {
            const yamlContent = jsyaml.load(event.target.result); // Parse the YAML content

            // Construct the URL using the parsed YAML data
            const workspaceUrl = constructWorkspaceUrl(yamlContent);

            // Optionally, you can update an href immediately here if needed
            updateHref(workspaceUrl);

            // Proceed to upload the file as before
            const formData = new FormData();
            formData.append('file', file);

            fetch('/store-uploadinfo', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json()) // Parsing JSON response from server
            .then(data => {
                if (data.success) {
                    return runAdditionalCommand();
                } else {
                    throw new Error(data.message);
                }
            })
            .catch(error => {
                showCommandOutput(error.message);
                console.error('There was a problem with the upload operation:', error.message);
            });
        } catch (e) {
            console.error('Error parsing YAML file:', e);
            showCommandOutput('Failed to parse YAML file.');
        }
    };
    reader.readAsText(file); // Read the file content as text
}

function constructWorkspaceUrl(yamlData) {
    // Extract 'papiURL' and 'workspaceName' from YAML data
    if (yamlData.papiURL && yamlData.workspaceName) {
        const baseAppURL = yamlData.papiURL.replace('papi', 'app');
        return `${baseAppURL}/map/${yamlData.workspaceName}`;
    } else {
        console.error('Necessary YAML data is missing');
        return '#'; // Return a fallback or error URL
    }
}

function updateHref(url) {
    const dynamicLink = document.getElementById('dynamicLink');
    dynamicLink.href = url; // Update the href attribute
}

function runAdditionalCommand() {
    const loadingPopup = showLoadingMessage();
    fetch('/run-upload-to-runwhenplatform-keep-uploaded')
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.text();
    })
    .then(data => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(data);
    })
    .catch(error => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(error.message);
        console.error('There was a problem with the subsequent operation:', error.message);
    });
}

{% if 'user-provided' in auth_details['kubernetes']['type'] %}
document.getElementById('generateClusterViewSA').addEventListener('click', function(event) {
    event.preventDefault();

    // Fetch values from the input fields
    const namespaceName = document.getElementById('saNamespaceName').value || 'default-namespace';
    const serviceAccountName = document.getElementById('saServiceAccountName').value || 'default-service-account';
    const contexts = [
        {% for context in auth_details["kubernetes"]['kubeconfig_details']['contexts'] %}
            "{{ context.name }}",
        {% endfor %}
    ];
    const loadingPopup = showLoadingMessage();
    // Call the /run-generate-clusterview-sa endpoint using the fetch API with a POST request
    fetch('/run-generate-clusterview-sa', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            contexts: contexts,
            namespace: namespaceName,
            serviceAccount: serviceAccountName
        }) // Send the data as JSON payload
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.text();
    })
    .then(data => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(data);
    })
    .catch(error => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(error.message);
        console.error('There was a problem with the kubeconfig generation operation:', error.message);
    });
});
{% endif %}

{% if 'in-cluster' in auth_details['kubernetes']['type'] %}
document.getElementById('generateKubeconfig').addEventListener('click', function(event) {
    event.preventDefault();

    // Fetch values from the input fields
    const serverDetails = document.getElementById('serverAddress').value ;
    console.log('serverDetails value:', serverDetails);

    if (!serverDetails) {
        showCommandOutput('Please specify a Kubernetes API server address.');
        return;
    }
    const loadingPopup = showLoadingMessage();
    // Call the /run-generate-clusterview-sa endpoint using the fetch API with a POST request
    fetch('/run-generate-kubeconfig-from-in-cluster-auth', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            serverDetails: serverDetails
        }) // Send the data as JSON payload
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.text();
    })
    .then(data => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(data);
    })
    .catch(error => {
        document.body.removeChild(loadingPopup);
        showCommandOutput(error.message);
        console.error('There was a problem with the kubeconfig generation:', error.message);
    });
});
{% endif %}

function showCommandOutput(data) {
    const popupContainer = document.createElement("div"); 
    const popup = document.createElement("div");
    popup.classList.add("popup");
    popupContainer.appendChild(popup); // Append the popup to the container
    document.body.appendChild(popupContainer); // Append the container to the document body


    const closeButton = document.createElement("span");
    closeButton.classList.add("close");
    closeButton.innerHTML = "&times;";
    closeButton.style.fontSize = "24px"; 
    closeButton.style.position = "absolute";
    closeButton.style.top = "10px";
    closeButton.style.right = "10px";


    const codeBlock = document.createElement("pre");
    codeBlock.classList.add("code-block");
    codeBlock.innerText = data;

    popup.appendChild(closeButton);
    popup.appendChild(codeBlock);
    popupContainer.appendChild(popup);
    document.body.appendChild(popupContainer);

    // Event delegation for close button click
    popupContainer.addEventListener("click", (event) => {
        const target = event.target;
        if (target.classList.contains("close")) {
            event.stopPropagation();
            document.body.removeChild(popupContainer);
        }
    });
}

function showLoadingMessage() {
    const popupContainer = document.createElement("div");
    const popup = document.createElement("div");
    popup.classList.add("popup");

    const loadingMessage = document.createElement("p");
    loadingMessage.innerText = "Please wait...";

    popup.appendChild(loadingMessage);
    popupContainer.appendChild(popup);
    document.body.appendChild(popupContainer);

    return popupContainer;  // Return the container so it can be removed later
}
</script>
<style>
  .multiline {
    white-space: pre-wrap;
    word-wrap: break-word;
  }

.popup .code-block {
    background-color: #333;
    color: #f8f8f8;
    padding: 10px;
    font-family: Consolas, Monaco, 'Andale Mono', monospace;
    font-size: 14px;
    line-height: 1.4;
    overflow: auto;
}


</style>

