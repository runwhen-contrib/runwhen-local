# Build the RunWhen Local image
name: Build and Tag Image
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "src/VERSION"
      - ".github/workflows/merge_to_main.yaml"

permissions:
  contents: "read"
  id-token: "write"
  security-events: "write"
  actions: "read"

env:
  PROJECT_ID: runwhen-nonprod-shared
  IMAGE: runwhen-local
  DEFAULT_BRANCH: "origin/${{ github.event.repository.default_branch }}"
  CONTAINER_NAME: "runwhen-local"
  SHARED_ARTIFACT_REPOSITORY_PATH: "us-docker.pkg.dev/runwhen-nonprod-shared/public-images"
  RW_LOCAL_MKDOCS_CONFIG: "src/cheat-sheet-docs/mkdocs.yml"
  SANDBOX_DEPLOYMENT_NAME: "runwhen-local"
  SANDBOX_DEPLOYMENT_NAMESPACE: "runwhen-local"
  APP_LABEL: "app=runwhen-local"
  GHCR_ORG: "runwhen-contrib"


jobs:
  scan-repo:
    runs-on: ubuntu-latest
    outputs:
      image_path: ${{ steps.publish-beta.outputs.image_path }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      # - name: Run Trivy vulnerability scanner in repo mode
      #   uses: aquasecurity/trivy-action@0.20.0
      #   with:
      #     scan-type: 'fs'
      #     ignore-unfixed: true
      #     format: 'sarif'
      #     output: 'trivy-results-repo.sarif'
      #     severity: 'CRITICAL'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results-repo.sarif'
  ## Push to shared artifact registry
  build-and-push-to-shared-artifact-repo:
    runs-on: ubuntu-latest
    outputs:
      image_path: ${{ steps.publish-beta.outputs.image_path }}
    steps:
      - uses: actions/checkout@v2
      - id: "auth-runwhen"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0.4.0"
        with:
          workload_identity_provider: ${{ secrets.RUNWHEN_NONPROD_SHARED_WI_PROVIDER }}
          service_account: ${{ secrets.RUNWHEN_NONPROD_SHARED_WI_SA }}
      - name: Set tag and version
        run: |-
          echo "TAG=$(echo $GITHUB_REF_NAME | sed 's/[^a-zA-Z0-9]/-/g')-${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "VERSION=$(cat src/VERSION | jq -r .version)" >> $GITHUB_ENV
      - name: Set build and date details
        run: |-
          sed -i "s/date: today/date: $(date +'%Y-%m-%d %H:%M')/g" ${RW_LOCAL_MKDOCS_CONFIG}
          sed -i "s/version: 0\.1/version: $VERSION/g" ${RW_LOCAL_MKDOCS_CONFIG}
      - name: Login to GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |-
          echo $GITHUB_TOKEN | docker login ghcr.io -u stewartshea --password-stdin
      - name: Configure Docker for multi-arch builds
        run: docker run --privileged --rm tonistiigi/binfmt --install all
      - name: Configure Docker for GCP
        run: gcloud --quiet auth configure-docker us-docker.pkg.dev


      # Build the Docker image
      - name: Build and push multi-arch image
        run: |-
          cd ./src
          docker buildx create --use --name=mybuilder
          docker buildx inspect --bootstrap
          docker buildx build \
            --memory=6g \
            --memory-swap=8g \
            --push \
            --platform linux/amd64,linux/arm64 \
            --tag "${{ env.SHARED_ARTIFACT_REPOSITORY_PATH }}/$IMAGE:$VERSION" \
            --tag "${{ env.SHARED_ARTIFACT_REPOSITORY_PATH }}/$IMAGE:latest" \
            --tag ghcr.io/$GHCR_ORG/$IMAGE:$VERSION \
            --tag ghcr.io/$GHCR_ORG/$IMAGE:latest \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            -f Dockerfile .

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.20.0
      #   with:
      #     image-ref: '${{ env.SHARED_ARTIFACT_REPOSITORY_PATH }}/${{ env.IMAGE }}:${{ env.VERSION }}'
      #     format: 'sarif'
      #     output: 'trivy-results-image.sarif'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results-image.sarif'
    

      - name: Notify Slack of Container Build
        id: slack-publish-nonprod-shared-artifact-repo
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: "#notifications" # Slack channel id or name to post message. https://api.slack.com/methods/chat.postMessage#channels
          slack-message: "Just Pushed to ${{env.SHARED_ARTIFACT_REPOSITORY_PATH }}/${{ env.IMAGE }}:${{ env.VERSION }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Rollout new image in sandbox
        id: rollout-new-sandbox-image
        env:
          KUBECONFIG_SECRET: ${{secrets.SANDBOX_KUBECONFIG}}
        run: |-
          echo "$KUBECONFIG_SECRET" > kubeconfig
          KUBECONFIG=kubeconfig kubectl rollout restart deployment runwhen-local -n ${{ env.SANDBOX_DEPLOYMENT_NAMESPACE }}

      - name: Notify Slack of RunWhen Local Deployment
        id: slack-deploy-nonprod-sandbox
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: "#env-sandbox" # Slack channel id or name to post message. https://api.slack.com/methods/chat.postMessage#channels
          slack-message: "Just deployed latest version of RunWhen Local to sandbox at https://runwhen-local.sandbox.runwhen.com"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}


      - name: Notify Slack of RunWhen Local Deployment tp GHCR
        id: slack-deploy-to-ghcr
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: "#runwhen-local" # Slack channel id or name to post message. https://api.slack.com/methods/chat.postMessage#channels
          slack-message: "Just deployed latest version of RunWhen Local to https://github.com/orgs/runwhen-contrib/packages/container/package/runwhen-local"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-to-shared-artifact-repo
      - scan-repo
    if: always()  # Ensure this runs even if previous jobs fail

    steps:
      - name: Set Workflow Status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=❌ *Failure*" >> $GITHUB_ENV
          else
            echo "status=✅ *Success*" >> $GITHUB_ENV
          fi

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: "#runwhen-local"
          slack-message: "${{ env.status }} - Workflow *${{ github.workflow }}* in repo *${{ github.repository }}* on branch *${{ github.ref_name }}*"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        