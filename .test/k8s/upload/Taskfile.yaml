version: "3"

tasks:
  default:
    desc: "Generate workspaceInfo and rebuild/test"
    cmds:
      - task: generate-rwl-config
      - task: build-rwl
      - task: run-rwl-discovery

  clean:
    desc: "Run cleanup tasks"
    cmds:
      - task: clean-rwl-discovery

  generate-rwl-config:
    desc: "Generate RunWhen Local configuration (workspaceInfo.yaml)"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
    cmds:
      - |
        # Generate workspaceInfo.yaml with fetched cluster details
        cat <<EOF > workspaceInfo.yaml
        workspaceName: "$RW_WORKSPACE"
        workspaceOwnerEmail: authors@runwhen.com
        defaultLocation: location-01
        defaultLOD: detailed
        cloudConfig:
          kubernetes: 
            kubeconfigFile: /shared/kubeconfig.secret
        codeCollections: []
        # codeCollections: 
        #   - repoURL: "https://github.com/runwhen-contrib/rw-cli-codecollection"
        #     branch: "main"
        #     codeBundles: ["k8s-namespace-healthcheck", "k8s-deployment-healthcheck"]
        custom: 
          kubernetes_distribution_binary: kubectl
        EOF
    silent: true

  build-rwl:
    desc: "Build RWL test image"
    cmds:
      - |
        BUILD_DIR=../../../src/
        CONTAINER_NAME="RunWhenLocal"
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        ## Building Container Image
        docker buildx build --builder mybuilder --platform linux/amd64  -t runwhen-local:test -f $BUILD_DIR/Dockerfile $BUILD_DIR --load

        ## Use this if you need to test both arm64/amd64 builds
        # docker buildx build --builder mybuilder --platform linux/amd64,linux/arm64  -t runwhen-local:test -f $BUILD_DIR/Dockerfile $BUILD_DIR

    silent: true


  run-rwl-discovery:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        rm slx_count.txt || true
        CONTAINER_NAME="RunWhenLocal"    
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run -e DEBUG_LOGS=true --name $CONTAINER_NAME -p 8081:8081 -v $(pwd):/shared -d runwhen-local:test || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
        total_slxs=$(find $(find 'output/' -type d -name 'slxs') -mindepth 1 -type d | wc -l)
        echo "Total SLXs: $total_slxs"
        echo "$total_slxs" > slx_count.txt
    silent: true

  ci-run-rwl-discovery-with-upload:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        rm slx_count.txt || true
        CONTAINER_NAME="RunWhenLocal"    
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run -e WB_DEBUG_SUPPRESS_CHEAT_SHEET="true" -e DEBUG_LOGS=true --name $CONTAINER_NAME -p 8081:8081 -v $(pwd):/shared -d runwhen-local:test || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --upload --prune-stale-resources --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
        total_slxs=$(find $(find 'output/' -type d -name 'slxs') -mindepth 1 -type d | wc -l)
        echo "Total SLXs: $total_slxs"
        echo "$total_slxs" > slx_count.txt
    silent: true


  ci-test-1:
      desc: "Run CI Discovery Test 1 - K8s only - basic upload test "
      vars: 
        EXPECTED_SLXS: "13"
      cmds:
        - |
          if [ ! -f ./uploadInfo.yaml ]; then 
            echo "Missing uploadInfo.yaml"
            exit 1
          fi

          # We don't really need this for discovery, but it's useful in other scripts for 
          # api related manipulation
          defaultLocation=$(yq .locationName uploadInfo.yaml)
          workspaceName=$(yq .workspaceName uploadInfo.yaml)
          workspaceOwnerEmail=$(yq .workspaceOwnerEmail uploadInfo.yaml)
          papiURL=$(yq .papiURL uploadInfo.yaml)

          # Generate workspaceInfo.yaml with fetched cluster details
          cat <<EOF > workspaceInfo.yaml
          workspaceName: $workspaceName
          workspaceOwnerEmail: $workspaceOwnerEmail
          defaultLocation: $defaultLocation
          defaultLOD: none
          cloudConfig:
            kubernetes:             
              kubeconfigFile: /shared/kubeconfig.secret
              contexts:
                sandbox-cluster-1: 
                  defaultNamespaceLOD: detailed
              namespaces:
                - ci-verify-basic
          codeCollections: []
          custom: 
            kubernetes_distribution_binary: kubectl
          EOF

        - task: ci-run-rwl-discovery-with-upload
        - task: verify-slx-count
          vars:
            EXPECTED_SLX_COUNT: "{{.EXPECTED_SLXS}}"
        - task: verify-rwl-output
        - task: modify-slx-content
        - task: ci-run-rwl-discovery-with-upload
        - task: verify-modified-content
      silent: true
  modify-slx-content:
    desc: "Modify SLX fields via PATCH instead of local file edits"
    env:
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - |
          # Make sure uploadInfo.yaml is available
          if [ ! -f ./uploadInfo.yaml ]; then 
            echo "Missing uploadInfo.yaml"
            exit 1
          fi

          # Extract relevant info from uploadInfo.yaml
          defaultLocation=$(yq .locationName uploadInfo.yaml)
          workspaceName=$(yq .workspaceName uploadInfo.yaml)
          workspaceOwnerEmail=$(yq .workspaceOwnerEmail uploadInfo.yaml)
          papiURL=$(yq .papiURL uploadInfo.yaml)

          BASE_DIR="output/workspaces/${workspaceName}/slxs"

          # Required files
          REQUIRED_FILES=("slx.yaml" "runbook.yaml" "sli.yaml")

          # Find a valid directory that contains all required files
          # Find a specific namespace SLX (this helps for manually validating changes)
          SELECTED_DIR=$(find "$BASE_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
              if [[ -f "$dir/slx.yaml" && -f "$dir/runbook.yaml" && -f "$dir/sli.yaml" ]]; then
                  slx_alias=$(yq '.spec.alias' "$dir/slx.yaml")
                  if [[ "$slx_alias" == "ci-verify-basic Namespace Health" ]]; then
                    echo "$dir"
                    break
                  fi
              fi
          done)
          
          # Ensure a valid directory was found
          if [[ -z "$SELECTED_DIR" ]]; then
              echo "Error: No subdirectory in $BASE_DIR contains all required YAML files."
              exit 1
          fi

          echo "Selected directory: $SELECTED_DIR"

          SLX_NAME=$(basename "${SELECTED_DIR}")
          echo "Selected SLX: $SLX_NAME"
          sleep 120

          for file in "${REQUIRED_FILES[@]}"; do
            # One PATCH call per file
            echo "Patching SLX with: $file"

            if [[ "$file" == "slx.yaml" ]]; then 
              PATCH_URL="${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}/slx.yaml"
              echo "Modify SLX Owner"
              PATCH_PAYLOAD='{ "patch": { "spec": { "owners": ["shea.stewart@runwhen.com", "zac.pez@runwhen.com"] }}}'

            elif [[ "$file" == "sli.yaml" ]]; then 
              PATCH_URL="${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}/sli.yaml"
              echo "Modify ConfigProvided Value"
              yq -i '.spec.configProvided[] |= select(.name == "CONTAINER_RESTART_THRESHOLD").value = "10"' "${SELECTED_DIR}/sli.yaml"
              updated_json=$(yq -o=json "${SELECTED_DIR}/sli.yaml")
              updated_configProvided=$(echo "$updated_json" | jq '.spec.configProvided')
              PATCH_PAYLOAD=$(
                jq -n --argjson conf "$updated_configProvided" '
                  {
                    patch: {
                      spec: {
                        configProvided: $conf
                      }
                    }
                  }
                '
              )

            elif [[ "$file" == "runbook.yaml" ]]; then
              PATCH_URL="${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}/runbook.yaml"
              echo "Modify Runbook Secret"
              yq -i '.spec.secretsProvided[] |= select(.name == "kubeconfig").workspaceKey = "updated-kubeconfig"' "${SELECTED_DIR}/runbook.yaml"    
              updated_json=$(yq -o=json "${SELECTED_DIR}/runbook.yaml")
              updated_secretsProvided=$(echo "$updated_json" | jq '.spec.secretsProvided')
              PATCH_PAYLOAD=$(
                jq -n --argjson conf "$updated_secretsProvided" '
                  {
                    patch: {
                      spec: {
                        secretsProvided: $conf
                      }
                    }
                  }
                '
              )
            else 
              break
            fi

            echo "Patching with:"
            echo $PATCH_PAYLOAD

            echo "Patching SLX at $PATCH_URL..."
            response=$(curl -s -X PATCH "$PATCH_URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" \
              -d "$PATCH_PAYLOAD" \
              -w "%{http_code}" \
              -o /dev/null)

            if [[ "$response" != "200" && "$response" != "201" ]]; then
                echo "Failed to patch $file. Status: $response"
                exit 1
            fi
            echo "$file patched successfully."
          done
          echo "SLX patch completed."


          # Delete a specific SLX
          SELECTED_DIR=$(find "$BASE_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
              if [[ -f "$dir/slx.yaml" && -f "$dir/runbook.yaml" && -f "$dir/sli.yaml" ]]; then
                  slx_alias=$(yq '.spec.alias' "$dir/slx.yaml")
                  if [[ "$slx_alias" == "sandbox-cluster-1 Cluster Node Health" ]]; then
                    echo "$dir"
                    break
                  fi
              fi
          done)

          # Ensure a valid directory was found
          if [[ -z "$SELECTED_DIR" ]]; then
              echo "Error: No subdirectory in $BASE_DIR contains all required YAML files."
              exit 1
          fi

          echo "Selected directory: $SELECTED_DIR"
          SLX_NAME=$(basename "${SELECTED_DIR}")

          SLX_URL="${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}"
          echo "Deleting SLX_NAME at $DELETE_URL..."
          response=$(curl -s -X DELETE "$SLX_URL" \
            -H "Authorization: Bearer $RW_PAT" \
            -H "Content-Type: application/json" \
            -w "%{http_code}" \
            -o /dev/null)

          if [[ "$response" != "204" && "$response" != "201" ]]; then
              echo "Failed to delete $SLX_NAME. Status: $response"
              exit 1
          fi
          echo "$SLX_NAME deleted successfully."

  verify-modified-content:
    desc: "Verify Modified Content"
    env:
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - |
          # Make sure uploadInfo.yaml is available
          if [ ! -f ./uploadInfo.yaml ]; then 
            echo "Missing uploadInfo.yaml"
            exit 1
          fi

          # Extract relevant info from uploadInfo.yaml
          defaultLocation=$(yq .locationName uploadInfo.yaml)
          workspaceName=$(yq .workspaceName uploadInfo.yaml)
          workspaceOwnerEmail=$(yq .workspaceOwnerEmail uploadInfo.yaml)
          papiURL=$(yq .papiURL uploadInfo.yaml)

          BASE_DIR="output/workspaces/${workspaceName}/slxs"

          # Required files
          REQUIRED_FILES=("slx.yaml" "runbook.yaml" "sli.yaml")

          # Find a valid directory that contains all required files
          SELECTED_DIR=$(find "$BASE_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
              if [[ -f "$dir/slx.yaml" && -f "$dir/runbook.yaml" && -f "$dir/sli.yaml" ]]; then
                  echo "$dir"
                  break
              fi
          done)
          
          # Ensure a valid directory was found
          if [[ -z "$SELECTED_DIR" ]]; then
              echo "Error: No subdirectory in $BASE_DIR contains all required YAML files."
              exit 1
          fi

          sleep 120

          echo "Selected directory: $SELECTED_DIR"

          SLX_NAME=$(basename "${SELECTED_DIR}")
          SLX_CONTENTS=$(curl -s -X GET "${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json")

          validation_failed=false

          for file in "${REQUIRED_FILES[@]}"; do
            echo "Validating $file"
            file_contents=$(echo "$SLX_CONTENTS" | jq ".files[\"$file\"]")
            unescaped_file_contents=$(echo "$file_contents" | sed $'s/\\n/\\\n/g')
            file_yaml=$(echo "$unescaped_file_contents" | yq e .)

            if [[ "$file" == "slx.yaml" ]]; then 
              value=$(echo "$file_yaml" | yq e -r '.spec.owners[]')
              echo "Got: $value"
              if [[ $value =~ zac.pez@runwhen.com ]] && [[ $value =~ shea.stewart@runwhen.com ]]; then
                continue
              else
                validation_failed=true
                break
              fi

            elif [[ "$file" == "sli.yaml" ]]; then
              value=$(echo "$file_yaml" | yq e -r '.spec.configProvided[] | select(.name == "CONTAINER_RESTART_THRESHOLD").value')
              echo "Got: $value"
              if [[ "$value" == "10" ]]; then
                continue
              else
                validation_failed=true
                break
              fi

            elif [[ "$file" == "runbook.yaml" ]]; then
              value=$(echo "$file_yaml" | yq e -r '.spec.secretsProvided[] | select(.name == "kubeconfig").workspaceKey')
              echo "Got: $value"
              if [[ "$value" == "updated-kubeconfig" ]]; then
                continue
              else
                validation_failed=true
                break
              fi
            else 
              break
            fi
          done

          if [[ "$validation_failed" == "true" ]]; then
            echo -e "\033[31m❌ SLX Patch Validation Failed\033[0m"
            exit 1
          else
            echo -e "\033[32m✔️ SLX Patch Validation Passed\033[0m"
          fi

          validation_failed=false
          # Check for specific deleted SLX
          SELECTED_DIR=$(find "$BASE_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
              if [[ -f "$dir/slx.yaml" && -f "$dir/runbook.yaml" && -f "$dir/sli.yaml" ]]; then
                  slx_alias=$(yq '.spec.alias' "$dir/slx.yaml")
                  if [[ "$slx_alias" == "sandbox-cluster-1 Cluster Node Health" ]]; then
                    echo "$dir"
                    break
                  fi
              fi
          done)

          # Ensure a valid directory was found
          if [[ -z "$SELECTED_DIR" ]]; then
              echo "Error: No subdirectory in $BASE_DIR contains all required YAML files."
              exit 1
          fi

          echo "Selected directory: $SELECTED_DIR"
          SLX_NAME=$(basename "${SELECTED_DIR}")
          SLX_URL="${papiURL}/api/v3/workspaces/${workspaceName}/branches/main/slxs/${SLX_NAME}"
          echo "Validating that SLX $SLX_NAME does not exist..."
          response=$(curl -s -X GET "$SLX_URL" \
            -H "Authorization: Bearer $RW_PAT" \
            -H "Content-Type: application/json" \
            -w "%{http_code}" \
            -o /dev/null)

          if [[ "$response" != "404" ]]; then
              echo "SLX still exists. Status: $response"
              validation_failed=true
          fi
          echo "Verification Completed."

          if [[ "$validation_failed" == "true" ]]; then
            echo -e "\033[31m❌ SLX Likely Still Exists\033[0m"
            exit 1
          else
            echo -e "\033[32m✔️ SLX Deletion Verification Passed\033[0m"
            exit 0
          fi
    silent: true

  verify-slx-count: 
    desc: "Validate SLX Count in CI test"
    vars:
      EXPECTED_SLX_COUNT: "{{.EXPECTED_SLX_COUNT | default `0`}}"
    cmds: 
      - |
          total_slxs=$(cat slx_count.txt)
          echo "---Validating SLX Count---"
          echo "Total SLXs: $total_slxs (Expected: {{.EXPECTED_SLX_COUNT}})"
          if [[ "$total_slxs" != "{{.EXPECTED_SLX_COUNT}}" ]]; then
            echo -e "\033[31m❌ Total SLX count failed\033[0m"
            exit 1
          else
            echo -e "\033[32m✔️ SLX Validation Passed\033[0m"
            exit 0
          fi
    silent: true

  verify-rwl-output: 
    desc: "Validate that rendered content is as intended"
    cmds: 
      - | 
        echo "Validate Runbook location configuration"
        RUNBOOK_FILE=$(find . -type f -name "runbook.yaml" | head -n 1)
        if [ -z "$RUNBOOK_FILE" ]; then
          echo "Error: No runbook.yaml file found in subdirectories." >&2
          exit 1
        fi
        LOCATION=$(yq e '.spec.location' "$RUNBOOK_FILE")
        if [ "$LOCATION" = "missing_workspaceInfo_custom_variable" ]; then
          echo "Error: runbook.yaml contains an invalid spec.location value." >&2
          exit 1
        fi
        echo "Validation successful: $RUNBOOK_FILE has a valid spec.location."

        echo "Validate SLI location configuration"
        SLI_FILE=$(find . -type f -name "sli.yaml" | head -n 1)
        if [ -z "$SLI_FILE" ]; then
          echo "Error: No sli.yaml file found in subdirectories." >&2
          exit 1
        fi
        LOCATION=$(yq e '.spec.location' "$SLI_FILE")
        if [ "$LOCATION" = "missing_workspaceInfo_custom_variable" ]; then
          echo "Error: runbook.yaml contains an invalid spec.location value." >&2
          exit 1
        fi
        echo "Validation successful: $SLI_FILE has a valid spec.location."
    silent: true

  clean-rwl-discovery:
    desc: "Check and clean up RunWhen Local discovery output"
    cmds:
      - |
        rm -rf output
        rm workspaceInfo.yaml
    silent: true


  upload-slxs:
    desc: "Upload SLX files to the appropriate URL"
    env:
      RW_WORKSPACE: "{{.RW_WORKSPACE}}"
      RW_API_URL: "{{.RW_API}}"
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - task: check-rwp-config
      - |
        BASE_DIR="output/workspaces/${RW_WORKSPACE}/slxs"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Upload aborted."
          exit 1
        fi

        for dir in "$BASE_DIR"/*; do
          if [ -d "$dir" ]; then
            SLX_NAME=$(basename "$dir")
            PAYLOAD=$(jq -n --arg commitMsg "Creating new SLX $SLX_NAME" '{ commitMsg: $commitMsg, files: {} }')
            for file in slx.yaml runbook.yaml sli.yaml; do
              if [ -f "$dir/$file" ]; then
                CONTENT=$(cat "$dir/$file")
                PAYLOAD=$(echo "$PAYLOAD" | jq --arg fileContent "$CONTENT" --arg fileName "$file" '.files[$fileName] = $fileContent')
              fi
            done

            URL="https://${RW_API_URL}/api/v3/workspaces/${RW_WORKSPACE}/branches/main/slxs/${SLX_NAME}"
            echo "Uploading SLX: $SLX_NAME to $URL"
            response=$(curl -vvv -X POST "$URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" -w "%{http_code}" -o /dev/null -s 2>&1)
            
            if [[ "$response" =~ 200|201 ]]; then
              echo "Successfully uploaded SLX: $SLX_NAME to $URL"
            else
              echo "Failed to upload SLX: $SLX_NAME to $URL. Response:"
              echo "$response"
            fi
          fi
        done
    silent: true
  delete-slxs:
    desc: "Delete SLX objects from the appropriate URL"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
      RW_API_URL: "{{.RW_API}}"
      RW_PAT: "{{.RW_PAT}}"
    cmds:
      - task: check-rwp-config
      - |
        BASE_DIR="output/workspaces/${RW_WORKSPACE}/slxs"
        if [ ! -d "$BASE_DIR" ]; then
          echo "Directory $BASE_DIR does not exist. Deletion aborted."
          exit 1
        fi

        for dir in "$BASE_DIR"/*; do
          if [ -d "$dir" ]; then
            SLX_NAME=$(basename "$dir")
            URL="https://${RW_API_URL}/api/v3/workspaces/${RW_WORKSPACE}/branches/main/slxs/${SLX_NAME}"
            echo "Deleting SLX: $SLX_NAME from $URL"
            response=$(curl -v -X DELETE "$URL" \
              -H "Authorization: Bearer $RW_PAT" \
              -H "Content-Type: application/json" -w "%{http_code}" -o /dev/null -s 2>&1)

            if [[ "$response" =~ 200|204 ]]; then
              echo "Successfully deleted SLX: $SLX_NAME from $URL"
            else
              echo "Failed to delete SLX: $SLX_NAME from $URL. Response:"
              echo "$response"
            fi
          fi
        done
    silent: true

  reset-workspace:
    desc: "Remove SLXs & workspace biulder manifest from Workspace"
    env:
      GITLAB_TOKEN: "{{.GITLAB_TOKEN}}"
      GITLAB_URL: "{{.GITLAB_URL}}"
    cmds:
      - |
          if [ ! -f ./uploadInfo.yaml ]; then 
            echo "Missing uploadInfo.yaml"
            exit 1
          fi

          # We don't really need this for discovery, but it's useful in other scripts for 
          # api related manipulation
          defaultLocation=$(yq .locationName uploadInfo.yaml)
          workspaceName=$(yq .workspaceName uploadInfo.yaml)
          workspaceOwnerEmail=$(yq .workspaceOwnerEmail uploadInfo.yaml)
          papiURL=$(yq .papiURL uploadInfo.yaml)
          
          REPO_URL=$GITLAB_URL/platform-cluster/$workspaceName.git
          echo "Repo URL: $REPO_URL"

          # Extract repo name
          REPO_NAME=$(basename -s .git "$REPO_URL")
          CLONE_DIR=$REPO_NAME
          rm -rf $CLONE_DIR || true 
          TARGET_BRANCH="main" 

          # Clone the repo with authentication
          echo "Cloning repository..."
          git clone --depth 1 "https://oauth2:${GITLAB_TOKEN}@${REPO_URL#https://}" "$CLONE_DIR"
          if [ $? -ne 0 ]; then
              echo "Failed to clone repository."
              exit 1
          fi

          cd "$CLONE_DIR" || exit

          # Checkout the target branch
          git checkout "$TARGET_BRANCH"

          # Apply file modifications
          echo "Removing content and workspace builder files"
          rm -rf slxs 
          rm -rf workflows 
          rm .workspace-builder-manifest.yaml
          yq eval 'del(.metadata.annotations) | .spec.slxGroups = []' -i workspace.yaml


          # Check for changes
          if git diff --quiet && git diff --cached --quiet; then
              echo "No changes to commit."
              exit 0
          fi

          # Commit and force push
          echo "Committing changes..."
          git add .
          git commit -m "Workspace reset"
          echo "Force pushing changes..."
          git push --force

          # Cleanup
          cd ..
          rm -rf "$CLONE_DIR"

          echo "Done."

    silent: true