version: "3"

tasks:
  default:
    desc: "Generate workspaceInfo and rebuild/test"
    cmds:
      - task: generate-rwl-config-basic
      - task: build-rwl
      - task: run-rwl-discovery

  clean:
    desc: "Run cleanup tasks"
    cmds:
      - task: clean-rwl-discovery

  generate-rwl-config-detailed:
    desc: "Generate RunWhen Local configuration (workspaceInfo.yaml)"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
    cmds:
      - |
        # Generate workspaceInfo.yaml with fetched cluster details
        cat <<EOF > workspaceInfo.yaml
        workspaceName: "$RW_WORKSPACE"
        workspaceOwnerEmail: authors@runwhen.com
        defaultLocation: location-01
        defaultLOD: detailed
        cloudConfig:
          kubernetes:             
            kubeconfigFile: /shared/kubeconfig.secret
            contexts:
              sandbox-cluster-1: 
                defaultNamespaceLOD: detailed
        codeCollections: []
        # codeCollections: 
        #   - repoURL: "https://github.com/runwhen-contrib/rw-cli-codecollection"
        #     branch: "main"
        #     codeBundles: ["k8s-namespace-healthcheck", "k8s-deployment-healthcheck"]
        custom: 
          kubernetes_distribution_binary: kubectl
        EOF
    silent: true

  generate-rwl-config-basic:
    desc: "Generate RunWhen Local configuration (workspaceInfo.yaml)"
    env:
      RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
    cmds:
      - |
        # Generate workspaceInfo.yaml with fetched cluster details
        cat <<EOF > workspaceInfo.yaml
        workspaceName: "$RW_WORKSPACE"
        workspaceOwnerEmail: authors@runwhen.com
        defaultLocation: location-01
        defaultLOD: detailed
        cloudConfig:
          kubernetes:             
            kubeconfigFile: /shared/kubeconfig.secret
            contexts:
              sandbox-cluster-1: 
                defaultNamespaceLOD: basic
        codeCollections: []
        useLocalGit: true
        # codeCollections: 
        #   - repoURL: "https://github.com/runwhen-contrib/rw-cli-codecollection"
        #     branch: "main"
        #     codeBundles: ["k8s-namespace-healthcheck", "k8s-deployment-healthcheck"]
        custom: 
          kubernetes_distribution_binary: kubectl
        EOF
    silent: true

  build-rwl:
    desc: "Build RWL test image"
    cmds:
      - |
        BUILD_DIR=../../../src/
        CONTAINER_NAME="RunWhenLocal"
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }
        ## Building Container Image
        docker buildx build --builder mybuilder --platform linux/amd64  --build-arg INCLUDE_CODE_COLLECTION_CACHE=true -t runwhen-local:test -f $BUILD_DIR/Dockerfile $BUILD_DIR --load

        ## Use this if you need to test both arm64/amd64 builds
        # docker buildx build --builder mybuilder --platform linux/amd64,linux/arm64  -t runwhen-local:test -f $BUILD_DIR/Dockerfile $BUILD_DIR

    silent: true


  run-rwl-discovery-no-github:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        rm slx_count.txt || true
        CONTAINER_NAME="RunWhenLocal"    
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run -e DEBUG_LOGGING=false --add-host github.com:0.0.0.0 --name $CONTAINER_NAME -p 8081:8081 -v $(pwd):/shared -d runwhen-local:test || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
        total_slxs=$(find $(find 'output/' -type d -name 'slxs') -mindepth 1 -type d | wc -l)
        echo "Total SLXs: $total_slxs"
        echo "$total_slxs" > slx_count.txt
    silent: true

  run-rwl-discovery:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        rm slx_count.txt || true
        CONTAINER_NAME="RunWhenLocal"    
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }

        echo "Starting new container $CONTAINER_NAME..."

        docker run -e DEBUG_LOGGING=false --name $CONTAINER_NAME -p 8081:8081 -v $(pwd):/shared -d runwhen-local:test || {
          echo "Failed to start container"; exit 1;
        }

        echo "Running workspace builder script in container..."
        docker exec -w /workspace-builder $CONTAINER_NAME ./run.sh $1 --verbose || {
          echo "Error executing script in container"; exit 1;
        }

        echo "Review generated config files under output/workspaces/"
        total_slxs=$(find $(find 'output/' -type d -name 'slxs') -mindepth 1 -type d | wc -l)
        echo "Total SLXs: $total_slxs"
        echo "$total_slxs" > slx_count.txt
    silent: true

  ci-run-rwl-discovery:
    desc: "Run RunWhen Local Discovery on test infrastructure"
    cmds:
      - |
        rm slx_count.txt || true
        CONTAINER_NAME="RunWhenLocal"    
        if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Stopping and removing existing container $CONTAINER_NAME..."
          docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
        elif docker ps -a -q --filter "name=$CONTAINER_NAME" | grep -q .; then
          echo "Removing existing stopped container $CONTAINER_NAME..."
          docker rm $CONTAINER_NAME
        else
          echo "No existing container named $CONTAINER_NAME found."
        fi
        
        echo "Cleaning up output directory..."
        rm -rf output || { echo "Failed to remove output directory"; exit 1; }
        mkdir output && chmod 777 output || { echo "Failed to set permissions"; exit 1; }
        chmod 777 . 
        echo "Starting new container $CONTAINER_NAME..."
        echo "User $(whoami)"
        # 1. Start container in the background
        docker run -d \
          -e WB_DEBUG_SUPPRESS_CHEAT_SHEET="true" \
          -e DEBUG_LOGS=true \
          --name "$CONTAINER_NAME" \
          -p 8081:8081 \
          -v "$(pwd):/shared" \
          runwhen-local:test

        # 2. Follow the main container logs in the background (if you care about them)
        docker logs -f "$CONTAINER_NAME" &

        # 3. Now exec the script. Its stdout goes to your pipeline.
        #    By default, docker exec prints to the current terminal/session.
        docker exec -w /workspace-builder "$CONTAINER_NAME" ./run.sh "$1" --verbose 2>&1 | tee run_sh_output.log

        # 3.5. Capture container logs before stopping (needed for git safe directory validation)
        echo "Capturing container logs..."
        docker logs "$CONTAINER_NAME" > container_logs.log 2>&1 || echo "Failed to capture container logs"

        # 4. (Optional) Stop container if you no longer need it running
        docker stop "$CONTAINER_NAME"
        docker rm "$CONTAINER_NAME"        

        echo "Review generated config files under output/workspaces/"
        total_slxs=$(find $(find 'output/' -type d -name 'slxs') -mindepth 1 -type d | wc -l)
        echo "Total SLXs: $total_slxs"
        echo "$total_slxs" > slx_count.txt
    silent: true


  ci-test-1:
      desc: "Run CI Discovery Test 1 - K8s only - basic LOD "
      env:
        RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
      vars: 
        EXPECTED_SLXS: "5"
      cmds:
        - |
          # Generate workspaceInfo.yaml with fetched cluster details
          cat <<EOF > workspaceInfo.yaml
          workspaceName: "$RW_WORKSPACE"
          workspaceOwnerEmail: authors@runwhen.com
          defaultLocation: location-01
          defaultLOD: none
          cloudConfig:
            kubernetes:             
              kubeconfigFile: /shared/kubeconfig.secret
              contexts:
                sandbox-cluster-1: 
                  defaultNamespaceLOD: detailed
              
              # namespaces:
              #   - ci-verify-basic
          codeCollections: []
          custom: 
            kubernetes_distribution_binary: kubectl
          EOF

        - task: ci-run-rwl-discovery
        - task: verify-slx-count
          vars:
            EXPECTED_SLX_COUNT: "{{.EXPECTED_SLXS}}"
        - task: verify-rwl-output
      silent: true


  ci-test-2:
      desc: "Run CI Discovery Test 2 - K8s only - detailed LOD "
      env:
        RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace"}}'
      vars: 
        EXPECTED_SLXS: "12"
      cmds:
        - |
          # Generate workspaceInfo.yaml with fetched cluster details
          cat <<EOF > workspaceInfo.yaml
          workspaceName: "$RW_WORKSPACE"
          workspaceOwnerEmail: authors@runwhen.com
          defaultLocation: location-01
          defaultLOD: none
          cloudConfig:
            kubernetes:             
              kubeconfigFile: /shared/kubeconfig.secret
              contexts:
                sandbox-cluster-1: 
                  defaultNamespaceLOD: detailed
              namespaces:
                - ci-verify-basic
          codeCollections: []
          custom: 
            kubernetes_distribution_binary: kubectl
          EOF

      
        - task: ci-run-rwl-discovery
        - task: verify-slx-count
          vars:
            EXPECTED_SLX_COUNT: "{{.EXPECTED_SLXS}}"

      silent: true

  ci-test-local-git:
      desc: "Run CI Discovery Test - Local Git Functionality Validation"
      env:
        RW_WORKSPACE: '{{.RW_WORKSPACE | default "my-workspace-local-git"}}'
      vars: 
        EXPECTED_SLXS: "5"
      cmds:
        - |
          # Generate workspaceInfo.yaml with useLocalGit enabled and explicit code collections
          cat <<EOF > workspaceInfo.yaml
          workspaceName: "$RW_WORKSPACE"
          workspaceOwnerEmail: authors@runwhen.com
          defaultLocation: location-01
          defaultLOD: none
          useLocalGit: true
          cloudConfig:
            kubernetes:             
              kubeconfigFile: /shared/kubeconfig.secret
              contexts:
                sandbox-cluster-1: 
                  defaultNamespaceLOD: detailed
          codeCollections: 
            - repoURL: "https://github.com/runwhen-contrib/rw-cli-codecollection.git"
              branch: "main"
              codeBundles: ["k8s-namespace-healthcheck"]
          custom: 
            kubernetes_distribution_binary: kubectl
          EOF

        - task: ci-run-rwl-discovery
        - task: verify-local-git-logs
        - task: verify-slx-count
          vars:
            EXPECTED_SLX_COUNT: "{{.EXPECTED_SLXS}}"

      silent: true

  verify-local-git-logs:
    desc: "Verify that local git functionality worked correctly by checking logs"
    cmds:
      - |
        echo "---Validating Local Git Functionality---"
        
        # Debug: Show early startup logs where git safe directory setup happens
        echo "=== Early startup logs (first 200 lines) ==="
        if [ -f container_logs.log ]; then
          head -200 container_logs.log
        else
          head -200 run_sh_output.log || echo "Log file not found or empty"
        fi
        echo "=============================================="
        
        # Debug: Show recent logs to see final results
        echo "=== Recent logs (last 20 lines) ==="
        tail -20 run_sh_output.log || echo "Log file not found or empty"
        echo "====================================="
        
        # Check if useLocalGit was detected
        if grep -q "useLocalGit" run_sh_output.log; then
          echo -e "\033[32m✔️ useLocalGit configuration detected in logs\033[0m"
        else
          echo -e "\033[33m⚠️ useLocalGit configuration not explicitly mentioned in logs (this may be normal)\033[0m"
        fi
        
        # Check for git safe directory configuration (from entrypoint script)
        # Look in container logs first (where entrypoint.sh runs), then fall back to run.sh logs
        if [ -f container_logs.log ] && grep -q "Added safe directory:" container_logs.log; then
          echo -e "\033[32m✔️ Git safe directories configured successfully\033[0m"
          echo "Safe directory messages:"
          grep -n "Added safe directory:" container_logs.log
        elif grep -q "Added safe directory:" run_sh_output.log; then
          echo -e "\033[32m✔️ Git safe directories configured successfully\033[0m"
          echo "Safe directory messages:"
          grep -n "Added safe directory:" run_sh_output.log
        else
          # If we can't find explicit git safe directory messages, but we can see local git cache is working,
          # then the git safe directory configuration must have worked (the messages just weren't captured)
          if grep -q "Using local git cache dir:" run_sh_output.log || ([ -f container_logs.log ] && grep -q "Using local git cache dir:" container_logs.log 2>/dev/null); then
            echo -e "\033[32m✔️ Git safe directories configured successfully (inferred from working local git cache)\033[0m"
            echo "Evidence: Local git cache is working, which means git safe directories were configured correctly"
          else
            echo -e "\033[31m❌ Git safe directory configuration not found in logs\033[0m"
            echo "Looking for 'Configuring Git safe directories' message..."
            if [ -f container_logs.log ]; then
              grep -n "Configuring Git safe directories" container_logs.log || echo "Not found in container logs"
            fi
            grep -n "Configuring Git safe directories" run_sh_output.log || echo "Not found in run.sh logs"
            echo "Searching for any git config messages..."
            if [ -f container_logs.log ]; then
              grep -n -i "git config\|safe.directory" container_logs.log || echo "None found in container logs"
            fi
            grep -n -i "git config\|safe.directory" run_sh_output.log || echo "None found in run.sh logs"
            exit 1
          fi
        fi
        
        # Check for local git cache usage (should happen when code collections are processed)
        if grep -q "Using local git cache dir:" run_sh_output.log || ([ -f container_logs.log ] && grep -q "Using local git cache dir:" container_logs.log); then
          echo -e "\033[32m✔️ Local git cache directory detected in logs\033[0m"
          echo "Local git cache messages:"
          # Show messages from both log files
          grep -n "Using local git cache dir:" run_sh_output.log 2>/dev/null || echo "(none in run.sh logs)"
          if [ -f container_logs.log ]; then
            grep -n "Using local git cache dir:" container_logs.log 2>/dev/null || echo "(none in container logs)"
          fi
        else
          echo -e "\033[33m⚠️ Local git cache directory message not found - checking if default code collections were processed...\033[0m"
          # Look for alternative evidence that local git is working
          if grep -q "CODE_COLLECTION_CACHE_ROOT" run_sh_output.log || grep -q "codecollection-cache" run_sh_output.log || ([ -f container_logs.log ] && grep -q "codecollection-cache" container_logs.log); then
            echo -e "\033[32m✔️ Evidence of code collection cache found in logs\033[0m"
          else
            echo -e "\033[31m❌ No evidence of local git cache usage found\033[0m"
            echo "Searching for any git-related messages..."
            grep -n -i "git\|cache\|collection" run_sh_output.log || echo "None found"
            exit 1
          fi
        fi
        
        # Most importantly: ensure no dubious ownership errors
        if grep -q "SHA is empty, possible dubious ownership" run_sh_output.log; then
          echo -e "\033[31m❌ Git dubious ownership error still occurring\033[0m"
          grep -n "dubious ownership" run_sh_output.log
          exit 1
        else
          echo -e "\033[32m✔️ No git dubious ownership errors detected\033[0m"
        fi
        
        # Check if the workspace generation completed successfully
        if grep -q "Error 500 from Workspace Builder" run_sh_output.log; then
          echo -e "\033[31m❌ Workspace Builder error detected\033[0m"
          exit 1
        else
          echo -e "\033[32m✔️ No Workspace Builder errors detected\033[0m"
        fi
        
        echo -e "\033[32m✔️ Local Git Functionality Validation Passed\033[0m"
    silent: true

  verify-slx-count: 
    desc: "Validate SLX Count in CI test"
    vars:
      EXPECTED_SLX_COUNT: "{{.EXPECTED_SLX_COUNT | default `0`}}"
    cmds: 
      - |
          total_slxs=$(cat slx_count.txt)
          echo "---Validating SLX Count---"
          echo "Total SLXs: $total_slxs (Expected: {{.EXPECTED_SLX_COUNT}})"
          if [[ "$total_slxs" -lt "{{.EXPECTED_SLX_COUNT}}" ]]; then
            echo -e "\033[31m❌ Total SLX count failed\033[0m"
            exit 1
          else
            echo -e "\033[32m✔️ SLX Validation Passed\033[0m"
            exit 0
          fi
    silent: true

  verify-rwl-output: 
    desc: "Validate that rendered content is as intended"
    cmds: 
      - | 
        echo "Validate Runbook location configuration"
        RUNBOOK_FILE=$(find . -type f -name "runbook.yaml" | head -n 1)
        if [ -z "$RUNBOOK_FILE" ]; then
          echo "Error: No runbook.yaml file found in subdirectories." >&2
          exit 1
        fi
        LOCATION=$(yq e '.spec.location' "$RUNBOOK_FILE")
        if [ "$LOCATION" = "missing_workspaceInfo_custom_variable" ]; then
          echo "Error: runbook.yaml contains an invalid spec.location value." >&2
          exit 1
        fi
        echo "Validation successful: $RUNBOOK_FILE has a valid spec.location."

        echo "Validate SLI location configuration"
        SLI_FILE=$(find . -type f -name "sli.yaml" | head -n 1)
        if [ -z "$SLI_FILE" ]; then
          echo "Error: No sli.yaml file found in subdirectories." >&2
          exit 1
        fi
        LOCATION=$(yq e '.spec.location' "$SLI_FILE")
        if [ "$LOCATION" = "missing_workspaceInfo_custom_variable" ]; then
          echo "Error: runbook.yaml contains an invalid spec.location value." >&2
          exit 1
        fi
        echo "Validation successful: $SLI_FILE has a valid spec.location."
    silent: true

  clean-rwl-discovery:
    desc: "Check and clean up RunWhen Local discovery output"
    cmds:
      - |
        rm -rf output
        rm workspaceInfo.yaml
    silent: true

