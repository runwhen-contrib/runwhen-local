version: "3"

vars:
  AWS_REGION: '{{.AWS_REGION | default "us-west-2"}}'
  REPOSITORY_PREFIX: '{{.REPOSITORY_PREFIX | default "test-rwl-"}}'
  REGISTRY_SYNC_SCRIPT: "../../../deploy/scripts/registry-sync/sync_with_aws_ecr.sh"
  TEST_VALUES_FILE: "test_values.yaml"
  OUTPUT_DIR: "output"

tasks:
  default:
    desc: "Run complete ECR registry sync test suite"
    cmds:
      - task: setup
      - task: build-infra
      - task: test-registry-sync
      - task: validate-results

  setup:
    desc: "Setup test environment"
    cmds:
      - echo "🔧 Setting up ECR registry sync test environment"
      - mkdir -p {{.OUTPUT_DIR}}
      - mkdir -p expected_results
      - task: check-prerequisites

  check-prerequisites:
    desc: Check if all required tools are available
    cmds:
      - echo "🔍 Checking prerequisites..."
      - |
        required_tools=("jq" "yq" "aws" "docker" "curl" "terraform")
        for tool in "${required_tools[@]}"; do
          if ! command -v "$tool" >/dev/null 2>&1; then
            echo "❌ Required tool '$tool' not found"
            exit 1
          fi
          echo "✅ $tool found"
        done
      - |
        if ! docker buildx version >/dev/null 2>&1; then
          echo "❌ Docker buildx not available. Please install Docker buildx plugin."
          exit 1
        fi
        echo "✅ docker buildx found"
      - echo "✅ All prerequisites met"

  build-infra:
    desc: "Build test infrastructure using Terraform"
    cmds:
      - echo "🏗️ Building ECR test infrastructure"
      - cd terraform && task apply
      - task: generate-test-config

  generate-test-config:
    desc: "Generate test configuration from Terraform outputs"
    cmds:
      - |
        echo "📋 Generating test configuration"
        cd terraform
        terraform output -json > ../{{.OUTPUT_DIR}}/terraform_outputs.json
        
        # Extract values for test configuration
        REGISTRY_URL=$(terraform output -raw registry_url)
        AWS_REGION=$(terraform output -raw region)
        
        echo "Registry URL: $REGISTRY_URL"
        echo "AWS Region: $AWS_REGION"
        
        # Create test-specific registry sync script
        cp {{.REGISTRY_SYNC_SCRIPT}} ../{{.OUTPUT_DIR}}/test_sync_script.sh
        
        # Update the script with test configuration
        sed -i "s|private_registry=\".*\"|private_registry=\"$REGISTRY_URL\"|" ../{{.OUTPUT_DIR}}/test_sync_script.sh
        sed -i "s|aws_region=\".*\"|aws_region=\"$AWS_REGION\"|" ../{{.OUTPUT_DIR}}/test_sync_script.sh
        sed -i "s|values_file=\".*\"|values_file=\"../{{.TEST_VALUES_FILE}}\"|" ../{{.OUTPUT_DIR}}/test_sync_script.sh
        sed -i "s|new_values_file=\".*\"|new_values_file=\"../{{.OUTPUT_DIR}}/updated_values.yaml\"|" ../{{.OUTPUT_DIR}}/test_sync_script.sh
        
        chmod +x ../{{.OUTPUT_DIR}}/test_sync_script.sh
        
        echo "✅ Test configuration generated"

  create-test-values:
    desc: "Create test Helm values file"
    cmds:
      - |
        echo "📄 Creating test Helm values file"
        cat > {{.TEST_VALUES_FILE}} << 'EOF'
        # Test Helm values for ECR registry sync testing
        runwhenLocal:
          image:
            registry: ""
            repository: ""
            tag: ""
        
        runner:
          image:
            registry: ""
            repository: ""
            tag: ""
          pushgateway:
            image:
              registry: ""
              repository: ""
              tag: ""
          runEnvironment:
            image:
              registry: ""
              repository: ""
              tag: ""
        
        opentelemetry-collector:
          image:
            registry: ""
            repository: ""
            tag: ""
        EOF
        echo "✅ Test values file created"

  test-registry-sync:
    desc: "Run registry sync tests"
    deps: [create-test-values]
    cmds:
      - echo "🧪 Running ECR registry sync tests"
      - task: test-basic-sync
      - task: test-multi-registry
      - task: test-tag-management
      - task: test-error-handling

  test-basic-sync:
    desc: "Test basic registry sync functionality"
    cmds:
      - |
        echo "🔄 Testing basic registry sync"
        cd {{.OUTPUT_DIR}}
        
        # Run the sync script with limited images for testing
        echo "Running registry sync script..."
        if ./test_sync_script.sh > sync_logs.txt 2>&1; then
          echo "✅ Basic sync test passed"
          echo "basic_sync: PASS" >> test_results.txt
        else
          echo "❌ Basic sync test failed"
          echo "basic_sync: FAIL" >> test_results.txt
          cat sync_logs.txt
        fi

  test-multi-registry:
    desc: "Test syncing from multiple source registries"
    cmds:
      - |
        echo "🔄 Testing multi-registry source support"
        # This test validates that the script can handle different source registries
        # We'll check the logs for evidence of processing different registry types
        cd {{.OUTPUT_DIR}}
        
        if grep -q "ghcr.io" sync_logs.txt && grep -q "docker.io" sync_logs.txt; then
          echo "✅ Multi-registry test passed"
          echo "multi_registry: PASS" >> test_results.txt
        else
          echo "❌ Multi-registry test failed"
          echo "multi_registry: FAIL" >> test_results.txt
        fi

  test-tag-management:
    desc: "Test tag management functionality"
    cmds:
      - |
        echo "🔄 Testing tag management"
        cd {{.OUTPUT_DIR}}
        
        # Check if updated values file was created with proper tags
        if [ -f "updated_values.yaml" ] && grep -q "tag:" updated_values.yaml; then
          echo "✅ Tag management test passed"
          echo "tag_management: PASS" >> test_results.txt
        else
          echo "❌ Tag management test failed"
          echo "tag_management: FAIL" >> test_results.txt
        fi

  test-error-handling:
    desc: "Test error handling scenarios"
    cmds:
      - |
        echo "🔄 Testing error handling"
        # Test with invalid AWS credentials (simulation)
        # This is a basic test to ensure the script handles errors gracefully
        cd {{.OUTPUT_DIR}}
        
        # Check if script properly validates AWS credentials
        if grep -q "AWS credentials" sync_logs.txt || grep -q "aws sts get-caller-identity" test_sync_script.sh; then
          echo "✅ Error handling test passed"
          echo "error_handling: PASS" >> test_results.txt
        else
          echo "❌ Error handling test failed"
          echo "error_handling: FAIL" >> test_results.txt
        fi

  validate-results:
    desc: "Validate test results"
    cmds:
      - |
        echo "📊 Validating test results"
        cd {{.OUTPUT_DIR}}
        
        # Count passed tests
        PASSED=$(grep -c "PASS" test_results.txt || echo "0")
        FAILED=$(grep -c "FAIL" test_results.txt || echo "0")
        TOTAL=$((PASSED + FAILED))
        
        echo "Test Results Summary:"
        echo "  Total tests: $TOTAL"
        echo "  Passed: $PASSED"
        echo "  Failed: $FAILED"
        
        # Create JSON report
        cat > test_report.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "total_tests": $TOTAL,
          "passed": $PASSED,
          "failed": $FAILED,
          "success_rate": $(echo "scale=2; $PASSED * 100 / $TOTAL" | bc -l 2>/dev/null || echo "0"),
          "details": $(cat test_results.txt | jq -R -s 'split("\n") | map(select(. != "")) | map(split(": ")) | map({test: .[0], result: .[1]}) | {tests: .}')
        }
        EOF
        
        if [ $FAILED -eq 0 ]; then
          echo "🎉 All tests passed!"
          exit 0
        else
          echo "❌ Some tests failed. Check the logs for details."
          exit 1
        fi

  list-repositories:
    desc: "List created ECR repositories"
    cmds:
      - |
        echo "📋 Listing ECR repositories"
        cd terraform
        if [ -f terraform.tfstate ]; then
          terraform output repository_names
        else
          echo "No Terraform state found. Run 'task build-infra' first."
        fi

  check-images:
    desc: "Check images in ECR repositories"
    cmds:
      - |
        echo "🖼️ Checking images in ECR repositories"
        cd terraform
        if [ -f terraform.tfstate ]; then
          REGISTRY_URL=$(terraform output -raw registry_url)
          REPO_NAMES=$(terraform output -json repository_names | jq -r '.[]')
          
          for repo in $REPO_NAMES; do
            echo "Repository: $repo"
            aws ecr list-images --repository-name "$repo" --region {{.AWS_REGION}} --output table || echo "  No images found"
            echo ""
          done
        else
          echo "No Terraform state found. Run 'task build-infra' first."
        fi

  clean-images:
    desc: "Clean test images from ECR repositories"
    cmds:
      - |
        echo "🧹 Cleaning test images from ECR repositories"
        cd terraform
        if [ -f terraform.tfstate ]; then
          REPO_NAMES=$(terraform output -json repository_names | jq -r '.[]')
          
          for repo in $REPO_NAMES; do
            echo "Cleaning repository: $repo"
            # Delete all images in the repository
            aws ecr batch-delete-image \
              --repository-name "$repo" \
              --region {{.AWS_REGION}} \
              --image-ids "$(aws ecr list-images --repository-name "$repo" --region {{.AWS_REGION}} --query 'imageIds[*]' --output json)" \
              2>/dev/null || echo "  No images to delete"
          done
          echo "✅ Images cleaned"
        else
          echo "No Terraform state found."
        fi

  destroy-infra:
    desc: "Destroy test infrastructure"
    cmds:
      - echo "🗑️ Destroying ECR test infrastructure"
      - task: clean-images
      - cd terraform && task destroy
      - echo "✅ Infrastructure destroyed"

  clean:
    desc: "Clean up test environment"
    cmds:
      - echo "🧹 Cleaning up test environment"
      - rm -rf {{.OUTPUT_DIR}}
      - rm -f {{.TEST_VALUES_FILE}}
      - rm -f expected_results/*
      - cd terraform && task clean
      - echo "✅ Test environment cleaned"

  logs:
    desc: "Show test logs"
    cmds:
      - |
        echo "📄 Test logs:"
        if [ -f {{.OUTPUT_DIR}}/sync_logs.txt ]; then
          cat {{.OUTPUT_DIR}}/sync_logs.txt
        else
          echo "No logs found. Run tests first."
        fi

  report:
    desc: "Show test report"
    cmds:
      - |
        echo "📊 Test report:"
        if [ -f {{.OUTPUT_DIR}}/test_report.json ]; then
          cat {{.OUTPUT_DIR}}/test_report.json | jq .
        else
          echo "No report found. Run tests first."
        fi 