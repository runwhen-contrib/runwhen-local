version: '3'

env:
  TERM: screen-256color

tasks:
  default:
    cmds:
      - task: test

  test:
    desc: Run tests.
    cmds:
      - task: test-terraform

  clean:
    desc: Clean the environment.
    cmds:
      - task: clean-go
      - task: clean-terraform

  clean-terraform:
    desc: Clean the terraform environment (remove terraform directories and files)
    cmds:
      - find . -type d -name .terraform -exec rm -rf {} +
      - find . -type f -name .terraform.lock.hcl -delete

  env-setup:
    env: 
      AZ_TF_STORAGE_CONTAINER: "{{.AZ_TF_STORAGE_CONTAINER}}"
    desc: "Check if AZ_TF_STORAGE_CONTAINER exists, otherwise use local backend"
    cmds:
      - |
          if [ -z "${AZ_TF_STORAGE_CONTAINER}" ]; then
            echo "AZ_TF_STORAGE_CONTAINER is not set. Using local backend..."
            cat > override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          else
            echo "AZ_TF_STORAGE_CONTAINER is set. Using remote backend."
            rm -f override.tf  # Ensure local override is removed if remote is available
          fi

          # Set up var prefix
          if [[ -n "$GITHUB_REPOSITORY" && -n "$GITHUB_REF_NAME" ]]; then
              CI_MODE=true
          else
              CI_MODE=false
          fi

          # Generate resource prefix based on environment
          if [[ "$CI_MODE" == "true" ]]; then
              # Running in CI/CD
              REPO_NAME=$(echo "$GITHUB_REPOSITORY" | sed 's/\//-/g')
              BRANCH_NAME=$(echo "$GITHUB_REF_NAME" | sed 's/\//-/g')
              RESOURCE_SUFFIX="ci-${REPO_NAME}-${BRANCH_NAME}"

              # Create override.tfvars for CI/CD
              echo "resource_suffix = \"$RESOURCE_SUFFIX\"" > override.tfvars
              echo "CI/CD detected - Using override.tfvars with prefix: $RESOURCE_SUFFIX"
          else
              # Running locally, fallback to username or default
              if [[ -n "$GITHUB_USER" ]]; then
                RESOURCE_SUFFIX="local-${GITHUB_USER}"
              else
                RESOURCE_SUFFIX="local-$(whoami)"
              fi
              # Update override.tf for local use
              if grep -q "resource_suffix" terraform.tfvars; then
                  # Replace existing prefix
                  sed -i "s/^resource_suffix.*/resource_suffix = \"$RESOURCE_SUFFIX\"/" terraform.tfvars
              else
                  # Append if not present
                  echo "resource_suffix = \"$RESOURCE_SUFFIX\"" >> terraform.tfvars
              fi
              echo "Local environment detected - Updated terraform.tfvars with prefix: $RESOURCE_SUFFIX"
          fi

    silent: true

  format-and-init-terraform:
    desc: Run Terraform fmt and init
    cmds: 
    - |
      terraform fmt
      terraform init
  test-terraform:
    desc: Run tests for all terraform directories.
    silent: true
    env:
      DIRECTORIES:
        sh: find . -path '*/.terraform/*' -prune -o -name '*.tf' -type f -exec dirname {} \; | sort -u
    cmds:
      - |
        BOLD=$(tput bold)
        NORM=$(tput sgr0)

        CWD=$PWD

        for d in $DIRECTORIES; do 
          cd $d
          echo "${BOLD}$PWD:${NORM}"
          if ! terraform fmt -check=true -list=false -recursive=false; then
            echo "  ✗ terraform fmt" && exit 1
          else
            echo "  √ terraform fmt"
          fi

          if ! terraform init -backend=false -input=false -get=true -no-color > /dev/null; then
            echo "  ✗ terraform init" && exit 1
          else
            echo "  √ terraform init"
          fi

          if ! terraform validate > /dev/null; then
            echo "  ✗ terraform validate" && exit 1
          else
            echo "  √ terraform validate"
          fi

          cd $CWD
        done